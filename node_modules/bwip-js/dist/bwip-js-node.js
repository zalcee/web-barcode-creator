// This file is part of the bwip-js project available at:
//
//    http://metafloor.github.io/bwip-js
//
// Copyright (c) 2011-2025 Mark Warren
//
// This file contains code automatically generated from:
// Barcode Writer in Pure PostScript - Version 2025-04-19
// Copyright (c) 2004-2024 Terry Burton
//
// The MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
"use strict";


// exports.js
const BWIPJS_VERSION = '4.7.0 (2025-07-01)';

var url = require('url');
var PNG_ZLIB = require('zlib');
require('stream');  // fix for https://github.com/nodejs/node/issues/37021

// bwipjs.request(req, res [, overrides])
//
// Returns a PNG image from the query args of a node.js http request object.
//
// This function is asynchronous.
function Request(req, res, extra) {
    var opts = url.parse(req.url, true).query;

    // Convert empty !parameters to false.
    // Convert empty parameters to true.
    for (var id in opts) {
        if (opts[id] === '') {
            if (id[0] == '!') {
                opts[id.substr(1)] = false;
            } else {
                opts[id] = true;
            }
        }
    }

    // Add in server options/overrides
    if (extra) {
        for (var id in extra) {
            opts[id] = extra[id];
        }
    }

    ToBuffer(opts, function(err, png) {
        if (err) {
            res.writeHead(400, { 'Content-Type':'text/plain' });
            res.end('' + (err.stack || err), 'utf-8');
        } else {
            res.writeHead(200, { 'Content-Type':'image/png' });
            res.end(png, 'binary');
        }
    });
}

// bwipjs.toBuffer(options[, callback])
//
// Uses the built-in graphics drawing and zlib PNG encoding to return a
// barcode image in a node.js Buffer.
//
// `options` are a bwip-js/BWIPP options object.
// `callback` is an optional callback handler with prototype:
//
//      function callback(err, png)
//
//      `err` is an Error object or string.  If `err` is set, `png` is null.
//      `png` is a node Buffer containing the PNG image.
//
// If `callback` is not provided, a Promise is returned.
function ToBuffer(opts, callback) {
    return _ToAny(bwipp_lookup(opts.bcid), opts, callback);
}

// Entry point for the symbol-specific exports.
//
// Polymorphic internal interface
// _ToAny(encoder, opts) : Promise<Buffer>
// _ToAny(endoder, opts, drawing) : any !throws!
// _ToAny(encoder, opts, callback) : void
//
// If `drawing` is not provided or `callback` is, the built-in DrawingZlibPng will be used.
function _ToAny(encoder, opts, drawing) {
    var callback;
    if (typeof drawing == 'function') {
        callback = drawing;
        drawing = null
    }
    if (drawing) {
        return _Render(encoder, opts, drawing);
    } else if (callback) {
        try {
            _Render(encoder, opts, DrawingZlibPng(callback));
        } catch (e) {
            callback(e);
        }
    } else {
        return new Promise(function (resolve, reject) {
                _Render(encoder, opts, DrawingZlibPng(function (err, buf) {
                                err ? reject(err) : resolve(buf);
                            }));
            });
    }
}

// bwipjs.toSVG(options)
//
// Uses the built-in svg drawing interface.
//
// `options` are a bwip-js/BWIPP options object.
//
// This function is synchronous and throws on error.
//
// Returns a string containing a fully qualified SVG definition,
// including the natural width and height of the image, in pixels:
//
//  <svg viewBox="0 0 242 200" xmlns="http://www.w3.org/2000/svg">
//   ...
//  </svg>
//
// Available on all platforms.
function ToSVG(opts) {
    return _Render(bwipp_lookup(opts.bcid), opts, DrawingSVG());
}

function FixupOptions(opts) {
    var scale   = opts.scale || 2;
    var scaleX  = +opts.scaleX || scale;
    var scaleY  = +opts.scaleY || scaleX;

    // Fix up padding.
    opts.paddingleft = padding(opts.paddingleft, opts.paddingwidth, opts.padding, scaleX);
    opts.paddingright = padding(opts.paddingright, opts.paddingwidth, opts.padding, scaleX);
    opts.paddingtop = padding(opts.paddingtop, opts.paddingheight, opts.padding, scaleY);
    opts.paddingbottom = padding(opts.paddingbottom, opts.paddingheight, opts.padding, scaleY);

    // We override BWIPP's background color functionality.  If in CMYK, convert to RRGGBB so
    // the drawing interface is consistent.  Likewise, if in CSS-style #rgb or #rrggbb.
    if (opts.backgroundcolor) {
        var bgc = ''+opts.backgroundcolor;
        if (/^[0-9a-fA-F]{8}$/.test(bgc)) {
            var c = parseInt(bgc.substr(0,2), 16) / 255;
            var m = parseInt(bgc.substr(2,2), 16) / 255;
            var y = parseInt(bgc.substr(4,2), 16) / 255;
            var k = parseInt(bgc.substr(6,2), 16) / 255;
            var r = Math.floor((1-c) * (1-k) * 255).toString(16);
            var g = Math.floor((1-m) * (1-k) * 255).toString(16);
            var b = Math.floor((1-y) * (1-k) * 255).toString(16);
            opts.backgroundcolor = (r.length == 1 ? '0' : '') + r +
                                   (g.length == 1 ? '0' : '') + g +
                                   (b.length == 1 ? '0' : '') + b;
        } else {
            if (bgc[0] == '#') {
                bgc = bgc.substr(1);
            }
            if (/^[0-9a-fA-F]{6}$/.test(bgc)) {
                opts.backgroundcolor = bgc;
            } else if (/^[0-9a-fA-F]{3}$/.test(bgc)) {
                opts.backgroundcolor = bgc[0] + bgc[0] + bgc[1] + bgc[1] + bgc[2] + bgc[2];
            } else {
                throw new Error('bwip-js: invalid backgroundcolor: ' + opts.backgroundcolor);
            }
        }
    }

    return opts;

    // a is the most specific padding value, e.g. paddingleft
    // b is the next most specific value, e.g. paddingwidth
    // c is the general padding value.
    // s is the scale, either scalex or scaley
    function padding(a, b, c, s) {
        if (a != null) {
            a = a >>> 0;
            return a*s >>> 0;
        }
        if (b != null) {
            b = b >>> 0;
            return b*s >>> 0;
        }
        c = c >>> 0;
        return (c*s >>> 0) || 0;
    }
}

var BWIPJS_OPTIONS = {
    bcid:1,
    text:1,
    scale:1,
    scaleX:1,
    scaleY:1,
    rotate:1,
    padding:1,
    paddingwidth:1,
    paddingheight:1,
    paddingtop:1,
    paddingleft:1,
    paddingright:1,
    paddingbottom:1,
    backgroundcolor:1,
};

// bwipjs.render(options, drawing)
//
// Renders a barcode using the provided drawing object.
//
// This function is synchronous and throws on error.
//
// Browser and nodejs usage.
function Render(options, drawing) {
    return _Render(bwipp_lookup(options.bcid), options, drawing);
}

// Called by the public exports
function _Render(encoder, options, drawing) {
    var text = options.text;
    if (!text) {
        throw new ReferenceError('bwip-js: bar code text not specified.');
    }

    // setopts() is optional on the drawing object.
    FixupOptions(options);
    drawing.setopts && drawing.setopts(options);

    // Set the bwip-js defaults
    var scale   = options.scale || 2;
    var scaleX  = +options.scaleX || scale;
    var scaleY  = +options.scaleY || scaleX;
    var rotate  = options.rotate || 'N';

    // Create a barcode writer object.  This is the interface between
    // the low-level BWIPP code, the bwip-js graphics context, and the
    // drawing interface.
    var bw = new BWIPJS(drawing);

    // Set the BWIPP options
    var bwippopts = {};
    for (var id in options) {
        if (!BWIPJS_OPTIONS[id]) {
            bwippopts[id] = options[id];
        }
    }

    // Fix a disconnect in the BWIPP rendering logic
    if (bwippopts.alttext) {
        bwippopts.includetext = true;
    }
    // We use mm rather than inches for height - except pharmacode2 height
    // which is already in mm.
    if (+bwippopts.height && encoder != bwipp_pharmacode2) {
        bwippopts.height = bwippopts.height / 25.4 || 0.5;
    }
    // Likewise, width
    if (+bwippopts.width) {
        bwippopts.width = bwippopts.width / 25.4 || 0;
    }

    // Scale the image
    bw.scale(scaleX, scaleY);

    // Call into the BWIPP cross-compiled code and render the image.
    bwipp_encode(bw, encoder, text, bwippopts);

    // Returns whatever drawing.end() returns, or `false` if nothing rendered.
    return bw.render();
}

// bwipjs.raw(options)
// bwipjs.raw(bcid, text, opts-string)
//
// Invokes the low level BWIPP code and returns the raw encoding data.
//
// This function is synchronous and throws on error.
//
// Browser and nodejs usage.
function ToRaw(bcid, text, options) {
    if (arguments.length == 1) {
        options = bcid;
        bcid = options.bcid;
        text = options.text;
    }

    // The drawing interface is just needed for the pre-init() calls.
    // Don't need to fixup the drawing specific options.
    var drawing = DrawingBuiltin();
    drawing.setopts(options);

    var bw = new BWIPJS(drawing);
    var stack = bwipp_encode(bw, bwipp_lookup(bcid), text, options, true);

    // bwip-js uses Maps to emulate PostScript dictionary objects; but Maps
    // are not a typical/expected return value.  Convert to plain-old-objects.
    var ids = { pixs:1, pixx:1, pixy:1, sbs:1, bbs:1, bhs:1, width:1, height:1 };
    for (var i = 0; i < stack.length; i++) {
        var elt = stack[i];
        if (elt instanceof Map) {
            var obj = {};
            // Could they make Maps any harder to iterate over???
            for (var keys = elt.keys(), size = elt.size, k = 0; k < size; k++) {
                var id = keys.next().value;
                if (ids[id]) {
                    var val = elt.get(id);
                    if (val instanceof Array) {
                        // The postscript arrays have extra named properties
                        // to emulate array views.  Return cleaned up arrays.
                        obj[id] = val.b.slice(val.o, val.o + val.length);
                    } else {
                        obj[id] = val;
                    }
                }
            }
            stack[i] = obj;
        } else {
            // This should never exec...
            stack.splice(i--, 1);
        }
    }
    return stack;
}
// bwip-js // Barcode Writer in Pure JavaScript
// https://github.com/metafloor/bwip-js
//
// This code was automatically generated from:
// Barcode Writer in Pure PostScript - Version 2025-04-19
//
// Copyright (c) 2011-2025 Mark Warren
// Copyright (c) 2004-2024 Terry Burton
//
// Licensed MIT. See the LICENSE file in the bwip-js root directory.
// bwip-js/barcode-hdr.js
//
// This code is injected above the cross-compiled barcode.js.

// The BWIPJS object (graphics interface)
var $$ = null;
var $j = 0; // stack pointer
var $k = []; // operand stack
var $_ = {}; // base of the dictionary stack

// Aliases from Math ops
const $abs = Math.abs;
const $ceil = Math.ceil;
const $log = Math.log;
const $pow = Math.pow
const $round = Math.round;
const $sqrt = Math.sqrt;

// Code instrumenting
const $metrics = {};

// Array ctor
//  $a()    : Build a new array up to the Infinity-marker on the stack.
//  $a(arr) : Convert native array to a "view" of the array.
//  $a(len) : Create a new array of length `len`
function $a(a) {
    if (!arguments.length) {
        for (var i = $j - 1; i >= 0 && $k[i] !== Infinity; i--);
        if (i < 0) {
            throw new Error('array-marker-not-found');
        }
        a = $k.splice(i + 1, $j - 1 - i);
        $j = i;
    } else if (!(a instanceof Array)) {
        a = new Array(+arguments[0]);
        for (var i = 0, l = a.length; i < l; i++) {
            a[i] = null;
        }
    }
    a.b = a; // base array
    a.o = 0; // offset into base
    return a;
}

// dict ctor
//  $d() : look for the Infinity marker on the stack
function $d() {
    // Build the dictionary in the order the keys/values were pushed so enumeration
    // occurs in the correct sequence.
    for (var mark = $j - 1; mark >= 0 && $k[mark] !== Infinity; mark -= 2) {
        if ($k[mark - 1] === Infinity) {
            throw new Error('dict-malformed-stack');
        }
    }
    if (mark < 0) {
        throw new Error('dict-marker-not-found');
    }
    var d = new Map;
    for (var i = mark + 1; i < $j; i += 2) {
        // Unlike javascript, postscript dict keys differentiate between
        // numbers and the string representation of a number.
        var k = $k[i]; // "key" into the dict entry
        var t = typeof k;
        if (t == 'number' || t == 'string') {
            d.set(k, $k[i + 1]);
        } else if (k instanceof Uint8Array) {
            d.set($z(k), $k[i + 1]);
        } else {
            throw new Error('dict-not-a-valid-key(' + k + ')');
        }
    }
    $j = mark;
    return d;
}

// string ctor
//  s(number)   : create zero-filled string of number-length
//  s(string)   : make a copy of the string
//  s(uint8[])  : make a copy of the string
//
// Returns a Uint8Array-string.
function $s(v) {
    var t = typeof v;
    if (t === 'number') {
        return new Uint8Array(v);
    }
    if (t !== 'string') {
        v = '' + v;
    }
    var s = new Uint8Array(v.length);
    for (var i = 0, l = v.length; i < l; i++) {
        s[i] = v.charCodeAt(i);
    }
    return s;
}

// ... n c roll
function $r(n, c) {
    if ($j < n) {
        throw new Error('roll: --stack-underflow--');
    }
    if (!c) {
        return;
    }
    if (c < 0) {
        var t = $k.splice($j - n, -c);
    } else {
        var t = $k.splice($j - n, n - c);
    }
    $k.splice.apply($k, [$j - t.length, 0].concat(t));
}

// Primarily designed to convert uint8-string to string, but will call the
// the toString() method on any value.
function $z(s) {
    if (s instanceof Uint8Array) {
        return String.fromCharCode.apply(null, s);
    }
    return '' + s;
}

// Copies source to dest and returns a view of just the copied characters
function $strcpy(dst, src) {
    if (typeof dst === 'string') {
        dst = $s(dst);
    }
    if (src instanceof Uint8Array) {
        for (var i = 0, l = src.length; i < l; i++) {
            dst[i] = src[i];
        }
    } else {
        for (var i = 0, l = src.length; i < l; i++) {
            dst[i] = src.charCodeAt(i);
        }
    }
    return src.length < dst.length ? dst.subarray(0, src.length) : dst;
}

// Copies source to dest and should (but doesn't) return a view of just the copied elements
function $arrcpy(dst, src) {
    for (var i = 0, l = src.length; i < l; i++) {
        dst[i] = src[i];
    }
    dst.length = src.length;
    return dst;
}

// cvs operator - convert a value to its string representation
//  s : string to store into
//  v : any value
function $cvs(s, v) {
    var t = typeof v;
    if (t == 'number' || t == 'boolean' || v === null) {
        v = '' + v;
    } else if (t !== 'string') {
        v = '--nostringval--';
    }
    for (var i = 0, l = v.length; i < l; i++) {
        s[i] = v.charCodeAt(i);
    }
    $k[$j++] = i < s.length ? s.subarray(0, i) : s;
}
// cvi operator - converts a numeric string value to integer.
function $cvi(s) {
    if (s instanceof Uint8Array) {
        // nul-chars on the end of a string are ignored by postscript but cause javascript
        // to return a zero result.
        return String.fromCharCode.apply(null, s).replace(/\0+$/, '') | 0;
    }
    return ('' + s) | 0;
}

// cvrs operator - convert a number to a radix string
//  s : string to store into
//  n : number
//  r : radix
function $cvrs(s, n, r) {
    return $strcpy(s, (~~n).toString(r).toUpperCase());
}

// get operator
//  s : source
//  k : key
function $get(s, k) {
    if (s instanceof Uint8Array) {
        return s[k];
    }
    if (typeof s === 'string') {
        return s.charCodeAt(k);
    }
    if (s instanceof Array) {
        return s.b[s.o + k];
    }
    // Map or Object - need a string key
    if (k instanceof Uint8Array) {
        k = $z(k);
    }
    if (s instanceof Map) {
        return s.get(k);
    }
    return s[k];
}

// put operator
//  d : dest
//  k : key
//  v : value
function $put(d, k, v) {
    if (d instanceof Uint8Array) {
        d[k] = v;
    } else if (d instanceof Array) {
        d.b[d.o + k] = v;
    } else if (typeof d == 'object') {
        if (k instanceof Uint8Array) {
            d.set($z(k), v);
        } else {
            d.set(k, v);
        }
    } else {
        throw new Error('put-not-writable-' + (typeof d));
    }
}

// getinterval operator
//  s : src
//  o : offset
//  l : length
function $geti(s, o, l) {
    if (s instanceof Uint8Array) {
        return s.subarray(o, o + l);
    }
    if (s instanceof Array) {
        var a = new Array(l);
        a.b = s.b; // base array
        a.o = s.o + o; // offset into base
        return a;
    }
    // Must be a string
    return s.substr(o, l);
}

// putinterval operator
//  d : dst
//  o : offset
//  s : src
function $puti(d, o, s) {
    if (d instanceof Uint8Array) {
        if (typeof s == 'string') {
            for (var i = 0, l = s.length; i < l; i++) {
                d[o + i] = s.charCodeAt(i);
            }
        } else {
            // When both d and s are the same, we want to copy
            // backwards, which works for the general case as well.
            for (var i = s.length - 1; i >= 0; i--) {
                d[o + i] = s[i];
            }
        }
    } else if (d instanceof Array) {
        // Operate on the base arrays
        var darr = d.b;
        var doff = o + d.o;
        var sarr = s.b;
        var soff = s.o;

        for (var i = 0, l = s.length; i < l; i++) {
            darr[doff + i] = sarr[soff + i];
        }
    } else {
        throw new Error('putinterval-not-writable-' + (typeof d));
    }
}

// type operator
function $type(v) {
    // null can be mis-typed - get it out of the way
    if (v == null) {
        return 'nulltype';
    }
    var t = typeof v;
    if (t == 'number') {
        return v % 1 ? 'realtype' : 'integertype';
    }
    if (t == 'boolean') {
        return 'booleantype';
    }
    if (t == 'string' || v instanceof Uint8Array) {
        return 'stringtype';
    }
    if (t == 'function') {
        return 'operatortype';
    }
    if (v instanceof Array) {
        return 'arraytype';
    }
    return 'dicttype';
    // filetype
    // fonttype
    // gstatetype
    // marktype (v === Infinity)
    // nametype
    // savetype
}

// anchorsearch operator
//      string seek anchorsearch suffix seek true %if-found
//                               string false     %if-not-found
function $anchorsearch(str, seek) {
    if (!(str instanceof Uint8Array)) {
        str = $s(str);
    }
    var i = 0,
        ls = str.length,
        lk = seek.length;

    // Optimize for single characters.
    if (lk == 1) {
        var cd = seek instanceof Uint8Array ? seek[0] : seek.charCodeAt(0);
        i = str[0] == cd ? 1 : ls;
    } else if (seek.length <= ls) {
        // Slow path,
        if (!(seek instanceof Uint8Array)) {
            seek = $s(seek);
        }
        for (; i < lk && str[i] == seek[i]; i++);
    }
    if (i == lk) {
        $k[$j++] = str.subarray(lk);
        $k[$j++] = str.subarray(0, lk);
        $k[$j++] = true;
    } else {
        $k[$j++] = str;
        $k[$j++] = false;
    }
}

// search operator
//      string seek search suffix match prefix true %if-found
//                         string false             %if-not-found
function $search(str, seek) {
    if (!(str instanceof Uint8Array)) {
        str = $s(str);
    }
    var ls = str.length;

    // Virtually all uses of search in BWIPP are for single-characters.
    // Optimize for that case.
    if (seek.length == 1) {
        var lk = 1;
        var cd = seek instanceof Uint8Array ? seek[0] : seek.charCodeAt(0);
        for (var i = 0; i < ls && str[i] != cd; i++);
    } else {
        // Slow path,
        if (!(seek instanceof Uint8Array)) {
            seek = $s(seek);
        }
        var lk = seek.length;
        var cd = seek[0];
        for (var i = 0; i < ls && str[i] != cd; i++);
        while (i < ls) {
            for (var j = 1; j < lk && str[i + j] === seek[j]; j++);
            if (j === lk) {
                break;
            }
            for (i++; i < ls && str[i] != cd; i++);
        }
    }
    if (i < ls) {
        $k[$j++] = str.subarray(i + lk);
        $k[$j++] = str.subarray(i, i + lk);
        $k[$j++] = str.subarray(0, i);
        $k[$j++] = true;
    } else {
        $k[$j++] = str;
        $k[$j++] = false;
    }
}

// The callback is omitted when forall is being used just to push onto the
// stack.  The callback normally returns undefined.  A return of true means break.
function $forall(o, cb) {
    if (o instanceof Uint8Array) {
        for (var i = 0, l = o.length; i < l; i++) {
            $k[$j++] = o[i];
            if (cb && cb()) break;
        }
    } else if (o instanceof Array) {
        // The array may be a view.
        for (var a = o.b, i = o.o, l = o.o + o.length; i < l; i++) {
            $k[$j++] = a[i];
            if (cb && cb()) break;
        }
    } else if (typeof o === 'string') {
        for (var i = 0, l = o.length; i < l; i++) {
            $k[$j++] = o.charCodeAt(i);
            if (cb && cb()) break;
        }
    } else if (o instanceof Map) {
        for (var keys = o.keys(), i = 0, l = o.size; i < l; i++) {
            var id = keys.next().value;
            $k[$j++] = id;
            $k[$j++] = o.get(id);
            if (cb && cb()) break;
        }
    } else {
        for (var id in o) {
            $k[$j++] = id;
            $k[$j++] = o[id];
            if (cb && cb()) break;
        }
    }
}

function $cleartomark() {
    while ($j > 0 && $k[--$j] !== Infinity);
}

function $counttomark() {
    for (var i = $j - 1; i >= 0 && $k[i] !== Infinity; i--);
    return $j - i - 1;
}

function $aload(a) {
    for (var i = 0, l = a.length, b = a.b, o = a.o; i < l; i++) {
        $k[$j++] = b[o + i];
    }
    // This push has been optimized out.  See $.aload() in psc.js.
    //$k[$j++] = a;
}

function $astore(a) {
    for (var i = 0, l = a.length, b = a.b, o = a.o + l - 1; i < l; i++) {
        b[o - i] = $k[--$j];
    }
    $k[$j++] = a;
}

function $eq(a, b) {
    if (typeof a === 'string' && typeof b === 'string') {
        return a == b;
    }
    if (a instanceof Uint8Array && b instanceof Uint8Array) {
        if (a.length != b.length) {
            return false;
        }
        for (var i = 0, l = a.length; i < l; i++) {
            if (a[i] != b[i]) {
                return false;
            }
        }
        return true;
    }
    if (a instanceof Uint8Array && typeof b === 'string' ||
        b instanceof Uint8Array && typeof a === 'string') {
        if (a instanceof Uint8Array) {
            a = $z(a);
        } else {
            b = $z(b);
        }
        return a == b;
    }
    return a == b;
}

function $ne(a, b) {
    return !$eq(a, b);
}

function $lt(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a < b;
}

function $le(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a <= b;
}

function $gt(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a > b;
}

function $ge(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a >= b;
}

function $an(a, b) { // and
    return (typeof a === 'boolean') ? a && b : a & b;
}

function $or(a, b) { // or
    return (typeof a === 'boolean') ? a || b : a | b;
}

function $xo(a, b) { // xor
    return (typeof a === 'boolean') ? a != b : a ^ b;
}

function $nt(a) {
    return typeof a == 'boolean' ? !a : ~a;
}
// emulate single-precision floating-point.  This is not Math.fround().
// More like ffloor()...
var $f = (function(fa) {
    return (v) => {
        //return Number.isInteger(v) ? v : (fa[0] = v, fa[0]);
        return (v | 0) == v ? v : (fa[0] = v, fa[0]);
    };
})(new Float32Array(1));

// This is a replacement for the BWIPP raiseerror function.
function bwipp_raiseerror() {
    var info = $k[--$j];
    var name = $k[--$j];
    if (typeof info == 'string' || info instanceof Uint8Array) {
        throw new Error($z(name) + ": " + $z(info));
    } else {
        $k[$j++] = info; // see mktests debugEqual
        // Match ghostscript output
        throw $z(name) + '\nAdditional information: ' + tostring(info);
    }

    function tostring(v) {
        if (v instanceof Array) {
            let s = '';
            for (let i = v.o, l = v.o + v.length; i < l; i++) {
                s += ' ' + tostring(v.b[i]);
            }
            return '[' + s.substr(1) + ']';
        } else if (v instanceof Uint8Array) {
            return String.fromCharCode.apply(String, v);
        } else if (v instanceof Map) {
            let s = '';
            for (const [key, val] of v) {
                s += ' ' + tostring(key) + ' ' + tostring(val);
            }
            return '<<' + s.substr(1) + '>>';
        } else if (v && typeof v == 'object') {
            let s = '';
            for (let id in v) {
                s += ' ' + tostring(id) + ' ' + tostring(v[id]);
            }
            return '<<' + s.substr(1) + '>>';
        } else {
            return '' + v;
        }
    }
}

// This is a replacement for the BWIPP processoptions function.
// We cannot use the BWIPP version due to two reasons:
// - legacy code allows strings to be numbers and numbers to be strings
// - in javascript, there is no way to tell the difference between a real
//   number that is an integer, and an actual integer.
//
// options currentdict processoptions exec -> options
function bwipp_processoptions() {
    var dict = $k[--$j];
    var opts = $k[$j - 1];
    if (opts instanceof Uint8Array) {
        opts = $z(opts);
    }
    if (typeof opts == 'string') {
        let vals = opts.trim().split(/ +/g)
        $k[$j - 1] = opts = new Map();
        for (let i = 0; i < vals.length; i++) {
            let pair = vals[i].split('=');
            if (pair.length == 1) {
                opts.set(pair[0], true);
            } else {
                opts.set(pair[0], pair[1]);
            }
        }
    }
    for (var id in dict) {
        var val;
        if (!opts.has(id)) {
            continue;
        }
        val = opts.get(id);
        var def = dict[id];
        var typ = typeof def;

        // null is a placeholder for realtype
        if (def == null || typ == 'number') {
            // This allows for numeric strings
            if (!isFinite(+val)) {
                throw new Error('bwipp.invalidOptionType: ' + id +
                    ': not a realtype: ' + val);
            }
            if (typeof val == 'string') {
                val = +val;
                opts.set(id, val);
            }
        } else if (typ == 'boolean') {
            if (val !== true && val !== false) {
                // In keeping with the ethos of javascript, allow a more relaxed
                // interpretation of boolean.
                if (val == null || (val | 0) === val) {
                    val = !!val;
                } else if (val == 'true') {
                    val = true;
                } else if (val == 'false') {
                    val = false;
                } else {
                    throw new Error('bwipp.invalidOptionType: ' + id +
                        ': not a booleantype: ' + val);
                }
                opts.set(id, val);
            }
        } else if (typ == 'string' || def instanceof Uint8Array) {
            // This allows numbers to be strings
            if (typeof val == 'number') {
                val = '' + val;
                opts.set(id, val);
            } else if (typeof val != 'string' && !(val instanceof Uint8Array)) {
                throw new Error('bwipp.invalidOptionType: ' + id +
                    ': not a stringtype: ' + val);
            }
        }
        // Set the option into the dictionary
        dict[id] = val;
    }
}

function bwipp_parseinput() {
    var $__ = $_; //#200
    $_ = Object.assign({}, $_); //#200
    $_.fncvals = $k[--$j]; //#204
    $_.barcode = $k[--$j]; //#205
    var _2 = 'parse'; //#207
    $_[_2] = $get($_.fncvals, _2); //#207
    delete $_.fncvals[_2]; //#207
    var _6 = 'parsefnc'; //#208
    $_[_6] = $get($_.fncvals, _6); //#208
    delete $_.fncvals[_6]; //#208
    var _A = 'parseonly'; //#209
    var _C = $get($_.fncvals, _A) !== undefined; //#209
    $_[_A] = _C; //#209
    delete $_.fncvals[_A]; //#209
    var _E = 'eci'; //#210
    var _G = $get($_.fncvals, _E) !== undefined; //#210
    $_[_E] = _G; //#210
    delete $_.fncvals[_E]; //#210
    $k[$j++] = Infinity; //#214
    var _I = $a(['NUL', 'SOH', 'STX', 'ETX', 'EOT', 'ENQ', 'ACK', 'BEL', 'BS', 'TAB', 'LF', 'VT', 'FF', 'CR', "", "", 'DLE', 'DC1', 'DC2', 'DC3', 'DC4', 'NAK', 'SYN', 'ETB', 'CAN', 'EM', 'SUB', 'ESC', 'FS', 'GS', 'RS', 'US']); //#219
    $k[$j++] = 0; //#223
    for (var _J = 0, _K = _I.length; _J < _K; _J++) { //#223
        var _M = $k[--$j]; //#222
        $k[$j++] = $get(_I, _J); //#222
        $k[$j++] = _M; //#222
        $k[$j++] = _M + 1; //#222
    } //#222
    $j--; //#223
    $_.ctrl = $d(); //#224
    $_.msg = $a($_.barcode.length); //#227
    $_.j = 0; //#228
    $k[$j++] = $_.barcode; //#351
    for (;;) { //#351
        $search($k[--$j], "^"); //#230
        var _T = $k[--$j]; //#230
        var _U = $k[--$j]; //#230
        $k[$j++] = _T; //#233
        $k[$j++] = _U.length; //#233
        $k[$j++] = $_.msg; //#233
        $k[$j++] = $_.j; //#233
        var _X = Infinity; //#233
        var _Y = _U; //#233
        $k[$j++] = _X; //#233
        $forall(_Y); //#233
        var _Z = $a(); //#233
        var _a = $k[--$j]; //#233
        $puti($k[--$j], _a, _Z); //#233
        $_.j = $f($k[--$j] + $_.j); //#234
        if ($k[--$j]) { //#349
            $j--; //#236
            for (var _f = 0; _f < 1; _f++) { //#347
                if (!$_.parse && !$_.parsefnc) { //#243
                    $put($_.msg, $_.j, 94); //#240
                    $_.j = $_.j + 1; //#241
                    break; //#242
                } //#242
                $put($_.msg, $_.j, 94); //#246
                $_.j = $_.j + 1; //#247
                if ($_.parse) { //#290
                    var _p = $k[$j - 1]; //#251
                    if (_p.length >= 3) { //#262
                        var _q = $k[$j - 1]; //#252
                        var _r = $geti(_q, 0, 3); //#252
                        var _s = $_.ctrl; //#252
                        var _t = $get(_s, _r) !== undefined; //#253
                        $k[$j++] = _s; //#261
                        $k[$j++] = _r; //#261
                        if (_t) { //#260
                            $_.j = $_.j - 1; //#254
                            var _v = $k[--$j]; //#255
                            $put($_.msg, $_.j, $get($k[--$j], _v)); //#255
                            $_.j = $_.j + 1; //#256
                            var _11 = $k[--$j]; //#257
                            $k[$j++] = $geti(_11, 3, _11.length - 3); //#258
                            break; //#258
                        } else { //#260
                            $j -= 2; //#260
                        } //#260
                    } //#260
                    var _13 = $k[$j - 1]; //#263
                    if (_13.length >= 2) { //#274
                        var _14 = $k[$j - 1]; //#264
                        var _15 = $geti(_14, 0, 2); //#264
                        var _16 = $_.ctrl; //#264
                        var _17 = $get(_16, _15) !== undefined; //#265
                        $k[$j++] = _16; //#273
                        $k[$j++] = _15; //#273
                        if (_17) { //#272
                            $_.j = $_.j - 1; //#266
                            var _19 = $k[--$j]; //#267
                            $put($_.msg, $_.j, $get($k[--$j], _19)); //#267
                            $_.j = $_.j + 1; //#268
                            var _1F = $k[--$j]; //#269
                            $k[$j++] = $geti(_1F, 2, _1F.length - 2); //#270
                            break; //#270
                        } else { //#272
                            $j -= 2; //#272
                        } //#272
                    } //#272
                    var _1H = $k[$j - 1]; //#275
                    if (_1H.length >= 3) { //#289
                        var _1I = $k[$j - 1]; //#276
                        var _1J = $geti(_1I, 0, 3); //#276
                        $k[$j++] = true; //#278
                        for (var _1K = 0, _1L = _1J.length; _1K < _1L; _1K++) { //#278
                            var _1M = $get(_1J, _1K); //#278
                            if ((_1M < 48) || (_1M > 57)) { //#277
                                $k[$j - 1] = false; //#277
                            } //#277
                        } //#277
                        if ($k[--$j]) { //#288
                            var _1O = $k[$j - 1]; //#280
                            var _1Q = $cvi($geti(_1O, 0, 3)); //#280
                            $k[$j++] = _1Q; //#283
                            if (_1Q > 255) { //#283
                                $j -= 2; //#281
                                $k[$j++] = 'bwipp.invalidOrdinal#282'; //#282
                                $k[$j++] = "Ordinal must be 000 to 255"; //#282
                                bwipp_raiseerror(); //#282
                            } //#282
                            $_.j = $_.j - 1; //#284
                            $put($_.msg, $_.j, $k[--$j]); //#285
                            $_.j = $_.j + 1; //#286
                            var _1W = $k[--$j]; //#287
                            $k[$j++] = $geti(_1W, 3, _1W.length - 3); //#287
                        } //#287
                    } //#287
                } //#287
                if ($_.parseonly || !$_.parsefnc || $get($_.msg, $_.j - 1) != 94) { //#295
                    break; //#295
                } //#295
                $_.j = $_.j - 1; //#298
                var _1e = $k[$j - 1]; //#299
                if (_1e.length < 1) { //#302
                    $j--; //#300
                    $k[$j++] = 'bwipp.truncatedCaret#301'; //#301
                    $k[$j++] = "Caret character truncated"; //#301
                    bwipp_raiseerror(); //#301
                } //#301
                var _1f = $k[$j - 1]; //#303
                if ($get(_1f, 0) == 94) { //#308
                    $put($_.msg, $_.j, 94); //#304
                    $_.j = $_.j + 1; //#305
                    var _1k = $k[--$j]; //#306
                    $k[$j++] = $geti(_1k, 1, _1k.length - 1); //#307
                    break; //#307
                } //#307
                var _1m = $k[$j - 1]; //#309
                if (_1m.length < 3) { //#312
                    $j--; //#310
                    $k[$j++] = 'bwipp.truncatedFNC#311'; //#311
                    $k[$j++] = "Function character truncated"; //#311
                    bwipp_raiseerror(); //#311
                } //#311
                var _1n = $k[$j - 1]; //#313
                if ($eq($geti(_1n, 0, 3), "ECI") && $_.eci) { //#330
                    var _1q = $k[$j - 1]; //#314
                    if (_1q.length < 9) { //#317
                        $j--; //#315
                        $k[$j++] = 'bwipp.truncatedECI#316'; //#316
                        $k[$j++] = "ECI truncated"; //#316
                        bwipp_raiseerror(); //#316
                    } //#316
                    var _1r = $k[$j - 1]; //#318
                    var _1s = $geti(_1r, 3, 6); //#318
                    $k[$j++] = _1s; //#324
                    for (var _1t = 0, _1u = _1s.length; _1t < _1u; _1t++) { //#324
                        var _1v = $get(_1s, _1t); //#324
                        if ((_1v < 48) || (_1v > 57)) { //#323
                            $j -= 2; //#321
                            $k[$j++] = 'bwipp.invalidECI#322'; //#322
                            $k[$j++] = "ECI must be 000000 to 999999"; //#322
                            bwipp_raiseerror(); //#322
                        } //#322
                    } //#322
                    var _1w = $k[--$j]; //#325
                    $k[$j++] = 0; //#325
                    $forall(_1w, function() { //#325
                        var _1x = $k[--$j]; //#325
                        var _1y = $k[--$j]; //#325
                        $k[$j++] = ($f(_1y - (_1x - 48))) * 10; //#325
                    }); //#325
                    $put($_.msg, $_.j, (~~($k[--$j] / 10)) - 1000000); //#326
                    $_.j = $_.j + 1; //#327
                    var _23 = $k[--$j]; //#328
                    $k[$j++] = $geti(_23, 9, _23.length - 9); //#329
                    break; //#329
                } //#329
                var _25 = $k[$j - 1]; //#331
                if (_25.length < 4) { //#334
                    $j--; //#332
                    $k[$j++] = 'bwipp.truncatedFNC#333'; //#333
                    $k[$j++] = "Function character truncated"; //#333
                    bwipp_raiseerror(); //#333
                } //#333
                var _26 = $k[$j - 1]; //#335
                var _27 = $geti(_26, 0, 4); //#335
                var _29 = $get($_.fncvals, _27) !== undefined; //#335
                $k[$j++] = _27; //#340
                if (!_29) { //#340
                    var _2A = $k[--$j]; //#336
                    var _2B = $s(_2A.length + 28); //#336
                    $puti(_2B, 28, _2A); //#336
                    $puti(_2B, 0, "Unknown function character: "); //#337
                    $k[$j - 1] = _2B; //#338
                    var _2D = $k[--$j]; //#339
                    $k[$j++] = 'bwipp.unknownFNC#339'; //#339
                    $k[$j++] = _2D; //#339
                    bwipp_raiseerror(); //#339
                } //#339
                $put($_.msg, $_.j, $get($_.fncvals, $k[--$j])); //#342
                $_.j = $_.j + 1; //#343
                var _2K = $k[--$j]; //#344
                $k[$j++] = $geti(_2K, 4, _2K.length - 4); //#345
                break; //#345
            } //#345
        } else { //#349
            break; //#349
        } //#349
    } //#349
    if (!$_.parseonly) { //#357
        $k[$j++] = $geti($_.msg, 0, $_.j); //#354
    } else { //#357
        $k[$j++] = $s($_.j); //#357
        for (var _2U = 0, _2T = $_.j - 1; _2U <= _2T; _2U += 1) { //#357
            var _2V = $k[$j - 1]; //#357
            $put(_2V, _2U, $get($_.msg, _2U)); //#357
        } //#357
    } //#357
    $_ = $__; //#362
} //bwipp_parseinput
function bwipp_gs1process() {
    var $__ = $_; //#387
    $_ = Object.assign({}, $_); //#387
    var _1 = new Map([
        ["cset", 'N'],
        ["min", 18],
        ["max", 18],
        ["opt", false],
        ["linters", $a(['lintcsum', 'lintkeyoff1'])]
    ]); //#397
    var _2 = $a([_1]); //#397
    var _3 = $a([]); //#399
    var _4 = new Map([
        ["parts", _2],
        ["dlpkey", _3]
    ]); //#399
    var _5 = $a(['lintcsum', 'lintkeyoff1']); //#406
    var _6 = new Map([
        ["cset", 'N'],
        ["min", 14],
        ["max", 14],
        ["opt", false],
        ["linters", _5]
    ]); //#406
    var _7 = $a([_6]); //#406
    var _8 = $a(["255", "37"]); //#408
    var _9 = $a(["22", "10", "21"]); //#409
    var _A = $a(["235"]); //#409
    var _B = $a([_9, _A]); //#409
    var _C = new Map([
        ["parts", _7],
        ["ex", _8],
        ["dlpkey", _B]
    ]); //#409
    var _D = $a(['lintcsum', 'lintkeyoff1']); //#416
    var _E = new Map([
        ["cset", 'N'],
        ["min", 14],
        ["max", 14],
        ["opt", false],
        ["linters", _D]
    ]); //#416
    var _F = $a([_E]); //#416
    var _G = $a(["01", "03"]); //#418
    var _H = $a(["37"]); //#419
    var _I = $a([_H]); //#419
    var _J = $a([_I]); //#419
    var _K = new Map([
        ["parts", _F],
        ["ex", _G],
        ["req", _J]
    ]); //#419
    var _L = $a(['lintcsum', 'lintkeyoff1']); //#426
    var _M = new Map([
        ["cset", 'N'],
        ["min", 14],
        ["max", 14],
        ["opt", false],
        ["linters", _L]
    ]); //#426
    var _N = $a([_M]); //#426
    var _O = $a(["01", "02", "37"]); //#428
    var _P = new Map([
        ["parts", _N],
        ["ex", _O],
        ["dlattr", false]
    ]); //#429
    var _R = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["opt", false],
        ["linters", $a([])]
    ]); //#436
    var _a = new Map([
        ["parts", $a([_R])],
        ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["03"]), $a(["8006"]), $a(["8026"])])])]
    ]); //#438
    var _c = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a(['lintyymmd0'])]
    ]); //#445
    var _k = new Map([
        ["parts", $a([_c])],
        ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
    ]); //#447
    var _m = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a(['lintyymmd0'])]
    ]); //#454
    var _r = new Map([
        ["parts", $a([_m])],
        ["req", $a([$a([$a(["8020"])])])]
    ]); //#456
    var _t = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a(['lintyymmd0'])]
    ]); //#463
    var _11 = new Map([
        ["parts", $a([_t])],
        ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
    ]); //#465
    var _13 = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a(['lintyymmd0'])]
    ]); //#474
    var _1C = new Map([
        ["parts", $a([_13])],
        ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["255"]), $a(["8006"]), $a(["8026"])])])]
    ]); //#476
    var _1E = new Map([
        ["cset", 'N'],
        ["min", 2],
        ["max", 2],
        ["opt", false],
        ["linters", $a([])]
    ]); //#483
    var _1M = new Map([
        ["parts", $a([_1E])],
        ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
    ]); //#485
    var _1O = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["opt", false],
        ["linters", $a([])]
    ]); //#492
    var _1W = new Map([
        ["parts", $a([_1O])],
        ["ex", $a(["235"])],
        ["req", $a([$a([$a(["01"]), $a(["03"]), $a(["8006"])])])],
        ["dlattr", false]
    ]); //#496
    var _1Y = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["opt", false],
        ["linters", $a([])]
    ]); //#503
    var _1d = new Map([
        ["parts", $a([_1Y])],
        ["req", $a([$a([$a(["01"])])])],
        ["dlattr", false]
    ]); //#506
    var _1f = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 28],
        ["opt", false],
        ["linters", $a([])]
    ]); //#513
    var _1k = new Map([
        ["parts", $a([_1f])],
        ["req", $a([$a([$a(["01"])])])],
        ["dlattr", false]
    ]); //#516
    var _1m = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["opt", false],
        ["linters", $a([])]
    ]); //#523
    var _1u = new Map([
        ["parts", $a([_1m])],
        ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
    ]); //#525
    var _1w = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#533
    var _25 = new Map([
        ["parts", $a([_1w])],
        ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["03"]), $a(["8006"]), $a(["8026"])])])]
    ]); //#535
    var _27 = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["opt", false],
        ["linters", $a([])]
    ]); //#542
    var _2C = new Map([
        ["parts", $a([_27])],
        ["req", $a([$a([$a(["01"])])])]
    ]); //#544
    var _2E = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["opt", false],
        ["linters", $a([])]
    ]); //#551
    var _2M = new Map([
        ["parts", $a([_2E])],
        ["req", $a([$a([$a(["01"]), $a(["8006"])]), $a([$a(["21"])])])]
    ]); //#553
    var _2O = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["opt", false],
        ["linters", $a([])]
    ]); //#560
    var _2U = new Map([
        ["parts", $a([_2O])],
        ["req", $a([$a([$a(["01"]), $a(["8006"])])])]
    ]); //#562
    var _2W = new Map([
        ["cset", 'N'],
        ["min", 13],
        ["max", 13],
        ["opt", false],
        ["linters", $a(['lintcsum', 'lintkey'])]
    ]); //#569
    var _2Y = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 17],
        ["opt", true],
        ["linters", $a([])]
    ]); //#570
    var _2b = new Map([
        ["parts", $a([_2W, _2Y])],
        ["dlpkey", $a([])]
    ]); //#572
    var _2d = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["opt", false],
        ["linters", $a([])]
    ]); //#579
    var _2i = new Map([
        ["parts", $a([_2d])],
        ["req", $a([$a([$a(["414"])])])],
        ["dlattr", false]
    ]); //#582
    var _2k = new Map([
        ["cset", 'N'],
        ["min", 13],
        ["max", 13],
        ["opt", false],
        ["linters", $a(['lintcsum', 'lintkey'])]
    ]); //#589
    var _2m = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 12],
        ["opt", true],
        ["linters", $a([])]
    ]); //#590
    var _2q = new Map([
        ["parts", $a([_2k, _2m])],
        ["ex", $a(["01", "02", "415", "8006", "8020", "8026"])],
        ["dlpkey", $a([])]
    ]); //#593
    var _2s = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 8],
        ["opt", false],
        ["linters", $a([])]
    ]); //#600
    var _2y = new Map([
        ["parts", $a([_2s])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#602
    var _30 = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#609
    var _37 = new Map([
        ["parts", $a([_30])],
        ["ex", $a(["310n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#612
    var _39 = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#624
    var _3G = new Map([
        ["parts", $a([_39])],
        ["ex", $a(["311n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#627
    var _3I = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#639
    var _3P = new Map([
        ["parts", $a([_3I])],
        ["ex", $a(["312n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#642
    var _3R = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#654
    var _3Y = new Map([
        ["parts", $a([_3R])],
        ["ex", $a(["313n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#657
    var _3a = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#669
    var _3h = new Map([
        ["parts", $a([_3a])],
        ["ex", $a(["314n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#672
    var _3j = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#684
    var _3q = new Map([
        ["parts", $a([_3j])],
        ["ex", $a(["315n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#687
    var _3s = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#699
    var _3z = new Map([
        ["parts", $a([_3s])],
        ["ex", $a(["316n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#702
    var _41 = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#714
    var _48 = new Map([
        ["parts", $a([_41])],
        ["ex", $a(["320n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#717
    var _4A = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#729
    var _4H = new Map([
        ["parts", $a([_4A])],
        ["ex", $a(["321n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#732
    var _4J = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#744
    var _4Q = new Map([
        ["parts", $a([_4J])],
        ["ex", $a(["322n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#747
    var _4S = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#759
    var _4Z = new Map([
        ["parts", $a([_4S])],
        ["ex", $a(["323n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#762
    var _4b = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#774
    var _4i = new Map([
        ["parts", $a([_4b])],
        ["ex", $a(["324n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#777
    var _4k = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#789
    var _4r = new Map([
        ["parts", $a([_4k])],
        ["ex", $a(["325n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#792
    var _4t = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#804
    var _50 = new Map([
        ["parts", $a([_4t])],
        ["ex", $a(["326n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#807
    var _52 = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#819
    var _59 = new Map([
        ["parts", $a([_52])],
        ["ex", $a(["327n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#822
    var _5B = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#834
    var _5I = new Map([
        ["parts", $a([_5B])],
        ["ex", $a(["328n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#837
    var _5K = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#849
    var _5R = new Map([
        ["parts", $a([_5K])],
        ["ex", $a(["329n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#852
    var _5T = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#864
    var _5a = new Map([
        ["parts", $a([_5T])],
        ["ex", $a(["330n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#867
    var _5c = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#879
    var _5j = new Map([
        ["parts", $a([_5c])],
        ["ex", $a(["331n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#882
    var _5l = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#894
    var _5s = new Map([
        ["parts", $a([_5l])],
        ["ex", $a(["332n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#897
    var _5u = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#909
    var _61 = new Map([
        ["parts", $a([_5u])],
        ["ex", $a(["333n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#912
    var _63 = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#924
    var _6A = new Map([
        ["parts", $a([_63])],
        ["ex", $a(["334n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#927
    var _6C = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#939
    var _6J = new Map([
        ["parts", $a([_6C])],
        ["ex", $a(["335n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#942
    var _6L = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#954
    var _6S = new Map([
        ["parts", $a([_6L])],
        ["ex", $a(["336n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#957
    var _6U = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#969
    var _6a = new Map([
        ["parts", $a([_6U])],
        ["ex", $a(["337n"])],
        ["req", $a([$a([$a(["01"])])])]
    ]); //#972
    var _6c = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#984
    var _6j = new Map([
        ["parts", $a([_6c])],
        ["ex", $a(["340n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#987
    var _6l = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#999
    var _6s = new Map([
        ["parts", $a([_6l])],
        ["ex", $a(["341n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#1002
    var _6u = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1014
    var _71 = new Map([
        ["parts", $a([_6u])],
        ["ex", $a(["342n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#1017
    var _73 = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1029
    var _7A = new Map([
        ["parts", $a([_73])],
        ["ex", $a(["343n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#1032
    var _7C = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1044
    var _7J = new Map([
        ["parts", $a([_7C])],
        ["ex", $a(["344n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#1047
    var _7L = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1059
    var _7S = new Map([
        ["parts", $a([_7L])],
        ["ex", $a(["345n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#1062
    var _7U = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1074
    var _7b = new Map([
        ["parts", $a([_7U])],
        ["ex", $a(["346n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#1077
    var _7d = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1089
    var _7k = new Map([
        ["parts", $a([_7d])],
        ["ex", $a(["347n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#1092
    var _7m = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1104
    var _7t = new Map([
        ["parts", $a([_7m])],
        ["ex", $a(["348n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#1107
    var _7v = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1119
    var _82 = new Map([
        ["parts", $a([_7v])],
        ["ex", $a(["349n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#1122
    var _84 = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1134
    var _8B = new Map([
        ["parts", $a([_84])],
        ["ex", $a(["350n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1137
    var _8D = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1149
    var _8K = new Map([
        ["parts", $a([_8D])],
        ["ex", $a(["351n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1152
    var _8M = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1164
    var _8T = new Map([
        ["parts", $a([_8M])],
        ["ex", $a(["352n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1167
    var _8V = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1179
    var _8c = new Map([
        ["parts", $a([_8V])],
        ["ex", $a(["353n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#1182
    var _8e = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1194
    var _8l = new Map([
        ["parts", $a([_8e])],
        ["ex", $a(["354n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#1197
    var _8n = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1209
    var _8u = new Map([
        ["parts", $a([_8n])],
        ["ex", $a(["355n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#1212
    var _8w = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1224
    var _93 = new Map([
        ["parts", $a([_8w])],
        ["ex", $a(["356n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1227
    var _95 = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1239
    var _9C = new Map([
        ["parts", $a([_95])],
        ["ex", $a(["357n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1242
    var _9E = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1254
    var _9L = new Map([
        ["parts", $a([_9E])],
        ["ex", $a(["360n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1257
    var _9N = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1269
    var _9U = new Map([
        ["parts", $a([_9N])],
        ["ex", $a(["361n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1272
    var _9W = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1284
    var _9d = new Map([
        ["parts", $a([_9W])],
        ["ex", $a(["362n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#1287
    var _9f = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1299
    var _9m = new Map([
        ["parts", $a([_9f])],
        ["ex", $a(["363n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#1302
    var _9o = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1314
    var _9v = new Map([
        ["parts", $a([_9o])],
        ["ex", $a(["364n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1317
    var _9x = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1329
    var _A4 = new Map([
        ["parts", $a([_9x])],
        ["ex", $a(["365n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1332
    var _A6 = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1344
    var _AD = new Map([
        ["parts", $a([_A6])],
        ["ex", $a(["366n"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1347
    var _AF = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1359
    var _AM = new Map([
        ["parts", $a([_AF])],
        ["ex", $a(["367n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#1362
    var _AO = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1374
    var _AV = new Map([
        ["parts", $a([_AO])],
        ["ex", $a(["368n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#1377
    var _AX = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1389
    var _Ae = new Map([
        ["parts", $a([_AX])],
        ["ex", $a(["369n"])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#1392
    var _Ag = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 8],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1404
    var _Ao = new Map([
        ["parts", $a([_Ag])],
        ["req", $a([$a([$a(["00"])]), $a([$a(["02"]), $a(["8026"])])])]
    ]); //#1406
    var _Aq = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 15],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1413
    var _Ax = new Map([
        ["parts", $a([_Aq])],
        ["ex", $a(["390n", "391n", "394n", "8111"])],
        ["req", $a([$a([$a(["255"]), $a(["8020"])])])]
    ]); //#1416
    var _Az = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["opt", false],
        ["linters", $a(['lintiso4217'])]
    ]); //#1432
    var _B1 = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 15],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1433
    var _B7 = new Map([
        ["parts", $a([_Az, _B1])],
        ["ex", $a(["391n"])],
        ["req", $a([$a([$a(["8020"])])])]
    ]); //#1436
    var _B9 = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 15],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1452
    var _BL = new Map([
        ["parts", $a([_B9])],
        ["ex", $a(["392n", "393n"])],
        ["req", $a([$a([$a(["01"])]), $a([$a(["30"]), $a(["31nn"]), $a(["32nn"]), $a(["35nn"]), $a(["36nn"])])])]
    ]); //#1455
    var _BN = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["opt", false],
        ["linters", $a(['lintiso4217'])]
    ]); //#1471
    var _BP = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 15],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1472
    var _BZ = new Map([
        ["parts", $a([_BN, _BP])],
        ["ex", $a(["393n"])],
        ["req", $a([$a([$a(["30"]), $a(["31nn"]), $a(["32nn"]), $a(["35nn"]), $a(["36nn"])])])]
    ]); //#1475
    var _Bb = new Map([
        ["cset", 'N'],
        ["min", 4],
        ["max", 4],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1491
    var _Bh = new Map([
        ["parts", $a([_Bb])],
        ["ex", $a(["394n", "8111"])],
        ["req", $a([$a([$a(["255"])])])]
    ]); //#1494
    var _Bj = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1504
    var _Bt = new Map([
        ["parts", $a([_Bj])],
        ["ex", $a(["392n", "393n", "395n", "8005"])],
        ["req", $a([$a([$a(["30"]), $a(["31nn"]), $a(["32nn"]), $a(["35nn"]), $a(["36nn"])])])]
    ]); //#1507
    var _Bv = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1519
    var _Bx = new Map([
        ["parts", $a([_Bv])]
    ]); //#1519
    var _Bz = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["opt", false],
        ["linters", $a(['lintkey'])]
    ]); //#1527
    var _C2 = new Map([
        ["parts", $a([_Bz])],
        ["dlpkey", $a([])]
    ]); //#1529
    var _C4 = new Map([
        ["cset", 'N'],
        ["min", 17],
        ["max", 17],
        ["opt", false],
        ["linters", $a(['lintcsum', 'lintkey'])]
    ]); //#1536
    var _C7 = new Map([
        ["parts", $a([_C4])],
        ["dlpkey", $a([])]
    ]); //#1538
    var _C9 = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1545
    var _CE = new Map([
        ["parts", $a([_C9])],
        ["req", $a([$a([$a(["00"])])])]
    ]); //#1547
    var _CG = new Map([
        ["cset", 'N'],
        ["min", 13],
        ["max", 13],
        ["opt", false],
        ["linters", $a(['lintcsum', 'lintkey'])]
    ]); //#1554
    var _CI = new Map([
        ["parts", $a([_CG])]
    ]); //#1554
    var _CK = new Map([
        ["cset", 'N'],
        ["min", 13],
        ["max", 13],
        ["opt", false],
        ["linters", $a(['lintcsum', 'lintkey'])]
    ]); //#1565
    var _CP = new Map([
        ["parts", $a([_CK])],
        ["dlpkey", $a([$a(["254"]), $a(["7040"])])]
    ]); //#1567
    var _CR = new Map([
        ["cset", 'N'],
        ["min", 13],
        ["max", 13],
        ["opt", false],
        ["linters", $a(['lintcsum', 'lintkey'])]
    ]); //#1574
    var _CY = new Map([
        ["parts", $a([_CR])],
        ["req", $a([$a([$a(["8020"])])])],
        ["dlpkey", $a([$a(["8020"])])]
    ]); //#1577
    var _Ca = new Map([
        ["cset", 'N'],
        ["min", 13],
        ["max", 13],
        ["opt", false],
        ["linters", $a(['lintcsum', 'lintkey'])]
    ]); //#1584
    var _Cc = new Map([
        ["parts", $a([_Ca])]
    ]); //#1584
    var _Ce = new Map([
        ["cset", 'N'],
        ["min", 13],
        ["max", 13],
        ["opt", false],
        ["linters", $a(['lintcsum', 'lintkey'])]
    ]); //#1592
    var _Ci = new Map([
        ["parts", $a([_Ce])],
        ["dlpkey", $a([$a(["7040"])])]
    ]); //#1594
    var _Ck = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1601
    var _Cn = new Map([
        ["parts", $a([_Ck])],
        ["ex", $a(["421"])]
    ]); //#1603
    var _Cp = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["opt", false],
        ["linters", $a(['lintiso3166'])]
    ]); //#1610
    var _Cr = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 9],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1611
    var _Cu = new Map([
        ["parts", $a([_Cp, _Cr])],
        ["ex", $a(["4307"])]
    ]); //#1613
    var _Cw = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["opt", false],
        ["linters", $a(['lintiso3166'])]
    ]); //#1620
    var _D5 = new Map([
        ["parts", $a([_Cw])],
        ["ex", $a(["426"])],
        ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
    ]); //#1623
    var _D7 = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["opt", false],
        ["linters", $a(['lintiso3166'])]
    ]); //#1630
    var _D9 = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["opt", true],
        ["linters", $a(['lintiso3166'])]
    ]); //#1631
    var _DB = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["opt", true],
        ["linters", $a(['lintiso3166'])]
    ]); //#1632
    var _DD = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["opt", true],
        ["linters", $a(['lintiso3166'])]
    ]); //#1633
    var _DF = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["opt", true],
        ["linters", $a(['lintiso3166'])]
    ]); //#1634
    var _DM = new Map([
        ["parts", $a([_D7, _D9, _DB, _DD, _DF])],
        ["ex", $a(["426"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1637
    var _DO = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["opt", false],
        ["linters", $a(['lintiso3166'])]
    ]); //#1644
    var _DV = new Map([
        ["parts", $a([_DO])],
        ["ex", $a(["426"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1647
    var _DX = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["opt", false],
        ["linters", $a(['lintiso3166'])]
    ]); //#1654
    var _DZ = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["opt", true],
        ["linters", $a(['lintiso3166'])]
    ]); //#1655
    var _Db = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["opt", true],
        ["linters", $a(['lintiso3166'])]
    ]); //#1656
    var _Dd = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["opt", true],
        ["linters", $a(['lintiso3166'])]
    ]); //#1657
    var _Df = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["opt", true],
        ["linters", $a(['lintiso3166'])]
    ]); //#1658
    var _Dm = new Map([
        ["parts", $a([_DX, _DZ, _Db, _Dd, _Df])],
        ["ex", $a(["426"])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1661
    var _Do = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["opt", false],
        ["linters", $a(['lintiso3166'])]
    ]); //#1668
    var _Du = new Map([
        ["parts", $a([_Do])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1670
    var _Dw = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 3],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1677
    var _E4 = new Map([
        ["parts", $a([_Dw])],
        ["req", $a([$a([$a(["01"]), $a(["02"])]), $a([$a(["422"])])])]
    ]); //#1679
    var _E6 = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 35],
        ["opt", false],
        ["linters", $a(['lintpcenc'])]
    ]); //#1686
    var _EB = new Map([
        ["parts", $a([_E6])],
        ["req", $a([$a([$a(["00"])])])]
    ]); //#1688
    var _ED = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 70],
        ["opt", false],
        ["linters", $a(['lintpcenc'])]
    ]); //#1696
    var _EI = new Map([
        ["parts", $a([_ED])],
        ["req", $a([$a([$a(["00"])])])]
    ]); //#1698
    var _EK = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 70],
        ["opt", false],
        ["linters", $a(['lintpcenc'])]
    ]); //#1705
    var _EP = new Map([
        ["parts", $a([_EK])],
        ["req", $a([$a([$a(["4302"])])])]
    ]); //#1707
    var _ER = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 70],
        ["opt", false],
        ["linters", $a(['lintpcenc'])]
    ]); //#1714
    var _EW = new Map([
        ["parts", $a([_ER])],
        ["req", $a([$a([$a(["00"])])])]
    ]); //#1716
    var _EY = new Map([
        ["cset", 'X'],
        ["min", 2],
        ["max", 2],
        ["opt", false],
        ["linters", $a(['lintiso3166alpha2'])]
    ]); //#1725
    var _Ed = new Map([
        ["parts", $a([_EY])],
        ["req", $a([$a([$a(["00"])])])]
    ]); //#1727
    var _Ef = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1734
    var _Ek = new Map([
        ["parts", $a([_Ef])],
        ["req", $a([$a([$a(["00"])])])]
    ]); //#1736
    var _Em = new Map([
        ["cset", 'N'],
        ["min", 10],
        ["max", 10],
        ["opt", false],
        ["linters", $a(['lintlatitude'])]
    ]); //#1743
    var _Eo = new Map([
        ["cset", 'N'],
        ["min", 10],
        ["max", 10],
        ["opt", false],
        ["linters", $a(['lintlongitude'])]
    ]); //#1744
    var _Et = new Map([
        ["parts", $a([_Em, _Eo])],
        ["req", $a([$a([$a(["00"])])])]
    ]); //#1746
    var _Ev = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 35],
        ["opt", false],
        ["linters", $a(['lintpcenc'])]
    ]); //#1753
    var _F0 = new Map([
        ["parts", $a([_Ev])],
        ["req", $a([$a([$a(["00"])])])]
    ]); //#1755
    var _F2 = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 70],
        ["opt", false],
        ["linters", $a(['lintpcenc'])]
    ]); //#1763
    var _F7 = new Map([
        ["parts", $a([_F2])],
        ["req", $a([$a([$a(["00"])])])]
    ]); //#1765
    var _F9 = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 70],
        ["opt", false],
        ["linters", $a(['lintpcenc'])]
    ]); //#1772
    var _FE = new Map([
        ["parts", $a([_F9])],
        ["req", $a([$a([$a(["4312"])])])]
    ]); //#1774
    var _FG = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 70],
        ["opt", false],
        ["linters", $a(['lintpcenc'])]
    ]); //#1781
    var _FL = new Map([
        ["parts", $a([_FG])],
        ["req", $a([$a([$a(["00"])])])]
    ]); //#1783
    var _FN = new Map([
        ["cset", 'X'],
        ["min", 2],
        ["max", 2],
        ["opt", false],
        ["linters", $a(['lintiso3166alpha2'])]
    ]); //#1792
    var _FS = new Map([
        ["parts", $a([_FN])],
        ["req", $a([$a([$a(["00"])])])]
    ]); //#1794
    var _FU = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1801
    var _FZ = new Map([
        ["parts", $a([_FU])],
        ["req", $a([$a([$a(["00"])])])]
    ]); //#1803
    var _Fb = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1810
    var _Fg = new Map([
        ["parts", $a([_Fb])],
        ["req", $a([$a([$a(["00"])])])]
    ]); //#1812
    var _Fi = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 35],
        ["opt", false],
        ["linters", $a(['lintpcenc'])]
    ]); //#1819
    var _Fn = new Map([
        ["parts", $a([_Fi])],
        ["req", $a([$a([$a(["00"])])])]
    ]); //#1821
    var _Fp = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 1],
        ["opt", false],
        ["linters", $a(['lintyesno'])]
    ]); //#1828
    var _Fu = new Map([
        ["parts", $a([_Fp])],
        ["req", $a([$a([$a(["00"])])])]
    ]); //#1830
    var _Fw = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a(['lintyymmd0'])]
    ]); //#1839
    var _Fy = new Map([
        ["cset", 'N'],
        ["min", 4],
        ["max", 4],
        ["opt", false],
        ["linters", $a(['linthhmi'])]
    ]); //#1840
    var _G3 = new Map([
        ["parts", $a([_Fw, _Fy])],
        ["req", $a([$a([$a(["00"])])])]
    ]); //#1842
    var _G5 = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a(['lintyymmdd'])]
    ]); //#1850
    var _GA = new Map([
        ["parts", $a([_G5])],
        ["req", $a([$a([$a(["00"])])])]
    ]); //#1852
    var _GC = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1859
    var _GE = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 1],
        ["opt", true],
        ["linters", $a(['linthyphen'])]
    ]); //#1860
    var _GK = new Map([
        ["parts", $a([_GC, _GE])],
        ["ex", $a(["4331"])],
        ["req", $a([$a([$a(["00"])])])]
    ]); //#1863
    var _GM = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1870
    var _GO = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 1],
        ["opt", true],
        ["linters", $a(['linthyphen'])]
    ]); //#1871
    var _GU = new Map([
        ["parts", $a([_GM, _GO])],
        ["ex", $a(["4330"])],
        ["req", $a([$a([$a(["00"])])])]
    ]); //#1874
    var _GW = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1881
    var _GY = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 1],
        ["opt", true],
        ["linters", $a(['linthyphen'])]
    ]); //#1882
    var _Ge = new Map([
        ["parts", $a([_GW, _GY])],
        ["ex", $a(["4333"])],
        ["req", $a([$a([$a(["00"])])])]
    ]); //#1885
    var _Gg = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1892
    var _Gi = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 1],
        ["opt", true],
        ["linters", $a(['linthyphen'])]
    ]); //#1893
    var _Go = new Map([
        ["parts", $a([_Gg, _Gi])],
        ["ex", $a(["4332"])],
        ["req", $a([$a([$a(["00"])])])]
    ]); //#1896
    var _Gq = new Map([
        ["cset", 'N'],
        ["min", 13],
        ["max", 13],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1903
    var _Gy = new Map([
        ["parts", $a([_Gq])],
        ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
    ]); //#1905
    var _H0 = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1912
    var _H6 = new Map([
        ["parts", $a([_H0])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1914
    var _H8 = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a(['lintyymmdd'])]
    ]); //#1921
    var _HA = new Map([
        ["cset", 'N'],
        ["min", 4],
        ["max", 4],
        ["opt", false],
        ["linters", $a(['linthhmi'])]
    ]); //#1922
    var _HG = new Map([
        ["parts", $a([_H8, _HA])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1924
    var _HI = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 4],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1931
    var _HP = new Map([
        ["parts", $a([_HI])],
        ["req", $a([$a([$a(["01"])]), $a([$a(["10"])])])]
    ]); //#1933
    var _HR = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 12],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1940
    var _HX = new Map([
        ["parts", $a([_HR])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1942
    var _HZ = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a(['lintyymmdd'])]
    ]); //#1949
    var _Hf = new Map([
        ["parts", $a([_HZ])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1951
    var _Hh = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a(['lintyymmdd'])]
    ]); //#1958
    var _Hj = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", true],
        ["linters", $a(['lintyymmdd'])]
    ]); //#1959
    var _Hp = new Map([
        ["parts", $a([_Hh, _Hj])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1961
    var _Hr = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 3],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1968
    var _Hx = new Map([
        ["parts", $a([_Hr])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1970
    var _Hz = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 10],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1977
    var _I5 = new Map([
        ["parts", $a([_Hz])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1979
    var _I7 = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 2],
        ["opt", false],
        ["linters", $a([])]
    ]); //#1986
    var _ID = new Map([
        ["parts", $a([_I7])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1988
    var _IF = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a(['lintyymmdd'])]
    ]); //#1995
    var _IH = new Map([
        ["cset", 'N'],
        ["min", 4],
        ["max", 4],
        ["opt", true],
        ["linters", $a(['linthhmi'])]
    ]); //#1996
    var _IN = new Map([
        ["parts", $a([_IF, _IH])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#1998
    var _IP = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2005
    var _IX = new Map([
        ["parts", $a([_IP])],
        ["req", $a([$a([$a(["01"]), $a(["8006"])]), $a([$a(["416"])])])]
    ]); //#2007
    var _IZ = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2014
    var _If = new Map([
        ["parts", $a([_IZ])],
        ["req", $a([$a([$a(["01"]), $a(["8006"])])])]
    ]); //#2016
    var _Ih = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2023
    var _Im = new Map([
        ["parts", $a([_Ih])],
        ["req", $a([$a([$a(["7021"])])])]
    ]); //#2025
    var _Io = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["opt", false],
        ["linters", $a(['lintkey'])]
    ]); //#2032
    var _Iq = new Map([
        ["parts", $a([_Io])]
    ]); //#2032
    var _Is = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["opt", false],
        ["linters", $a(['lintiso3166999'])]
    ]); //#2040
    var _Iu = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 27],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2041
    var _J0 = new Map([
        ["parts", $a([_Is, _Iu])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#2043
    var _J2 = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 1],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2059
    var _J4 = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 1],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2060
    var _J6 = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 1],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2061
    var _J8 = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 1],
        ["opt", false],
        ["linters", $a(['lintimporteridx'])]
    ]); //#2062
    var _JA = new Map([
        ["parts", $a([_J2, _J4, _J6, _J8])],
        ["dlattr", false]
    ]); //#2064
    var _JC = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 4],
        ["opt", false],
        ["linters", $a(['lintpackagetype'])]
    ]); //#2071
    var _JH = new Map([
        ["parts", $a([_JC])],
        ["req", $a([$a([$a(["00"])])])],
        ["dlattr", false]
    ]); //#2074
    var _JJ = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2081
    var _JO = new Map([
        ["parts", $a([_JJ])],
        ["req", $a([$a([$a(["01"])])])]
    ]); //#2083
    var _JQ = new Map([
        ["cset", 'X'],
        ["min", 2],
        ["max", 2],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2096
    var _JS = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 28],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2097
    var _JY = new Map([
        ["parts", $a([_JQ, _JS])],
        ["req", $a([$a([$a(["01"]), $a(["8004"])])])]
    ]); //#2099
    var _Ja = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2115
    var _Jg = new Map([
        ["parts", $a([_Ja])],
        ["req", $a([$a([$a(["01"]), $a(["8006"])])])]
    ]); //#2117
    var _Ji = new Map([
        ["cset", 'N'],
        ["min", 2],
        ["max", 2],
        ["opt", false],
        ["linters", $a(['lintmediatype'])]
    ]); //#2124
    var _Jo = new Map([
        ["parts", $a([_Ji])],
        ["req", $a([$a([$a(["8017"]), $a(["8018"])])])]
    ]); //#2126
    var _Jq = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 25],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2133
    var _Jw = new Map([
        ["parts", $a([_Jq])],
        ["req", $a([$a([$a(["8017"]), $a(["8018"])])])]
    ]); //#2135
    var _Jy = new Map([
        ["cset", 'N'],
        ["min", 8],
        ["max", 8],
        ["opt", false],
        ["linters", $a(['lintyyyymmdd'])]
    ]); //#2142
    var _K4 = new Map([
        ["parts", $a([_Jy])],
        ["ex", $a(["7251"])],
        ["req", $a([$a([$a(["8018"])])])]
    ]); //#2145
    var _K6 = new Map([
        ["cset", 'N'],
        ["min", 8],
        ["max", 8],
        ["opt", false],
        ["linters", $a(['lintyyyymmdd'])]
    ]); //#2152
    var _K8 = new Map([
        ["cset", 'N'],
        ["min", 4],
        ["max", 4],
        ["opt", false],
        ["linters", $a(['linthhmi'])]
    ]); //#2153
    var _KE = new Map([
        ["parts", $a([_K6, _K8])],
        ["ex", $a(["7250"])],
        ["req", $a([$a([$a(["8018"])])])]
    ]); //#2156
    var _KG = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 1],
        ["opt", false],
        ["linters", $a(['lintiso5218'])]
    ]); //#2163
    var _KL = new Map([
        ["parts", $a([_KG])],
        ["req", $a([$a([$a(["8018"])])])]
    ]); //#2165
    var _KN = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 40],
        ["opt", false],
        ["linters", $a(['lintpcenc'])]
    ]); //#2172
    var _KU = new Map([
        ["parts", $a([_KN])],
        ["ex", $a(["7256", "7259"])],
        ["req", $a([$a([$a(["8017"]), $a(["8018"])])])]
    ]); //#2175
    var _KW = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 10],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2183
    var _Kd = new Map([
        ["parts", $a([_KW])],
        ["ex", $a(["7256", "7259"])],
        ["req", $a([$a([$a(["8017"]), $a(["8018"])])])]
    ]); //#2186
    var _Kf = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 90],
        ["opt", false],
        ["linters", $a(['lintpcenc'])]
    ]); //#2193
    var _Kl = new Map([
        ["parts", $a([_Kf])],
        ["req", $a([$a([$a(["8017"]), $a(["8018"])])])]
    ]); //#2195
    var _Kn = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 70],
        ["opt", false],
        ["linters", $a(['lintpcenc'])]
    ]); //#2202
    var _Ks = new Map([
        ["parts", $a([_Kn])],
        ["req", $a([$a([$a(["8018"])])])]
    ]); //#2204
    var _Ku = new Map([
        ["cset", 'X'],
        ["min", 3],
        ["max", 3],
        ["opt", false],
        ["linters", $a(['lintposinseqslash'])]
    ]); //#2211
    var _Kz = new Map([
        ["parts", $a([_Ku])],
        ["req", $a([$a([$a(["8018", "7259"])])])]
    ]); //#2213
    var _L1 = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 40],
        ["opt", false],
        ["linters", $a(['lintpcenc'])]
    ]); //#2220
    var _L7 = new Map([
        ["parts", $a([_L1])],
        ["ex", $a(["7256"])],
        ["req", $a([$a([$a(["8018"])])])]
    ]); //#2223
    var _L9 = new Map([
        ["cset", 'N'],
        ["min", 4],
        ["max", 4],
        ["opt", false],
        ["linters", $a(['lintnonzero'])]
    ]); //#2230
    var _LB = new Map([
        ["cset", 'N'],
        ["min", 5],
        ["max", 5],
        ["opt", false],
        ["linters", $a(['lintnonzero'])]
    ]); //#2231
    var _LD = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["opt", false],
        ["linters", $a(['lintnonzero'])]
    ]); //#2232
    var _LF = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 1],
        ["opt", false],
        ["linters", $a(['lintwinding'])]
    ]); //#2233
    var _LH = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 1],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2234
    var _LM = new Map([
        ["parts", $a([_L9, _LB, _LD, _LF, _LH])],
        ["req", $a([$a([$a(["01"])])])]
    ]); //#2236
    var _LO = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2243
    var _LQ = new Map([
        ["parts", $a([_LO])]
    ]); //#2243
    var _LS = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 1],
        ["opt", false],
        ["linters", $a(['lintzero'])]
    ]); //#2251
    var _LU = new Map([
        ["cset", 'N'],
        ["min", 13],
        ["max", 13],
        ["opt", false],
        ["linters", $a(['lintcsum', 'lintkey'])]
    ]); //#2252
    var _LW = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 16],
        ["opt", true],
        ["linters", $a([])]
    ]); //#2253
    var _LZ = new Map([
        ["parts", $a([_LS, _LU, _LW])],
        ["dlpkey", $a([])]
    ]); //#2255
    var _Lb = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["opt", false],
        ["linters", $a(['lintkey'])]
    ]); //#2262
    var _Lf = new Map([
        ["parts", $a([_Lb])],
        ["dlpkey", $a([$a(["7040"])])]
    ]); //#2264
    var _Lh = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2271
    var _Ln = new Map([
        ["parts", $a([_Lh])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#2273
    var _Lp = new Map([
        ["cset", 'N'],
        ["min", 14],
        ["max", 14],
        ["opt", false],
        ["linters", $a(['lintcsum'])]
    ]); //#2280
    var _Lr = new Map([
        ["cset", 'N'],
        ["min", 4],
        ["max", 4],
        ["opt", false],
        ["linters", $a(['lintpieceoftotal'])]
    ]); //#2281
    var _Lw = new Map([
        ["parts", $a([_Lp, _Lr])],
        ["ex", $a(["01", "37"])],
        ["dlpkey", $a([$a(["22", "10", "21"])])]
    ]); //#2284
    var _Ly = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 34],
        ["opt", false],
        ["linters", $a(['lintiban'])]
    ]); //#2291
    var _M3 = new Map([
        ["parts", $a([_Ly])],
        ["req", $a([$a([$a(["415"])])])]
    ]); //#2293
    var _M5 = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["opt", false],
        ["linters", $a(['lintyymmdd'])]
    ]); //#2300
    var _M7 = new Map([
        ["cset", 'N'],
        ["min", 2],
        ["max", 2],
        ["opt", false],
        ["linters", $a(['linthh'])]
    ]); //#2301
    var _M9 = new Map([
        ["cset", 'N'],
        ["min", 2],
        ["max", 2],
        ["opt", true],
        ["linters", $a(['lintmi'])]
    ]); //#2302
    var _MB = new Map([
        ["cset", 'N'],
        ["min", 2],
        ["max", 2],
        ["opt", true],
        ["linters", $a(['lintss'])]
    ]); //#2303
    var _MH = new Map([
        ["parts", $a([_M5, _M7, _M9, _MB])],
        ["req", $a([$a([$a(["01"]), $a(["02"])])])]
    ]); //#2305
    var _MJ = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 50],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2312
    var _MP = new Map([
        ["parts", $a([_MJ])],
        ["req", $a([$a([$a(["00"]), $a(["01"])])])]
    ]); //#2314
    var _MR = new Map([
        ["cset", 'Y'],
        ["min", 1],
        ["max", 30],
        ["opt", false],
        ["linters", $a(['lintkey'])]
    ]); //#2321
    var _MV = new Map([
        ["parts", $a([_MR])],
        ["dlpkey", $a([$a(["8011"])])]
    ]); //#2323
    var _MX = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 12],
        ["opt", false],
        ["linters", $a(['lintnozeroprefix'])]
    ]); //#2330
    var _Mc = new Map([
        ["parts", $a([_MX])],
        ["req", $a([$a([$a(["8010"])])])],
        ["dlattr", false]
    ]); //#2333
    var _Me = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2340
    var _Mk = new Map([
        ["parts", $a([_Me])],
        ["req", $a([$a([$a(["01"]), $a(["8006"])])])]
    ]); //#2342
    var _Mm = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 25],
        ["opt", false],
        ["linters", $a(['lintcsumalpha', 'lintkey'])]
    ]); //#2349
    var _Mp = new Map([
        ["parts", $a([_Mm])],
        ["dlpkey", $a([])]
    ]); //#2351
    var _Mr = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 25],
        ["opt", false],
        ["linters", $a(['lintcsumalpha', 'lintkey', 'linthasnondigit'])]
    ]); //#2358
    var _Mw = new Map([
        ["parts", $a([_Mr])],
        ["req", $a([$a([$a(["01"])])])],
        ["dlattr", false]
    ]); //#2361
    var _My = new Map([
        ["cset", 'N'],
        ["min", 18],
        ["max", 18],
        ["opt", false],
        ["linters", $a(['lintcsum', 'lintkey'])]
    ]); //#2368
    var _N3 = new Map([
        ["parts", $a([_My])],
        ["ex", $a(["8018"])],
        ["dlpkey", $a([$a(["8019"])])]
    ]); //#2371
    var _N5 = new Map([
        ["cset", 'N'],
        ["min", 18],
        ["max", 18],
        ["opt", false],
        ["linters", $a(['lintcsum', 'lintkey'])]
    ]); //#2378
    var _NA = new Map([
        ["parts", $a([_N5])],
        ["ex", $a(["8017"])],
        ["dlpkey", $a([$a(["8019"])])]
    ]); //#2381
    var _NC = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 10],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2388
    var _NI = new Map([
        ["parts", $a([_NC])],
        ["req", $a([$a([$a(["8017"]), $a(["8018"])])])],
        ["dlattr", false]
    ]); //#2391
    var _NK = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 25],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2398
    var _NP = new Map([
        ["parts", $a([_NK])],
        ["req", $a([$a([$a(["415"])])])],
        ["dlattr", false]
    ]); //#2401
    var _NR = new Map([
        ["cset", 'N'],
        ["min", 14],
        ["max", 14],
        ["opt", false],
        ["linters", $a(['lintcsum'])]
    ]); //#2408
    var _NT = new Map([
        ["cset", 'N'],
        ["min", 4],
        ["max", 4],
        ["opt", false],
        ["linters", $a(['lintpieceoftotal'])]
    ]); //#2409
    var _NZ = new Map([
        ["parts", $a([_NR, _NT])],
        ["ex", $a(["02", "8006"])],
        ["req", $a([$a([$a(["37"])])])]
    ]); //#2412
    var _Nb = new Map([
        ["cset", 'Z'],
        ["min", 1],
        ["max", 90],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2419
    var _Np = new Map([
        ["parts", $a([_Nb])],
        ["req", $a([$a([$a(["00"]), $a(["01", "21"]), $a(["253"]), $a(["255"]), $a(["8003"]), $a(["8004"]), $a(["8006", "21"]), $a(["8010", "8011"]), $a(["8017"]), $a(["8018"])])])]
    ]); //#2421
    var _Nr = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 70],
        ["opt", false],
        ["linters", $a(['lintcouponcode'])]
    ]); //#2428
    var _Nt = new Map([
        ["parts", $a([_Nr])]
    ]); //#2428
    var _Nv = new Map([
        ["cset", 'N'],
        ["min", 4],
        ["max", 4],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2436
    var _O0 = new Map([
        ["parts", $a([_Nv])],
        ["req", $a([$a([$a(["255"])])])]
    ]); //#2438
    var _O2 = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 70],
        ["opt", false],
        ["linters", $a(['lintcouponposoffer'])]
    ]); //#2445
    var _O4 = new Map([
        ["parts", $a([_O2])]
    ]); //#2445
    var _O6 = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 70],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2453
    var _OB = new Map([
        ["parts", $a([_O6])],
        ["req", $a([$a([$a(["01"])])])],
        ["dlattr", false]
    ]); //#2456
    var _OD = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2463
    var _OF = new Map([
        ["parts", $a([_OD])]
    ]); //#2463
    var _OH = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 90],
        ["opt", false],
        ["linters", $a([])]
    ]); //#2471
    var _OJ = new Map([
        ["parts", $a([_OH])]
    ]); //#2471
    var _OK = new Map([
        ["00", _4],
        ["01", _C],
        ["02", _K],
        ["03", _P],
        ["10", _a],
        ["11", _k],
        ["12", _r],
        ["13", _11],
        ["15", _11],
        ["16", _11],
        ["17", _1C],
        ["20", _1M],
        ["21", _1W],
        ["22", _1d],
        ["235", _1k],
        ["240", _1u],
        ["241", _1u],
        ["242", _25],
        ["243", _2C],
        ["250", _2M],
        ["251", _2U],
        ["253", _2b],
        ["254", _2i],
        ["255", _2q],
        ["30", _2y],
        ["3100", _37],
        ["3101", _37],
        ["3102", _37],
        ["3103", _37],
        ["3104", _37],
        ["3105", _37],
        ["3110", _3G],
        ["3111", _3G],
        ["3112", _3G],
        ["3113", _3G],
        ["3114", _3G],
        ["3115", _3G],
        ["3120", _3P],
        ["3121", _3P],
        ["3122", _3P],
        ["3123", _3P],
        ["3124", _3P],
        ["3125", _3P],
        ["3130", _3Y],
        ["3131", _3Y],
        ["3132", _3Y],
        ["3133", _3Y],
        ["3134", _3Y],
        ["3135", _3Y],
        ["3140", _3h],
        ["3141", _3h],
        ["3142", _3h],
        ["3143", _3h],
        ["3144", _3h],
        ["3145", _3h],
        ["3150", _3q],
        ["3151", _3q],
        ["3152", _3q],
        ["3153", _3q],
        ["3154", _3q],
        ["3155", _3q],
        ["3160", _3z],
        ["3161", _3z],
        ["3162", _3z],
        ["3163", _3z],
        ["3164", _3z],
        ["3165", _3z],
        ["3200", _48],
        ["3201", _48],
        ["3202", _48],
        ["3203", _48],
        ["3204", _48],
        ["3205", _48],
        ["3210", _4H],
        ["3211", _4H],
        ["3212", _4H],
        ["3213", _4H],
        ["3214", _4H],
        ["3215", _4H],
        ["3220", _4Q],
        ["3221", _4Q],
        ["3222", _4Q],
        ["3223", _4Q],
        ["3224", _4Q],
        ["3225", _4Q],
        ["3230", _4Z],
        ["3231", _4Z],
        ["3232", _4Z],
        ["3233", _4Z],
        ["3234", _4Z],
        ["3235", _4Z],
        ["3240", _4i],
        ["3241", _4i],
        ["3242", _4i],
        ["3243", _4i],
        ["3244", _4i],
        ["3245", _4i],
        ["3250", _4r],
        ["3251", _4r],
        ["3252", _4r],
        ["3253", _4r],
        ["3254", _4r],
        ["3255", _4r],
        ["3260", _50],
        ["3261", _50],
        ["3262", _50],
        ["3263", _50],
        ["3264", _50],
        ["3265", _50],
        ["3270", _59],
        ["3271", _59],
        ["3272", _59],
        ["3273", _59],
        ["3274", _59],
        ["3275", _59],
        ["3280", _5I],
        ["3281", _5I],
        ["3282", _5I],
        ["3283", _5I],
        ["3284", _5I],
        ["3285", _5I],
        ["3290", _5R],
        ["3291", _5R],
        ["3292", _5R],
        ["3293", _5R],
        ["3294", _5R],
        ["3295", _5R],
        ["3300", _5a],
        ["3301", _5a],
        ["3302", _5a],
        ["3303", _5a],
        ["3304", _5a],
        ["3305", _5a],
        ["3310", _5j],
        ["3311", _5j],
        ["3312", _5j],
        ["3313", _5j],
        ["3314", _5j],
        ["3315", _5j],
        ["3320", _5s],
        ["3321", _5s],
        ["3322", _5s],
        ["3323", _5s],
        ["3324", _5s],
        ["3325", _5s],
        ["3330", _61],
        ["3331", _61],
        ["3332", _61],
        ["3333", _61],
        ["3334", _61],
        ["3335", _61],
        ["3340", _6A],
        ["3341", _6A],
        ["3342", _6A],
        ["3343", _6A],
        ["3344", _6A],
        ["3345", _6A],
        ["3350", _6J],
        ["3351", _6J],
        ["3352", _6J],
        ["3353", _6J],
        ["3354", _6J],
        ["3355", _6J],
        ["3360", _6S],
        ["3361", _6S],
        ["3362", _6S],
        ["3363", _6S],
        ["3364", _6S],
        ["3365", _6S],
        ["3370", _6a],
        ["3371", _6a],
        ["3372", _6a],
        ["3373", _6a],
        ["3374", _6a],
        ["3375", _6a],
        ["3400", _6j],
        ["3401", _6j],
        ["3402", _6j],
        ["3403", _6j],
        ["3404", _6j],
        ["3405", _6j],
        ["3410", _6s],
        ["3411", _6s],
        ["3412", _6s],
        ["3413", _6s],
        ["3414", _6s],
        ["3415", _6s],
        ["3420", _71],
        ["3421", _71],
        ["3422", _71],
        ["3423", _71],
        ["3424", _71],
        ["3425", _71],
        ["3430", _7A],
        ["3431", _7A],
        ["3432", _7A],
        ["3433", _7A],
        ["3434", _7A],
        ["3435", _7A],
        ["3440", _7J],
        ["3441", _7J],
        ["3442", _7J],
        ["3443", _7J],
        ["3444", _7J],
        ["3445", _7J],
        ["3450", _7S],
        ["3451", _7S],
        ["3452", _7S],
        ["3453", _7S],
        ["3454", _7S],
        ["3455", _7S],
        ["3460", _7b],
        ["3461", _7b],
        ["3462", _7b],
        ["3463", _7b],
        ["3464", _7b],
        ["3465", _7b],
        ["3470", _7k],
        ["3471", _7k],
        ["3472", _7k],
        ["3473", _7k],
        ["3474", _7k],
        ["3475", _7k],
        ["3480", _7t],
        ["3481", _7t],
        ["3482", _7t],
        ["3483", _7t],
        ["3484", _7t],
        ["3485", _7t],
        ["3490", _82],
        ["3491", _82],
        ["3492", _82],
        ["3493", _82],
        ["3494", _82],
        ["3495", _82],
        ["3500", _8B],
        ["3501", _8B],
        ["3502", _8B],
        ["3503", _8B],
        ["3504", _8B],
        ["3505", _8B],
        ["3510", _8K],
        ["3511", _8K],
        ["3512", _8K],
        ["3513", _8K],
        ["3514", _8K],
        ["3515", _8K],
        ["3520", _8T],
        ["3521", _8T],
        ["3522", _8T],
        ["3523", _8T],
        ["3524", _8T],
        ["3525", _8T],
        ["3530", _8c],
        ["3531", _8c],
        ["3532", _8c],
        ["3533", _8c],
        ["3534", _8c],
        ["3535", _8c],
        ["3540", _8l],
        ["3541", _8l],
        ["3542", _8l],
        ["3543", _8l],
        ["3544", _8l],
        ["3545", _8l],
        ["3550", _8u],
        ["3551", _8u],
        ["3552", _8u],
        ["3553", _8u],
        ["3554", _8u],
        ["3555", _8u],
        ["3560", _93],
        ["3561", _93],
        ["3562", _93],
        ["3563", _93],
        ["3564", _93],
        ["3565", _93],
        ["3570", _9C],
        ["3571", _9C],
        ["3572", _9C],
        ["3573", _9C],
        ["3574", _9C],
        ["3575", _9C],
        ["3600", _9L],
        ["3601", _9L],
        ["3602", _9L],
        ["3603", _9L],
        ["3604", _9L],
        ["3605", _9L],
        ["3610", _9U],
        ["3611", _9U],
        ["3612", _9U],
        ["3613", _9U],
        ["3614", _9U],
        ["3615", _9U],
        ["3620", _9d],
        ["3621", _9d],
        ["3622", _9d],
        ["3623", _9d],
        ["3624", _9d],
        ["3625", _9d],
        ["3630", _9m],
        ["3631", _9m],
        ["3632", _9m],
        ["3633", _9m],
        ["3634", _9m],
        ["3635", _9m],
        ["3640", _9v],
        ["3641", _9v],
        ["3642", _9v],
        ["3643", _9v],
        ["3644", _9v],
        ["3645", _9v],
        ["3650", _A4],
        ["3651", _A4],
        ["3652", _A4],
        ["3653", _A4],
        ["3654", _A4],
        ["3655", _A4],
        ["3660", _AD],
        ["3661", _AD],
        ["3662", _AD],
        ["3663", _AD],
        ["3664", _AD],
        ["3665", _AD],
        ["3670", _AM],
        ["3671", _AM],
        ["3672", _AM],
        ["3673", _AM],
        ["3674", _AM],
        ["3675", _AM],
        ["3680", _AV],
        ["3681", _AV],
        ["3682", _AV],
        ["3683", _AV],
        ["3684", _AV],
        ["3685", _AV],
        ["3690", _Ae],
        ["3691", _Ae],
        ["3692", _Ae],
        ["3693", _Ae],
        ["3694", _Ae],
        ["3695", _Ae],
        ["37", _Ao],
        ["3900", _Ax],
        ["3901", _Ax],
        ["3902", _Ax],
        ["3903", _Ax],
        ["3904", _Ax],
        ["3905", _Ax],
        ["3906", _Ax],
        ["3907", _Ax],
        ["3908", _Ax],
        ["3909", _Ax],
        ["3910", _B7],
        ["3911", _B7],
        ["3912", _B7],
        ["3913", _B7],
        ["3914", _B7],
        ["3915", _B7],
        ["3916", _B7],
        ["3917", _B7],
        ["3918", _B7],
        ["3919", _B7],
        ["3920", _BL],
        ["3921", _BL],
        ["3922", _BL],
        ["3923", _BL],
        ["3924", _BL],
        ["3925", _BL],
        ["3926", _BL],
        ["3927", _BL],
        ["3928", _BL],
        ["3929", _BL],
        ["3930", _BZ],
        ["3931", _BZ],
        ["3932", _BZ],
        ["3933", _BZ],
        ["3934", _BZ],
        ["3935", _BZ],
        ["3936", _BZ],
        ["3937", _BZ],
        ["3938", _BZ],
        ["3939", _BZ],
        ["3940", _Bh],
        ["3941", _Bh],
        ["3942", _Bh],
        ["3943", _Bh],
        ["3950", _Bt],
        ["3951", _Bt],
        ["3952", _Bt],
        ["3953", _Bt],
        ["3954", _Bt],
        ["3955", _Bt],
        ["400", _Bx],
        ["401", _C2],
        ["402", _C7],
        ["403", _CE],
        ["410", _CI],
        ["411", _CI],
        ["412", _CI],
        ["413", _CI],
        ["414", _CP],
        ["415", _CY],
        ["416", _Cc],
        ["417", _Ci],
        ["420", _Cn],
        ["421", _Cu],
        ["422", _D5],
        ["423", _DM],
        ["424", _DV],
        ["425", _Dm],
        ["426", _Du],
        ["427", _E4],
        ["4300", _EB],
        ["4301", _EB],
        ["4302", _EI],
        ["4303", _EP],
        ["4304", _EW],
        ["4305", _EW],
        ["4306", _EW],
        ["4307", _Ed],
        ["4308", _Ek],
        ["4309", _Et],
        ["4310", _F0],
        ["4311", _F0],
        ["4312", _F7],
        ["4313", _FE],
        ["4314", _FL],
        ["4315", _FL],
        ["4316", _FL],
        ["4317", _FS],
        ["4318", _FZ],
        ["4319", _Fg],
        ["4320", _Fn],
        ["4321", _Fu],
        ["4322", _Fu],
        ["4323", _Fu],
        ["4324", _G3],
        ["4325", _G3],
        ["4326", _GA],
        ["4330", _GK],
        ["4331", _GU],
        ["4332", _Ge],
        ["4333", _Go],
        ["7001", _Gy],
        ["7002", _H6],
        ["7003", _HG],
        ["7004", _HP],
        ["7005", _HX],
        ["7006", _Hf],
        ["7007", _Hp],
        ["7008", _Hx],
        ["7009", _I5],
        ["7010", _ID],
        ["7011", _IN],
        ["7020", _IX],
        ["7021", _If],
        ["7022", _Im],
        ["7023", _Iq],
        ["7030", _J0],
        ["7031", _J0],
        ["7032", _J0],
        ["7033", _J0],
        ["7034", _J0],
        ["7035", _J0],
        ["7036", _J0],
        ["7037", _J0],
        ["7038", _J0],
        ["7039", _J0],
        ["7040", _JA],
        ["7041", _JH],
        ["710", _JO],
        ["711", _JO],
        ["712", _JO],
        ["713", _JO],
        ["714", _JO],
        ["715", _JO],
        ["716", _JO],
        ["7230", _JY],
        ["7231", _JY],
        ["7232", _JY],
        ["7233", _JY],
        ["7234", _JY],
        ["7235", _JY],
        ["7236", _JY],
        ["7237", _JY],
        ["7238", _JY],
        ["7239", _JY],
        ["7240", _Jg],
        ["7241", _Jo],
        ["7242", _Jw],
        ["7250", _K4],
        ["7251", _KE],
        ["7252", _KL],
        ["7253", _KU],
        ["7254", _KU],
        ["7255", _Kd],
        ["7256", _Kl],
        ["7257", _Ks],
        ["7258", _Kz],
        ["7259", _L7],
        ["8001", _LM],
        ["8002", _LQ],
        ["8003", _LZ],
        ["8004", _Lf],
        ["8005", _Ln],
        ["8006", _Lw],
        ["8007", _M3],
        ["8008", _MH],
        ["8009", _MP],
        ["8010", _MV],
        ["8011", _Mc],
        ["8012", _Mk],
        ["8013", _Mp],
        ["8014", _Mw],
        ["8017", _N3],
        ["8018", _NA],
        ["8019", _NI],
        ["8020", _NP],
        ["8026", _NZ],
        ["8030", _Np],
        ["8110", _Nt],
        ["8111", _O0],
        ["8112", _O4],
        ["8200", _OB],
        ["90", _OF],
        ["91", _OJ],
        ["92", _OJ],
        ["93", _OJ],
        ["94", _OJ],
        ["95", _OJ],
        ["96", _OJ],
        ["97", _OJ],
        ["98", _OJ],
        ["99", _OJ]
    ]); //#2483
    $_.gs1syntax = _OK; //#2485
    if ($eq($k[--$j], 'ai')) { //#2717
        $anchorsearch($k[--$j], "\("); //#2493
        if (!$k[--$j]) { //#2495
            $j--; //#2494
            $k[$j++] = 'bwipp.GS1aiMissingOpenParen#2494'; //#2494
            $k[$j++] = "AIs must start with '\('"; //#2494
            bwipp_raiseerror(); //#2494
        } //#2494
        $k[$j - 1] = Infinity; //#2497
        var _OP = $k[--$j]; //#2497
        var _OQ = $k[--$j]; //#2497
        $k[$j++] = _OP; //#2504
        $k[$j++] = _OQ; //#2504
        for (;;) { //#2504
            var _OR = $k[$j - 1]; //#2498
            if (_OR.length == 0) { //#2498
                $j--; //#2498
                break; //#2498
            } //#2498
            $search($k[--$j], "\)"); //#2499
            if (!$k[--$j]) { //#2501
                $cleartomark(); //#2500
                $k[$j++] = 'bwipp.GS1aiMissingCloseParen#2500'; //#2500
                $k[$j++] = "AIs must end with '\)'"; //#2500
                bwipp_raiseerror(); //#2500
            } //#2500
            var _OU = $k[--$j]; //#2502
            $k[$j - 1] = _OU; //#2502
            var _OW = $k[--$j]; //#2502
            var _OX = $k[--$j]; //#2502
            $k[$j++] = _OW; //#2503
            $search(_OX, "\("); //#2503
            if ($k[--$j]) { //#2503
                var _OZ = $k[--$j]; //#2503
                $k[$j - 1] = _OZ; //#2503
                var _Ob = $k[--$j]; //#2503
                var _Oc = $k[--$j]; //#2503
                $k[$j++] = _Ob; //#2503
                $k[$j++] = _Oc; //#2503
            } else { //#2503
                $k[$j++] = ""; //#2503
            } //#2503
        } //#2503
        var _Od = $counttomark(); //#2505
        $k[$j++] = _Od; //#2505
        if (_Od > 0) { //#2505
            var _Oe = $k[--$j]; //#2505
            for (var _Og = _Oe, _Of = (~~(_Oe / 2)) + 1; _Og >= _Of; _Og -= 1) { //#2505
                $r(_Og, -1); //#2505
            } //#2505
        } else { //#2505
            $j--; //#2505
        } //#2505
        $astore($a(~~($counttomark() / 2))); //#2506
        $_.ais = $k[--$j]; //#2506
        $astore($a($counttomark())); //#2507
        $k[$j++] = Infinity; //#2507
        var _Om = $k[--$j]; //#2507
        var _On = $k[--$j]; //#2507
        $k[$j++] = _Om; //#2509
        $forall(_On, function() { //#2509
            var _Op = new Map([
                ["parse", $_.parse],
                ["parseonly", true],
                ["parsefnc", false]
            ]); //#2508
            $k[$j++] = _Op; //#2508
            bwipp_parseinput(); //#2508
        }); //#2508
        $_.vals = $a(); //#2509
        $j--; //#2510
    } else { //#2717
        $anchorsearch($k[--$j], "http://"); //#2515
        if (!$k[--$j]) { //#2520
            $anchorsearch($k[--$j], "HTTP://"); //#2516
            if (!$k[--$j]) { //#2520
                $anchorsearch($k[--$j], "https://"); //#2517
                if (!$k[--$j]) { //#2520
                    $anchorsearch($k[--$j], "HTTPS://"); //#2518
                    if (!$k[--$j]) { //#2520
                        $j--; //#2519
                        $k[$j++] = 'bwipp.GS1dlURIbadScheme#2519'; //#2519
                        $k[$j++] = "Scheme must be http:// HTTP:// https:// or HTTPS://"; //#2519
                        bwipp_raiseerror(); //#2519
                    } //#2519
                } //#2519
            } //#2519
        } //#2519
        $j--; //#2521
        $search($k[--$j], "/"); //#2524
        if (!$k[--$j]) { //#2526
            $j--; //#2525
            $k[$j++] = 'bwipp.GS1dlMissingDomainOrPathInfo#2525'; //#2525
            $k[$j++] = "URI must contain a domain and path info"; //#2525
            bwipp_raiseerror(); //#2525
        } //#2525
        $j -= 2; //#2527
        $search($k[--$j], "#"); //#2530
        if ($k[--$j]) { //#2532
            var _P3 = $k[--$j]; //#2531
            $k[$j - 1] = _P3; //#2531
            var _P5 = $k[--$j]; //#2531
            $k[$j - 1] = _P5; //#2531
        } //#2531
        $search($k[--$j], "?"); //#2535
        if (!$k[--$j]) { //#2537
            var _P9 = $k[--$j]; //#2536
            $k[$j++] = ""; //#2536
            $k[$j++] = null; //#2536
            $k[$j++] = _P9; //#2536
        } //#2536
        $_.pp = $k[--$j]; //#2538
        $j--; //#2539
        $_.qp = $k[--$j]; //#2540
        $k[$j++] = Infinity; //#2543
        $k[$j++] = 0; //#2547
        $k[$j++] = 0; //#2547
        $k[$j++] = $_.pp; //#2547
        for (;;) { //#2547
            $search($k[--$j], "/"); //#2545
            if (!$k[--$j]) { //#2545
                $j--; //#2545
                break; //#2545
            } //#2545
            var _PF = $k[--$j]; //#2546
            $k[$j - 1] = _PF.length + 1; //#2546
            var _PH = $k[--$j]; //#2546
            var _PI = $k[--$j]; //#2546
            var _PJ = $k[$j - 1]; //#2546
            $k[$j++] = $f(_PH + _PJ); //#2546
            $k[$j++] = _PI; //#2546
        } //#2546
        $astore($a($counttomark() - 1)); //#2548
        $_.pipos = $k[--$j]; //#2548
        $j -= 2; //#2548
        if ($_.pipos.length <= 1) { //#2551
            $k[$j++] = 'bwipp.GS1dlNoAIinfo#2550'; //#2550
            $k[$j++] = "The path was too short to contain AI info"; //#2550
            bwipp_raiseerror(); //#2550
        } //#2550
        $k[$j++] = false; //#2567
        for (var _PP = $_.pipos.length - 2; _PP >= 0; _PP -= 2) { //#2567
            var _PR = $get($_.pipos, _PP); //#2557
            var _PV = $geti($_.pp, _PR, $f($get($_.pipos, _PP + 1) - _PR) - 1); //#2558
            var _PX = $get($_.gs1syntax, _PV) !== undefined; //#2559
            $k[$j++] = _PP; //#2565
            $k[$j++] = _PV; //#2565
            if (_PX) { //#2564
                var _Pb = $get($get($_.gs1syntax, $k[--$j]), 'dlpkey') !== undefined; //#2560
                if (_Pb) { //#2562
                    var _Pc = $k[--$j]; //#2561
                    $k[$j - 1] = _Pc; //#2561
                    $k[$j++] = true; //#2561
                    break; //#2561
                } //#2561
            } else { //#2564
                $j--; //#2564
            } //#2564
            $j--; //#2566
        } //#2566
        if (!$k[--$j]) { //#2570
            $k[$j++] = 'bwipp.GS1dlNoAIinfo#2569'; //#2569
            $k[$j++] = "The path does not contain a valid primary key"; //#2569
            bwipp_raiseerror(); //#2569
        } //#2569
        var _Ph = $get($_.pipos, $k[--$j]); //#2571
        $_.pp = $geti($_.pp, _Ph, $f($_.pp.length - _Ph)); //#2571
        $_.uriunescape = function() {
            $_.qq = $k[--$j]; //#2574
            $_.in = $k[--$j]; //#2575
            $_.out = $s($_.in.length); //#2576
            $k[$j++] = 0; //#2600
            $k[$j++] = 0; //#2600
            for (;;) { //#2600
                var _Pq = $k[$j - 2]; //#2578
                if (_Pq >= $_.in.length) { //#2578
                    break; //#2578
                } //#2578
                var _Pu = $k[$j - 2]; //#2579
                var _Pv = $get($_.in, _Pu); //#2579
                $k[$j++] = _Pv; //#2599
                if ((_Pv == 43) && $_.qq) { //#2598
                    $j--; //#2581
                    var _Py = $k[--$j]; //#2581
                    $put($_.out, _Py, 32); //#2581
                    var _Pz = $k[--$j]; //#2582
                    $k[$j++] = _Pz + 1; //#2582
                    $k[$j++] = _Py + 1; //#2582
                } else { //#2598
                    var _Q0 = $k[$j - 1]; //#2584
                    var _Q2 = $k[$j - 3]; //#2584
                    if ((_Q0 == 37) && (_Q2 < ($_.in.length - 2))) { //#2598
                        $j--; //#2585
                        var _Q6 = $k[$j - 2]; //#2586
                        var _Q7 = $geti($_.in, _Q6 + 1, 2); //#2586
                        $k[$j++] = 0; //#2593
                        for (var _Q8 = 0, _Q9 = _Q7.length; _Q8 < _Q9; _Q8++) { //#2593
                            var _QA = $get(_Q7, _Q8); //#2593
                            $k[$j++] = _QA; //#2591
                            if ((_QA >= 48) && (_QA <= 57)) { //#2590
                                var _QB = $k[--$j]; //#2587
                                $k[$j++] = _QB - 48; //#2587
                            } else { //#2590
                                var _QC = $k[$j - 1]; //#2588
                                if ((_QC >= 65) && (_QC <= 70)) { //#2590
                                    var _QD = $k[--$j]; //#2588
                                    $k[$j++] = _QD - 55; //#2588
                                } else { //#2590
                                    var _QE = $k[$j - 1]; //#2589
                                    if ((_QE >= 97) && (_QE <= 102)) { //#2590
                                        var _QF = $k[--$j]; //#2589
                                        $k[$j++] = _QF - 87; //#2589
                                    } else { //#2590
                                        $j -= 2; //#2590
                                        $k[$j++] = 'bwipp.GS1dlBadHexCharacter#2590'; //#2590
                                        $k[$j++] = "Invalid hex character"; //#2590
                                        bwipp_raiseerror(); //#2590
                                    } //#2590
                                } //#2590
                            } //#2590
                            var _QG = $k[--$j]; //#2592
                            var _QH = $k[--$j]; //#2592
                            $k[$j++] = $f(_QG + (_QH * 16)); //#2592
                        } //#2592
                        var _QJ = $k[--$j]; //#2594
                        var _QK = $k[--$j]; //#2594
                        $put($_.out, _QK, _QJ); //#2594
                        var _QL = $k[--$j]; //#2595
                        $k[$j++] = _QL + 3; //#2595
                        $k[$j++] = _QK + 1; //#2595
                    } else { //#2598
                        var _QN = $k[--$j]; //#2597
                        var _QO = $k[--$j]; //#2597
                        $put($_.out, _QO, _QN); //#2597
                        var _QP = $k[--$j]; //#2598
                        $k[$j++] = _QP + 1; //#2598
                        $k[$j++] = _QO + 1; //#2598
                    } //#2598
                } //#2598
            } //#2598
            $_.out = $geti($_.out, 0, $k[--$j]); //#2601
            $k[$j - 1] = $_.out; //#2603
        }; //#2603
        $_.isvaliddlpkeyseq = function() {
            $_.in = $k[--$j]; //#2607
            $k[$j++] = false; //#2621
            $forall($get($get($_.gs1syntax, $get($_.in, 0)), 'dlpkey'), function() { //#2621
                $_.seq = $k[--$j]; //#2610
                $_.i = 1; //#2611
                $_.j = 0; //#2611
                for (;;) { //#2619
                    if ($_.i >= $_.in.length) { //#2613
                        break; //#2613
                    } //#2613
                    if ($_.j >= $_.seq.length) { //#2614
                        break; //#2614
                    } //#2614
                    if ($eq($get($_.in, $_.i), $get($_.seq, $_.j))) { //#2617
                        $_.i = $_.i + 1; //#2616
                    } //#2616
                    $_.j = $_.j + 1; //#2618
                } //#2618
                if ($_.i == $_.in.length) { //#2620
                    $k[$j - 1] = true; //#2620
                    return true; //#2620
                } //#2620
            }); //#2620
        }; //#2620
        $_.ais = $a(99); //#2624
        $_.vals = $a(99); //#2625
        $k[$j++] = 0; //#2639
        $k[$j++] = $_.pp; //#2639
        for (;;) { //#2639
            $search($k[--$j], "/"); //#2630
            if ($k[--$j]) { //#2636
                var _Qv = $k[--$j]; //#2631
                $j--; //#2631
                var _Qx = $k[--$j]; //#2631
                var _Qy = $k[$j - 1]; //#2631
                $put($_.ais, _Qy, _Qv); //#2631
                $search(_Qx, "/"); //#2633
                if ($k[--$j]) { //#2633
                    var _R0 = $k[--$j]; //#2633
                    $k[$j - 1] = _R0; //#2633
                } else { //#2633
                    var _R2 = $k[--$j]; //#2633
                    $k[$j++] = ""; //#2633
                    $k[$j++] = _R2; //#2633
                } //#2633
                var _R4 = $k[--$j]; //#2634
                var _R6 = $k[$j - 2]; //#2634
                $k[$j++] = $_.vals; //#2634
                $k[$j++] = _R6; //#2634
                $k[$j++] = _R4; //#2634
                $k[$j++] = false; //#2634
                $_.uriunescape(); //#2634
                var _R7 = $k[--$j]; //#2634
                var _R8 = $k[--$j]; //#2634
                $put($k[--$j], _R8, _R7); //#2634
            } else { //#2636
                $j--; //#2636
                break; //#2636
            } //#2636
            var _RA = $k[--$j]; //#2638
            var _RB = $k[--$j]; //#2638
            $k[$j++] = _RB + 1; //#2638
            $k[$j++] = _RA; //#2638
        } //#2638
        var _RC = $k[--$j]; //#2640
        $_.plen = _RC; //#2640
        $k[$j++] = _RC; //#2647
        if (_RC > 1) { //#2647
            $k[$j++] = $geti($_.ais, 0, $_.plen); //#2644
            $_.isvaliddlpkeyseq(); //#2644
            if (!$k[--$j]) { //#2646
                $j--; //#2645
                $k[$j++] = 'bwipp.GS1dlBadPathInfo#2645'; //#2645
                $k[$j++] = "The AIs in the path are not a valid key-qualifier sequence for the key"; //#2645
                bwipp_raiseerror(); //#2645
            } //#2645
        } //#2645
        $k[$j++] = $_.qp; //#2665
        for (;;) { //#2665
            var _RI = $k[$j - 1]; //#2651
            if (_RI.length == 0) { //#2651
                $j--; //#2651
                break; //#2651
            } //#2651
            $search($k[--$j], "&"); //#2652
            if ($k[--$j]) { //#2652
                var _RL = $k[--$j]; //#2652
                $k[$j - 1] = _RL; //#2652
            } else { //#2652
                var _RN = $k[--$j]; //#2652
                $k[$j++] = ""; //#2652
                $k[$j++] = _RN; //#2652
            } //#2652
            $search($k[--$j], "="); //#2653
            if ($k[--$j]) { //#2663
                var _RQ = $k[$j - 1]; //#2654
                $k[$j++] = true; //#2654
                $forall(_RQ, function() { //#2654
                    var _RR = $k[--$j]; //#2654
                    var _RS = $k[--$j]; //#2654
                    $k[$j++] = _RS && ((_RR >= 48) && (_RR <= 57)); //#2654
                }); //#2654
                if ($k[--$j]) { //#2660
                    var _RV = $k[--$j]; //#2655
                    $j--; //#2655
                    var _RX = $k[--$j]; //#2655
                    var _RZ = $k[$j - 2]; //#2655
                    $put($_.ais, _RZ, _RV); //#2655
                    $k[$j++] = $_.vals; //#2657
                    $k[$j++] = _RZ; //#2657
                    $k[$j++] = _RX; //#2657
                    $k[$j++] = true; //#2657
                    $_.uriunescape(); //#2657
                    var _Rb = $k[--$j]; //#2657
                    var _Rc = $k[--$j]; //#2657
                    $put($k[--$j], _Rc, _Rb); //#2657
                    var _Re = $k[--$j]; //#2658
                    var _Rf = $k[--$j]; //#2658
                    $k[$j++] = _Rf + 1; //#2658
                    $k[$j++] = _Re; //#2658
                } else { //#2660
                    $j -= 3; //#2660
                } //#2660
            } else { //#2663
                $j--; //#2663
            } //#2663
        } //#2663
        var _Ri = $k[$j - 1]; //#2668
        var _Rk = $geti($_.ais, $_.plen, $f(_Ri - $_.plen)); //#2668
        for (var _Rl = 0, _Rm = _Rk.length; _Rl < _Rm; _Rl++) { //#2682
            var _Rn = $get(_Rk, _Rl); //#2682
            var _Rp = $get($_.gs1syntax, _Rn) !== undefined; //#2669
            $k[$j++] = _Rn; //#2673
            if (_Rp) { //#2672
                var _Rr = $k[$j - 1]; //#2670
                var _Rs = $get($_.gs1syntax, _Rr); //#2670
                var _Rt = $get(_Rs, 'dlattr') !== undefined; //#2670
                $k[$j++] = _Rs; //#2670
                $k[$j++] = 'dlattr'; //#2670
                if (_Rt) { //#2670
                    var _Ru = $k[--$j]; //#2670
                    var _Rw = $get($k[--$j], _Ru); //#2670
                    $k[$j++] = _Rw; //#2670
                } else { //#2670
                    $j -= 2; //#2670
                    $k[$j++] = true; //#2670
                } //#2670
            } else { //#2672
                $k[$j++] = $_.dontlint; //#2672
            } //#2672
            if (!$k[--$j]) { //#2680
                var _Rz = $k[$j - 1]; //#2675
                var _S0 = _Rz.length; //#2675
                var _S1 = $s(_S0 + 46); //#2675
                $puti(_S1, 0, "AI \("); //#2676
                $puti(_S1, 4, _Rz); //#2677
                $puti(_S1, _S0 + 4, "\) is not a valid GS1 DL URI data attribute"); //#2678
                $k[$j++] = _S1; //#2679
                var _S2 = $k[--$j]; //#2679
                $k[$j - 1] = _S2; //#2679
                var _S4 = $k[--$j]; //#2679
                $k[$j++] = 'bwipp.GS1dlInvalidDataAttribute#2679'; //#2679
                $k[$j++] = _S4; //#2679
                bwipp_raiseerror(); //#2679
            } //#2679
            $j--; //#2681
        } //#2681
        var _S7 = $k[$j - 1]; //#2685
        var _S9 = $geti($_.ais, $_.plen, $f(_S7 - $_.plen)); //#2685
        for (var _SA = 0, _SB = _S9.length; _SA < _SB; _SA++) { //#2700
            $k[$j++] = $get(_S9, _SA); //#2698
            for (var _SE = $_.plen; _SE >= 1; _SE -= 1) { //#2698
                var _SF = $k[$j - 1]; //#2687
                $k[$j++] = _SE; //#2689
                $k[$j++] = _SF; //#2689
                $k[$j++] = Infinity; //#2687
                $aload($geti($_.ais, 0, $_.plen)); //#2688
                $r($counttomark() + 3, -2); //#2689
                var _SK = $k[--$j]; //#2689
                var _SL = $k[--$j]; //#2689
                $k[$j++] = _SK; //#2689
                $r(_SL, 1); //#2689
                var _SM = $a(); //#2689
                $k[$j++] = _SM; //#2690
                $_.isvaliddlpkeyseq(); //#2690
                if ($k[--$j]) { //#2697
                    var _SO = $k[--$j]; //#2691
                    $k[$j - 1] = _SO; //#2691
                    var _SQ = $k[$j - 1]; //#2692
                    var _SR = _SQ.length; //#2692
                    var _SS = $s(_SR + 50); //#2692
                    $puti(_SS, 0, "AI \("); //#2693
                    $puti(_SS, 4, _SQ); //#2694
                    $puti(_SS, _SR + 4, "\) from query params should be in the path info"); //#2695
                    $k[$j++] = _SS; //#2696
                    var _ST = $k[--$j]; //#2696
                    $k[$j - 1] = _ST; //#2696
                    var _SV = $k[--$j]; //#2696
                    $k[$j++] = 'bwipp.GS1dlAttributeMustBeQualifier#2696'; //#2696
                    $k[$j++] = _SV; //#2696
                    bwipp_raiseerror(); //#2696
                } //#2696
            } //#2696
            $j--; //#2699
        } //#2699
        var _SX = $k[--$j]; //#2702
        $_.ais = $geti($_.ais, 0, _SX); //#2702
        $_.vals = $geti($_.vals, 0, _SX); //#2703
        for (var _Sd = 0, _Sc = $_.ais.length - 1; _Sd <= _Sc; _Sd += 1) { //#2718
            $k[$j++] = _Sd; //#2716
            if ($eq($get($_.ais, _Sd), "01")) { //#2716
                var _Sg = $k[$j - 1]; //#2709
                var _Si = $get($_.vals, _Sg); //#2709
                var _Sj = _Si.length; //#2710
                $k[$j++] = _Si; //#2715
                if ((_Sj == 8) || ((_Sj == 12) || (_Sj == 13))) { //#2714
                    var _Sl = $strcpy($s(14), "00000000000000"); //#2711
                    $k[$j++] = _Sl; //#2711
                    $k[$j++] = _Sl; //#2711
                    var _Sm = $k[$j - 3]; //#2711
                    $puti($k[$j - 1], 14 - _Sm.length, _Sm); //#2711
                    var _Sp = $k[$j - 2]; //#2712
                    $j -= 3; //#2711
                    var _Sq = $k[$j - 1]; //#2712
                    $put($_.vals, _Sq, _Sp); //#2712
                } else { //#2714
                    $j--; //#2714
                } //#2714
            } //#2714
            $j--; //#2717
        } //#2717
    } //#2717
    $k[$j++] = Infinity; //#2724
    var _Sr = $a(["00", "01", "02", "03", "04", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "31", "32", "33", "34", "35", "36", "41"]); //#2729
    for (var _Ss = 0, _St = _Sr.length; _Ss < _St; _Ss++) { //#2730
        var _Su = $get(_Sr, _Ss); //#2730
        $k[$j++] = _Su; //#2730
        $k[$j++] = _Su; //#2730
    } //#2730
    $_.aifixed = $d(); //#2730
    $k[$j++] = Infinity; //#2733
    var _Sx = $_.ais; //#2734
    for (var _Sy = 0, _Sz = _Sx.length; _Sy < _Sz; _Sy++) { //#2741
        var _T0 = $get(_Sx, _Sy); //#2741
        $k[$j++] = true; //#2740
        $k[$j++] = _T0; //#2740
        if (_T0.length >= 2) { //#2739
            var _T4 = $get($_.aifixed, $geti($k[--$j], 0, 2)) !== undefined; //#2737
            if (_T4) { //#2737
                $k[$j - 1] = false; //#2737
            } //#2737
        } else { //#2739
            $j--; //#2739
        } //#2739
    } //#2739
    $_.fncs = $a(); //#2739
    $k[$j++] = Infinity; //#2747
    $k[$j++] = 0; //#2749
    for (var _T6 = 0, _T7 = "!\"%&'\(\)*+,-./0123456789:;<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".length; _T6 < _T7; _T6++) { //#2749
        var _T9 = $k[--$j]; //#2749
        $k[$j++] = $get("!\"%&'\(\)*+,-./0123456789:;<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz", _T6); //#2749
        $k[$j++] = _T9; //#2749
        $k[$j++] = _T9 + 1; //#2749
    } //#2749
    $j--; //#2749
    $_.cset82 = $d(); //#2750
    $k[$j++] = Infinity; //#2752
    $k[$j++] = 0; //#2754
    for (var _TB = 0, _TC = "#-/0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".length; _TB < _TC; _TB++) { //#2754
        var _TE = $k[--$j]; //#2754
        $k[$j++] = $get("#-/0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", _TB); //#2754
        $k[$j++] = _TE; //#2754
        $k[$j++] = _TE + 1; //#2754
    } //#2754
    $j--; //#2754
    $_.cset39 = $d(); //#2755
    $k[$j++] = Infinity; //#2757
    $k[$j++] = 0; //#2759
    for (var _TG = 0, _TH = "23456789ABCDEFGHJKLMNPQRSTUVWXYZ".length; _TG < _TH; _TG++) { //#2759
        var _TJ = $k[--$j]; //#2759
        $k[$j++] = $get("23456789ABCDEFGHJKLMNPQRSTUVWXYZ", _TG); //#2759
        $k[$j++] = _TJ; //#2759
        $k[$j++] = _TJ + 1; //#2759
    } //#2759
    $j--; //#2759
    $_.cset32 = $d(); //#2760
    $k[$j++] = Infinity; //#2762
    $k[$j++] = 0; //#2764
    for (var _TL = 0, _TM = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".length; _TL < _TM; _TL++) { //#2764
        var _TO = $k[--$j]; //#2764
        $k[$j++] = $get("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", _TL); //#2764
        $k[$j++] = _TO; //#2764
        $k[$j++] = _TO + 1; //#2764
    } //#2764
    $j--; //#2764
    $_.cset64 = $d(); //#2765
    $_.lintnumeric = function() {
        var _TR = $k[--$j]; //#2769
        $k[$j++] = true; //#2769
        $forall(_TR, function() { //#2769
            var _TS = $k[--$j]; //#2769
            if ((_TS < 48) || (_TS > 57)) { //#2769
                $k[$j - 1] = false; //#2769
                return true; //#2769
            } //#2769
        }); //#2769
        if (!$k[--$j]) { //#2770
            $j--; //#2770
            $k[$j++] = 'bwipp.GS1notNumeric#2770'; //#2770
            $k[$j++] = "Not numeric"; //#2770
            $k[$j++] = false; //#2770
            return true; //#2770
        } //#2770
    }; //#2770
    $_.lintcset82 = function() {
        var _TU = $k[--$j]; //#2774
        $k[$j++] = true; //#2774
        $forall(_TU, function() { //#2774
            var _TX = $get($_.cset82, $k[--$j]) !== undefined; //#2774
            if (!_TX) { //#2774
                $k[$j - 1] = false; //#2774
                return true; //#2774
            } //#2774
        }); //#2774
        if (!$k[--$j]) { //#2775
            $j--; //#2775
            $k[$j++] = 'bwipp.GS1badCSET82character#2775'; //#2775
            $k[$j++] = "Invalid CSET 82 character"; //#2775
            $k[$j++] = false; //#2775
            return true; //#2775
        } //#2775
    }; //#2775
    $_.lintcset39 = function() {
        var _TZ = $k[--$j]; //#2779
        $k[$j++] = true; //#2779
        $forall(_TZ, function() { //#2779
            var _Tc = $get($_.cset39, $k[--$j]) !== undefined; //#2779
            if (!_Tc) { //#2779
                $k[$j - 1] = false; //#2779
                return true; //#2779
            } //#2779
        }); //#2779
        if (!$k[--$j]) { //#2780
            $j--; //#2780
            $k[$j++] = 'bwipp.GS1badCSET39character#2780'; //#2780
            $k[$j++] = "Invalid CSET 39 character"; //#2780
            $k[$j++] = false; //#2780
            return true; //#2780
        } //#2780
    }; //#2780
    $_.lintcset64 = function() {
        var _Te = $k[--$j]; //#2785
        $k[$j++] = true; //#2785
        $forall(_Te, function() { //#2785
            var _Tf = $k[--$j]; //#2785
            var _Th = $get($_.cset64, _Tf) !== undefined; //#2785
            if ((!_Th) && (_Tf != 61)) { //#2785
                $k[$j - 1] = false; //#2785
                return true; //#2785
            } //#2785
        }); //#2785
        if (!$k[--$j]) { //#2786
            $j--; //#2786
            $k[$j++] = 'bwipp.GS1badCSET64character#2786'; //#2786
            $k[$j++] = "Invalid CSET 64 character"; //#2786
            $k[$j++] = false; //#2786
            return true; //#2786
        } //#2786
    }; //#2786
    $_.lintkey = function() {
        var _Tj = $k[$j - 1]; //#2790
        if (_Tj.length < 2) { //#2790
            $j -= 2; //#2790
            $k[$j++] = 'bwipp.GS1keyTooShort#2790'; //#2790
            $k[$j++] = "Key is too short"; //#2790
            $k[$j++] = false; //#2790
            return true; //#2790
        } //#2790
        var _Tk = $k[--$j]; //#2791
        var _Tl = $get(_Tk, 0); //#2791
        var _Tm = $get(_Tk, 1); //#2792
        if (((_Tl < 48) || (_Tl > 57)) || ((_Tm < 48) || (_Tm > 57))) { //#2794
            $j--; //#2793
            $k[$j++] = 'bwipp.GS1badGCP#2793'; //#2793
            $k[$j++] = "Non-numeric company prefix"; //#2793
            $k[$j++] = false; //#2793
            return true; //#2793
        } //#2793
    }; //#2793
    $_.lintkeyoff1 = function() {
        var _Tn = $k[$j - 1]; //#2798
        if (_Tn.length < 1) { //#2798
            $j -= 2; //#2798
            $k[$j++] = 'bwipp.GS1valueTooShortForOffsetKey#2798'; //#2798
            $k[$j++] = "Value is too short for an offset key"; //#2798
            $k[$j++] = false; //#2798
            return true; //#2798
        } //#2798
        var _To = $k[--$j]; //#2799
        $k[$j++] = $geti(_To, 1, _To.length - 1); //#2799
        $_.lintkey(); //#2799
    }; //#2799
    $_.lintimporteridx = function() {
        $search("-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz", $k[--$j]); //#2804
        if (!$k[--$j]) { //#2804
            $j -= 2; //#2804
            $k[$j++] = 'bwipp.GS1badImporterIndex#2804'; //#2804
            $k[$j++] = "Invalid importer index"; //#2804
            $k[$j++] = false; //#2804
            return true; //#2804
        } //#2804
        $j -= 3; //#2805
    }; //#2805
    $_.lintcsum = function() {
        $k[$j++] = Infinity; //#2809
        var _Ts = $k[--$j]; //#2809
        var _Tt = $k[--$j]; //#2809
        var _Tu = ((_Tt.length % 2) == 0) ? 3 : 1; //#2810
        $k[$j++] = _Ts; //#2811
        $k[$j++] = _Tu; //#2811
        $forall(_Tt, function() { //#2811
            var _Tv = $k[--$j]; //#2811
            var _Tw = $k[--$j]; //#2811
            $k[$j++] = (_Tv - 48) * _Tw; //#2811
            $k[$j++] = 4 - _Tw; //#2811
        }); //#2811
        $j--; //#2811
        var _Tx = $counttomark() + 1; //#2812
        $k[$j++] = 0; //#2812
        for (var _Ty = 0, _Tz = _Tx - 1; _Ty < _Tz; _Ty++) { //#2812
            var _U0 = $k[--$j]; //#2812
            var _U1 = $k[--$j]; //#2812
            $k[$j++] = $f(_U1 + _U0); //#2812
        } //#2812
        var _U2 = $k[--$j]; //#2812
        $k[$j - 1] = _U2; //#2812
        if (($k[--$j] % 10) != 0) { //#2813
            $j--; //#2813
            $k[$j++] = 'bwipp.GS1badChecksum#2813'; //#2813
            $k[$j++] = "Bad checksum"; //#2813
            $k[$j++] = false; //#2813
            return true; //#2813
        } //#2813
    }; //#2813
    $_.lintcsumalpha = function() {
        var _U5 = $k[$j - 1]; //#2817
        if (_U5.length < 2) { //#2817
            $j -= 2; //#2817
            $k[$j++] = 'bwipp.GS1alphaTooShort#2817'; //#2817
            $k[$j++] = "Alphanumeric string is too short to check"; //#2817
            $k[$j++] = false; //#2817
            return true; //#2817
        } //#2817
        var _U6 = $k[$j - 1]; //#2818
        $k[$j++] = _U6.length - 2; //#2820
        var _U8 = Infinity; //#2820
        var _U9 = $geti(_U6, 0, _U6.length - 2); //#2820
        $k[$j++] = _U8; //#2822
        $forall(_U9, function() { //#2822
            var _UA = $k[$j - 1]; //#2821
            var _UC = $get($_.cset82, _UA) !== undefined; //#2821
            if (_UC) { //#2821
                var _UF = $get($_.cset82, $k[--$j]); //#2821
                $k[$j++] = _UF; //#2821
            } else { //#2821
                $k[$j++] = -1; //#2821
                return true; //#2821
            } //#2821
        }); //#2821
        var _UG = $k[$j - 1]; //#2823
        if (_UG == -1) { //#2823
            $cleartomark(); //#2823
            $j -= 3; //#2823
            $k[$j++] = 'bwipp.GS1UnknownCSET82Character#2823'; //#2823
            $k[$j++] = "Unknown CSET 82 character"; //#2823
            $k[$j++] = false; //#2823
            return true; //#2823
        } //#2823
        $astore($a($counttomark())); //#2824
        var _UJ = $k[--$j]; //#2824
        $k[$j - 1] = _UJ; //#2824
        var _UL = $k[$j - 2]; //#2826
        var _UN = $geti($k[$j - 3], _UL, 2); //#2826
        $k[$j - 3] = $k[$j - 1]; //#2825
        $j -= 2; //#2825
        var _UO = Infinity; //#2826
        var _UP = _UN; //#2826
        $k[$j++] = _UO; //#2828
        $forall(_UP, function() { //#2828
            var _UQ = $k[$j - 1]; //#2827
            var _US = $get($_.cset32, _UQ) !== undefined; //#2827
            if (_US) { //#2827
                var _UV = $get($_.cset32, $k[--$j]); //#2827
                $k[$j++] = _UV; //#2827
            } else { //#2827
                $k[$j++] = -1; //#2827
                return true; //#2827
            } //#2827
        }); //#2827
        var _UW = $k[$j - 1]; //#2829
        if (_UW == -1) { //#2829
            $cleartomark(); //#2829
            $j -= 2; //#2829
            $k[$j++] = 'bwipp.GS1UnknownCSET32Character#2829'; //#2829
            $k[$j++] = "Unknown CSET 32 character"; //#2829
            $k[$j++] = false; //#2829
            return true; //#2829
        } //#2829
        $astore($a($counttomark())); //#2830
        var _UZ = $k[--$j]; //#2830
        $k[$j - 1] = _UZ; //#2830
        var _Ub = $k[--$j]; //#2831
        var _Ue = $k[--$j]; //#2831
        var _Uf = $a([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83]); //#2832
        var _Ug = _Ue.length; //#2834
        $k[$j++] = $f(($get(_Ub, 0) << 5) + $get(_Ub, 1)); //#2834
        $k[$j++] = _Ue; //#2834
        $k[$j++] = _Uf; //#2834
        $k[$j++] = _Ug; //#2834
        if (_Ug > _Uf.length) { //#2834
            $j -= 5; //#2834
            $k[$j++] = 'bwipp.GS1alphaTooLong#2834'; //#2834
            $k[$j++] = "Alphanumeric string is too long to check"; //#2834
            $k[$j++] = false; //#2834
            return true; //#2834
        } //#2834
        var _Uh = $k[--$j]; //#2835
        var _Uj = $geti($k[--$j], 0, _Uh); //#2835
        for (var _Uk = 0, _Ul = _Uj.length; _Uk < _Ul; _Uk++) { //#2835
            var _Un = $k[--$j]; //#2835
            $k[$j++] = $get(_Uj, _Uk); //#2835
            $k[$j++] = _Un; //#2835
        } //#2835
        var _Uo = $k[--$j]; //#2836
        $k[$j++] = 0; //#2836
        $forall(_Uo, function() { //#2836
            var _Up = $k[$j - 3]; //#2836
            var _Uq = $k[$j - 1]; //#2836
            var _Ur = $k[$j - 2]; //#2836
            $j -= 3; //#2836
            $k[$j++] = $f(_Ur + (_Up * _Uq)); //#2836
        }); //#2836
        var _Us = $k[--$j]; //#2836
        if ($k[--$j] != (_Us % 1021)) { //#2837
            $j--; //#2837
            $k[$j++] = 'bwipp.GS1badAlphaCheckCharacters#2837'; //#2837
            $k[$j++] = "Bad alphanumeric check characters"; //#2837
            $k[$j++] = false; //#2837
            return true; //#2837
        } //#2837
    }; //#2837
    $k[$j++] = Infinity; //#2841
    var _Uu = $a(['004', '008', '010', '012', '016', '020', '024', '028', '031', '032', '036', '040', '044', '048', '050', '051', '052', '056', '060', '064', '068', '070', '072', '074', '076', '084', '086', '090', '092', '096', '100', '104', '108', '112', '116', '120', '124', '132', '136', '140', '144', '148', '152', '156', '158', '162', '166', '170', '174', '175', '178', '180', '184', '188', '191', '192', '196', '203', '204', '208', '212', '214', '218', '222', '226', '231', '232', '233', '234', '238', '239', '242', '246', '248', '250', '254', '258', '260', '262', '266', '268', '270', '275', '276', '288', '292', '296', '300', '304', '308', '312', '316', '320', '324', '328', '332', '334', '336', '340', '344', '348', '352', '356', '360', '364', '368', '372', '376', '380', '384', '388', '392', '398', '400', '404', '408', '410', '414', '417', '418', '422', '426', '428', '430', '434', '438', '440', '442', '446', '450', '454', '458', '462', '466', '470', '474', '478', '480', '484', '492', '496', '498', '499', '500', '504', '508', '512', '516', '520', '524', '528', '531', '533', '534', '535', '540', '548', '554', '558', '562', '566', '570', '574', '578', '580', '581', '583', '584', '585', '586', '591', '598', '600', '604', '608', '612', '616', '620', '624', '626', '630', '634', '638', '642', '643', '646', '652', '654', '659', '660', '662', '663', '666', '670', '674', '678', '682', '686', '688', '690', '694', '702', '703', '704', '705', '706', '710', '716', '724', '728', '729', '732', '740', '744', '748', '752', '756', '760', '762', '764', '768', '772', '776', '780', '784', '788', '792', '795', '796', '798', '800', '804', '807', '818', '826', '831', '832', '833', '834', '840', '850', '854', '858', '860', '862', '876', '882', '887', '894']); //#2859
    for (var _Uv = 0, _Uw = _Uu.length; _Uv < _Uw; _Uv++) { //#2860
        var _Ux = $get(_Uu, _Uv); //#2860
        $k[$j++] = _Ux; //#2860
        $k[$j++] = _Ux; //#2860
    } //#2860
    $_.iso3166 = $d(); //#2860
    $_.lintiso3166 = function() {
        var _V2 = $get($_.iso3166, $k[--$j]) !== undefined; //#2864
        if (!_V2) { //#2864
            $j--; //#2864
            $k[$j++] = 'bwipp.GS1UnknownCountry#2864'; //#2864
            $k[$j++] = "Unknown country code"; //#2864
            $k[$j++] = false; //#2864
            return true; //#2864
        } //#2864
    }; //#2864
    $_.lintiso3166999 = function() {
        var _V3 = $k[$j - 1]; //#2868
        if ($ne(_V3, '999')) { //#2871
            var _V6 = $get($_.iso3166, $k[--$j]) !== undefined; //#2869
            if (!_V6) { //#2869
                $j--; //#2869
                $k[$j++] = 'bwipp.GS1UnknownCountryOr999#2869'; //#2869
                $k[$j++] = "Unknown country code or not 999"; //#2869
                $k[$j++] = false; //#2869
                return true; //#2869
            } //#2869
        } else { //#2871
            $j--; //#2871
        } //#2871
    }; //#2871
    $k[$j++] = Infinity; //#2876
    var _V7 = $a(['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'BQ', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ', 'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'SS', 'ST', 'SV', 'SX', 'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'YE', 'YT', 'ZA', 'ZM', 'ZW']); //#2900
    for (var _V8 = 0, _V9 = _V7.length; _V8 < _V9; _V8++) { //#2901
        var _VA = $get(_V7, _V8); //#2901
        $k[$j++] = _VA; //#2901
        $k[$j++] = _VA; //#2901
    } //#2901
    $_.iso3166alpha2 = $d(); //#2901
    $_.lintiso3166alpha2 = function() {
        var _VF = $get($_.iso3166alpha2, $k[--$j]) !== undefined; //#2905
        if (!_VF) { //#2905
            $j--; //#2905
            $k[$j++] = 'bwipp.GS1UnknownCountryAlpha#2905'; //#2905
            $k[$j++] = "Unknown country alpha code"; //#2905
            $k[$j++] = false; //#2905
            return true; //#2905
        } //#2905
    }; //#2905
    $k[$j++] = Infinity; //#2909
    var _VG = $a(['008', '012', '032', '036', '044', '048', '050', '051', '052', '060', '064', '068', '072', '084', '090', '096', '104', '108', '116', '124', '132', '136', '144', '152', '156', '170', '174', '188', '191', '192', '203', '208', '214', '222', '230', '232', '238', '242', '262', '270', '292', '320', '324', '328', '332', '340', '344', '348', '352', '356', '360', '364', '368', '376', '388', '392', '398', '400', '404', '408', '410', '414', '417', '418', '422', '426', '430', '434', '446', '454', '458', '462', '480', '484', '496', '498', '504', '512', '516', '524', '532', '533', '548', '554', '558', '566', '578', '586', '590', '598', '600', '604', '608', '634', '643', '646', '654', '682', '690', '694', '702', '704', '706', '710', '728', '748', '752', '756', '760', '764', '776', '780', '784', '788', '800', '807', '818', '826', '834', '840', '858', '860', '882', '886', '901', '925', '927', '928', '929', '930', '931', '932', '933', '934', '936', '938', '940', '941', '943', '944', '946', '947', '948', '949', '950', '951', '952', '953', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '967', '968', '969', '970', '971', '972', '973', '975', '976', '977', '978', '979', '980', '981', '984', '985', '986', '990', '994', '997', '999']); //#2931
    for (var _VH = 0, _VI = _VG.length; _VH < _VI; _VH++) { //#2932
        var _VJ = $get(_VG, _VH); //#2932
        $k[$j++] = _VJ; //#2932
        $k[$j++] = _VJ; //#2932
    } //#2932
    $_.iso4217 = $d(); //#2932
    $_.lintiso4217 = function() {
        var _VO = $get($_.iso4217, $k[--$j]) !== undefined; //#2936
        if (!_VO) { //#2936
            $j--; //#2936
            $k[$j++] = 'bwipp.GS1UnknownCurrency#2936'; //#2936
            $k[$j++] = "Unknown currency code"; //#2936
            $k[$j++] = false; //#2936
            return true; //#2936
        } //#2936
    }; //#2936
    $_.lintiso5218 = function() {
        var _VP = $k[--$j]; //#2940
        if ($ne(_VP, "0") && ($ne(_VP, "1") && ($ne(_VP, "2") && $ne(_VP, "9")))) { //#2942
            $j--; //#2941
            $k[$j++] = 'bwipp.GS1biologicalSexCode#2941'; //#2941
            $k[$j++] = "Invalid biological sex code"; //#2941
            $k[$j++] = false; //#2941
            return true; //#2941
        } //#2941
    }; //#2941
    $_.lintiban = function() {
        var _VQ = $k[$j - 1]; //#2946
        if (_VQ.length <= 4) { //#2946
            $j -= 2; //#2946
            $k[$j++] = 'bwipp.GS1tooShort#2946'; //#2946
            $k[$j++] = "IBAN too short"; //#2946
            $k[$j++] = false; //#2946
            return true; //#2946
        } //#2946
        var _VR = $k[$j - 1]; //#2947
        $k[$j++] = true; //#2952
        $forall(_VR, function() { //#2952
            var _VS = $s(1); //#2948
            $k[$j++] = _VS; //#2948
            $k[$j++] = _VS; //#2948
            $k[$j++] = 0; //#2948
            $r(4, -1); //#2948
            var _VT = $k[--$j]; //#2948
            var _VU = $k[--$j]; //#2948
            $put($k[--$j], _VU, _VT); //#2948
            $search("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", $k[--$j]); //#2950
            if (!$k[--$j]) { //#2950
                $j -= 2; //#2950
                $k[$j++] = false; //#2950
                return true; //#2950
            } //#2950
            $j -= 3; //#2951
        }); //#2951
        if (!$k[--$j]) { //#2953
            $j--; //#2953
            $k[$j++] = 'bwipp.GS1badIBANcharacter#2953'; //#2953
            $k[$j++] = "Invalid IBAN character"; //#2953
            $k[$j++] = false; //#2953
            return true; //#2953
        } //#2953
        var _VZ = $k[$j - 1]; //#2954
        var _Va = Infinity; //#2954
        var _Vb = _VZ; //#2954
        $k[$j++] = _Va; //#2954
        var _Vc = Infinity; //#2954
        var _Vd = _Vb; //#2954
        $k[$j++] = _Vc; //#2954
        $forall(_Vd); //#2954
        $r($counttomark(), -4); //#2954
        $astore($a($counttomark())); //#2954
        var _Vh = $k[--$j]; //#2954
        $k[$j - 1] = _Vh; //#2954
        $forall($k[--$j], function() { //#2956
            var _Vl = $k[--$j] - 48; //#2955
            $k[$j++] = _Vl; //#2955
            if (_Vl > 9) { //#2955
                var _Vn = $k[--$j] - 7; //#2955
                $k[$j++] = ~~(_Vn / 10); //#2955
                $k[$j++] = _Vn % 10; //#2955
            } //#2955
        }); //#2955
        $astore($a($counttomark())); //#2956
        var _Vq = $k[--$j]; //#2956
        $k[$j - 1] = _Vq; //#2956
        var _Vs = $k[--$j]; //#2957
        $k[$j++] = 0; //#2957
        $forall(_Vs, function() { //#2957
            var _Vt = $k[--$j]; //#2957
            var _Vu = $k[--$j]; //#2957
            $k[$j++] = ($f(_Vt + (_Vu * 10))) % 97; //#2957
        }); //#2957
        if ($k[--$j] != 1) { //#2958
            $j -= 2; //#2958
            $k[$j++] = 'bwipp.GS1badIBANchecksum#2958'; //#2958
            $k[$j++] = "IBAN checksum incorrect"; //#2958
            $k[$j++] = false; //#2958
            return true; //#2958
        } //#2958
        var _Vx = $geti($k[--$j], 0, 2); //#2959
        $k[$j++] = _Vx; //#2959
        $_.lintiso3166alpha2(); //#2959
    }; //#2959
    $_.lintzero = function() {
        if ($ne($k[--$j], "0")) { //#2963
            $j--; //#2963
            $k[$j++] = 'bwipp.GS1zeroRequired#2963'; //#2963
            $k[$j++] = "Zero is required"; //#2963
            $k[$j++] = false; //#2963
            return true; //#2963
        } //#2963
    }; //#2963
    $_.lintnonzero = function() {
        var _Vz = $k[--$j]; //#2967
        $k[$j++] = false; //#2967
        $forall(_Vz, function() { //#2967
            if ($k[--$j] != 48) { //#2967
                $k[$j - 1] = true; //#2967
            } //#2967
        }); //#2967
        if (!$k[--$j]) { //#2968
            $j--; //#2968
            $k[$j++] = 'bwipp.GS1zeroNotPermitted#2968'; //#2968
            $k[$j++] = "Zero not permitted"; //#2968
            $k[$j++] = false; //#2968
            return true; //#2968
        } //#2968
    }; //#2968
    $_.lintnozeroprefix = function() {
        var _W2 = $k[--$j]; //#2972
        if ((_W2.length > 1) && ($get(_W2, 0) == 48)) { //#2974
            $j--; //#2973
            $k[$j++] = 'bwipp.GS1badZeroPrefix#2973'; //#2973
            $k[$j++] = "Zero prefix is not permitted"; //#2973
            $k[$j++] = false; //#2973
            return true; //#2973
        } //#2973
    }; //#2973
    $_.linthasnondigit = function() {
        var _W4 = $k[--$j]; //#2978
        $k[$j++] = false; //#2978
        $forall(_W4, function() { //#2978
            var _W5 = $k[--$j]; //#2978
            if ((_W5 < 48) || (_W5 > 57)) { //#2978
                $k[$j - 1] = true; //#2978
                return true; //#2978
            } //#2978
        }); //#2978
        if (!$k[--$j]) { //#2979
            $k[$j++] = 'bwipp.GS1requiresNonDigit#2979'; //#2979
            $k[$j++] = "A non-digit character is required"; //#2979
            $k[$j++] = false; //#2979
            return true; //#2979
        } //#2979
    }; //#2979
    $_.linthyphen = function() {
        if ($ne($k[--$j], "-")) { //#2983
            $j--; //#2983
            $k[$j++] = 'bwipp.GS1hyphenRequired#2983'; //#2983
            $k[$j++] = "A hyphen is required"; //#2983
            $k[$j++] = false; //#2983
            return true; //#2983
        } //#2983
    }; //#2983
    $_.lintyyyymmd0 = function() {
        var _W8 = $k[$j - 1]; //#2987
        var _WA = $cvi($geti(_W8, 4, 2)); //#2987
        if ((_WA < 1) || (_WA > 12)) { //#2987
            $j--; //#2987
            $k[$j++] = 'bwipp.GS1badMonth#2987'; //#2987
            $k[$j++] = "Invalid month"; //#2987
            $k[$j++] = false; //#2987
            return true; //#2987
        } //#2987
        var _WB = $k[$j - 1]; //#2988
        var _WD = $cvi($geti(_WB, 0, 4)); //#2988
        $k[$j++] = ((_WD % 400) == 0) || (((_WD % 4) == 0) && ((_WD % 100) != 0)); //#2989
        $k[$j++] = Infinity; //#2989
        $k[$j++] = 31; //#2989
        $r(3, -1); //#2989
        var _WF = $k[--$j] ? 29 : 28; //#2989
        $k[$j++] = _WF; //#2989
        $k[$j++] = 31; //#2989
        $k[$j++] = 30; //#2989
        $k[$j++] = 31; //#2989
        $k[$j++] = 30; //#2989
        $k[$j++] = 31; //#2989
        $k[$j++] = 31; //#2989
        $k[$j++] = 30; //#2989
        $k[$j++] = 31; //#2989
        $k[$j++] = 30; //#2989
        $k[$j++] = 31; //#2989
        var _WG = $a(); //#2989
        var _WH = $k[--$j]; //#2990
        if ($get(_WG, $cvi($geti(_WH, 4, 2)) - 1) < $cvi($geti(_WH, 6, 2))) { //#2991
            $j--; //#2991
            $k[$j++] = 'bwipp.GS1badDay#2991'; //#2991
            $k[$j++] = "Invalid day of month"; //#2991
            $k[$j++] = false; //#2991
            return true; //#2991
        } //#2991
    }; //#2991
    $_.lintyyyymmdd = function() {
        var _WL = $k[$j - 1]; //#2995
        if (_WL.length != 8) { //#2995
            $j--; //#2995
            $k[$j++] = 'bwipp.GS1badDateLength#2995'; //#2995
            $k[$j++] = "Invalid length for yyyymmdd date"; //#2995
            $k[$j++] = false; //#2995
            return true; //#2995
        } //#2995
        var _WM = $k[$j - 1]; //#2996
        if ($cvi($geti(_WM, 6, 2)) < 1) { //#2996
            $j--; //#2996
            $k[$j++] = 'bwipp.GS1badDay#2996'; //#2996
            $k[$j++] = "Invalid day of month"; //#2996
            $k[$j++] = false; //#2996
            return true; //#2996
        } //#2996
        $_.lintyyyymmd0(); //#2997
    }; //#2997
    $_.lintyymmd0 = function() {
        var _WO = $k[$j - 1]; //#3001
        var _WQ = $cvi($geti(_WO, 0, 2)); //#3001
        var _WR = _WQ - 21; //#3002
        $k[$j++] = _WQ; //#3002
        $k[$j++] = _WR; //#3002
        if (_WR >= 51) { //#3002
            $k[$j - 1] = "19"; //#3002
        } else { //#3002
            if ($k[--$j] <= -50) { //#3002
                $k[$j++] = "21"; //#3002
            } else { //#3002
                $k[$j++] = "20"; //#3002
            } //#3002
        } //#3002
        var _WT = $k[--$j]; //#3002
        $k[$j - 1] = _WT; //#3002
        var _WV = $s(8); //#3003
        $k[$j++] = _WV; //#3003
        $k[$j++] = _WV; //#3003
        $k[$j++] = 0; //#3003
        $r(4, -1); //#3003
        var _WW = $k[--$j]; //#3003
        var _WX = $k[--$j]; //#3003
        $puti($k[--$j], _WX, _WW); //#3003
        var _WZ = $k[$j - 1]; //#3003
        $k[$j++] = _WZ; //#3003
        $k[$j++] = 2; //#3003
        $r(4, -1); //#3003
        var _Wa = $k[--$j]; //#3003
        var _Wb = $k[--$j]; //#3003
        $puti($k[--$j], _Wb, _Wa); //#3003
        $_.lintyyyymmd0(); //#3004
    }; //#3004
    $_.lintyymmdd = function() {
        var _Wd = $k[$j - 1]; //#3008
        if (_Wd.length != 6) { //#3008
            $j--; //#3008
            $k[$j++] = 'bwipp.GS1badDateLength#3008'; //#3008
            $k[$j++] = "Invalid length for yymmdd date"; //#3008
            $k[$j++] = false; //#3008
            return true; //#3008
        } //#3008
        var _We = $k[$j - 1]; //#3009
        if ($cvi($geti(_We, 4, 2)) < 1) { //#3009
            $j--; //#3009
            $k[$j++] = 'bwipp.GS1badDay#3009'; //#3009
            $k[$j++] = "Invalid day of month"; //#3009
            $k[$j++] = false; //#3009
            return true; //#3009
        } //#3009
        $_.lintyymmd0(); //#3010
    }; //#3010
    $_.linthh = function() {
        if ($cvi($geti($k[--$j], 0, 2)) > 23) { //#3014
            $j -= 2; //#3014
            $k[$j++] = 'bwipp.GS1badHour#3014'; //#3014
            $k[$j++] = "Invalid hour of day"; //#3014
            $k[$j++] = false; //#3014
            return true; //#3014
        } //#3014
    }; //#3014
    $_.lintmi = function() {
        if ($cvi($geti($k[--$j], 0, 2)) > 59) { //#3018
            $j--; //#3018
            $k[$j++] = 'bwipp.GS1badMinute#3018'; //#3018
            $k[$j++] = "Invalid minute in the hour"; //#3018
            $k[$j++] = false; //#3018
            return true; //#3018
        } //#3018
    }; //#3018
    $_.lintss = function() {
        if ($cvi($geti($k[--$j], 0, 2)) > 59) { //#3022
            $j--; //#3022
            $k[$j++] = 'bwipp.GS1badSecond#3022'; //#3022
            $k[$j++] = "Invalid second in the minute"; //#3022
            $k[$j++] = false; //#3022
            return true; //#3022
        } //#3022
    }; //#3022
    $_.linthhmi = function() {
        var _Wm = $k[$j - 1]; //#3026
        if ($cvi($geti(_Wm, 0, 2)) > 23) { //#3026
            $j -= 2; //#3026
            $k[$j++] = 'bwipp.GS1badHour#3026'; //#3026
            $k[$j++] = "Invalid hour of day"; //#3026
            $k[$j++] = false; //#3026
            return true; //#3026
        } //#3026
        if ($cvi($geti($k[--$j], 2, 2)) > 59) { //#3027
            $j--; //#3027
            $k[$j++] = 'bwipp.GS1badMinute#3027'; //#3027
            $k[$j++] = "Invalid minute in the hour"; //#3027
            $k[$j++] = false; //#3027
            return true; //#3027
        } //#3027
    }; //#3027
    $_.lintmmoptss = function() {
        var _Wq = $k[$j - 1]; //#3031
        var _Wr = _Wq.length; //#3031
        if ((_Wr != 2) && (_Wr != 4)) { //#3033
            $j--; //#3032
            $k[$j++] = 'bwipp.GS1badTimeLength#3032'; //#3032
            $k[$j++] = "Invalid length for optional minutes and seconds"; //#3032
            $k[$j++] = false; //#3032
            return true; //#3032
        } //#3032
        var _Ws = $k[$j - 1]; //#3034
        if ($cvi($geti(_Ws, 0, 2)) > 59) { //#3034
            $j -= 2; //#3034
            $k[$j++] = 'bwipp.GS1badMinute#3034'; //#3034
            $k[$j++] = "Invalid minute in the hour"; //#3034
            $k[$j++] = false; //#3034
            return true; //#3034
        } //#3034
        var _Wu = $k[$j - 1]; //#3035
        if (_Wu.length >= 4) { //#3037
            var _Wv = $k[$j - 1]; //#3036
            if ($cvi($geti(_Wv, 2, 2)) > 59) { //#3036
                $j -= 2; //#3036
                $k[$j++] = 'bwipp.GS1badSecond#3036'; //#3036
                $k[$j++] = "Invalid second in the minute"; //#3036
                $k[$j++] = false; //#3036
                return true; //#3036
            } //#3036
        } //#3036
        $j--; //#3038
    }; //#3038
    $_.lintyesno = function() {
        var _Wx = $k[--$j]; //#3042
        if ($ne(_Wx, "0") && $ne(_Wx, "1")) { //#3044
            $j--; //#3043
            $k[$j++] = 'bwipp.GS1badBoolean#3043'; //#3043
            $k[$j++] = "Neither 0 nor 1 for yes or no"; //#3043
            $k[$j++] = false; //#3043
            return true; //#3043
        } //#3043
    }; //#3043
    $_.lintwinding = function() {
        var _Wy = $k[--$j]; //#3048
        if ($ne(_Wy, "0") && ($ne(_Wy, "1") && $ne(_Wy, "9"))) { //#3050
            $j--; //#3049
            $k[$j++] = 'bwipp.GS1badWinding#3049'; //#3049
            $k[$j++] = "Invalid winding direction"; //#3049
            $k[$j++] = false; //#3049
            return true; //#3049
        } //#3049
    }; //#3049
    $_.lintpieceoftotal = function() {
        var _Wz = $k[$j - 1]; //#3054
        if ((_Wz.length % 2) != 0) { //#3054
            $j -= 2; //#3054
            $k[$j++] = 'bwipp.GS1badPieceTotalLength#3054'; //#3054
            $k[$j++] = "Invalid piece/total length"; //#3054
            $k[$j++] = false; //#3054
            return true; //#3054
        } //#3054
        var _X0 = $k[$j - 1]; //#3055
        var _X2 = $cvi($geti(_X0, 0, ~~(_X0.length / 2))); //#3056
        $k[$j++] = _X2; //#3056
        if (_X2 == 0) { //#3056
            $j -= 3; //#3056
            $k[$j++] = 'bwipp.GS1badPieceNumber#3056'; //#3056
            $k[$j++] = "Invalid piece number"; //#3056
            $k[$j++] = false; //#3056
            return true; //#3056
        } //#3056
        var _X3 = $k[--$j]; //#3057
        var _X4 = $k[--$j]; //#3057
        var _X5 = ~~(_X4.length / 2); //#3057
        var _X7 = $cvi($geti(_X4, _X5, _X5)); //#3058
        $k[$j++] = _X3; //#3058
        $k[$j++] = _X7; //#3058
        if (_X7 == 0) { //#3058
            $j -= 3; //#3058
            $k[$j++] = 'bwipp.GS1badPieceTotal#3058'; //#3058
            $k[$j++] = "Invalid total number"; //#3058
            $k[$j++] = false; //#3058
            return true; //#3058
        } //#3058
        var _X8 = $k[--$j]; //#3059
        if ($gt($k[--$j], _X8)) { //#3059
            $j--; //#3059
            $k[$j++] = 'bwipp.GS1pieceExceedsTotal#3059'; //#3059
            $k[$j++] = "Piece number exceeds total"; //#3059
            $k[$j++] = false; //#3059
            return true; //#3059
        } //#3059
    }; //#3059
    $_.lintposinseqslash = function() {
        $search($k[--$j], "/"); //#3063
        if (!$k[--$j]) { //#3065
            $j--; //#3064
            $k[$j++] = 'bwipp.invalidPosInSeqFormat#3064'; //#3064
            $k[$j++] = "Invalid <pos>/<end> format"; //#3064
            $k[$j++] = false; //#3064
            return true; //#3064
        } //#3064
        var _XC = $k[--$j]; //#3066
        $k[$j - 1] = _XC; //#3066
        var _XE = $k[$j - 1]; //#3067
        if (_XE.length == 0) { //#3069
            $j -= 2; //#3068
            $k[$j++] = 'bwipp.invalidPosInSeqFormat#3068'; //#3068
            $k[$j++] = "Invalid <pos>/<end> format"; //#3068
            $k[$j++] = false; //#3068
            return true; //#3068
        } //#3068
        var _XG = $k[$j - 2]; //#3070
        if (_XG.length == 0) { //#3072
            $j -= 2; //#3071
            $k[$j++] = 'bwipp.invalidPosInSeqFormat#3071'; //#3071
            $k[$j++] = "Invalid <pos>/<end> format"; //#3071
            $k[$j++] = false; //#3071
            return true; //#3071
        } //#3071
        var _XH = $k[$j - 1]; //#3073
        $k[$j++] = true; //#3075
        $forall(_XH, function() { //#3075
            var _XI = $k[--$j]; //#3074
            if ((_XI < 48) || (_XI > 57)) { //#3074
                $k[$j - 1] = false; //#3074
                return true; //#3074
            } //#3074
        }); //#3074
        if (!$k[--$j]) { //#3076
            $j -= 2; //#3076
            $k[$j++] = 'bwipp.positionNotNumeric#3076'; //#3076
            $k[$j++] = "Position is not numeric"; //#3076
            $k[$j++] = false; //#3076
            return true; //#3076
        } //#3076
        var _XL = $k[$j - 2]; //#3077
        $k[$j++] = true; //#3079
        $forall(_XL, function() { //#3079
            var _XM = $k[--$j]; //#3078
            if ((_XM < 48) || (_XM > 57)) { //#3078
                $k[$j - 1] = false; //#3078
                return true; //#3078
            } //#3078
        }); //#3078
        if (!$k[--$j]) { //#3080
            $j -= 2; //#3080
            $k[$j++] = 'bwipp.endNotNumeric#3080'; //#3080
            $k[$j++] = "End is not numeric"; //#3080
            $k[$j++] = false; //#3080
            return true; //#3080
        } //#3080
        var _XO = $k[$j - 1]; //#3081
        if ($get(_XO, 0) == 48) { //#3081
            $j -= 2; //#3081
            $k[$j++] = 'bwipp.positionZeroPrefix#3081'; //#3081
            $k[$j++] = "Position cannot have zero prefix"; //#3081
            $k[$j++] = false; //#3081
            return true; //#3081
        } //#3081
        var _XR = $k[$j - 2]; //#3082
        if ($get(_XR, 0) == 48) { //#3082
            $j -= 2; //#3082
            $k[$j++] = 'bwipp.endZeroPrefix#3082'; //#3082
            $k[$j++] = "End cannot have zero prefix"; //#3082
            $k[$j++] = false; //#3082
            return true; //#3082
        } //#3082
        var _XT = $k[--$j]; //#3083
        if ($cvi($k[--$j]) < $cvi(_XT)) { //#3084
            $k[$j++] = 'bwipp.positionExceedsEnd#3084'; //#3084
            $k[$j++] = "Position exceeds end"; //#3084
            $k[$j++] = false; //#3084
            return true; //#3084
        } //#3084
    }; //#3084
    $_.lintpcenc = function() {
        for (;;) { //#3098
            $search($k[--$j], "%"); //#3089
            if (!$k[--$j]) { //#3089
                $j--; //#3089
                break; //#3089
            } //#3089
            $j -= 2; //#3090
            var _XX = $k[$j - 1]; //#3090
            if (_XX.length < 2) { //#3090
                $j -= 2; //#3090
                $k[$j++] = 'bwipp.GS1badPercentEscape#3090'; //#3090
                $k[$j++] = "Invalid % escape"; //#3090
                $k[$j++] = false; //#3090
                break; //#3090
            } //#3090
            var _XY = $k[$j - 1]; //#3091
            var _XZ = $geti(_XY, 0, 2); //#3091
            $k[$j++] = true; //#3096
            for (var _Xa = 0, _Xb = _XZ.length; _Xa < _Xb; _Xa++) { //#3096
                var _Xd = $s(1); //#3092
                $put(_Xd, 0, $get(_XZ, _Xa)); //#3092
                $search("0123456789ABCDEFabcdef", _Xd); //#3094
                if (!$k[--$j]) { //#3094
                    $j -= 2; //#3094
                    $k[$j++] = false; //#3094
                    break; //#3094
                } //#3094
                $j -= 3; //#3095
            } //#3095
            if (!$k[--$j]) { //#3097
                $j -= 2; //#3097
                $k[$j++] = 'bwipp.GS1badPercentChars#3097'; //#3097
                $k[$j++] = "Invalid characters for percent encoding"; //#3097
                $k[$j++] = false; //#3097
                break; //#3097
            } //#3097
        } //#3097
    }; //#3097
    $_.lintcouponcode = function() {
        var _Xg = $k[$j - 1]; //#3102
        $k[$j++] = true; //#3104
        $forall(_Xg, function() { //#3104
            var _Xh = $k[--$j]; //#3103
            if ((_Xh < 48) || (_Xh > 57)) { //#3103
                $k[$j - 1] = false; //#3103
                return true; //#3103
            } //#3103
        }); //#3103
        if (!$k[--$j]) { //#3105
            $j -= 2; //#3105
            $k[$j++] = 'bwipp.GS1couponNotNumeric#3105'; //#3105
            $k[$j++] = "Coupon not numeric"; //#3105
            $k[$j++] = false; //#3105
            return true; //#3105
        } //#3105
        var _Xj = $k[$j - 1]; //#3108
        if (_Xj.length < 1) { //#3110
            $j -= 2; //#3109
            $k[$j++] = 'bwipp.GS1couponTooShortGCPVLI#3109'; //#3109
            $k[$j++] = "Coupon too short: Missing GCP VLI"; //#3109
            $k[$j++] = false; //#3109
            return true; //#3109
        } //#3109
        var _Xk = $k[$j - 1]; //#3111
        var _Xm = $cvi($geti(_Xk, 0, 1)); //#3111
        $k[$j++] = _Xm; //#3113
        if (_Xm > 6) { //#3113
            $j -= 2; //#3112
            $k[$j++] = 'bwipp.GS1couponBadGCPVLI#3112'; //#3112
            $k[$j++] = "Coupon GCP length indicator must be 0-6"; //#3112
            $k[$j++] = false; //#3112
            return true; //#3112
        } //#3112
        var _Xn = $k[--$j]; //#3114
        var _Xo = $k[$j - 1]; //#3115
        $k[$j++] = (_Xn + 6) + 1; //#3117
        if (((_Xn + 6) + 1) > _Xo.length) { //#3117
            $j -= 3; //#3116
            $k[$j++] = 'bwipp.GS1couponTooShortGCP#3116'; //#3116
            $k[$j++] = "Coupon too short: GCP truncated"; //#3116
            $k[$j++] = false; //#3116
            return true; //#3116
        } //#3116
        var _Xp = $k[--$j]; //#3118
        var _Xq = $k[--$j]; //#3118
        var _Xr = $geti(_Xq, _Xp, $f(_Xq.length - _Xp)); //#3118
        $k[$j++] = _Xr; //#3123
        if (_Xr.length < 6) { //#3123
            $j -= 2; //#3122
            $k[$j++] = 'bwipp.GS1couponTooShortOfferCode#3122'; //#3122
            $k[$j++] = "Coupon too short: Offer Code truncated"; //#3122
            $k[$j++] = false; //#3122
            return true; //#3122
        } //#3122
        var _Xs = $k[--$j]; //#3124
        var _Xt = $geti(_Xs, 6, _Xs.length - 6); //#3124
        $k[$j++] = _Xt; //#3129
        if (_Xt.length < 1) { //#3129
            $j -= 2; //#3128
            $k[$j++] = 'bwipp.GS1couponTooShortSaveValueVLI#3128'; //#3128
            $k[$j++] = "Coupon too short: Missing Save Value VLI"; //#3128
            $k[$j++] = false; //#3128
            return true; //#3128
        } //#3128
        var _Xu = $k[$j - 1]; //#3130
        var _Xw = $cvi($geti(_Xu, 0, 1)); //#3130
        $k[$j++] = _Xw; //#3132
        if ((_Xw < 1) || (_Xw > 5)) { //#3132
            $j -= 2; //#3131
            $k[$j++] = 'bwipp.GS1couponBadSaveValueVLI#3131'; //#3131
            $k[$j++] = "Coupon Save Value length indicator must be 1-5"; //#3131
            $k[$j++] = false; //#3131
            return true; //#3131
        } //#3131
        var _Xx = $k[--$j]; //#3133
        var _Xy = $k[$j - 1]; //#3134
        $k[$j++] = _Xx + 1; //#3136
        if ((_Xx + 1) > _Xy.length) { //#3136
            $j -= 3; //#3135
            $k[$j++] = 'bwipp.GS1couponTooShortSaveValue#3135'; //#3135
            $k[$j++] = "Coupon too short: Save Value truncated"; //#3135
            $k[$j++] = false; //#3135
            return true; //#3135
        } //#3135
        var _Xz = $k[--$j]; //#3137
        var _Y0 = $k[--$j]; //#3137
        var _Y1 = $geti(_Y0, _Xz, $f(_Y0.length - _Xz)); //#3137
        $k[$j++] = _Y1; //#3142
        if (_Y1.length < 1) { //#3142
            $j -= 2; //#3141
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseRequirementVLI#3141'; //#3141
            $k[$j++] = "Coupon too short: Missing 1st Purchase Requirement VLI"; //#3141
            $k[$j++] = false; //#3141
            return true; //#3141
        } //#3141
        var _Y2 = $k[$j - 1]; //#3143
        var _Y4 = $cvi($geti(_Y2, 0, 1)); //#3143
        $k[$j++] = _Y4; //#3145
        if ((_Y4 < 1) || (_Y4 > 5)) { //#3145
            $j -= 2; //#3144
            $k[$j++] = 'bwipp.GS1couponBad1stPurchaseRequirementVLI#3144'; //#3144
            $k[$j++] = "Coupon 1st Purchase Requirement length indicator must be 1-5"; //#3144
            $k[$j++] = false; //#3144
            return true; //#3144
        } //#3144
        var _Y5 = $k[--$j]; //#3146
        var _Y6 = $k[$j - 1]; //#3147
        $k[$j++] = _Y5 + 1; //#3149
        if ((_Y5 + 1) > _Y6.length) { //#3149
            $j -= 3; //#3148
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseRequirement#3148'; //#3148
            $k[$j++] = "Coupon too short: 1st Purchase Requirement truncated"; //#3148
            $k[$j++] = false; //#3148
            return true; //#3148
        } //#3148
        var _Y7 = $k[--$j]; //#3150
        var _Y8 = $k[--$j]; //#3150
        var _Y9 = $geti(_Y8, _Y7, $f(_Y8.length - _Y7)); //#3150
        $k[$j++] = _Y9; //#3155
        if (_Y9.length < 1) { //#3155
            $j -= 2; //#3154
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseRequirementCode#3154'; //#3154
            $k[$j++] = "Coupon too short: Missing 1st Purchase Requirement Code"; //#3154
            $k[$j++] = false; //#3154
            return true; //#3154
        } //#3154
        var _YA = $k[$j - 1]; //#3156
        var _YC = $cvi($geti(_YA, 0, 1)); //#3156
        if ((_YC > 4) && (_YC != 9)) { //#3158
            $j -= 2; //#3157
            $k[$j++] = 'bwipp.GS1couponBad1stPurchaseRequirementCode#3157'; //#3157
            $k[$j++] = "Coupon 1st Purchase Requirement Code must be 0-4 or 9"; //#3157
            $k[$j++] = false; //#3157
            return true; //#3157
        } //#3157
        var _YD = $k[--$j]; //#3159
        var _YE = $geti(_YD, 1, _YD.length - 1); //#3159
        $k[$j++] = _YE; //#3164
        if (_YE.length < 3) { //#3164
            $j -= 2; //#3163
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseFamilyCode#3163'; //#3163
            $k[$j++] = "Coupon too short: 1st Purchase Family Code truncated"; //#3163
            $k[$j++] = false; //#3163
            return true; //#3163
        } //#3163
        var _YF = $k[--$j]; //#3165
        var _YG = $geti(_YF, 3, _YF.length - 3); //#3165
        $k[$j++] = _YG; //#3221
        if (_YG.length >= 1) { //#3221
            var _YH = $k[$j - 1]; //#3168
            if ($cvi($geti(_YH, 0, 1)) == 1) { //#3221
                var _YJ = $k[--$j]; //#3169
                var _YK = $geti(_YJ, 1, _YJ.length - 1); //#3169
                $k[$j++] = _YK; //#3174
                if (_YK.length < 1) { //#3174
                    $j -= 2; //#3173
                    $k[$j++] = 'bwipp.GS1couponTooShortAdditionalPurchaseRulesCode#3173'; //#3173
                    $k[$j++] = "Coupon too short: Missing Additional Purchase Rules Code"; //#3173
                    $k[$j++] = false; //#3173
                    return true; //#3173
                } //#3173
                var _YL = $k[$j - 1]; //#3175
                if ($cvi($geti(_YL, 0, 1)) > 3) { //#3177
                    $j -= 2; //#3176
                    $k[$j++] = 'bwipp.GS1couponBadAdditionalPurchaseRulesCode#3176'; //#3176
                    $k[$j++] = "Coupon Additional Purchase Rules Code must be 0-3"; //#3176
                    $k[$j++] = false; //#3176
                    return true; //#3176
                } //#3176
                var _YN = $k[--$j]; //#3178
                var _YO = $geti(_YN, 1, _YN.length - 1); //#3178
                $k[$j++] = _YO; //#3183
                if (_YO.length < 1) { //#3183
                    $j -= 2; //#3182
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseRequirementVLI#3182'; //#3182
                    $k[$j++] = "Coupon too short: Missing 2nd Purchase Requirement VLI"; //#3182
                    $k[$j++] = false; //#3182
                    return true; //#3182
                } //#3182
                var _YP = $k[$j - 1]; //#3184
                var _YR = $cvi($geti(_YP, 0, 1)); //#3184
                $k[$j++] = _YR; //#3186
                if ((_YR < 1) || (_YR > 5)) { //#3186
                    $j -= 2; //#3185
                    $k[$j++] = 'bwipp.GS1couponBad2ndPurchaseRequirementVLI#3185'; //#3185
                    $k[$j++] = "Coupon 2nd Purchase Requirement length indicator must be 1-5"; //#3185
                    $k[$j++] = false; //#3185
                    return true; //#3185
                } //#3185
                var _YS = $k[--$j]; //#3187
                var _YT = $k[$j - 1]; //#3188
                $k[$j++] = _YS + 1; //#3190
                if ((_YS + 1) > _YT.length) { //#3190
                    $j -= 3; //#3189
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseRequirement#3189'; //#3189
                    $k[$j++] = "Coupon too short: 2nd Purchase Requirement truncated"; //#3189
                    $k[$j++] = false; //#3189
                    return true; //#3189
                } //#3189
                var _YU = $k[--$j]; //#3191
                var _YV = $k[--$j]; //#3191
                var _YW = $geti(_YV, _YU, $f(_YV.length - _YU)); //#3191
                $k[$j++] = _YW; //#3196
                if (_YW.length < 1) { //#3196
                    $j -= 2; //#3195
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseRequirementCode#3195'; //#3195
                    $k[$j++] = "Coupon too short: Missing 2nd Purchase Requirement Code"; //#3195
                    $k[$j++] = false; //#3195
                    return true; //#3195
                } //#3195
                var _YX = $k[$j - 1]; //#3197
                var _YZ = $cvi($geti(_YX, 0, 1)); //#3197
                if ((_YZ > 4) && (_YZ != 9)) { //#3199
                    $j -= 2; //#3198
                    $k[$j++] = 'bwipp.GS1couponBad2ndPurchaseRequirementCode#3198'; //#3198
                    $k[$j++] = "Coupon 2nd Purchase Requirement Code must be 0-4 or 9"; //#3198
                    $k[$j++] = false; //#3198
                    return true; //#3198
                } //#3198
                var _Ya = $k[--$j]; //#3200
                var _Yb = $geti(_Ya, 1, _Ya.length - 1); //#3200
                $k[$j++] = _Yb; //#3205
                if (_Yb.length < 3) { //#3205
                    $j -= 2; //#3204
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseFamilyCode#3204'; //#3204
                    $k[$j++] = "Coupon too short: 2nd Purchase Family Code truncated"; //#3204
                    $k[$j++] = false; //#3204
                    return true; //#3204
                } //#3204
                var _Yc = $k[--$j]; //#3206
                var _Yd = $geti(_Yc, 3, _Yc.length - 3); //#3206
                $k[$j++] = _Yd; //#3211
                if (_Yd.length < 1) { //#3211
                    $j -= 2; //#3210
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseGCPVLI#3210'; //#3210
                    $k[$j++] = "Coupon too short: Missing 2nd Purchase GCP VLI"; //#3210
                    $k[$j++] = false; //#3210
                    return true; //#3210
                } //#3210
                var _Ye = $k[$j - 1]; //#3212
                var _Yg = $cvi($geti(_Ye, 0, 1)); //#3212
                $k[$j++] = _Yg; //#3214
                if ((_Yg > 6) && (_Yg != 9)) { //#3214
                    $j -= 2; //#3213
                    $k[$j++] = 'bwipp.GS1couponBad2ndPurchaseGCPVLI#3213'; //#3213
                    $k[$j++] = "Coupon 2nd Purchase GCP length indicator must be 0-6 or 9"; //#3213
                    $k[$j++] = false; //#3213
                    return true; //#3213
                } //#3213
                var _Yh = $k[$j - 1]; //#3215
                if (_Yh != 9) { //#3215
                    var _Yi = $k[--$j]; //#3215
                    $k[$j++] = _Yi + 6; //#3215
                } else { //#3215
                    $k[$j - 1] = 0; //#3215
                } //#3215
                var _Yj = $k[--$j]; //#3215
                var _Yk = $k[$j - 1]; //#3216
                $k[$j++] = _Yj + 1; //#3218
                if ((_Yj + 1) > _Yk.length) { //#3218
                    $j -= 3; //#3217
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseGCP#3217'; //#3217
                    $k[$j++] = "Coupon too short: 2nd Purchase GCP truncated"; //#3217
                    $k[$j++] = false; //#3217
                    return true; //#3217
                } //#3217
                var _Yl = $k[--$j]; //#3219
                var _Ym = $k[--$j]; //#3219
                $k[$j++] = $geti(_Ym, _Yl, $f(_Ym.length - _Yl)); //#3219
            } //#3219
        } //#3219
        var _Yo = $k[$j - 1]; //#3224
        if (_Yo.length >= 1) { //#3268
            var _Yp = $k[$j - 1]; //#3224
            if ($cvi($geti(_Yp, 0, 1)) == 2) { //#3268
                var _Yr = $k[--$j]; //#3225
                var _Ys = $geti(_Yr, 1, _Yr.length - 1); //#3225
                $k[$j++] = _Ys; //#3230
                if (_Ys.length < 1) { //#3230
                    $j -= 2; //#3229
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseRequirementVLI#3229'; //#3229
                    $k[$j++] = "Coupon too short: Missing 3rd Purchase Requirement VLI"; //#3229
                    $k[$j++] = false; //#3229
                    return true; //#3229
                } //#3229
                var _Yt = $k[$j - 1]; //#3231
                var _Yv = $cvi($geti(_Yt, 0, 1)); //#3231
                $k[$j++] = _Yv; //#3233
                if ((_Yv < 1) || (_Yv > 5)) { //#3233
                    $j -= 2; //#3232
                    $k[$j++] = 'bwipp.GS1couponBad3rdPurchaseRequirementVLI#3232'; //#3232
                    $k[$j++] = "Coupon 3rd Purchase Requirement length indicator must be 1-5"; //#3232
                    $k[$j++] = false; //#3232
                    return true; //#3232
                } //#3232
                var _Yw = $k[--$j]; //#3234
                var _Yx = $k[$j - 1]; //#3235
                $k[$j++] = _Yw + 1; //#3237
                if ((_Yw + 1) > _Yx.length) { //#3237
                    $j -= 3; //#3236
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseRequirement#3236'; //#3236
                    $k[$j++] = "Coupon too short: 3rd Purchase Requirement truncated"; //#3236
                    $k[$j++] = false; //#3236
                    return true; //#3236
                } //#3236
                var _Yy = $k[--$j]; //#3238
                var _Yz = $k[--$j]; //#3238
                var _Z0 = $geti(_Yz, _Yy, $f(_Yz.length - _Yy)); //#3238
                $k[$j++] = _Z0; //#3243
                if (_Z0.length < 1) { //#3243
                    $j -= 2; //#3242
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseRequirementCode#3242'; //#3242
                    $k[$j++] = "Coupon too short: Missing 3rd Purchase Requirement Code"; //#3242
                    $k[$j++] = false; //#3242
                    return true; //#3242
                } //#3242
                var _Z1 = $k[$j - 1]; //#3244
                var _Z3 = $cvi($geti(_Z1, 0, 1)); //#3244
                if ((_Z3 > 4) && (_Z3 != 9)) { //#3246
                    $j -= 2; //#3245
                    $k[$j++] = 'bwipp.GS1couponBad3rdPurchaseRequirementCode#3245'; //#3245
                    $k[$j++] = "Coupon 3rd Purchase Requirement Code must be 0-4 or 9"; //#3245
                    $k[$j++] = false; //#3245
                    return true; //#3245
                } //#3245
                var _Z4 = $k[--$j]; //#3247
                var _Z5 = $geti(_Z4, 1, _Z4.length - 1); //#3247
                $k[$j++] = _Z5; //#3252
                if (_Z5.length < 3) { //#3252
                    $j -= 2; //#3251
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseFamilyCode#3251'; //#3251
                    $k[$j++] = "Coupon too short: 3rd Purchase Family Code truncated"; //#3251
                    $k[$j++] = false; //#3251
                    return true; //#3251
                } //#3251
                var _Z6 = $k[--$j]; //#3253
                var _Z7 = $geti(_Z6, 3, _Z6.length - 3); //#3253
                $k[$j++] = _Z7; //#3258
                if (_Z7.length < 1) { //#3258
                    $j -= 2; //#3257
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseGCPVLI#3257'; //#3257
                    $k[$j++] = "Coupon too short: Missing 3rd Purchase GCP VLI"; //#3257
                    $k[$j++] = false; //#3257
                    return true; //#3257
                } //#3257
                var _Z8 = $k[$j - 1]; //#3259
                var _ZA = $cvi($geti(_Z8, 0, 1)); //#3259
                $k[$j++] = _ZA; //#3261
                if ((_ZA > 6) && (_ZA != 9)) { //#3261
                    $j -= 2; //#3260
                    $k[$j++] = 'bwipp.GS1couponBad3rdPurchaseGCPVLI#3260'; //#3260
                    $k[$j++] = "Coupon 3rd Purchase GCP length indicator must be 0-6 or 9"; //#3260
                    $k[$j++] = false; //#3260
                    return true; //#3260
                } //#3260
                var _ZB = $k[$j - 1]; //#3262
                if (_ZB != 9) { //#3262
                    var _ZC = $k[--$j]; //#3262
                    $k[$j++] = _ZC + 6; //#3262
                } else { //#3262
                    $k[$j - 1] = 0; //#3262
                } //#3262
                var _ZD = $k[--$j]; //#3262
                var _ZE = $k[$j - 1]; //#3263
                $k[$j++] = _ZD + 1; //#3265
                if ((_ZD + 1) > _ZE.length) { //#3265
                    $j -= 3; //#3264
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseGCP#3264'; //#3264
                    $k[$j++] = "Coupon too short: 3rd Purchase GCP truncated"; //#3264
                    $k[$j++] = false; //#3264
                    return true; //#3264
                } //#3264
                var _ZF = $k[--$j]; //#3266
                var _ZG = $k[--$j]; //#3266
                $k[$j++] = $geti(_ZG, _ZF, $f(_ZG.length - _ZF)); //#3266
            } //#3266
        } //#3266
        $_.couponexpire = -1; //#3271
        var _ZI = $k[$j - 1]; //#3272
        if (_ZI.length >= 1) { //#3290
            var _ZJ = $k[$j - 1]; //#3272
            if ($cvi($geti(_ZJ, 0, 1)) == 3) { //#3290
                var _ZL = $k[--$j]; //#3273
                var _ZM = $geti(_ZL, 1, _ZL.length - 1); //#3273
                $k[$j++] = _ZM; //#3278
                if (_ZM.length < 6) { //#3278
                    $j -= 2; //#3277
                    $k[$j++] = 'bwipp.GS1couponTooShortExpirationDate#3277'; //#3277
                    $k[$j++] = "Coupon too short: Expiration date"; //#3277
                    $k[$j++] = false; //#3277
                    return true; //#3277
                } //#3277
                var _ZN = $k[$j - 1]; //#3279
                var _ZP = $cvi($geti(_ZN, 2, 2)); //#3279
                if ((_ZP < 1) || (_ZP > 12)) { //#3279
                    $j -= 2; //#3279
                    $k[$j++] = 'bwipp.GS1couponExpirationDateBadMonth#3279'; //#3279
                    $k[$j++] = "Invalid month in expiration date"; //#3279
                    $k[$j++] = false; //#3279
                    return true; //#3279
                } //#3279
                var _ZQ = $k[$j - 1]; //#3280
                var _ZS = $cvi($geti(_ZQ, 0, 2)); //#3280
                var _ZT = _ZS - 21; //#3281
                $k[$j++] = _ZS; //#3281
                $k[$j++] = _ZT; //#3281
                if (_ZT >= 51) { //#3281
                    $j--; //#3281
                    var _ZU = $k[--$j]; //#3281
                    $k[$j++] = _ZU + 1900; //#3281
                } else { //#3281
                    if ($k[--$j] <= -50) { //#3281
                        var _ZW = $k[--$j]; //#3281
                        $k[$j++] = _ZW + 2100; //#3281
                    } else { //#3281
                        var _ZX = $k[--$j]; //#3281
                        $k[$j++] = _ZX + 2000; //#3281
                    } //#3281
                } //#3281
                var _ZY = $k[--$j]; //#3282
                $k[$j++] = ((_ZY % 400) == 0) || (((_ZY % 4) == 0) && ((_ZY % 100) != 0)); //#3283
                $k[$j++] = Infinity; //#3283
                $k[$j++] = 31; //#3283
                $r(3, -1); //#3283
                var _Za = $k[--$j] ? 29 : 28; //#3283
                $k[$j++] = _Za; //#3283
                $k[$j++] = 31; //#3283
                $k[$j++] = 30; //#3283
                $k[$j++] = 31; //#3283
                $k[$j++] = 30; //#3283
                $k[$j++] = 31; //#3283
                $k[$j++] = 31; //#3283
                $k[$j++] = 30; //#3283
                $k[$j++] = 31; //#3283
                $k[$j++] = 30; //#3283
                $k[$j++] = 31; //#3283
                var _Zb = $a(); //#3283
                var _Zc = $k[$j - 1]; //#3284
                var _Zg = $cvi($geti(_Zc, 4, 2)); //#3285
                if (($get(_Zb, $cvi($geti(_Zc, 2, 2)) - 1) < _Zg) || (_Zg < 1)) { //#3286
                    $j -= 2; //#3286
                    $k[$j++] = 'bwipp.GS1couponExpirationDateBadDay#3286'; //#3286
                    $k[$j++] = "Invalid day of month in expiration date"; //#3286
                    $k[$j++] = false; //#3286
                    return true; //#3286
                } //#3286
                var _Zh = $k[--$j]; //#3287
                $_.couponexpire = $cvi($geti(_Zh, 0, 6)); //#3287
                $k[$j++] = $geti(_Zh, 6, _Zh.length - 6); //#3288
            } //#3288
        } //#3288
        var _Zk = $k[$j - 1]; //#3293
        if (_Zk.length >= 1) { //#3314
            var _Zl = $k[$j - 1]; //#3293
            if ($cvi($geti(_Zl, 0, 1)) == 4) { //#3314
                var _Zn = $k[--$j]; //#3294
                var _Zo = $geti(_Zn, 1, _Zn.length - 1); //#3294
                $k[$j++] = _Zo; //#3299
                if (_Zo.length < 6) { //#3299
                    $j -= 2; //#3298
                    $k[$j++] = 'bwipp.GS1couponTooShortStartDate#3298'; //#3298
                    $k[$j++] = "Coupon too short: Start date"; //#3298
                    $k[$j++] = false; //#3298
                    return true; //#3298
                } //#3298
                var _Zp = $k[$j - 1]; //#3300
                var _Zr = $cvi($geti(_Zp, 2, 2)); //#3300
                if ((_Zr < 1) || (_Zr > 12)) { //#3300
                    $j -= 2; //#3300
                    $k[$j++] = 'bwipp.GS1couponStartDateBadMonth#3300'; //#3300
                    $k[$j++] = "Invalid month in start date"; //#3300
                    $k[$j++] = false; //#3300
                    return true; //#3300
                } //#3300
                var _Zs = $k[$j - 1]; //#3301
                var _Zu = $cvi($geti(_Zs, 0, 2)); //#3301
                var _Zv = _Zu - 21; //#3302
                $k[$j++] = _Zu; //#3302
                $k[$j++] = _Zv; //#3302
                if (_Zv >= 51) { //#3302
                    $j--; //#3302
                    var _Zw = $k[--$j]; //#3302
                    $k[$j++] = _Zw + 1900; //#3302
                } else { //#3302
                    if ($k[--$j] <= -50) { //#3302
                        var _Zy = $k[--$j]; //#3302
                        $k[$j++] = _Zy + 2100; //#3302
                    } else { //#3302
                        var _Zz = $k[--$j]; //#3302
                        $k[$j++] = _Zz + 2000; //#3302
                    } //#3302
                } //#3302
                var _a0 = $k[--$j]; //#3303
                $k[$j++] = ((_a0 % 400) == 0) || (((_a0 % 4) == 0) && ((_a0 % 100) != 0)); //#3304
                $k[$j++] = Infinity; //#3304
                $k[$j++] = 31; //#3304
                $r(3, -1); //#3304
                var _a2 = $k[--$j] ? 29 : 28; //#3304
                $k[$j++] = _a2; //#3304
                $k[$j++] = 31; //#3304
                $k[$j++] = 30; //#3304
                $k[$j++] = 31; //#3304
                $k[$j++] = 30; //#3304
                $k[$j++] = 31; //#3304
                $k[$j++] = 31; //#3304
                $k[$j++] = 30; //#3304
                $k[$j++] = 31; //#3304
                $k[$j++] = 30; //#3304
                $k[$j++] = 31; //#3304
                var _a3 = $a(); //#3304
                var _a4 = $k[$j - 1]; //#3305
                var _a8 = $cvi($geti(_a4, 4, 2)); //#3306
                if (($get(_a3, $cvi($geti(_a4, 2, 2)) - 1) < _a8) || (_a8 < 1)) { //#3307
                    $j -= 2; //#3307
                    $k[$j++] = 'bwipp.GS1couponStartDateBadDay#3307'; //#3307
                    $k[$j++] = "Invalid day of month in start date"; //#3307
                    $k[$j++] = false; //#3307
                    return true; //#3307
                } //#3307
                var _a9 = $k[--$j]; //#3308
                $_.couponstart = $cvi($geti(_a9, 0, 6)); //#3308
                $k[$j++] = _a9; //#3311
                if (($_.couponexpire != -1) && ($_.couponexpire < $_.couponstart)) { //#3311
                    $j -= 2; //#3310
                    $k[$j++] = 'bwipp.GS1couponExpireDateBeforeStartDate#3310'; //#3310
                    $k[$j++] = "Coupon expires before it starts"; //#3310
                    $k[$j++] = false; //#3310
                    return true; //#3310
                } //#3310
                var _aE = $k[--$j]; //#3312
                $k[$j++] = $geti(_aE, 6, _aE.length - 6); //#3312
            } //#3312
        } //#3312
        var _aG = $k[$j - 1]; //#3317
        if (_aG.length >= 1) { //#3330
            var _aH = $k[$j - 1]; //#3317
            if ($cvi($geti(_aH, 0, 1)) == 5) { //#3330
                var _aJ = $k[--$j]; //#3318
                var _aK = $geti(_aJ, 1, _aJ.length - 1); //#3318
                $k[$j++] = _aK; //#3323
                if (_aK.length < 1) { //#3323
                    $j -= 2; //#3322
                    $k[$j++] = 'bwipp.GS1couponTooShortSerialNumberVLI#3322'; //#3322
                    $k[$j++] = "Coupon too short: Missing Serial Number VLI"; //#3322
                    $k[$j++] = false; //#3322
                    return true; //#3322
                } //#3322
                var _aL = $k[$j - 1]; //#3324
                var _aM = $geti(_aL, 0, 1); //#3324
                $k[$j++] = ($cvi(_aM) + 6) + 1; //#3327
                if ((($cvi(_aM) + 6) + 1) > _aL.length) { //#3327
                    $j -= 3; //#3326
                    $k[$j++] = 'bwipp.GS1couponTooShortSerialNumber#3326'; //#3326
                    $k[$j++] = "Coupon too short: Serial Number truncated"; //#3326
                    $k[$j++] = false; //#3326
                    return true; //#3326
                } //#3326
                var _aN = $k[--$j]; //#3328
                var _aO = $k[--$j]; //#3328
                $k[$j++] = $geti(_aO, _aN, $f(_aO.length - _aN)); //#3328
            } //#3328
        } //#3328
        var _aQ = $k[$j - 1]; //#3333
        if (_aQ.length >= 1) { //#3349
            var _aR = $k[$j - 1]; //#3333
            if ($cvi($geti(_aR, 0, 1)) == 6) { //#3349
                var _aT = $k[--$j]; //#3334
                var _aU = $geti(_aT, 1, _aT.length - 1); //#3334
                $k[$j++] = _aU; //#3339
                if (_aU.length < 1) { //#3339
                    $j -= 2; //#3338
                    $k[$j++] = 'bwipp.GS1couponTooShortRetailerGCPGLNVLI#3338'; //#3338
                    $k[$j++] = "Coupon too short: Missing Retailer GCP/GLN VLI"; //#3338
                    $k[$j++] = false; //#3338
                    return true; //#3338
                } //#3338
                var _aV = $k[$j - 1]; //#3340
                var _aX = $cvi($geti(_aV, 0, 1)); //#3340
                $k[$j++] = _aX; //#3342
                if ((_aX < 1) || (_aX > 7)) { //#3342
                    $j -= 2; //#3341
                    $k[$j++] = 'bwipp.GS1couponBadRetailerGCPGLNVLI#3341'; //#3341
                    $k[$j++] = "Coupon Retailer GCP/GLN length indicator must be 1-7"; //#3341
                    $k[$j++] = false; //#3341
                    return true; //#3341
                } //#3341
                var _aY = $k[--$j]; //#3343
                var _aZ = $k[$j - 1]; //#3344
                $k[$j++] = (_aY + 6) + 1; //#3346
                if (((_aY + 6) + 1) > _aZ.length) { //#3346
                    $j -= 3; //#3345
                    $k[$j++] = 'bwipp.GS1couponTooShortRetailerGCPGLN#3345'; //#3345
                    $k[$j++] = "Coupon too short: Retailer GCP/GLN truncated"; //#3345
                    $k[$j++] = false; //#3345
                    return true; //#3345
                } //#3345
                var _aa = $k[--$j]; //#3347
                var _ab = $k[--$j]; //#3347
                $k[$j++] = $geti(_ab, _aa, $f(_ab.length - _aa)); //#3347
            } //#3347
        } //#3347
        var _ad = $k[$j - 1]; //#3352
        if (_ad.length >= 1) { //#3388
            var _ae = $k[$j - 1]; //#3352
            if ($cvi($geti(_ae, 0, 1)) == 9) { //#3388
                var _ag = $k[--$j]; //#3353
                var _ah = $geti(_ag, 1, _ag.length - 1); //#3353
                $k[$j++] = _ah; //#3358
                if (_ah.length < 1) { //#3358
                    $j -= 2; //#3357
                    $k[$j++] = 'bwipp.GS1couponTooShortSaveValueCode#3357'; //#3357
                    $k[$j++] = "Coupon too short: Missing Save Value Code"; //#3357
                    $k[$j++] = false; //#3357
                    return true; //#3357
                } //#3357
                var _ai = $k[$j - 1]; //#3359
                var _ak = $cvi($geti(_ai, 0, 1)); //#3359
                if ((_ak > 6) || ((_ak == 3) || (_ak == 4))) { //#3361
                    $j -= 2; //#3360
                    $k[$j++] = 'bwipp.GS1couponBadSaveValueCode#3360'; //#3360
                    $k[$j++] = "Coupon Save Value Code must be 0,1,2,5 or 6"; //#3360
                    $k[$j++] = false; //#3360
                    return true; //#3360
                } //#3360
                var _al = $k[--$j]; //#3362
                var _am = $geti(_al, 1, _al.length - 1); //#3362
                $k[$j++] = _am; //#3367
                if (_am.length < 1) { //#3367
                    $j -= 2; //#3366
                    $k[$j++] = 'bwipp.GS1couponTooShortSaveValueAppliesToItem#3366'; //#3366
                    $k[$j++] = "Coupon too short: Missing Save Value Applies to Item"; //#3366
                    $k[$j++] = false; //#3366
                    return true; //#3366
                } //#3366
                var _an = $k[$j - 1]; //#3368
                if ($cvi($geti(_an, 0, 1)) > 2) { //#3370
                    $j -= 2; //#3369
                    $k[$j++] = 'bwipp.GS1couponBadSaveValueAppliesToItem#3369'; //#3369
                    $k[$j++] = "Coupon Save Value Applies to Item must be 0-2"; //#3369
                    $k[$j++] = false; //#3369
                    return true; //#3369
                } //#3369
                var _ap = $k[--$j]; //#3371
                var _aq = $geti(_ap, 1, _ap.length - 1); //#3371
                $k[$j++] = _aq; //#3376
                if (_aq.length < 1) { //#3376
                    $j -= 2; //#3375
                    $k[$j++] = 'bwipp.GS1couponTooShortStoreCouponFlag#3375'; //#3375
                    $k[$j++] = "Coupon too short: Missing Store Coupon Flag"; //#3375
                    $k[$j++] = false; //#3375
                    return true; //#3375
                } //#3375
                var _ar = $k[--$j]; //#3377
                var _as = $geti(_ar, 1, _ar.length - 1); //#3377
                $k[$j++] = _as; //#3382
                if (_as.length < 1) { //#3382
                    $j -= 2; //#3381
                    $k[$j++] = 'bwipp.GS1couponTooShortDontMultiplyFlag#3381'; //#3381
                    $k[$j++] = "Coupon too short: Missing Don't Multiply Flag"; //#3381
                    $k[$j++] = false; //#3381
                    return true; //#3381
                } //#3381
                var _at = $k[$j - 1]; //#3383
                if ($cvi($geti(_at, 0, 1)) > 1) { //#3385
                    $j -= 2; //#3384
                    $k[$j++] = 'bwipp.GS1couponBadDontMultiplyFlag#3384'; //#3384
                    $k[$j++] = "Don't Multiply Flag must be 0 or 1"; //#3384
                    $k[$j++] = false; //#3384
                    return true; //#3384
                } //#3384
                var _av = $k[--$j]; //#3386
                $k[$j++] = $geti(_av, 1, _av.length - 1); //#3386
            } //#3386
        } //#3386
        var _ax = $k[$j - 1]; //#3390
        if (_ax.length != 0) { //#3392
            $j -= 2; //#3391
            $k[$j++] = 'bwipp.GS1couponUnrecognisedOptionalField#3391'; //#3391
            $k[$j++] = "Coupon fields must be 1,2,3,4,5,6 or 9, increasing order"; //#3391
            $k[$j++] = false; //#3391
            return true; //#3391
        } //#3391
        $j--; //#3393
    }; //#3393
    $_.lintcouponposoffer = function() {
        var _ay = $k[$j - 1]; //#3397
        $k[$j++] = true; //#3399
        $forall(_ay, function() { //#3399
            var _az = $k[--$j]; //#3398
            if ((_az < 48) || (_az > 57)) { //#3398
                $k[$j - 1] = false; //#3398
                return true; //#3398
            } //#3398
        }); //#3398
        if (!$k[--$j]) { //#3400
            $j -= 2; //#3400
            $k[$j++] = 'bwipp.GS1couponNotNumeric#3400'; //#3400
            $k[$j++] = "Coupon not numeric"; //#3400
            $k[$j++] = false; //#3400
            return true; //#3400
        } //#3400
        var _b1 = $k[$j - 1]; //#3402
        if (_b1.length < 1) { //#3404
            $j -= 2; //#3403
            $k[$j++] = 'bwipp.GS1couponTooShortFormatCode#3403'; //#3403
            $k[$j++] = "Coupon too short: Missing Format Code"; //#3403
            $k[$j++] = false; //#3403
            return true; //#3403
        } //#3403
        var _b2 = $k[$j - 1]; //#3405
        var _b3 = $geti(_b2, 0, 1); //#3405
        if ($ne(_b3, "0") && $ne(_b3, "1")) { //#3407
            $j -= 2; //#3406
            $k[$j++] = 'bwipp.GS1couponBadFormatCode#3406'; //#3406
            $k[$j++] = "Coupon format must be 0 or 1"; //#3406
            $k[$j++] = false; //#3406
            return true; //#3406
        } //#3406
        var _b4 = $k[--$j]; //#3408
        var _b5 = $geti(_b4, 1, _b4.length - 1); //#3408
        $k[$j++] = _b5; //#3412
        if (_b5.length < 1) { //#3412
            $j -= 2; //#3411
            $k[$j++] = 'bwipp.GS1couponTooShortFunderVLI#3411'; //#3411
            $k[$j++] = "Coupon too short: Missing Funder VLI"; //#3411
            $k[$j++] = false; //#3411
            return true; //#3411
        } //#3411
        var _b6 = $k[$j - 1]; //#3413
        var _b8 = $cvi($geti(_b6, 0, 1)); //#3413
        $k[$j++] = _b8; //#3415
        if (_b8 > 6) { //#3415
            $j -= 3; //#3414
            $k[$j++] = 'bwipp.GS1couponBadFunderVLI#3414'; //#3414
            $k[$j++] = "Coupon Funder length indicator must be 0-6"; //#3414
            $k[$j++] = false; //#3414
            return true; //#3414
        } //#3414
        var _b9 = $k[--$j]; //#3416
        var _bA = $k[$j - 1]; //#3417
        $k[$j++] = (_b9 + 6) + 1; //#3419
        if (((_b9 + 6) + 1) > _bA.length) { //#3419
            $j -= 3; //#3418
            $k[$j++] = 'bwipp.GS1couponTooShortFunder#3418'; //#3418
            $k[$j++] = "Coupon too short: Truncated Funder ID"; //#3418
            $k[$j++] = false; //#3418
            return true; //#3418
        } //#3418
        var _bB = $k[--$j]; //#3420
        var _bC = $k[--$j]; //#3420
        var _bD = $geti(_bC, _bB, $f(_bC.length - _bB)); //#3420
        $k[$j++] = _bD; //#3424
        if (_bD.length < 6) { //#3424
            $j -= 2; //#3423
            $k[$j++] = 'bwipp.GS1couponTooShortOfferCode#3423'; //#3423
            $k[$j++] = "Coupon too short: Truncated Offer Code"; //#3423
            $k[$j++] = false; //#3423
            return true; //#3423
        } //#3423
        var _bE = $k[--$j]; //#3425
        var _bF = $geti(_bE, 6, _bE.length - 6); //#3425
        $k[$j++] = _bF; //#3429
        if (_bF.length < 1) { //#3429
            $j -= 2; //#3428
            $k[$j++] = 'bwipp.GS1couponTooShortSnVLI#3428'; //#3428
            $k[$j++] = "Coupon too short: Missing SN VLI"; //#3428
            $k[$j++] = false; //#3428
            return true; //#3428
        } //#3428
        var _bG = $k[$j - 1]; //#3430
        var _bH = $geti(_bG, 0, 1); //#3430
        $k[$j++] = ($cvi(_bH) + 6) + 1; //#3434
        if ((($cvi(_bH) + 6) + 1) > _bG.length) { //#3434
            $j -= 3; //#3433
            $k[$j++] = 'bwipp.GS1couponTooShortSn#3433'; //#3433
            $k[$j++] = "Coupon too short: Truncated SN"; //#3433
            $k[$j++] = false; //#3433
            return true; //#3433
        } //#3433
        var _bI = $k[--$j]; //#3435
        var _bJ = $k[--$j]; //#3435
        var _bK = $geti(_bJ, _bI, $f(_bJ.length - _bI)); //#3435
        $k[$j++] = _bK; //#3438
        if (_bK.length != 0) { //#3438
            $j -= 2; //#3437
            $k[$j++] = 'bwipp.GS1couponTooLong#3437'; //#3437
            $k[$j++] = "Coupon too long"; //#3437
            $k[$j++] = false; //#3437
            return true; //#3437
        } //#3437
        $j--; //#3439
    }; //#3439
    $_.lintlatitude = function() {
        var _bL = $k[$j - 1]; //#3443
        if (_bL.length != 10) { //#3445
            $j--; //#3444
            $k[$j++] = 'bwipp.GS1badLatitudeLength#3444'; //#3444
            $k[$j++] = "Invalid length for a latitude"; //#3444
            $k[$j++] = false; //#3444
            return true; //#3444
        } //#3444
        if ($cvi($k[--$j]) > $cvi("1800000000")) { //#3448
            $j--; //#3448
            $k[$j++] = 'bwipp.GS1badLatitude#3448'; //#3448
            $k[$j++] = "Invalid value for latitude"; //#3448
            $k[$j++] = false; //#3448
            return true; //#3448
        } //#3448
    }; //#3448
    $_.lintlongitude = function() {
        var _bN = $k[$j - 1]; //#3452
        if (_bN.length != 10) { //#3454
            $j--; //#3453
            $k[$j++] = 'bwipp.GS1badLongitudeLength#3453'; //#3453
            $k[$j++] = "Invalid length for a longitude"; //#3453
            $k[$j++] = false; //#3453
            return true; //#3453
        } //#3453
        if ($cvi($k[--$j]) > $cvi("3600000000")) { //#3458
            $j--; //#3458
            $k[$j++] = 'bwipp.GS1badLongitude#3458'; //#3458
            $k[$j++] = "Invalid value for longitude"; //#3458
            $k[$j++] = false; //#3458
            return true; //#3458
        } //#3458
    }; //#3458
    $k[$j++] = Infinity; //#3462
    var _bP = $a(['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99']); //#3465
    for (var _bQ = 0, _bR = _bP.length; _bQ < _bR; _bQ++) { //#3466
        var _bS = $get(_bP, _bQ); //#3466
        $k[$j++] = _bS; //#3466
        $k[$j++] = _bS; //#3466
    } //#3466
    $_.aidcmediatype = $d(); //#3466
    $_.lintmediatype = function() {
        var _bX = $get($_.aidcmediatype, $k[--$j]) !== undefined; //#3470
        if (!_bX) { //#3470
            $j--; //#3470
            $k[$j++] = 'bwipp.GS1UnknownMediaType#3470'; //#3470
            $k[$j++] = "Unknown AIDC media type"; //#3470
            $k[$j++] = false; //#3470
            return true; //#3470
        } //#3470
    }; //#3470
    $k[$j++] = Infinity; //#3474
    var _bY = $a(['1A', '1B', '1D', '1F', '1G', '1W', '200', '201', '202', '203', '204', '205', '206', '210', '211', '212', '2C', '3A', '3H', '43', '44', '4A', '4B', '4C', '4D', '4F', '4G', '4H', '5H', '5L', '5M', '6H', '6P', '7A', '7B', '8', '8A', '8B', '8C', '9', 'AA', 'AB', 'AC', 'AD', 'AF', 'AG', 'AH', 'AI', 'AJ', 'AL', 'AM', 'AP', 'APE/AT', 'AV', 'B4', 'BB', 'BC', 'BD', 'BE', 'BF', 'BG', 'BGE', 'BH', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BME', 'BN', 'BO', 'BP', 'BQ', 'BR', 'BRI', 'BS', 'BT', 'BU', 'BV', 'BW', 'BX', 'BY', 'BZ', 'CA', 'CB', 'CBL', 'CC', 'CCE', 'CD', 'CE', 'CF', 'CG', 'CH', 'CI', 'CJ', 'CK', 'CL', 'CM', 'CN', 'CO', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'DA', 'DB', 'DC', 'DG', 'DH', 'DI', 'DJ', 'DK', 'DL', 'DM', 'DN', 'DP', 'DPE', 'DR', 'DS', 'DT', 'DU', 'DV', 'DW', 'DX', 'DY', 'E1', 'E2', 'E3', 'EC', 'ED', 'EE', 'EF', 'EG', 'EH', 'EI', 'EN', 'FB', 'FC', 'FD', 'FE', 'FI', 'FL', 'FO', 'FOB', 'FP', 'FPE', 'FR', 'FT', 'FW', 'FX', 'GB', 'GI', 'GL', 'GR', 'GU', 'GY', 'GZ', 'HA', 'HB', 'HC', 'HG', 'HN', 'HR', 'IA', 'IB', 'IC', 'ID', 'IE', 'IF', 'IG', 'IH', 'IK', 'IL', 'IN', 'IZ', 'JB', 'JC', 'JG', 'JR', 'JT', 'JY', 'KG', 'KI', 'LAB', 'LE', 'LG', 'LT', 'LU', 'LV', 'LZ', 'MA', 'MB', 'MC', 'ME', 'MPE', 'MR', 'MS', 'MT', 'MW', 'MX', 'NA', 'NE', 'NF', 'NG', 'NS', 'NT', 'NU', 'NV', 'OA', 'OB', 'OC', 'OD', 'OE', 'OF', 'OK', 'OPE', 'OT', 'OU', 'P2', 'PA', 'PAE', 'PB', 'PC', 'PD', 'PE', 'PF', 'PG', 'PH', 'PI', 'PJ', 'PK', 'PL', 'PLP', 'PN', 'PO', 'POP', 'PP', 'PPE', 'PR', 'PT', 'PU', 'PUE', 'PV', 'PX', 'PY', 'PZ', 'QA', 'QB', 'QC', 'QD', 'QF', 'QG', 'QH', 'QJ', 'QK', 'QL', 'QM', 'QN', 'QP', 'QQ', 'QR', 'QS', 'RB1', 'RB2', 'RB3', 'RCB', 'RD', 'RG', 'RJ', 'RK', 'RL', 'RO', 'RT', 'RZ', 'S1', 'SA', 'SB', 'SC', 'SD', 'SE', 'SEC', 'SH', 'SI', 'SK', 'SL', 'SM', 'SO', 'SP', 'SS', 'ST', 'STL', 'SU', 'SV', 'SW', 'SX', 'SY', 'SZ', 'T1', 'TB', 'TC', 'TD', 'TE', 'TEV', 'TG', 'THE', 'TI', 'TK', 'TL', 'TN', 'TO', 'TR', 'TRE', 'TS', 'TT', 'TTE', 'TU', 'TV', 'TW', 'TWE', 'TY', 'TZ', 'UC', 'UN', 'UUE', 'VA', 'VG', 'VI', 'VK', 'VL', 'VN', 'VO', 'VP', 'VQ', 'VR', 'VS', 'VY', 'WA', 'WB', 'WC', 'WD', 'WF', 'WG', 'WH', 'WJ', 'WK', 'WL', 'WM', 'WN', 'WP', 'WQ', 'WR', 'WRP', 'WS', 'WT', 'WU', 'WV', 'WW', 'WX', 'WY', 'WZ', 'X11', 'X12', 'X15', 'X16', 'X17', 'X18', 'X19', 'X20', 'X3', 'XA', 'XB', 'XC', 'XD', 'XF', 'XG', 'XH', 'XJ', 'XK', 'YA', 'YB', 'YC', 'YD', 'YF', 'YG', 'YH', 'YJ', 'YK', 'YL', 'YM', 'YN', 'YP', 'YQ', 'YR', 'YS', 'YT', 'YV', 'YW', 'YX', 'YY', 'YZ', 'ZA', 'ZB', 'ZC', 'ZD', 'ZF', 'ZG', 'ZH', 'ZJ', 'ZK', 'ZL', 'ZM', 'ZN', 'ZP', 'ZQ', 'ZR', 'ZS', 'ZT', 'ZU', 'ZV', 'ZW', 'ZX', 'ZY', 'ZZ']); //#3509
    for (var _bZ = 0, _ba = _bY.length; _bZ < _ba; _bZ++) { //#3510
        var _bb = $get(_bY, _bZ); //#3510
        $k[$j++] = _bb; //#3510
        $k[$j++] = _bb; //#3510
    } //#3510
    $_.packagetype = $d(); //#3510
    $_.lintpackagetype = function() {
        var _bg = $get($_.packagetype, $k[--$j]) !== undefined; //#3514
        if (!_bg) { //#3514
            $j--; //#3514
            $k[$j++] = 'bwipp.GS1unknownPackageType#3514'; //#3514
            $k[$j++] = "Unknown package type"; //#3514
            $k[$j++] = false; //#3514
            return true; //#3514
        } //#3514
    }; //#3514
    if (!$_.dontlint) { //#3662
        $k[$j++] = true; //#3558
        for (var _bk = 0, _bj = $_.vals.length - 1; _bk <= _bj; _bk += 1) { //#3558
            $_.ai = $get($_.ais, _bk); //#3522
            $_.val = $get($_.vals, _bk); //#3523
            var _br = $get($_.gs1syntax, $_.ai) !== undefined; //#3524
            if (_br) { //#3556
                var _bv = $get($get($_.gs1syntax, $_.ai), 'parts'); //#3525
                $k[$j++] = _bv; //#3527
                $k[$j++] = 0; //#3527
                $forall(_bv, function() { //#3527
                    var _bw = $k[$j - 1]; //#3527
                    if ($get(_bw, 'opt')) { //#3527
                        $k[$j - 1] = 0; //#3527
                    } else { //#3527
                        var _bz = $get($k[--$j], 'min'); //#3527
                        $k[$j++] = _bz; //#3527
                    } //#3527
                    var _c0 = $k[--$j]; //#3527
                    var _c1 = $k[--$j]; //#3527
                    $k[$j++] = $f(_c1 + _c0); //#3527
                }); //#3527
                if ($k[--$j] > $_.val.length) { //#3529
                    $j--; //#3528
                    $k[$j++] = 'bwipp.GS1valueTooShort#3528'; //#3528
                    $k[$j++] = "Too short"; //#3528
                    $k[$j++] = false; //#3528
                    break; //#3528
                } //#3528
                var _c4 = $k[$j - 1]; //#3530
                $k[$j++] = 0; //#3530
                $forall(_c4, function() { //#3530
                    var _c6 = $get($k[--$j], 'max'); //#3530
                    var _c7 = $k[--$j]; //#3530
                    $k[$j++] = $f(_c7 + _c6); //#3530
                }); //#3530
                if ($k[--$j] < $_.val.length) { //#3532
                    $j--; //#3531
                    $k[$j++] = 'bwipp.GS1valueTooLong#3531'; //#3531
                    $k[$j++] = "Too long"; //#3531
                    $k[$j++] = false; //#3531
                    break; //#3531
                } //#3531
                $forall($k[--$j], function() { //#3550
                    $_.props = $k[--$j]; //#3534
                    var _cD = $get($_.props, 'max'); //#3535
                    var _cE = $_.val; //#3535
                    var _cF = _cE.length; //#3535
                    if (_cD > _cE.length) { //#3535
                        var _ = _cF; //#3535
                        _cF = _cD; //#3535
                        _cD = _; //#3535
                    } //#3535
                    $_.eval = $geti($_.val, 0, _cD); //#3536
                    var _cK = $_.eval.length; //#3537
                    $_.val = $geti($_.val, _cK, $_.val.length - _cK); //#3537
                    if ($_.eval.length == 0) { //#3548
                        if (!$get($_.props, 'opt')) { //#3541
                            $j--; //#3540
                            $k[$j++] = 'bwipp.GS1valueTooShort#3540'; //#3540
                            $k[$j++] = "Too short"; //#3540
                            $k[$j++] = false; //#3540
                            return true; //#3540
                        } //#3540
                    } else { //#3548
                        if ($_.eval.length < $get($_.props, 'min')) { //#3545
                            $j--; //#3544
                            $k[$j++] = 'bwipp.GS1valueTooShort#3544'; //#3544
                            $k[$j++] = "Too short"; //#3544
                            $k[$j++] = false; //#3544
                            return true; //#3544
                        } //#3544
                        var _cT = new Map([
                            ["N", 'lintnumeric'],
                            ["X", 'lintcset82'],
                            ["Y", 'lintcset39'],
                            ["Z", 'lintcset64']
                        ]); //#3546
                        $k[$j++] = $_.eval; //#3547
                        if ($_[$get(_cT, $get($_.props, 'cset'))]() === true) {
                            return true;
                        } //#3547
                        $forall($get($_.props, 'linters'), function() { //#3548
                            var _cd = $_[$k[--$j]]; //#3548
                            $k[$j++] = $_.eval; //#3548
                            if (_cd() === true) {
                                return true;
                            } //#3548
                        }); //#3548
                    } //#3548
                }); //#3548
                var _ce = $k[$j - 1]; //#3551
                if (!_ce) { //#3551
                    break; //#3551
                } //#3551
                if ($_.val.length != 0) { //#3554
                    $j--; //#3553
                    $k[$j++] = 'bwipp.GS1valueTooLong#3553'; //#3553
                    $k[$j++] = "Too long"; //#3553
                    $k[$j++] = false; //#3553
                    break; //#3553
                } //#3553
            } else { //#3556
                $j--; //#3556
                $k[$j++] = 'bwipp.GS1unknownAI#3556'; //#3556
                $k[$j++] = "Unrecognised AI"; //#3556
                $k[$j++] = false; //#3556
                break; //#3556
            } //#3556
        } //#3556
        if (!$k[--$j]) { //#3566
            var _ch = $k[--$j]; //#3560
            var _cj = $s((_ch.length + $_.ai.length) + 5); //#3560
            $puti(_cj, 0, "AI "); //#3561
            $puti(_cj, 3, $_.ai); //#3562
            $puti(_cj, 3 + $_.ai.length, ": "); //#3563
            $puti(_cj, 5 + $_.ai.length, _ch); //#3564
            $k[$j++] = _cj; //#3565
            bwipp_raiseerror(); //#3565
        } //#3565
        $_.aiexists = function() {
            $_.this = $k[--$j]; //#3570
            $_.patt = $k[--$j]; //#3571
            for (var _cp = 0; _cp < 1; _cp++) { //#3592
                var _cs = $get($_.aivals, $_.patt) !== undefined; //#3573
                if (_cs) { //#3573
                    $k[$j++] = true; //#3573
                    break; //#3573
                } //#3573
                if ($_.patt.length == 4) { //#3590
                    if ($eq($geti($_.patt, 3, 1), "n")) { //#3588
                        var _cy = $eq($geti($_.patt, 2, 1), "n") ? 2 : 3; //#3576
                        $_.pfxlen = _cy; //#3576
                        var _cz = $_.ais; //#3578
                        $k[$j++] = false; //#3586
                        for (var _d0 = 0, _d1 = _cz.length; _d0 < _d1; _d0++) { //#3586
                            var _d2 = $get(_cz, _d0); //#3586
                            $k[$j++] = _d2; //#3585
                            if ($ne(_d2, $_.this) && (_d2.length == 4)) { //#3584
                                if ($eq($geti($k[--$j], 0, $_.pfxlen), $geti($_.patt, 0, $_.pfxlen))) { //#3582
                                    $k[$j - 1] = true; //#3581
                                } //#3581
                            } else { //#3584
                                $j--; //#3584
                            } //#3584
                        } //#3584
                        break; //#3587
                    } //#3587
                    $k[$j++] = false; //#3589
                    break; //#3589
                } //#3589
                $k[$j++] = false; //#3591
                break; //#3591
            } //#3591
        }; //#3591
        var _dA = $_.vals; //#3596
        $_.aivals = new Map; //#3596
        for (var _dD = 0, _dC = $_.vals.length - 1; _dD <= _dC; _dD += 1) { //#3611
            $_.ai = $get($_.ais, _dD); //#3598
            $_.val = $get($_.vals, _dD); //#3599
            var _dK = $get($_.aivals, $_.ai) !== undefined; //#3600
            if (_dK) { //#3609
                if ($ne($get($_.aivals, $_.ai), $_.val)) { //#3607
                    var _dQ = $s($_.ai.length + 40); //#3602
                    $puti(_dQ, 0, "Repeated AIs \("); //#3603
                    $puti(_dQ, 14, $_.ai); //#3604
                    $puti(_dQ, 14 + $_.ai.length, "\) must have the same value"); //#3605
                    $k[$j++] = 'bwipp.GS1repeatedDifferingAIs#3606'; //#3606
                    $k[$j++] = _dQ; //#3606
                    bwipp_raiseerror(); //#3606
                } //#3606
            } else { //#3609
                $put($_.aivals, $_.ai, $_.val); //#3609
            } //#3609
        } //#3609
        for (var _dY = 0, _dX = $_.vals.length - 1; _dY <= _dX; _dY += 1) { //#3660
            $_.ai = $get($_.ais, _dY); //#3615
            var _dd = $get($_.gs1syntax, $_.ai); //#3616
            var _de = $get(_dd, 'ex') !== undefined; //#3616
            $k[$j++] = _dd; //#3631
            $k[$j++] = 'ex'; //#3631
            if (_de) { //#3630
                var _df = $k[--$j]; //#3617
                $forall($get($k[--$j], _df), function() { //#3628
                    $_.patt = $k[--$j]; //#3618
                    $k[$j++] = $_.patt; //#3619
                    $k[$j++] = $_.ai; //#3619
                    $_.aiexists(); //#3619
                    if ($k[--$j]) { //#3627
                        var _do = $s(($_.ai.length + $_.patt.length) + 36); //#3620
                        $puti(_do, 0, "AIs \("); //#3621
                        $puti(_do, 5, $_.ai); //#3622
                        $puti(_do, 5 + $_.ai.length, "\) and \("); //#3623
                        $puti(_do, 12 + $_.ai.length, $_.patt); //#3624
                        $puti(_do, (12 + $_.ai.length) + $_.patt.length, "\) are mutually exclusive"); //#3625
                        $k[$j++] = 'bwipp.GS1exclusiveAIs#3626'; //#3626
                        $k[$j++] = _do; //#3626
                        bwipp_raiseerror(); //#3626
                    } //#3626
                }); //#3626
            } else { //#3630
                $j -= 2; //#3630
            } //#3630
            if ($_.lintreqs) { //#3659
                var _dy = $get($_.gs1syntax, $_.ai); //#3633
                var _dz = $get(_dy, 'req') !== undefined; //#3633
                $k[$j++] = _dy; //#3658
                $k[$j++] = 'req'; //#3658
                if (_dz) { //#3657
                    var _e0 = $k[--$j]; //#3634
                    $forall($get($k[--$j], _e0), function() { //#3655
                        var _e3 = $k[--$j]; //#3635
                        $k[$j++] = false; //#3640
                        $forall(_e3, function() { //#3640
                            var _e4 = $k[--$j]; //#3636
                            $k[$j++] = true; //#3638
                            $forall(_e4, function() { //#3638
                                $k[$j++] = $_.ai; //#3637
                                $_.aiexists(); //#3637
                                if (!$k[--$j]) { //#3637
                                    $k[$j - 1] = false; //#3637
                                } //#3637
                            }); //#3637
                            if ($k[--$j]) { //#3639
                                $k[$j - 1] = true; //#3639
                                return true; //#3639
                            } //#3639
                        }); //#3639
                        if (!$k[--$j]) { //#3654
                            $k[$j++] = Infinity; //#3642
                            $forall($get($get($_.gs1syntax, $_.ai), 'req'), function() { //#3644
                                $forall($k[--$j], function() { //#3644
                                    $forall($k[--$j], function() { //#3644
                                        $k[$j++] = "+"; //#3644
                                    }); //#3644
                                    $k[$j - 1] = " OR "; //#3644
                                }); //#3644
                                $k[$j - 1] = " WITH "; //#3644
                            }); //#3644
                            $j--; //#3644
                            var _eF = $a(); //#3644
                            $k[$j++] = _eF; //#3645
                            $k[$j++] = 0; //#3645
                            for (var _eG = 0, _eH = _eF.length; _eG < _eH; _eG++) { //#3645
                                var _eJ = $k[--$j]; //#3645
                                $k[$j++] = $f(_eJ + $get(_eF, _eG).length); //#3645
                            } //#3645
                            var _eL = $_.ai.length + 49; //#3646
                            $k[$j++] = _eL; //#3646
                            $k[$j++] = _eL; //#3646
                            var _eM = $k[$j - 3]; //#3646
                            var _eO = $s($f($k[$j - 1] + _eM)); //#3646
                            var _eP = $k[$j - 2]; //#3646
                            $j -= 3; //#3646
                            $k[$j++] = _eO; //#3646
                            $k[$j++] = _eP; //#3646
                            $r(3, -1); //#3646
                            $forall($k[--$j], function() { //#3649
                                var _eR = $k[--$j]; //#3647
                                var _eS = $k[--$j]; //#3647
                                var _eT = $k[$j - 1]; //#3648
                                $puti(_eT, _eS, _eR); //#3648
                                $k[$j++] = $f(_eR.length + _eS); //#3648
                            }); //#3648
                            $j--; //#3649
                            var _eU = $k[--$j]; //#3650
                            $puti(_eU, 0, "One of more requisite AIs for AI \("); //#3650
                            $puti(_eU, 34, $_.ai); //#3651
                            $puti(_eU, 34 + $_.ai.length, "\) are missing: "); //#3652
                            $k[$j++] = 'bwipp.GS1missingAIs#3653'; //#3653
                            $k[$j++] = _eU; //#3653
                            bwipp_raiseerror(); //#3653
                        } //#3653
                    }); //#3653
                } else { //#3657
                    $j -= 2; //#3657
                } //#3657
            } //#3657
        } //#3657
    } //#3657
    $k[$j++] = $_.ais; //#3666
    $k[$j++] = $_.vals; //#3666
    $k[$j++] = $_.fncs; //#3666
    $_ = $__; //#3668
} //bwipp_gs1process
function bwipp_ean5() {
    var $__ = $_; //#4596
    $_ = Object.assign({}, $_); //#4596
    $_.dontdraw = false; //#4599
    $_.includetext = false; //#4600
    $_.textfont = "OCR-B"; //#4601
    $_.textsize = 12; //#4602
    $_.textxoffset = 0; //#4603
    $_.textyoffset = null; //#4604
    $_.height = 0.7; //#4605
    $k[$j++] = $_; //#4607
    bwipp_processoptions(); //#4607
    $_.options = $k[--$j]; //#4607
    $_.barcode = $k[--$j]; //#4608
    if ($_.textyoffset == null) { //#4612
        $_.textyoffset = ($_.height * 72) + 1; //#4611
    } //#4611
    if ($_.barcode.length != 5) { //#4619
        $k[$j++] = 'bwipp.ean5badLength#4618'; //#4618
        $k[$j++] = "EAN-5 add-on must be 5 digits"; //#4618
        bwipp_raiseerror(); //#4618
    } //#4618
    $forall($_.barcode, function() { //#4624
        var _6 = $k[--$j]; //#4621
        if ((_6 < 48) || (_6 > 57)) { //#4623
            $k[$j++] = 'bwipp.ean5badCharacter#4622'; //#4622
            $k[$j++] = "EAN-5 add-on must contain only digits"; //#4622
            bwipp_raiseerror(); //#4622
        } //#4622
    }); //#4622
    $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "112", "11"]); //#4632
    $_.barchars = "0123456789"; //#4635
    $_.mirrormaps = $a(["11000", "10100", "10010", "10001", "01100", "00110", "00011", "01010", "01001", "00101"]); //#4641
    $_.checksum = 0; //#4644
    for (var _A = 0; _A <= 4; _A += 1) { //#4653
        $_.i = _A; //#4646
        $_.barchar = $get($_.barcode, $_.i) - 48; //#4647
        if (($_.i % 2) == 0) { //#4651
            $_.checksum = $f(($_.barchar * 3) + $_.checksum); //#4649
        } else { //#4651
            $_.checksum = $f(($_.barchar * 9) + $_.checksum); //#4651
        } //#4651
    } //#4651
    $_.checksum = $_.checksum % 10; //#4654
    $_.mirrormap = $get($_.mirrormaps, $_.checksum); //#4655
    $_.sbs = $s(31); //#4657
    $_.txt = $a(5); //#4658
    for (var _P = 0; _P <= 4; _P += 1) { //#4688
        $_.i = _P; //#4661
        if ($_.i == 0) { //#4667
            $puti($_.sbs, 0, $get($_.encs, 10)); //#4665
        } else { //#4667
            $puti($_.sbs, (($_.i - 1) * 6) + 7, $get($_.encs, 11)); //#4667
        } //#4667
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4671
        $j--; //#4672
        $_.indx = $k[--$j].length; //#4673
        $j -= 2; //#4674
        $_.enc = $get($_.encs, $_.indx); //#4675
        if ($get($_.mirrormap, $_.i) == 49) { //#4685
            $_.enclen = $_.enc.length; //#4677
            $_.revenc = $s($_.enclen); //#4678
            for (var _o = 0, _n = $_.enclen - 1; _o <= _n; _o += 1) { //#4683
                $_.j = _o; //#4680
                $_.char = $get($_.enc, $_.j); //#4681
                $put($_.revenc, ($_.enclen - $_.j) - 1, $_.char); //#4682
            } //#4682
            $_.enc = $_.revenc; //#4684
        } //#4684
        $puti($_.sbs, ($_.i * 6) + 3, $_.enc); //#4686
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 9) + 10) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4687
    } //#4687
    $k[$j++] = Infinity; //#4691
    $k[$j++] = Infinity; //#4693
    var _1B = $_.sbs; //#4693
    for (var _1C = 0, _1D = _1B.length; _1C < _1D; _1C++) { //#4693
        $k[$j++] = $get(_1B, _1C) - 48; //#4693
    } //#4693
    var _1F = $a(); //#4693
    $k[$j++] = Infinity; //#4694
    for (var _1G = 0; _1G < 16; _1G++) { //#4694
        $k[$j++] = $_.height; //#4694
    } //#4694
    var _1I = $a(); //#4694
    $k[$j++] = Infinity; //#4695
    for (var _1J = 0; _1J < 16; _1J++) { //#4695
        $k[$j++] = 0; //#4695
    } //#4695
    var _1K = $a(); //#4695
    $k[$j++] = 'ren'; //#4698
    $k[$j++] = 'renlinear'; //#4698
    $k[$j++] = 'sbs'; //#4698
    $k[$j++] = _1F; //#4698
    $k[$j++] = 'bhs'; //#4698
    $k[$j++] = _1I; //#4698
    $k[$j++] = 'bbs'; //#4698
    $k[$j++] = _1K; //#4698
    if ($_.includetext) { //#4698
        $k[$j++] = 'txt'; //#4697
        $k[$j++] = $_.txt; //#4697
    } //#4697
    $k[$j++] = 'opt'; //#4704
    $k[$j++] = $_.options; //#4704
    $k[$j++] = 'guardrightpos'; //#4704
    $k[$j++] = 5; //#4704
    $k[$j++] = 'guardrightypos'; //#4704
    $k[$j++] = $_.textyoffset + 4; //#4704
    $k[$j++] = 'borderleft'; //#4704
    $k[$j++] = 12; //#4704
    $k[$j++] = 'borderright'; //#4704
    $k[$j++] = 5; //#4704
    $k[$j++] = 'bordertop'; //#4704
    $k[$j++] = 10; //#4704
    var _1P = $d(); //#4704
    $k[$j++] = _1P; //#4707
    if (!$_.dontdraw) { //#4707
        bwipp_renlinear(); //#4707
    } //#4707
    $_ = $__; //#4711
} //bwipp_ean5
function bwipp_ean2() {
    var $__ = $_; //#4741
    $_ = Object.assign({}, $_); //#4741
    $_.dontdraw = false; //#4744
    $_.includetext = false; //#4745
    $_.textfont = "OCR-B"; //#4746
    $_.textsize = 12; //#4747
    $_.textxoffset = 0; //#4748
    $_.textyoffset = null; //#4749
    $_.height = 0.7; //#4750
    $k[$j++] = $_; //#4752
    bwipp_processoptions(); //#4752
    $_.options = $k[--$j]; //#4752
    $_.barcode = $k[--$j]; //#4753
    if ($_.textyoffset == null) { //#4757
        $_.textyoffset = ($_.height * 72) + 1; //#4756
    } //#4756
    if ($_.barcode.length != 2) { //#4764
        $k[$j++] = 'bwipp.ean2badLength#4763'; //#4763
        $k[$j++] = "EAN-2 add-on must be 2 digits"; //#4763
        bwipp_raiseerror(); //#4763
    } //#4763
    $forall($_.barcode, function() { //#4769
        var _6 = $k[--$j]; //#4766
        if ((_6 < 48) || (_6 > 57)) { //#4768
            $k[$j++] = 'bwipp.ean2badCharacter#4767'; //#4767
            $k[$j++] = "EAN-2 add-on must contain only digits"; //#4767
            bwipp_raiseerror(); //#4767
        } //#4767
    }); //#4767
    $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "112", "11"]); //#4777
    $_.barchars = "0123456789"; //#4780
    $_.mirrormaps = $a(["00", "01", "10", "11"]); //#4783
    $_.mirrormap = $get($_.mirrormaps, $cvi($geti($_.barcode, 0, 2)) % 4); //#4786
    $_.sbs = $s(13); //#4788
    $_.txt = $a(2); //#4789
    for (var _G = 0; _G <= 1; _G += 1) { //#4819
        $_.i = _G; //#4792
        if ($_.i == 0) { //#4798
            $puti($_.sbs, 0, $get($_.encs, 10)); //#4796
        } else { //#4798
            $puti($_.sbs, (($_.i - 1) * 6) + 7, $get($_.encs, 11)); //#4798
        } //#4798
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4802
        $j--; //#4803
        $_.indx = $k[--$j].length; //#4804
        $j -= 2; //#4805
        $_.enc = $get($_.encs, $_.indx); //#4806
        if ($get($_.mirrormap, $_.i) == 49) { //#4816
            $_.enclen = $_.enc.length; //#4808
            $_.revenc = $s($_.enclen); //#4809
            for (var _f = 0, _e = $_.enclen - 1; _f <= _e; _f += 1) { //#4814
                $_.j = _f; //#4811
                $_.char = $get($_.enc, $_.j); //#4812
                $put($_.revenc, ($_.enclen - $_.j) - 1, $_.char); //#4813
            } //#4813
            $_.enc = $_.revenc; //#4815
        } //#4815
        $puti($_.sbs, ($_.i * 6) + 3, $_.enc); //#4817
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 9) + 10) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4818
    } //#4818
    $k[$j++] = Infinity; //#4822
    $k[$j++] = Infinity; //#4824
    var _12 = $_.sbs; //#4824
    for (var _13 = 0, _14 = _12.length; _13 < _14; _13++) { //#4824
        $k[$j++] = $get(_12, _13) - 48; //#4824
    } //#4824
    var _16 = $a(); //#4824
    $k[$j++] = Infinity; //#4825
    for (var _17 = 0; _17 < 12; _17++) { //#4825
        $k[$j++] = $_.height; //#4825
    } //#4825
    var _19 = $a(); //#4825
    $k[$j++] = Infinity; //#4826
    for (var _1A = 0; _1A < 12; _1A++) { //#4826
        $k[$j++] = 0; //#4826
    } //#4826
    var _1B = $a(); //#4826
    $k[$j++] = 'ren'; //#4829
    $k[$j++] = 'renlinear'; //#4829
    $k[$j++] = 'sbs'; //#4829
    $k[$j++] = _16; //#4829
    $k[$j++] = 'bhs'; //#4829
    $k[$j++] = _19; //#4829
    $k[$j++] = 'bbs'; //#4829
    $k[$j++] = _1B; //#4829
    if ($_.includetext) { //#4829
        $k[$j++] = 'txt'; //#4828
        $k[$j++] = $_.txt; //#4828
    } //#4828
    $k[$j++] = 'opt'; //#4835
    $k[$j++] = $_.options; //#4835
    $k[$j++] = 'guardrightpos'; //#4835
    $k[$j++] = 5; //#4835
    $k[$j++] = 'guardrightypos'; //#4835
    $k[$j++] = $_.textyoffset + 4; //#4835
    $k[$j++] = 'borderleft'; //#4835
    $k[$j++] = 12; //#4835
    $k[$j++] = 'borderright'; //#4835
    $k[$j++] = 5; //#4835
    $k[$j++] = 'bordertop'; //#4835
    $k[$j++] = 10; //#4835
    var _1G = $d(); //#4835
    $k[$j++] = _1G; //#4838
    if (!$_.dontdraw) { //#4838
        bwipp_renlinear(); //#4838
    } //#4838
    $_ = $__; //#4842
} //bwipp_ean2
function bwipp_ean13() {
    var $__ = $_; //#4874
    $_ = Object.assign({}, $_); //#4874
    $_.dontdraw = false; //#4877
    $_.includetext = false; //#4878
    $_.textfont = "OCR-B"; //#4879
    $_.textsize = 12; //#4880
    $_.textxoffset = -11; //#4881
    $_.textyoffset = -4; //#4882
    $_.height = 1; //#4883
    $_.addongap = 12; //#4884
    $_.addontextfont = "unset"; //#4885
    $_.addontextsize = null; //#4886
    $_.addontextxoffset = null; //#4887
    $_.addontextyoffset = null; //#4888
    $k[$j++] = $_; //#4890
    bwipp_processoptions(); //#4890
    $_.options = $k[--$j]; //#4890
    $_.barcode = $k[--$j]; //#4891
    $search($_.barcode, " "); //#4896
    if ($k[--$j]) { //#4902
        $_.barcode = $k[--$j]; //#4897
        $j--; //#4898
        $_.addon = $k[--$j]; //#4899
    } else { //#4902
        $j--; //#4901
        $_.addon = ""; //#4902
    } //#4902
    if (($_.barcode.length != 12) && ($_.barcode.length != 13)) { //#4908
        $k[$j++] = 'bwipp.ean13badLength#4907'; //#4907
        $k[$j++] = "EAN-13 must be 12 or 13 digits"; //#4907
        bwipp_raiseerror(); //#4907
    } //#4907
    $forall($_.barcode, function() { //#4913
        var _9 = $k[--$j]; //#4910
        if ((_9 < 48) || (_9 > 57)) { //#4912
            $k[$j++] = 'bwipp.ean13badCharacter#4911'; //#4911
            $k[$j++] = "EAN-13 must contain only digits"; //#4911
            bwipp_raiseerror(); //#4911
        } //#4911
    }); //#4911
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#4916
        $k[$j++] = 'bwipp.ean13badAddOnLength#4915'; //#4915
        $k[$j++] = "Add-on for EAN-13 must be 2 or 5 digits"; //#4915
        bwipp_raiseerror(); //#4915
    } //#4915
    $_.pad = $s(13); //#4919
    $_.checksum = 0; //#4920
    for (var _E = 0; _E <= 11; _E += 1) { //#4929
        $_.i = _E; //#4922
        $_.barchar = $get($_.barcode, $_.i) - 48; //#4923
        if (($_.i % 2) == 0) { //#4927
            $_.checksum = $f($_.barchar + $_.checksum); //#4925
        } else { //#4927
            $_.checksum = $f(($_.barchar * 3) + $_.checksum); //#4927
        } //#4927
    } //#4927
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#4930
    if ($_.barcode.length == 13) { //#4935
        if ($get($_.barcode, 12) != ($_.checksum + 48)) { //#4934
            $k[$j++] = 'bwipp.ean13badCheckDigit#4933'; //#4933
            $k[$j++] = "Incorrect EAN-13 check digit provided"; //#4933
            bwipp_raiseerror(); //#4933
        } //#4933
    } //#4933
    $puti($_.pad, 0, $_.barcode); //#4936
    $put($_.pad, 12, $_.checksum + 48); //#4937
    $_.barcode = $_.pad; //#4938
    $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); //#4946
    $_.barchars = "0123456789"; //#4949
    $_.mirrormaps = $a(["000000", "001011", "001101", "001110", "010011", "011001", "011100", "010101", "010110", "011010"]); //#4955
    $_.sbs = $s(59); //#4958
    $_.txt = $a(13); //#4959
    $puti($_.sbs, 0, $get($_.encs, 10)); //#4962
    $_.mirrormap = $get($_.mirrormaps, $get($_.barcode, 0) - 48); //#4965
    $put($_.txt, 0, $a([$geti($_.barcode, 0, 1), $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4966
    for (var _r = 1; _r <= 6; _r += 1) { //#4989
        $_.i = _r; //#4971
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4972
        $j--; //#4973
        $_.indx = $k[--$j].length; //#4974
        $j -= 2; //#4975
        $_.enc = $get($_.encs, $_.indx); //#4976
        if ($get($_.mirrormap, $_.i - 1) == 49) { //#4986
            $_.enclen = $_.enc.length; //#4978
            $_.revenc = $s($_.enclen); //#4979
            for (var _18 = 0, _17 = $_.enclen - 1; _18 <= _17; _18 += 1) { //#4984
                $_.j = _18; //#4981
                $_.char = $get($_.enc, $_.j); //#4982
                $put($_.revenc, ($_.enclen - $_.j) - 1, $_.char); //#4983
            } //#4983
            $_.enc = $_.revenc; //#4985
        } //#4985
        $puti($_.sbs, (($_.i - 1) * 4) + 3, $_.enc); //#4987
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 7) + 15) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4988
    } //#4988
    $puti($_.sbs, ((7 - 1) * 4) + 3, $get($_.encs, 11)); //#4992
    for (var _1Y = 7; _1Y <= 12; _1Y += 1) { //#5005
        $_.i = _1Y; //#4997
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4998
        $j--; //#4999
        $_.indx = $k[--$j].length; //#5000
        $j -= 2; //#5001
        $_.enc = $get($_.encs, $_.indx); //#5002
        $puti($_.sbs, (($_.i - 1) * 4) + 8, $_.enc); //#5003
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 7) + 19) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#5004
    } //#5004
    $puti($_.sbs, 56, $get($_.encs, 12)); //#5008
    $k[$j++] = Infinity; //#5010
    var _1y = $_.sbs; //#5010
    for (var _1z = 0, _20 = _1y.length; _1z < _20; _1z++) { //#5010
        $k[$j++] = $get(_1y, _1z) - 48; //#5010
    } //#5010
    $_.sbs = $a(); //#5010
    if ($_.includetext) { //#5017
        $k[$j++] = Infinity; //#5012
        $k[$j++] = $_.height; //#5012
        $k[$j++] = $_.height; //#5012
        for (var _26 = 0; _26 < 12; _26++) { //#5012
            $k[$j++] = $f($_.height - 0.075); //#5012
        } //#5012
        $k[$j++] = $_.height; //#5012
        $k[$j++] = $_.height; //#5012
        for (var _2A = 0; _2A < 12; _2A++) { //#5012
            $k[$j++] = $f($_.height - 0.075); //#5012
        } //#5012
        $k[$j++] = $_.height; //#5012
        $k[$j++] = $_.height; //#5012
        $_.bhs = $a(); //#5012
        $k[$j++] = Infinity; //#5013
        $k[$j++] = 0; //#5013
        $k[$j++] = 0; //#5013
        for (var _2F = 0; _2F < 12; _2F++) { //#5013
            $k[$j++] = 0.075; //#5013
        } //#5013
        $k[$j++] = 0; //#5013
        $k[$j++] = 0; //#5013
        for (var _2G = 0; _2G < 12; _2G++) { //#5013
            $k[$j++] = 0.075; //#5013
        } //#5013
        $k[$j++] = 0; //#5013
        $k[$j++] = 0; //#5013
        $_.bbs = $a(); //#5013
    } else { //#5017
        $k[$j++] = Infinity; //#5015
        for (var _2I = 0; _2I < 30; _2I++) { //#5015
            $k[$j++] = $_.height; //#5015
        } //#5015
        $_.bhs = $a(); //#5015
        $k[$j++] = Infinity; //#5016
        for (var _2L = 0; _2L < 30; _2L++) { //#5016
            $k[$j++] = 0; //#5016
        } //#5016
        $_.bbs = $a(); //#5016
        $_.txt = $a([]); //#5017
    } //#5017
    $_.guardrightypos = 0; //#5019
    if ($_.addon.length != 0) { //#5040
        $k[$j++] = Infinity; //#5023
        $k[$j++] = 'dontdraw'; //#5026
        $k[$j++] = true; //#5026
        $k[$j++] = 'includetext'; //#5026
        $k[$j++] = true; //#5026
        $k[$j++] = 'height'; //#5026
        $k[$j++] = $_.height; //#5026
        if ($_.includetext) { //#5026
            var _2R = $k[--$j]; //#5026
            $k[$j++] = $f(_2R - 0.15); //#5026
        } //#5026
        $k[$j++] = 'textxoffset'; //#5027
        if ($_.addontextxoffset != null) { //#5027
            $k[$j++] = $_.addontextxoffset; //#5027
        } else { //#5027
            $k[$j++] = 95 + $_.addongap; //#5027
        } //#5027
        if ($_.addontextyoffset != null) { //#5028
            $k[$j++] = 'textyoffset'; //#5028
            $k[$j++] = $_.addontextyoffset; //#5028
        } //#5028
        $k[$j++] = 'textsize'; //#5029
        if ($_.addontextsize != null) { //#5029
            $k[$j++] = $_.addontextsize; //#5029
        } else { //#5029
            $k[$j++] = $_.textsize; //#5029
        } //#5029
        var _2b = $ne($_.addontextfont, "unset") ? $_.addontextfont : $_.textfont; //#5030
        $k[$j++] = 'textfont'; //#5030
        $k[$j++] = _2b; //#5030
        $_.addopts = $d(); //#5031
        if ($_.addon.length == 2) { //#5032
            $k[$j++] = $_.addon; //#5032
            $k[$j++] = $_.addopts; //#5032
            bwipp_ean2(); //#5032
        } //#5032
        if ($_.addon.length == 5) { //#5033
            $k[$j++] = $_.addon; //#5033
            $k[$j++] = $_.addopts; //#5033
            bwipp_ean5(); //#5033
        } //#5033
        $_.addcode = $k[--$j]; //#5034
        $k[$j++] = Infinity; //#5035
        $aload($_.sbs); //#5035
        $k[$j++] = $_.addongap; //#5035
        $aload($get($_.addcode, "sbs")); //#5035
        $_.sbs = $a(); //#5035
        $k[$j++] = Infinity; //#5036
        $aload($_.bhs); //#5036
        $aload($get($_.addcode, "bhs")); //#5036
        $_.bhs = $a(); //#5036
        $k[$j++] = Infinity; //#5037
        $aload($_.bbs); //#5037
        $aload($get($_.addcode, "bbs")); //#5037
        $_.bbs = $a(); //#5037
        $k[$j++] = Infinity; //#5038
        $aload($_.txt); //#5038
        $aload($get($_.addcode, "txt")); //#5038
        $_.txt = $a(); //#5038
        $_.guardrightypos = ($_.height * 72) - 6; //#5039
    } //#5039
    $k[$j++] = Infinity; //#5043
    $k[$j++] = 'ren'; //#5050
    $k[$j++] = 'renlinear'; //#5050
    $k[$j++] = 'sbs'; //#5050
    $k[$j++] = $_.sbs; //#5050
    $k[$j++] = 'bhs'; //#5050
    $k[$j++] = $_.bhs; //#5050
    $k[$j++] = 'bbs'; //#5050
    $k[$j++] = $_.bbs; //#5050
    $k[$j++] = 'txt'; //#5050
    $k[$j++] = $_.txt; //#5050
    $k[$j++] = 'opt'; //#5050
    $k[$j++] = $_.options; //#5050
    $k[$j++] = 'guardrightpos'; //#5050
    if ($_.addon.length == 0) { //#5050
        $k[$j++] = 7; //#5050
    } else { //#5050
        $k[$j++] = 5; //#5050
    } //#5050
    $k[$j++] = 'guardrightypos'; //#5053
    $k[$j++] = $_.guardrightypos; //#5053
    $k[$j++] = 'borderleft'; //#5053
    $k[$j++] = 11; //#5053
    $k[$j++] = 'borderright'; //#5053
    if ($_.addon.length == 0) { //#5053
        $k[$j++] = 7; //#5053
    } else { //#5053
        $k[$j++] = 5; //#5053
    } //#5053
    $k[$j++] = 'bordertop'; //#5055
    $k[$j++] = 0; //#5055
    $k[$j++] = 'borderbottom'; //#5055
    $k[$j++] = 5; //#5055
    var _3A = $d(); //#5055
    $k[$j++] = _3A; //#5058
    if (!$_.dontdraw) { //#5058
        bwipp_renlinear(); //#5058
    } //#5058
    $_ = $__; //#5062
} //bwipp_ean13
function bwipp_ean8() {
    var $__ = $_; //#5094
    $_ = Object.assign({}, $_); //#5094
    $_.dontdraw = false; //#5097
    $_.includetext = false; //#5098
    $_.textfont = "OCR-B"; //#5099
    $_.textsize = 12; //#5100
    $_.textxoffset = 4; //#5101
    $_.textyoffset = -4; //#5102
    $_.height = 1; //#5103
    $_.permitaddon = false; //#5104
    $_.addongap = 12; //#5105
    $_.addontextfont = "unset"; //#5106
    $_.addontextsize = null; //#5107
    $_.addontextxoffset = null; //#5108
    $_.addontextyoffset = null; //#5109
    $k[$j++] = $_; //#5111
    bwipp_processoptions(); //#5111
    $_.options = $k[--$j]; //#5111
    $_.barcode = $k[--$j]; //#5112
    $search($_.barcode, " "); //#5117
    if ($k[--$j]) { //#5123
        $_.barcode = $k[--$j]; //#5118
        $j--; //#5119
        $_.addon = $k[--$j]; //#5120
    } else { //#5123
        $j--; //#5122
        $_.addon = ""; //#5123
    } //#5123
    if (($_.barcode.length != 7) && ($_.barcode.length != 8)) { //#5129
        $k[$j++] = 'bwipp.ean8badLength#5128'; //#5128
        $k[$j++] = "EAN-8 must be 7 or 8 digits"; //#5128
        bwipp_raiseerror(); //#5128
    } //#5128
    $forall($_.barcode, function() { //#5134
        var _9 = $k[--$j]; //#5131
        if ((_9 < 48) || (_9 > 57)) { //#5133
            $k[$j++] = 'bwipp.ean8badCharacter#5132'; //#5132
            $k[$j++] = "EAN-8 must contain only digits"; //#5132
            bwipp_raiseerror(); //#5132
        } //#5132
    }); //#5132
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#5137
        $k[$j++] = 'bwipp.ean8badAddOnLength#5136'; //#5136
        $k[$j++] = "Add-on for EAN-8 must be 2 or 5 digits"; //#5136
        bwipp_raiseerror(); //#5136
    } //#5136
    if ((!$_.permitaddon) && ($_.addon.length != 0)) { //#5140
        $k[$j++] = 'bwipp.ean8badAddOnLength#5139'; //#5139
        $k[$j++] = "Non-standard use of add-on for EAN-8 requires \"permitaddon\" option"; //#5139
        bwipp_raiseerror(); //#5139
    } //#5139
    $_.pad = $s(8); //#5143
    $_.checksum = 0; //#5144
    for (var _G = 0; _G <= 6; _G += 1) { //#5153
        $_.i = _G; //#5146
        $_.barchar = $get($_.barcode, $_.i) - 48; //#5147
        if (($_.i % 2) != 0) { //#5151
            $_.checksum = $f($_.barchar + $_.checksum); //#5149
        } else { //#5151
            $_.checksum = $f(($_.barchar * 3) + $_.checksum); //#5151
        } //#5151
    } //#5151
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#5154
    if ($_.barcode.length == 8) { //#5159
        if ($get($_.barcode, 7) != ($_.checksum + 48)) { //#5158
            $k[$j++] = 'bwipp.ean8badCheckDigit#5157'; //#5157
            $k[$j++] = "Incorrect EAN-8 check digit provided"; //#5157
            bwipp_raiseerror(); //#5157
        } //#5157
    } //#5157
    $puti($_.pad, 0, $_.barcode); //#5160
    $put($_.pad, 7, $_.checksum + 48); //#5161
    $_.barcode = $_.pad; //#5162
    $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); //#5170
    $_.barchars = "0123456789"; //#5173
    $_.sbs = $s(43); //#5176
    $_.txt = $a(8); //#5177
    $puti($_.sbs, 0, $get($_.encs, 10)); //#5180
    for (var _g = 0; _g <= 3; _g += 1) { //#5193
        $_.i = _g; //#5185
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#5186
        $j--; //#5187
        $_.indx = $k[--$j].length; //#5188
        $j -= 2; //#5189
        $_.enc = $get($_.encs, $_.indx); //#5190
        $puti($_.sbs, ($_.i * 4) + 3, $_.enc); //#5191
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 7) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#5192
    } //#5192
    $puti($_.sbs, (4 * 4) + 3, $get($_.encs, 11)); //#5196
    for (var _16 = 4; _16 <= 7; _16 += 1) { //#5209
        $_.i = _16; //#5201
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#5202
        $j--; //#5203
        $_.indx = $k[--$j].length; //#5204
        $j -= 2; //#5205
        $_.enc = $get($_.encs, $_.indx); //#5206
        $puti($_.sbs, ($_.i * 4) + 8, $_.enc); //#5207
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 7) + $_.textxoffset) + 4, $_.textyoffset, $_.textfont, $_.textsize])); //#5208
    } //#5208
    $puti($_.sbs, 40, $get($_.encs, 12)); //#5212
    $k[$j++] = Infinity; //#5214
    var _1W = $_.sbs; //#5214
    for (var _1X = 0, _1Y = _1W.length; _1X < _1Y; _1X++) { //#5214
        $k[$j++] = $get(_1W, _1X) - 48; //#5214
    } //#5214
    $_.sbs = $a(); //#5214
    if ($_.includetext) { //#5221
        $k[$j++] = Infinity; //#5216
        $k[$j++] = $_.height; //#5216
        $k[$j++] = $_.height; //#5216
        for (var _1e = 0; _1e < 8; _1e++) { //#5216
            $k[$j++] = $f($_.height - 0.075); //#5216
        } //#5216
        $k[$j++] = $_.height; //#5216
        $k[$j++] = $_.height; //#5216
        for (var _1i = 0; _1i < 8; _1i++) { //#5216
            $k[$j++] = $f($_.height - 0.075); //#5216
        } //#5216
        $k[$j++] = $_.height; //#5216
        $k[$j++] = $_.height; //#5216
        $_.bhs = $a(); //#5216
        $k[$j++] = Infinity; //#5217
        $k[$j++] = 0; //#5217
        $k[$j++] = 0; //#5217
        for (var _1n = 0; _1n < 8; _1n++) { //#5217
            $k[$j++] = 0.075; //#5217
        } //#5217
        $k[$j++] = 0; //#5217
        $k[$j++] = 0; //#5217
        for (var _1o = 0; _1o < 8; _1o++) { //#5217
            $k[$j++] = 0.075; //#5217
        } //#5217
        $k[$j++] = 0; //#5217
        $k[$j++] = 0; //#5217
        $_.bbs = $a(); //#5217
    } else { //#5221
        $k[$j++] = Infinity; //#5219
        for (var _1q = 0; _1q < 22; _1q++) { //#5219
            $k[$j++] = $_.height; //#5219
        } //#5219
        $_.bhs = $a(); //#5219
        $k[$j++] = Infinity; //#5220
        for (var _1t = 0; _1t < 22; _1t++) { //#5220
            $k[$j++] = 0; //#5220
        } //#5220
        $_.bbs = $a(); //#5220
        $_.txt = $a([]); //#5221
    } //#5221
    $_.guardrightypos = 0; //#5223
    if ($_.addon.length != 0) { //#5244
        $k[$j++] = Infinity; //#5227
        $k[$j++] = 'dontdraw'; //#5230
        $k[$j++] = true; //#5230
        $k[$j++] = 'includetext'; //#5230
        $k[$j++] = true; //#5230
        $k[$j++] = 'height'; //#5230
        $k[$j++] = $_.height; //#5230
        if ($_.includetext) { //#5230
            var _1z = $k[--$j]; //#5230
            $k[$j++] = $f(_1z - 0.15); //#5230
        } //#5230
        $k[$j++] = 'textxoffset'; //#5231
        if ($_.addontextxoffset != null) { //#5231
            $k[$j++] = $_.addontextxoffset; //#5231
        } else { //#5231
            $k[$j++] = 67 + $_.addongap; //#5231
        } //#5231
        if ($_.addontextyoffset != null) { //#5232
            $k[$j++] = 'textyoffset'; //#5232
            $k[$j++] = $_.addontextyoffset; //#5232
        } //#5232
        $k[$j++] = 'textsize'; //#5233
        if ($_.addontextsize != null) { //#5233
            $k[$j++] = $_.addontextsize; //#5233
        } else { //#5233
            $k[$j++] = $_.textsize; //#5233
        } //#5233
        var _29 = $ne($_.addontextfont, "unset") ? $_.addontextfont : $_.textfont; //#5234
        $k[$j++] = 'textfont'; //#5234
        $k[$j++] = _29; //#5234
        $_.addopts = $d(); //#5235
        if ($_.addon.length == 2) { //#5236
            $k[$j++] = $_.addon; //#5236
            $k[$j++] = $_.addopts; //#5236
            bwipp_ean2(); //#5236
        } //#5236
        if ($_.addon.length == 5) { //#5237
            $k[$j++] = $_.addon; //#5237
            $k[$j++] = $_.addopts; //#5237
            bwipp_ean5(); //#5237
        } //#5237
        $_.addcode = $k[--$j]; //#5238
        $k[$j++] = Infinity; //#5239
        $aload($_.sbs); //#5239
        $k[$j++] = $_.addongap; //#5239
        $aload($get($_.addcode, "sbs")); //#5239
        $_.sbs = $a(); //#5239
        $k[$j++] = Infinity; //#5240
        $aload($_.bhs); //#5240
        $aload($get($_.addcode, "bhs")); //#5240
        $_.bhs = $a(); //#5240
        $k[$j++] = Infinity; //#5241
        $aload($_.bbs); //#5241
        $aload($get($_.addcode, "bbs")); //#5241
        $_.bbs = $a(); //#5241
        $k[$j++] = Infinity; //#5242
        $aload($_.txt); //#5242
        $aload($get($_.addcode, "txt")); //#5242
        $_.txt = $a(); //#5242
        $_.guardrightypos = ($_.height * 72) - 6; //#5243
    } //#5243
    $k[$j++] = Infinity; //#5247
    $k[$j++] = 'ren'; //#5255
    $k[$j++] = 'renlinear'; //#5255
    $k[$j++] = 'sbs'; //#5255
    $k[$j++] = $_.sbs; //#5255
    $k[$j++] = 'bhs'; //#5255
    $k[$j++] = $_.bhs; //#5255
    $k[$j++] = 'bbs'; //#5255
    $k[$j++] = $_.bbs; //#5255
    $k[$j++] = 'txt'; //#5255
    $k[$j++] = $_.txt; //#5255
    $k[$j++] = 'opt'; //#5255
    $k[$j++] = $_.options; //#5255
    $k[$j++] = 'guardleftpos'; //#5255
    $k[$j++] = 7; //#5255
    $k[$j++] = 'guardrightpos'; //#5255
    if ($_.addon.length == 0) { //#5255
        $k[$j++] = 7; //#5255
    } else { //#5255
        $k[$j++] = 5; //#5255
    } //#5255
    $k[$j++] = 'guardrightypos'; //#5258
    $k[$j++] = $_.guardrightypos; //#5258
    $k[$j++] = 'borderleft'; //#5258
    $k[$j++] = 7; //#5258
    $k[$j++] = 'borderright'; //#5258
    if ($_.addon.length == 0) { //#5258
        $k[$j++] = 7; //#5258
    } else { //#5258
        $k[$j++] = 5; //#5258
    } //#5258
    $k[$j++] = 'bordertop'; //#5260
    $k[$j++] = 0; //#5260
    $k[$j++] = 'borderbottom'; //#5260
    $k[$j++] = 5; //#5260
    var _2i = $d(); //#5260
    $k[$j++] = _2i; //#5263
    if (!$_.dontdraw) { //#5263
        bwipp_renlinear(); //#5263
    } //#5263
    $_ = $__; //#5267
} //bwipp_ean8
function bwipp_upca() {
    var $__ = $_; //#5299
    $_ = Object.assign({}, $_); //#5299
    $_.dontdraw = false; //#5302
    $_.includetext = false; //#5303
    $_.textfont = "OCR-B"; //#5304
    $_.textsize = 12; //#5305
    $_.textxoffset = -9; //#5306
    $_.textyoffset = -4; //#5307
    $_.height = 1; //#5308
    $_.addongap = 12; //#5309
    $_.addontextfont = "unset"; //#5310
    $_.addontextsize = null; //#5311
    $_.addontextxoffset = null; //#5312
    $_.addontextyoffset = null; //#5313
    $k[$j++] = $_; //#5315
    bwipp_processoptions(); //#5315
    $_.options = $k[--$j]; //#5315
    $_.barcode = $k[--$j]; //#5316
    $search($_.barcode, " "); //#5321
    if ($k[--$j]) { //#5327
        $_.barcode = $k[--$j]; //#5322
        $j--; //#5323
        $_.addon = $k[--$j]; //#5324
    } else { //#5327
        $j--; //#5326
        $_.addon = ""; //#5327
    } //#5327
    if (($_.barcode.length == 7) || ($_.barcode.length == 8)) { //#5373
        $forall($_.barcode, function() { //#5337
            var _9 = $k[--$j]; //#5334
            if ((_9 < 48) || (_9 > 57)) { //#5336
                $k[$j++] = 'bwipp.upcAupcEbadCharacter#5335'; //#5335
                $k[$j++] = "UPC-E must contain only digits"; //#5335
                bwipp_raiseerror(); //#5335
            } //#5335
        }); //#5335
        var _B = $get($_.barcode, 0); //#5338
        if ((_B != 48) && (_B != 49)) { //#5340
            $k[$j++] = 'bwipp.upcAupcEbadNumberSystem#5339'; //#5339
            $k[$j++] = "UPC-E must have number system 0 or 1"; //#5339
            bwipp_raiseerror(); //#5339
        } //#5339
        for (var _C = 0; _C < 1; _C++) { //#5368
            var _E = ($_.barcode.length == 8) ? 12 : 11; //#5342
            $_.upcacode = $s(_E); //#5342
            if (($get($_.barcode, 6) - 48) <= 2) { //#5349
                $puti($_.upcacode, 0, $geti($_.barcode, 0, 3)); //#5344
                $puti($_.upcacode, 3, $geti($_.barcode, 6, 1)); //#5345
                $puti($_.upcacode, 4, "0000"); //#5346
                $puti($_.upcacode, 8, $geti($_.barcode, 3, 3)); //#5347
                break; //#5348
            } //#5348
            if (($get($_.barcode, 6) - 48) == 3) { //#5355
                $puti($_.upcacode, 0, $geti($_.barcode, 0, 4)); //#5351
                $puti($_.upcacode, 4, "00000"); //#5352
                $puti($_.upcacode, 9, $geti($_.barcode, 4, 2)); //#5353
                break; //#5354
            } //#5354
            if (($get($_.barcode, 6) - 48) == 4) { //#5361
                $puti($_.upcacode, 0, $geti($_.barcode, 0, 5)); //#5357
                $puti($_.upcacode, 5, "00000"); //#5358
                $puti($_.upcacode, 10, $geti($_.barcode, 5, 1)); //#5359
                break; //#5360
            } //#5360
            if (($get($_.barcode, 6) - 48) >= 5) { //#5367
                $puti($_.upcacode, 0, $geti($_.barcode, 0, 6)); //#5363
                $puti($_.upcacode, 6, "0000"); //#5364
                $puti($_.upcacode, 10, $geti($_.barcode, 6, 1)); //#5365
                break; //#5366
            } //#5366
        } //#5366
        if ($_.barcode.length == 8) { //#5371
            $puti($_.upcacode, 11, $geti($_.barcode, 7, 1)); //#5370
        } //#5370
        $_.barcode = $_.upcacode; //#5372
    } //#5372
    if (($_.barcode.length != 11) && ($_.barcode.length != 12)) { //#5378
        $k[$j++] = 'bwipp.upcAbadLength#5377'; //#5377
        $k[$j++] = "UPC-A must be 11 or 12 digits"; //#5377
        bwipp_raiseerror(); //#5377
    } //#5377
    var _10 = $_.barcode; //#5379
    for (var _11 = 0, _12 = _10.length; _11 < _12; _11++) { //#5383
        var _13 = $get(_10, _11); //#5383
        if ((_13 < 48) || (_13 > 57)) { //#5382
            $k[$j++] = 'bwipp.upcAbadCharacter#5381'; //#5381
            $k[$j++] = "UPC-A must contain only digits"; //#5381
            bwipp_raiseerror(); //#5381
        } //#5381
    } //#5381
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#5386
        $k[$j++] = 'bwipp.upcAbadAddOnLength#5385'; //#5385
        $k[$j++] = "Add-on for UPC-A must be 2 or 5 digits"; //#5385
        bwipp_raiseerror(); //#5385
    } //#5385
    $_.pad = $s(12); //#5389
    $_.checksum = 0; //#5390
    for (var _18 = 0; _18 <= 10; _18 += 1) { //#5399
        $_.i = _18; //#5392
        $_.barchar = $get($_.barcode, $_.i) - 48; //#5393
        if (($_.i % 2) != 0) { //#5397
            $_.checksum = $_.checksum + $_.barchar; //#5395
        } else { //#5397
            $_.checksum = $_.checksum + ($_.barchar * 3); //#5397
        } //#5397
    } //#5397
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#5400
    if ($_.barcode.length == 12) { //#5405
        if ($get($_.barcode, 11) != ($_.checksum + 48)) { //#5404
            $k[$j++] = 'bwipp.upcAbadCheckDigit#5403'; //#5403
            $k[$j++] = "Incorrect UPC check digit provided"; //#5403
            bwipp_raiseerror(); //#5403
        } //#5403
    } //#5403
    $puti($_.pad, 0, $_.barcode); //#5406
    $put($_.pad, 11, $_.checksum + 48); //#5407
    $_.barcode = $_.pad; //#5408
    $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); //#5416
    $_.barchars = "0123456789"; //#5419
    $_.sbs = $s(59); //#5422
    $_.txt = $a(12); //#5423
    $puti($_.sbs, 0, $get($_.encs, 10)); //#5426
    for (var _1Y = 0; _1Y <= 5; _1Y += 1) { //#5443
        $_.i = _1Y; //#5431
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#5432
        $j--; //#5433
        $_.indx = $k[--$j].length; //#5434
        $j -= 2; //#5435
        $_.enc = $get($_.encs, $_.indx); //#5436
        $puti($_.sbs, ($_.i * 4) + 3, $_.enc); //#5437
        if ($_.i == 0) { //#5441
            $put($_.txt, 0, $a([$geti($_.barcode, 0, 1), $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize - 2])); //#5439
        } else { //#5441
            $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 7) + 13) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#5441
        } //#5441
    } //#5441
    $puti($_.sbs, (6 * 4) + 3, $get($_.encs, 11)); //#5446
    for (var _27 = 6; _27 <= 11; _27 += 1) { //#5463
        $_.i = _27; //#5451
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#5452
        $j--; //#5453
        $_.indx = $k[--$j].length; //#5454
        $j -= 2; //#5455
        $_.enc = $get($_.encs, $_.indx); //#5456
        $puti($_.sbs, ($_.i * 4) + 8, $_.enc); //#5457
        if ($_.i == 11) { //#5461
            $put($_.txt, 11, $a([$geti($_.barcode, 11, 1), $_.textxoffset + 107, $_.textyoffset, $_.textfont, $_.textsize - 2])); //#5459
        } else { //#5461
            $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 7) + $_.textxoffset) + 17, $_.textyoffset, $_.textfont, $_.textsize])); //#5461
        } //#5461
    } //#5461
    $puti($_.sbs, 56, $get($_.encs, 12)); //#5466
    $k[$j++] = Infinity; //#5468
    var _2g = $_.sbs; //#5468
    for (var _2h = 0, _2i = _2g.length; _2h < _2i; _2h++) { //#5468
        $k[$j++] = $get(_2g, _2h) - 48; //#5468
    } //#5468
    $_.sbs = $a(); //#5468
    if ($_.includetext) { //#5475
        $k[$j++] = Infinity; //#5470
        for (var _2m = 0; _2m < 4; _2m++) { //#5470
            $k[$j++] = $_.height; //#5470
        } //#5470
        for (var _2o = 0; _2o < 10; _2o++) { //#5470
            $k[$j++] = $f($_.height - 0.075); //#5470
        } //#5470
        $k[$j++] = $_.height; //#5470
        $k[$j++] = $_.height; //#5470
        for (var _2s = 0; _2s < 10; _2s++) { //#5470
            $k[$j++] = $f($_.height - 0.075); //#5470
        } //#5470
        for (var _2u = 0; _2u < 4; _2u++) { //#5470
            $k[$j++] = $_.height; //#5470
        } //#5470
        $_.bhs = $a(); //#5470
        $k[$j++] = Infinity; //#5471
        $k[$j++] = 0; //#5471
        $k[$j++] = 0; //#5471
        $k[$j++] = 0; //#5471
        $k[$j++] = 0; //#5471
        for (var _2x = 0; _2x < 10; _2x++) { //#5471
            $k[$j++] = 0.075; //#5471
        } //#5471
        $k[$j++] = 0; //#5471
        $k[$j++] = 0; //#5471
        for (var _2y = 0; _2y < 10; _2y++) { //#5471
            $k[$j++] = 0.075; //#5471
        } //#5471
        $k[$j++] = 0; //#5471
        $k[$j++] = 0; //#5471
        $k[$j++] = 0; //#5471
        $k[$j++] = 0; //#5471
        $_.bbs = $a(); //#5471
    } else { //#5475
        $k[$j++] = Infinity; //#5473
        for (var _30 = 0; _30 < 30; _30++) { //#5473
            $k[$j++] = $_.height; //#5473
        } //#5473
        $_.bhs = $a(); //#5473
        $k[$j++] = Infinity; //#5474
        for (var _33 = 0; _33 < 30; _33++) { //#5474
            $k[$j++] = 0; //#5474
        } //#5474
        $_.bbs = $a(); //#5474
        $_.txt = $a([]); //#5475
    } //#5475
    $_.guardrightypos = 0; //#5477
    if ($_.addon.length != 0) { //#5498
        $k[$j++] = Infinity; //#5481
        $k[$j++] = 'dontdraw'; //#5484
        $k[$j++] = true; //#5484
        $k[$j++] = 'includetext'; //#5484
        $k[$j++] = true; //#5484
        $k[$j++] = 'height'; //#5484
        $k[$j++] = $_.height; //#5484
        if ($_.includetext) { //#5484
            var _39 = $k[--$j]; //#5484
            $k[$j++] = $f(_39 - 0.15); //#5484
        } //#5484
        $k[$j++] = 'textxoffset'; //#5485
        if ($_.addontextxoffset != null) { //#5485
            $k[$j++] = $_.addontextxoffset; //#5485
        } else { //#5485
            $k[$j++] = 95 + $_.addongap; //#5485
        } //#5485
        if ($_.addontextyoffset != null) { //#5486
            $k[$j++] = 'textyoffset'; //#5486
            $k[$j++] = $_.addontextyoffset; //#5486
        } //#5486
        $k[$j++] = 'textsize'; //#5487
        if ($_.addontextsize != null) { //#5487
            $k[$j++] = $_.addontextsize; //#5487
        } else { //#5487
            $k[$j++] = $_.textsize; //#5487
        } //#5487
        var _3J = $ne($_.addontextfont, "unset") ? $_.addontextfont : $_.textfont; //#5488
        $k[$j++] = 'textfont'; //#5488
        $k[$j++] = _3J; //#5488
        $_.addopts = $d(); //#5489
        if ($_.addon.length == 2) { //#5490
            $k[$j++] = $_.addon; //#5490
            $k[$j++] = $_.addopts; //#5490
            bwipp_ean2(); //#5490
        } //#5490
        if ($_.addon.length == 5) { //#5491
            $k[$j++] = $_.addon; //#5491
            $k[$j++] = $_.addopts; //#5491
            bwipp_ean5(); //#5491
        } //#5491
        $_.addcode = $k[--$j]; //#5492
        $k[$j++] = Infinity; //#5493
        $aload($_.sbs); //#5493
        $k[$j++] = $_.addongap; //#5493
        $aload($get($_.addcode, "sbs")); //#5493
        $_.sbs = $a(); //#5493
        $k[$j++] = Infinity; //#5494
        $aload($_.bhs); //#5494
        $aload($get($_.addcode, "bhs")); //#5494
        $_.bhs = $a(); //#5494
        $k[$j++] = Infinity; //#5495
        $aload($_.bbs); //#5495
        $aload($get($_.addcode, "bbs")); //#5495
        $_.bbs = $a(); //#5495
        $k[$j++] = Infinity; //#5496
        $aload($_.txt); //#5496
        $aload($get($_.addcode, "txt")); //#5496
        $_.txt = $a(); //#5496
        $_.guardrightypos = ($_.height * 72) - 6; //#5497
    } //#5497
    $k[$j++] = Infinity; //#5501
    $k[$j++] = 'ren'; //#5508
    $k[$j++] = 'renlinear'; //#5508
    $k[$j++] = 'sbs'; //#5508
    $k[$j++] = $_.sbs; //#5508
    $k[$j++] = 'bhs'; //#5508
    $k[$j++] = $_.bhs; //#5508
    $k[$j++] = 'bbs'; //#5508
    $k[$j++] = $_.bbs; //#5508
    $k[$j++] = 'txt'; //#5508
    $k[$j++] = $_.txt; //#5508
    $k[$j++] = 'opt'; //#5508
    $k[$j++] = $_.options; //#5508
    $k[$j++] = 'guardrightpos'; //#5508
    if ($_.addon.length == 0) { //#5508
        $k[$j++] = 9; //#5508
    } else { //#5508
        $k[$j++] = 5; //#5508
    } //#5508
    $k[$j++] = 'guardrightypos'; //#5511
    $k[$j++] = $_.guardrightypos; //#5511
    $k[$j++] = 'borderleft'; //#5511
    $k[$j++] = 9; //#5511
    $k[$j++] = 'borderright'; //#5511
    if ($_.addon.length == 0) { //#5511
        $k[$j++] = 9; //#5511
    } else { //#5511
        $k[$j++] = 5; //#5511
    } //#5511
    $k[$j++] = 'bordertop'; //#5513
    $k[$j++] = 0; //#5513
    $k[$j++] = 'borderbottom'; //#5513
    $k[$j++] = 5; //#5513
    var _3s = $d(); //#5513
    $k[$j++] = _3s; //#5516
    if (!$_.dontdraw) { //#5516
        bwipp_renlinear(); //#5516
    } //#5516
    $_ = $__; //#5520
} //bwipp_upca
function bwipp_upce() {
    var $__ = $_; //#5552
    $_ = Object.assign({}, $_); //#5552
    $_.dontdraw = false; //#5555
    $_.includetext = false; //#5556
    $_.textfont = "OCR-B"; //#5557
    $_.textsize = 12; //#5558
    $_.textxoffset = -9; //#5559
    $_.textyoffset = -4; //#5560
    $_.height = 1; //#5561
    $_.addongap = 12; //#5562
    $_.addontextfont = "unset"; //#5563
    $_.addontextsize = null; //#5564
    $_.addontextxoffset = null; //#5565
    $_.addontextyoffset = null; //#5566
    $k[$j++] = $_; //#5568
    bwipp_processoptions(); //#5568
    $_.options = $k[--$j]; //#5568
    $_.barcode = $k[--$j]; //#5569
    $search($_.barcode, " "); //#5574
    if ($k[--$j]) { //#5580
        $_.barcode = $k[--$j]; //#5575
        $j--; //#5576
        $_.addon = $k[--$j]; //#5577
    } else { //#5580
        $j--; //#5579
        $_.addon = ""; //#5580
    } //#5580
    if (($_.barcode.length == 11) || ($_.barcode.length == 12)) { //#5622
        $forall($_.barcode, function() { //#5590
            var _9 = $k[--$j]; //#5587
            if ((_9 < 48) || (_9 > 57)) { //#5589
                $k[$j++] = 'bwipp.upcEupcAbadCharacter#5588'; //#5588
                $k[$j++] = "UPC-A must contain only digits"; //#5588
                bwipp_raiseerror(); //#5588
            } //#5588
        }); //#5588
        for (var _A = 0; _A < 1; _A++) { //#5617
            var _C = ($_.barcode.length == 12) ? 8 : 7; //#5592
            $_.upcecode = $s(_C); //#5592
            if ((($get($_.barcode, 3) - 48) <= 2) && $eq($geti($_.barcode, 4, 4), "0000")) { //#5598
                $puti($_.upcecode, 0, $geti($_.barcode, 0, 3)); //#5594
                $puti($_.upcecode, 3, $geti($_.barcode, 8, 3)); //#5595
                $puti($_.upcecode, 6, $geti($_.barcode, 3, 1)); //#5596
                break; //#5597
            } //#5597
            if ($eq($geti($_.barcode, 4, 5), "00000")) { //#5604
                $puti($_.upcecode, 0, $geti($_.barcode, 0, 4)); //#5600
                $puti($_.upcecode, 4, $geti($_.barcode, 9, 2)); //#5601
                $puti($_.upcecode, 6, "3"); //#5602
                break; //#5603
            } //#5603
            if ($eq($geti($_.barcode, 5, 5), "00000")) { //#5610
                $puti($_.upcecode, 0, $geti($_.barcode, 0, 5)); //#5606
                $puti($_.upcecode, 5, $geti($_.barcode, 10, 1)); //#5607
                $puti($_.upcecode, 6, "4"); //#5608
                break; //#5609
            } //#5609
            if ((($get($_.barcode, 10) - 48) >= 5) && $eq($geti($_.barcode, 6, 4), "0000")) { //#5615
                $puti($_.upcecode, 0, $geti($_.barcode, 0, 6)); //#5612
                $puti($_.upcecode, 6, $geti($_.barcode, 10, 1)); //#5613
                break; //#5614
            } //#5614
            $k[$j++] = 'bwipp.upcEupcAnotCompressible#5616'; //#5616
            $k[$j++] = "UPC-A cannot be converted to a UPC-E"; //#5616
            bwipp_raiseerror(); //#5616
        } //#5616
        if ($_.barcode.length == 12) { //#5620
            $puti($_.upcecode, 7, $geti($_.barcode, 11, 1)); //#5619
        } //#5619
        $_.barcode = $_.upcecode; //#5621
    } //#5621
    if (($_.barcode.length != 7) && ($_.barcode.length != 8)) { //#5627
        $k[$j++] = 'bwipp.upcEbadLength#5626'; //#5626
        $k[$j++] = "UPC-E must be 7 or 8 digits"; //#5626
        bwipp_raiseerror(); //#5626
    } //#5626
    var _10 = $_.barcode; //#5628
    for (var _11 = 0, _12 = _10.length; _11 < _12; _11++) { //#5632
        var _13 = $get(_10, _11); //#5632
        if ((_13 < 48) || (_13 > 57)) { //#5631
            $k[$j++] = 'bwipp.upcEbadCharacter#5630'; //#5630
            $k[$j++] = "UPC-E must contain only digits"; //#5630
            bwipp_raiseerror(); //#5630
        } //#5630
    } //#5630
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#5635
        $k[$j++] = 'bwipp.upcEbadAddOnLength#5634'; //#5634
        $k[$j++] = "Add-on for UPC-E must be 2 or 5 digits"; //#5634
        bwipp_raiseerror(); //#5634
    } //#5634
    var _18 = $get($_.barcode, 0); //#5638
    if ((_18 != 48) && (_18 != 49)) { //#5640
        $k[$j++] = 'bwipp.upcEbadNumberSystem#5639'; //#5639
        $k[$j++] = "UPC-E must have number system 0 or 1"; //#5639
        bwipp_raiseerror(); //#5639
    } //#5639
    $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "111111"]); //#5648
    $_.barchars = "0123456789"; //#5651
    $_.mirrormaps = $a(["000111", "001011", "001101", "001110", "010011", "011001", "011100", "010101", "010110", "011010"]); //#5656
    for (var _1C = 0; _1C < 1; _1C++) { //#5687
        $_.upcacode = $s(11); //#5661
        if (($get($_.barcode, 6) - 48) <= 2) { //#5668
            $puti($_.upcacode, 0, $geti($_.barcode, 0, 3)); //#5663
            $puti($_.upcacode, 3, $geti($_.barcode, 6, 1)); //#5664
            $puti($_.upcacode, 4, "0000"); //#5665
            $puti($_.upcacode, 8, $geti($_.barcode, 3, 3)); //#5666
            break; //#5667
        } //#5667
        if (($get($_.barcode, 6) - 48) == 3) { //#5674
            $puti($_.upcacode, 0, $geti($_.barcode, 0, 4)); //#5670
            $puti($_.upcacode, 4, "00000"); //#5671
            $puti($_.upcacode, 9, $geti($_.barcode, 4, 2)); //#5672
            break; //#5673
        } //#5673
        if (($get($_.barcode, 6) - 48) == 4) { //#5680
            $puti($_.upcacode, 0, $geti($_.barcode, 0, 5)); //#5676
            $puti($_.upcacode, 5, "00000"); //#5677
            $puti($_.upcacode, 10, $geti($_.barcode, 5, 1)); //#5678
            break; //#5679
        } //#5679
        if (($get($_.barcode, 6) - 48) >= 5) { //#5686
            $puti($_.upcacode, 0, $geti($_.barcode, 0, 6)); //#5682
            $puti($_.upcacode, 6, "0000"); //#5683
            $puti($_.upcacode, 10, $geti($_.barcode, 6, 1)); //#5684
            break; //#5685
        } //#5685
    } //#5685
    $_.checksum = 0; //#5688
    for (var _1r = 0; _1r <= 10; _1r += 1) { //#5697
        $_.i = _1r; //#5690
        $_.barchar = $get($_.upcacode, $_.i) - 48; //#5691
        if (($_.i % 2) != 0) { //#5695
            $_.checksum = $_.checksum + $_.barchar; //#5693
        } else { //#5695
            $_.checksum = $_.checksum + ($_.barchar * 3); //#5695
        } //#5695
    } //#5695
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#5698
    if ($_.barcode.length == 8) { //#5703
        if ($get($_.barcode, 7) != ($_.checksum + 48)) { //#5702
            $k[$j++] = 'bwipp.upcEbadCheckDigit#5701'; //#5701
            $k[$j++] = "Incorrect UPC check digit provided"; //#5701
            bwipp_raiseerror(); //#5701
        } //#5701
    } //#5701
    $_.pad = $s(8); //#5704
    $puti($_.pad, 0, $_.barcode); //#5705
    $put($_.pad, 7, $_.checksum + 48); //#5706
    $_.barcode = $_.pad; //#5707
    $_.txt = $a(8); //#5708
    $put($_.txt, 0, $a([$geti($_.barcode, 0, 1), $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize - 2])); //#5709
    $_.mirrormap = $get($_.mirrormaps, $_.checksum); //#5712
    if ($get($_.barcode, 0) == 48) { //#5726
        $_.invt = $s($_.mirrormap.length); //#5716
        for (var _2T = 0, _2S = $_.mirrormap.length - 1; _2T <= _2S; _2T += 1) { //#5724
            $_.i = _2T; //#5718
            if ($get($_.mirrormap, $_.i) == 48) { //#5722
                $put($_.invt, $_.i, 49); //#5720
            } else { //#5722
                $put($_.invt, $_.i, 48); //#5722
            } //#5722
        } //#5722
        $_.mirrormap = $_.invt; //#5725
    } //#5725
    $_.sbs = $s(33); //#5728
    $puti($_.sbs, 0, $get($_.encs, 10)); //#5731
    for (var _2g = 1; _2g <= 6; _2g += 1) { //#5753
        $_.i = _2g; //#5734
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#5736
        $j--; //#5737
        $_.indx = $k[--$j].length; //#5738
        $j -= 2; //#5739
        $_.enc = $get($_.encs, $_.indx); //#5740
        if ($get($_.mirrormap, $_.i - 1) == 49) { //#5750
            $_.enclen = $_.enc.length; //#5742
            $_.revenc = $s($_.enclen); //#5743
            for (var _2x = 0, _2w = $_.enclen - 1; _2x <= _2w; _2x += 1) { //#5748
                $_.j = _2x; //#5745
                $_.char = $get($_.enc, $_.j); //#5746
                $put($_.revenc, ($_.enclen - $_.j) - 1, $_.char); //#5747
            } //#5747
            $_.enc = $_.revenc; //#5749
        } //#5749
        $puti($_.sbs, (($_.i - 1) * 4) + 3, $_.enc); //#5751
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 7) + 13) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#5752
    } //#5752
    $put($_.txt, 7, $a([$geti($_.barcode, 7, 1), ((6 * 7) + 21) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize - 2])); //#5755
    $puti($_.sbs, 27, $get($_.encs, 11)); //#5758
    $k[$j++] = Infinity; //#5760
    var _3V = $_.sbs; //#5760
    for (var _3W = 0, _3X = _3V.length; _3W < _3X; _3W++) { //#5760
        $k[$j++] = $get(_3V, _3W) - 48; //#5760
    } //#5760
    $_.sbs = $a(); //#5760
    if ($_.includetext) { //#5767
        $k[$j++] = Infinity; //#5762
        $k[$j++] = $_.height; //#5762
        $k[$j++] = $_.height; //#5762
        for (var _3d = 0; _3d < 12; _3d++) { //#5762
            $k[$j++] = $f($_.height - 0.075); //#5762
        } //#5762
        $k[$j++] = $_.height; //#5762
        $k[$j++] = $_.height; //#5762
        $k[$j++] = $_.height; //#5762
        $_.bhs = $a(); //#5762
        $k[$j++] = Infinity; //#5763
        $k[$j++] = 0; //#5763
        $k[$j++] = 0; //#5763
        for (var _3j = 0; _3j < 12; _3j++) { //#5763
            $k[$j++] = 0.075; //#5763
        } //#5763
        $k[$j++] = 0; //#5763
        $k[$j++] = 0; //#5763
        $k[$j++] = 0; //#5763
        $_.bbs = $a(); //#5763
    } else { //#5767
        $k[$j++] = Infinity; //#5765
        for (var _3l = 0; _3l < 17; _3l++) { //#5765
            $k[$j++] = $_.height; //#5765
        } //#5765
        $_.bhs = $a(); //#5765
        $k[$j++] = Infinity; //#5766
        for (var _3o = 0; _3o < 17; _3o++) { //#5766
            $k[$j++] = 0; //#5766
        } //#5766
        $_.bbs = $a(); //#5766
        $_.txt = $a([]); //#5767
    } //#5767
    $_.guardrightypos = 0; //#5769
    if ($_.addon.length != 0) { //#5790
        $k[$j++] = Infinity; //#5773
        $k[$j++] = 'dontdraw'; //#5776
        $k[$j++] = true; //#5776
        $k[$j++] = 'includetext'; //#5776
        $k[$j++] = true; //#5776
        $k[$j++] = 'height'; //#5776
        $k[$j++] = $_.height; //#5776
        if ($_.includetext) { //#5776
            var _3u = $k[--$j]; //#5776
            $k[$j++] = $f(_3u - 0.15); //#5776
        } //#5776
        $k[$j++] = 'textxoffset'; //#5777
        if ($_.addontextxoffset != null) { //#5777
            $k[$j++] = $_.addontextxoffset; //#5777
        } else { //#5777
            $k[$j++] = 51 + $_.addongap; //#5777
        } //#5777
        if ($_.addontextyoffset != null) { //#5778
            $k[$j++] = 'textyoffset'; //#5778
            $k[$j++] = $_.addontextyoffset; //#5778
        } //#5778
        $k[$j++] = 'textsize'; //#5779
        if ($_.addontextsize != null) { //#5779
            $k[$j++] = $_.addontextsize; //#5779
        } else { //#5779
            $k[$j++] = $_.textsize; //#5779
        } //#5779
        var _44 = $ne($_.addontextfont, "unset") ? $_.addontextfont : $_.textfont; //#5780
        $k[$j++] = 'textfont'; //#5780
        $k[$j++] = _44; //#5780
        $_.addopts = $d(); //#5781
        if ($_.addon.length == 2) { //#5782
            $k[$j++] = $_.addon; //#5782
            $k[$j++] = $_.addopts; //#5782
            bwipp_ean2(); //#5782
        } //#5782
        if ($_.addon.length == 5) { //#5783
            $k[$j++] = $_.addon; //#5783
            $k[$j++] = $_.addopts; //#5783
            bwipp_ean5(); //#5783
        } //#5783
        $_.addcode = $k[--$j]; //#5784
        $k[$j++] = Infinity; //#5785
        $aload($_.sbs); //#5785
        $k[$j++] = $_.addongap; //#5785
        $aload($get($_.addcode, "sbs")); //#5785
        $_.sbs = $a(); //#5785
        $k[$j++] = Infinity; //#5786
        $aload($_.bhs); //#5786
        $aload($get($_.addcode, "bhs")); //#5786
        $_.bhs = $a(); //#5786
        $k[$j++] = Infinity; //#5787
        $aload($_.bbs); //#5787
        $aload($get($_.addcode, "bbs")); //#5787
        $_.bbs = $a(); //#5787
        $k[$j++] = Infinity; //#5788
        $aload($_.txt); //#5788
        $aload($get($_.addcode, "txt")); //#5788
        $_.txt = $a(); //#5788
        $_.guardrightypos = ($_.height * 72) - 6; //#5789
    } //#5789
    $k[$j++] = Infinity; //#5793
    $k[$j++] = 'ren'; //#5800
    $k[$j++] = 'renlinear'; //#5800
    $k[$j++] = 'sbs'; //#5800
    $k[$j++] = $_.sbs; //#5800
    $k[$j++] = 'bhs'; //#5800
    $k[$j++] = $_.bhs; //#5800
    $k[$j++] = 'bbs'; //#5800
    $k[$j++] = $_.bbs; //#5800
    $k[$j++] = 'txt'; //#5800
    $k[$j++] = $_.txt; //#5800
    $k[$j++] = 'opt'; //#5800
    $k[$j++] = $_.options; //#5800
    $k[$j++] = 'guardrightpos'; //#5800
    if ($_.addon.length == 0) { //#5800
        $k[$j++] = 9; //#5800
    } else { //#5800
        $k[$j++] = 5; //#5800
    } //#5800
    $k[$j++] = 'guardrightypos'; //#5803
    $k[$j++] = $_.guardrightypos; //#5803
    $k[$j++] = 'borderleft'; //#5803
    $k[$j++] = 9; //#5803
    $k[$j++] = 'borderright'; //#5803
    if ($_.addon.length == 0) { //#5803
        $k[$j++] = 9; //#5803
    } else { //#5803
        $k[$j++] = 5; //#5803
    } //#5803
    $k[$j++] = 'bordertop'; //#5805
    $k[$j++] = 0; //#5805
    $k[$j++] = 'borderbottom'; //#5805
    $k[$j++] = 5; //#5805
    var _4d = $d(); //#5805
    $k[$j++] = _4d; //#5808
    if (!$_.dontdraw) { //#5808
        bwipp_renlinear(); //#5808
    } //#5808
    $_ = $__; //#5812
} //bwipp_upce
function bwipp_isbn() {
    var $__ = $_; //#5841
    $_ = Object.assign({}, $_); //#5841
    $_.dontdraw = false; //#5844
    $_.includetext = false; //#5845
    $_.isbntextfont = 'OCR-A'; //#5846
    $_.isbntextsize = 8; //#5847
    $_.isbntextxoffset = null; //#5848
    $_.isbntextyoffset = null; //#5849
    $_.height = 1; //#5850
    $_.addongap = 12; //#5851
    $_.legacy = false; //#5852
    $k[$j++] = $_; //#5854
    bwipp_processoptions(); //#5854
    $_.options = $k[--$j]; //#5854
    $_.barcode = $k[--$j]; //#5855
    $search($_.barcode, " "); //#5858
    if ($k[--$j]) { //#5864
        $_.barcode = $k[--$j]; //#5859
        $j--; //#5860
        $_.addon = $k[--$j]; //#5861
    } else { //#5864
        $j--; //#5863
        $_.addon = ""; //#5864
    } //#5864
    if ((($_.barcode.length != 15) && ($_.barcode.length != 17)) && (($_.barcode.length != 11) && ($_.barcode.length != 13))) { //#5871
        $k[$j++] = 'bwipp.isbnBadLength#5870'; //#5870
        $k[$j++] = "ISBN-13 must be 15 or 17 characters including dashes. ISBN-10 must be 11 or 13 characters including dashes"; //#5870
        bwipp_raiseerror(); //#5870
    } //#5870
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#5874
        $k[$j++] = 'bwipp.isbnBadAddOnLength#5873'; //#5873
        $k[$j++] = "Add-on for ISBN must be 2 or 5 digits"; //#5873
        bwipp_raiseerror(); //#5873
    } //#5873
    if ($_.barcode.length >= 15) { //#5938
        var _F = $geti($_.barcode, 0, 4); //#5876
        if ($ne(_F, "978-") && $ne(_F, "979-")) { //#5878
            $k[$j++] = 'bwipp.isbn13badPrefix#5877'; //#5877
            $k[$j++] = "ISBN-13 prefix must be 978- or 979-"; //#5877
            bwipp_raiseerror(); //#5877
        } //#5877
        $_.wasdash = false; //#5879
        $_.numdash = 0; //#5879
        $_.numdigit = 0; //#5879
        var _H = $geti($_.barcode, 5, 9); //#5880
        for (var _I = 0, _J = _H.length; _I < _J; _I++) { //#5893
            var _K = $get(_H, _I); //#5893
            $k[$j++] = _K; //#5888
            if (_K == 45) { //#5888
                if ($_.wasdash) { //#5885
                    $k[$j++] = 'bwipp.isbn13adjacentDashes#5884'; //#5884
                    $k[$j++] = "ISBN-13 does not permit adjacent dashes"; //#5884
                    bwipp_raiseerror(); //#5884
                } //#5884
                $_.wasdash = true; //#5886
                $_.numdash = $_.numdash + 1; //#5887
            } //#5887
            var _N = $k[--$j]; //#5889
            if ((_N >= 48) && (_N <= 57)) { //#5892
                $_.wasdash = false; //#5890
                $_.numdigit = $_.numdigit + 1; //#5891
            } //#5891
        } //#5891
        if (($_.numdash != 2) || ($_.numdigit != 7)) { //#5896
            $k[$j++] = 'bwipp.isbn13numDashesDigits#5895'; //#5895
            $k[$j++] = "Incorrect number of dashes and digits for ISBN-13"; //#5895
            bwipp_raiseerror(); //#5895
        } //#5895
        var _S = $get($_.barcode, 14); //#5897
        if ((_S < 48) || (_S > 57)) { //#5899
            $k[$j++] = 'bwipp.isbn13character15#5898'; //#5898
            $k[$j++] = "ISBN-13 character 15 must be a digit"; //#5898
            bwipp_raiseerror(); //#5898
        } //#5898
        if ($_.barcode.length == 17) { //#5907
            if ($ne($geti($_.barcode, 15, 1), "-")) { //#5903
                $k[$j++] = 'bwipp.isbn13character16#5902'; //#5902
                $k[$j++] = "ISBN-13 penultimate character must be a dash"; //#5902
                bwipp_raiseerror(); //#5902
            } //#5902
            var _X = $get($_.barcode, 16); //#5904
            if ((_X < 48) || (_X > 57)) { //#5906
                $k[$j++] = 'bwipp.isbn13character17#5905'; //#5905
                $k[$j++] = "ISBN-13 final character must be a digit"; //#5905
                bwipp_raiseerror(); //#5905
            } //#5905
        } //#5905
    } else { //#5938
        var _Z = $get($_.barcode, 0); //#5909
        if ((_Z < 48) || (_Z > 57)) { //#5911
            $k[$j++] = 'bwipp.isbn10FirstDigit#5910'; //#5910
            $k[$j++] = "ISBN-10 first character must be a digit"; //#5910
            bwipp_raiseerror(); //#5910
        } //#5910
        $_.wasdash = false; //#5912
        $_.numdash = 0; //#5912
        $_.numdigit = 0; //#5912
        var _b = $geti($_.barcode, 1, 9); //#5913
        for (var _c = 0, _d = _b.length; _c < _d; _c++) { //#5926
            var _e = $get(_b, _c); //#5926
            $k[$j++] = _e; //#5921
            if (_e == 45) { //#5921
                if ($_.wasdash) { //#5918
                    $k[$j++] = 'bwipp.isbn10adjacentDashes#5917'; //#5917
                    $k[$j++] = "ISBN-10 does not permit adjacent dashes"; //#5917
                    bwipp_raiseerror(); //#5917
                } //#5917
                $_.wasdash = true; //#5919
                $_.numdash = $_.numdash + 1; //#5920
            } //#5920
            var _h = $k[--$j]; //#5922
            if ((_h >= 48) && (_h <= 57)) { //#5925
                $_.wasdash = false; //#5923
                $_.numdigit = $_.numdigit + 1; //#5924
            } //#5924
        } //#5924
        if (($_.numdash != 2) || ($_.numdigit != 7)) { //#5929
            $k[$j++] = 'bwipp.isbn10numDashesDigits#5928'; //#5928
            $k[$j++] = "Incorrect number of dashes and digits for ISBN-10"; //#5928
            bwipp_raiseerror(); //#5928
        } //#5928
        var _m = $get($_.barcode, 10); //#5930
        if ((_m < 48) || (_m > 57)) { //#5932
            $k[$j++] = 'bwipp.isbn10character11#5931'; //#5931
            $k[$j++] = "ISBN-10 character 11 must be a digit"; //#5931
            bwipp_raiseerror(); //#5931
        } //#5931
        if ($_.barcode.length == 13) { //#5940
            if ($ne($geti($_.barcode, 11, 1), "-")) { //#5936
                $k[$j++] = 'bwipp.isbn10character12#5935'; //#5935
                $k[$j++] = "ISBN-10 penultimate character must be a dash"; //#5935
                bwipp_raiseerror(); //#5935
            } //#5935
            var _r = $get($_.barcode, 12); //#5937
            if (((_r < 48) || (_r > 57)) && (_r != 88)) { //#5939
                $k[$j++] = 'bwipp.isbn10character13#5938'; //#5938
                $k[$j++] = "ISBN-10 final character must be a digit or X"; //#5938
                bwipp_raiseerror(); //#5938
            } //#5938
        } //#5938
    } //#5938
    $_.isbntxt = $_.barcode; //#5943
    if ($_.isbntxt.length <= 13) { //#5969
        $_.isbn = $s(10); //#5947
        $_.checksum = 0; //#5948
        $_.i = 0; //#5949
        $_.n = 0; //#5949
        for (;;) { //#5961
            $_.isbnchar = $get($_.isbntxt, $_.i) - 48; //#5951
            if ($_.isbnchar != -3) { //#5958
                $put($_.isbn, $_.n, $_.isbnchar + 48); //#5953
                if ($_.n < 9) { //#5956
                    $_.checksum = $f($_.checksum + ((10 - $_.n) * $_.isbnchar)); //#5955
                } //#5955
                $_.n = $_.n + 1; //#5957
            } //#5957
            $_.i = $_.i + 1; //#5959
            if ($_.i == $_.isbntxt.length) { //#5960
                break; //#5960
            } //#5960
        } //#5960
        var _1B = (11 - ($_.checksum % 11)) % 11; //#5962
        $k[$j++] = 'checksum'; //#5962
        $k[$j++] = _1B; //#5962
        if (_1B == 10) { //#5962
            $k[$j - 1] = 40; //#5962
        } //#5962
        var _1C = $k[--$j]; //#5962
        $_[$k[--$j]] = _1C + 48; //#5962
        $_.isbn = $geti($_.isbn, 0, 9); //#5963
        if ($_.isbntxt.length == 13) { //#5968
            if ($get($_.isbntxt, 12) != $_.checksum) { //#5967
                $k[$j++] = 'bwipp.isbn10badCheckDigit#5966'; //#5966
                $k[$j++] = "Incorrect ISBN-10 check digit provided"; //#5966
                bwipp_raiseerror(); //#5966
            } //#5966
        } //#5966
    } //#5966
    if ((!$_.legacy) || ($_.isbntxt.length >= 15)) { //#6005
        if ($_.isbntxt.length <= 13) { //#5979
            $_.pad = $s(15); //#5975
            $puti($_.pad, 0, "978-"); //#5976
            $puti($_.pad, 4, $geti($_.isbntxt, 0, 11)); //#5977
            $_.isbntxt = $_.pad; //#5978
        } //#5978
        $_.isbn = $s(13); //#5982
        $_.checksum = 0; //#5983
        $_.i = 0; //#5984
        $_.n = 0; //#5984
        for (;;) { //#5996
            $_.isbnchar = $get($_.isbntxt, $_.i) - 48; //#5986
            if ($_.isbnchar != -3) { //#5993
                $put($_.isbn, $_.n, $_.isbnchar + 48); //#5988
                if ($_.n < 12) { //#5991
                    $k[$j++] = 'checksum'; //#5990
                    $k[$j++] = $_.isbnchar; //#5990
                    if (($_.n % 2) != 0) { //#5990
                        var _1e = $k[--$j]; //#5990
                        $k[$j++] = _1e * 3; //#5990
                    } //#5990
                    var _1g = $k[--$j]; //#5990
                    $_[$k[--$j]] = $f(_1g + $_.checksum); //#5990
                } //#5990
                $_.n = $_.n + 1; //#5992
            } //#5992
            $_.i = $_.i + 1; //#5994
            if ($_.i == $_.isbntxt.length) { //#5995
                break; //#5995
            } //#5995
        } //#5995
        $_.checksum = ((10 - ($_.checksum % 10)) % 10) + 48; //#5997
        $_.isbn = $geti($_.isbn, 0, 12); //#5998
        if ($_.isbntxt.length == 17) { //#6003
            if ($get($_.isbntxt, 16) != $_.checksum) { //#6002
                $k[$j++] = 'bwipp.isbn13badCheckDigit#6001'; //#6001
                $k[$j++] = "Incorrect ISBN-13 check digit provided"; //#6001
                bwipp_raiseerror(); //#6001
            } //#6001
        } //#6001
    } //#6001
    var _1u = ($_.isbn.length == 12) ? 22 : 18; //#6008
    $_.pad = $s(_1u); //#6008
    $puti($_.pad, 0, "ISBN "); //#6009
    $puti($_.pad, 5, $_.isbntxt); //#6010
    $put($_.pad, $_.pad.length - 2, 45); //#6011
    $put($_.pad, $_.pad.length - 1, $_.checksum); //#6012
    $_.isbntxt = $_.pad; //#6013
    $_.barcode = $s(12); //#6016
    if ($_.isbn.length == 9) { //#6021
        $puti($_.barcode, 0, "978"); //#6018
        $puti($_.barcode, 3, $_.isbn); //#6019
    } else { //#6021
        $puti($_.barcode, 0, $_.isbn); //#6021
    } //#6021
    if ($_.addon.length != 0) { //#6031
        var _2E = $s((12 + $_.addon.length) + 1); //#6026
        $puti(_2E, 0, $_.barcode); //#6027
        $puti(_2E, 12, " "); //#6028
        $puti(_2E, 13, $_.addon); //#6029
        $_.barcode = _2E; //#6030
    } //#6030
    $put($_.options, "dontdraw", true); //#6034
    $put($_.options, "addongap", $_.addongap); //#6035
    $k[$j++] = 'args'; //#6036
    $k[$j++] = $_.barcode; //#6036
    $k[$j++] = $_.options; //#6036
    bwipp_ean13(); //#6036
    var _2M = $k[--$j]; //#6036
    $_[$k[--$j]] = _2M; //#6036
    if ($_.includetext) { //#6055
        if ($_.isbntextxoffset == null) { //#6042
            $k[$j++] = 'isbntextxoffset'; //#6041
            if ($_.isbn.length == 9) { //#6041
                $k[$j++] = -1; //#6041
            } else { //#6041
                $k[$j++] = -12; //#6041
            } //#6041
            var _2R = $k[--$j]; //#6041
            $_[$k[--$j]] = _2R; //#6041
        } //#6041
        if ($_.isbntextyoffset == null) { //#6045
            $_.isbntextyoffset = ($_.height * 72) + 3; //#6044
        } //#6044
        var _2W = $get($_.args, "txt") !== undefined; //#6046
        if (_2W) { //#6053
            $_.txt = $get($_.args, "txt"); //#6047
            $_.newtxt = $a($_.txt.length + 1); //#6048
            $puti($_.newtxt, 0, $_.txt); //#6049
            $put($_.newtxt, $_.newtxt.length - 1, $a([$_.isbntxt, $_.isbntextxoffset, $_.isbntextyoffset, $_.isbntextfont, $_.isbntextsize])); //#6050
            $put($_.args, "txt", $_.newtxt); //#6051
        } else { //#6053
            $put($_.args, "txt", $a([$a([$_.isbntxt, $_.isbntextxoffset, $_.isbntextyoffset, $_.isbntextfont, $_.isbntextsize])])); //#6053
        } //#6053
    } //#6053
    $put($_.args, "opt", $_.options); //#6057
    $k[$j++] = $_.args; //#6060
    if (!$_.dontdraw) { //#6060
        bwipp_renlinear(); //#6060
    } //#6060
    $_ = $__; //#6062
} //bwipp_isbn
function bwipp_ismn() {
    var $__ = $_; //#6091
    $_ = Object.assign({}, $_); //#6091
    $_.dontdraw = false; //#6094
    $_.includetext = false; //#6095
    $_.ismntextfont = 'OCR-A'; //#6096
    $_.ismntextsize = 8; //#6097
    $_.ismntextxoffset = null; //#6098
    $_.ismntextyoffset = null; //#6099
    $_.height = 1; //#6100
    $_.addongap = 12; //#6101
    $_.legacy = false; //#6102
    $k[$j++] = $_; //#6104
    bwipp_processoptions(); //#6104
    $_.options = $k[--$j]; //#6104
    $_.barcode = $k[--$j]; //#6105
    $search($_.barcode, " "); //#6108
    if ($k[--$j]) { //#6114
        $_.barcode = $k[--$j]; //#6109
        $j--; //#6110
        $_.addon = $k[--$j]; //#6111
    } else { //#6114
        $j--; //#6113
        $_.addon = ""; //#6114
    } //#6114
    if ((($_.barcode.length != 15) && ($_.barcode.length != 17)) && (($_.barcode.length != 11) && ($_.barcode.length != 13))) { //#6121
        $k[$j++] = 'bwipp.ismnBadLength#6120'; //#6120
        $k[$j++] = "ISMN-13 must be 15 or 17 characters including dashes. ISMN-10 must be 11 or 13 characters including dashes"; //#6120
        bwipp_raiseerror(); //#6120
    } //#6120
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#6124
        $k[$j++] = 'bwipp.ismnBadAddOnLength#6123'; //#6123
        $k[$j++] = "Add-on for ISMN must be 2 or 5 digits"; //#6123
        bwipp_raiseerror(); //#6123
    } //#6123
    if ($_.barcode.length >= 15) { //#6191
        if ($ne($geti($_.barcode, 0, 4), "979-")) { //#6128
            $k[$j++] = 'bwipp.ismn13badPrefix#6127'; //#6127
            $k[$j++] = "ISMN-13 prefix must be 979-"; //#6127
            bwipp_raiseerror(); //#6127
        } //#6127
        $_.wasdash = false; //#6129
        $_.numdash = 0; //#6129
        $_.numdigit = 0; //#6129
        var _H = $geti($_.barcode, 5, 9); //#6130
        for (var _I = 0, _J = _H.length; _I < _J; _I++) { //#6143
            var _K = $get(_H, _I); //#6143
            $k[$j++] = _K; //#6138
            if (_K == 45) { //#6138
                if ($_.wasdash) { //#6135
                    $k[$j++] = 'bwipp.ismn13adjacentDashes#6134'; //#6134
                    $k[$j++] = "ISMN-13 does not permit adjacent dashes"; //#6134
                    bwipp_raiseerror(); //#6134
                } //#6134
                $_.wasdash = true; //#6136
                $_.numdash = $_.numdash + 1; //#6137
            } //#6137
            var _N = $k[--$j]; //#6139
            if ((_N >= 48) && (_N <= 57)) { //#6142
                $_.wasdash = false; //#6140
                $_.numdigit = $_.numdigit + 1; //#6141
            } //#6141
        } //#6141
        if (($_.numdash != 2) || ($_.numdigit != 7)) { //#6146
            $k[$j++] = 'bwipp.ismn13numDashesDigits#6145'; //#6145
            $k[$j++] = "Incorrect number of dashes and digits for ISMN-13"; //#6145
            bwipp_raiseerror(); //#6145
        } //#6145
        var _S = $get($_.barcode, 14); //#6147
        if ((_S < 48) || (_S > 57)) { //#6149
            $k[$j++] = 'bwipp.ismn13character15#6148'; //#6148
            $k[$j++] = "ISMN-13 character 15 must be a digit"; //#6148
            bwipp_raiseerror(); //#6148
        } //#6148
        if ($_.barcode.length == 17) { //#6157
            if ($ne($geti($_.barcode, 15, 1), "-")) { //#6153
                $k[$j++] = 'bwipp.ismn13character16#6152'; //#6152
                $k[$j++] = "ISMN-13 penultimate character must be a dash"; //#6152
                bwipp_raiseerror(); //#6152
            } //#6152
            var _X = $get($_.barcode, 16); //#6154
            if ((_X < 48) || (_X > 57)) { //#6156
                $k[$j++] = 'bwipp.ismn13character17#6155'; //#6155
                $k[$j++] = "ISMN-13 final character must be a digit"; //#6155
                bwipp_raiseerror(); //#6155
            } //#6155
        } //#6155
    } else { //#6191
        if ($ne($geti($_.barcode, 0, 2), "M-")) { //#6161
            $k[$j++] = 'bwipp.ismn10badPrefix#6160'; //#6160
            $k[$j++] = "ISMN-10 prefix must be M-"; //#6160
            bwipp_raiseerror(); //#6160
        } //#6160
        var _b = $get($_.barcode, 2); //#6162
        if ((_b < 48) || (_b > 57)) { //#6164
            $k[$j++] = 'bwipp.ismn10character3#6163'; //#6163
            $k[$j++] = "ISMN-10 character 3 must be a digit"; //#6163
            bwipp_raiseerror(); //#6163
        } //#6163
        $_.wasdash = false; //#6165
        $_.numdash = 0; //#6165
        $_.numdigit = 0; //#6165
        var _d = $geti($_.barcode, 3, 7); //#6166
        for (var _e = 0, _f = _d.length; _e < _f; _e++) { //#6179
            var _g = $get(_d, _e); //#6179
            $k[$j++] = _g; //#6174
            if (_g == 45) { //#6174
                if ($_.wasdash) { //#6171
                    $k[$j++] = 'bwipp.ismn10adjacentDashes#6170'; //#6170
                    $k[$j++] = "ISMN-10 does not permit adjacent dashes"; //#6170
                    bwipp_raiseerror(); //#6170
                } //#6170
                $_.wasdash = true; //#6172
                $_.numdash = $_.numdash + 1; //#6173
            } //#6173
            var _j = $k[--$j]; //#6175
            if ((_j >= 48) && (_j <= 57)) { //#6178
                $_.wasdash = false; //#6176
                $_.numdigit = $_.numdigit + 1; //#6177
            } //#6177
        } //#6177
        if (($_.numdash != 1) || ($_.numdigit != 6)) { //#6182
            $k[$j++] = 'bwipp.ismn10numDashesDigits#6181'; //#6181
            $k[$j++] = "Incorrect number of dashes and digits for ISMN-10"; //#6181
            bwipp_raiseerror(); //#6181
        } //#6181
        var _o = $get($_.barcode, 10); //#6183
        if ((_o < 48) || (_o > 57)) { //#6185
            $k[$j++] = 'bwipp.ismn10character11#6184'; //#6184
            $k[$j++] = "ISMN-10 character 11 must be a digit"; //#6184
            bwipp_raiseerror(); //#6184
        } //#6184
        if ($_.barcode.length == 13) { //#6193
            var _r = $geti($_.barcode, 11, 1); //#6187
            if ($ne(_r, "-")) { //#6189
                $k[$j++] = 'bwipp.ismn10character12#6188'; //#6188
                $k[$j++] = "ISMN-10 penultimate character must be a dash"; //#6188
                bwipp_raiseerror(); //#6188
            } //#6188
            var _t = $get($_.barcode, 12); //#6190
            if (((_t < 48) || (_t > 57)) && (_t != 88)) { //#6192
                $k[$j++] = 'bwipp.ismn10character13#6191'; //#6191
                $k[$j++] = "ISMN-10 final character must be a digit or X"; //#6191
                bwipp_raiseerror(); //#6191
            } //#6191
        } //#6191
    } //#6191
    $_.ismntxt = $_.barcode; //#6196
    $_.legacytxt = ""; //#6199
    if ($_.ismntxt.length <= 13) { //#6206
        $_.legacytxt = $_.ismntxt; //#6201
        $_.pad = $s($_.ismntxt.length + 4); //#6202
        $puti($_.pad, 0, "979-0-"); //#6203
        $puti($_.pad, 6, $geti($_.ismntxt, 2, $_.ismntxt.length - 2)); //#6204
        $_.ismntxt = $_.pad; //#6205
    } //#6205
    $_.ismn = $s(13); //#6209
    $_.checksum = 0; //#6210
    $_.i = 0; //#6211
    $_.n = 0; //#6211
    for (;;) { //#6227
        $_.ismnchar = $get($_.ismntxt, $_.i) - 48; //#6213
        if ($_.ismnchar != -3) { //#6224
            $put($_.ismn, $_.n, $_.ismnchar + 48); //#6215
            if ($_.n < 12) { //#6222
                if (($_.n % 2) == 0) { //#6220
                    $_.checksum = $_.ismnchar + $_.checksum; //#6218
                } else { //#6220
                    $_.checksum = ($_.ismnchar * 3) + $_.checksum; //#6220
                } //#6220
            } //#6220
            $_.n = $_.n + 1; //#6223
        } //#6223
        $_.i = $_.i + 1; //#6225
        if ($_.i == $_.ismntxt.length) { //#6226
            break; //#6226
        } //#6226
    } //#6226
    $_.checksum = ((10 - ($_.checksum % 10)) % 10) + 48; //#6228
    if (($_.barcode.length == 13) || ($_.barcode.length == 17)) { //#6235
        var _1Q = $_.barcode; //#6232
        if ($get(_1Q, _1Q.length - 1) != $_.checksum) { //#6234
            $k[$j++] = 'bwipp.ismnBadCheckDigit#6233'; //#6233
            $k[$j++] = "Incorrect ISMN check digit provided"; //#6233
            bwipp_raiseerror(); //#6233
        } //#6233
    } //#6233
    if ($_.legacy && ($_.legacytxt.length != 0)) { //#6242
        $_.ismntxt = $_.legacytxt; //#6239
        $_.pad = $s(18); //#6240
    } else { //#6242
        $_.pad = $s(22); //#6242
    } //#6242
    $puti($_.pad, 0, "ISMN "); //#6244
    $puti($_.pad, 5, $_.ismntxt); //#6245
    $put($_.pad, $_.pad.length - 2, 45); //#6246
    $put($_.pad, $_.pad.length - 1, $_.checksum); //#6247
    $_.ismntxt = $_.pad; //#6248
    $_.barcode = $geti($_.ismn, 0, 12); //#6251
    if ($_.addon.length != 0) { //#6260
        var _1l = $s((12 + $_.addon.length) + 1); //#6255
        $puti(_1l, 0, $_.barcode); //#6256
        $puti(_1l, 12, " "); //#6257
        $puti(_1l, 13, $_.addon); //#6258
        $_.barcode = _1l; //#6259
    } //#6259
    $put($_.options, "dontdraw", true); //#6263
    $put($_.options, "addongap", $_.addongap); //#6264
    $k[$j++] = 'args'; //#6265
    $k[$j++] = $_.barcode; //#6265
    $k[$j++] = $_.options; //#6265
    bwipp_ean13(); //#6265
    var _1t = $k[--$j]; //#6265
    $_[$k[--$j]] = _1t; //#6265
    if ($_.includetext) { //#6284
        if ($_.ismntextxoffset == null) { //#6271
            $k[$j++] = 'ismntextxoffset'; //#6270
            if ($_.ismntxt.length == 18) { //#6270
                $k[$j++] = -1; //#6270
            } else { //#6270
                $k[$j++] = -12; //#6270
            } //#6270
            var _1y = $k[--$j]; //#6270
            $_[$k[--$j]] = _1y; //#6270
        } //#6270
        if ($_.ismntextyoffset == null) { //#6274
            $_.ismntextyoffset = ($_.height * 72) + 3; //#6273
        } //#6273
        var _23 = $get($_.args, "txt") !== undefined; //#6275
        if (_23) { //#6282
            $_.txt = $get($_.args, "txt"); //#6276
            $_.newtxt = $a($_.txt.length + 1); //#6277
            $puti($_.newtxt, 0, $_.txt); //#6278
            $put($_.newtxt, $_.newtxt.length - 1, $a([$_.ismntxt, $_.ismntextxoffset, $_.ismntextyoffset, $_.ismntextfont, $_.ismntextsize])); //#6279
            $put($_.args, "txt", $_.newtxt); //#6280
        } else { //#6282
            $put($_.args, "txt", $a([$a([$_.ismntxt, $_.ismntextxoffset, $_.ismntextyoffset, $_.ismntextfont, $_.ismntextsize])])); //#6282
        } //#6282
    } //#6282
    $put($_.args, "opt", $_.options); //#6286
    $k[$j++] = $_.args; //#6289
    if (!$_.dontdraw) { //#6289
        bwipp_renlinear(); //#6289
    } //#6289
    $_ = $__; //#6291
} //bwipp_ismn
function bwipp_issn() {
    var $__ = $_; //#6320
    $_ = Object.assign({}, $_); //#6320
    $_.dontdraw = false; //#6323
    $_.includetext = false; //#6324
    $_.issntextfont = 'OCR-A'; //#6325
    $_.issntextsize = 8; //#6326
    $_.issntextxoffset = null; //#6327
    $_.issntextyoffset = null; //#6328
    $_.height = 1; //#6329
    $_.addongap = 12; //#6330
    $k[$j++] = $_; //#6332
    bwipp_processoptions(); //#6332
    $_.options = $k[--$j]; //#6332
    $_.issntxt = $k[--$j]; //#6333
    $search($_.issntxt, " "); //#6336
    if ($k[--$j]) { //#6342
        $_.issntxt = $k[--$j]; //#6337
        $j--; //#6338
        $_.seqvar = $k[--$j]; //#6339
    } else { //#6342
        $j--; //#6341
        $_.seqvar = "00"; //#6342
    } //#6342
    $search($_.seqvar, " "); //#6346
    if ($k[--$j]) { //#6352
        $_.seqvar = $k[--$j]; //#6347
        $j--; //#6348
        $_.addon = $k[--$j]; //#6349
    } else { //#6352
        $j--; //#6351
        $_.addon = ""; //#6352
    } //#6352
    if (($_.issntxt.length != 8) && ($_.issntxt.length != 9)) { //#6358
        $k[$j++] = 'bwipp.issnBadLength#6357'; //#6357
        $k[$j++] = "ISSN must be 8 or 9 characters including dash, in the format XXXX-XXXX"; //#6357
        bwipp_raiseerror(); //#6357
    } //#6357
    var _D = $geti($_.issntxt, 0, 4); //#6359
    for (var _E = 0, _F = _D.length; _E < _F; _E++) { //#6363
        var _G = $get(_D, _E); //#6363
        if ((_G < 48) || (_G > 57)) { //#6362
            $k[$j++] = 'bwipp.issnFirstThroughFourthNotNumeric#6361'; //#6361
            $k[$j++] = "ISSN first four characters must be numeral characters"; //#6361
            bwipp_raiseerror(); //#6361
        } //#6361
    } //#6361
    if ($ne($geti($_.issntxt, 4, 1), "-")) { //#6366
        $k[$j++] = 'bwipp.issnNeedsDash#6365'; //#6365
        $k[$j++] = "ISSN fifth character must be a dash"; //#6365
        bwipp_raiseerror(); //#6365
    } //#6365
    var _K = $geti($_.issntxt, 5, 3); //#6367
    for (var _L = 0, _M = _K.length; _L < _M; _L++) { //#6371
        var _N = $get(_K, _L); //#6371
        if ((_N < 48) || (_N > 57)) { //#6370
            $k[$j++] = 'bwipp.issnSixthThroughEighthNotNumeric#6369'; //#6369
            $k[$j++] = "ISSN sixth through eighth characters must be numerals"; //#6369
            bwipp_raiseerror(); //#6369
        } //#6369
    } //#6369
    if ($_.issntxt.length == 9) { //#6376
        var _Q = $get($_.issntxt, 8); //#6373
        if (((_Q < 48) || (_Q > 57)) && (_Q != 88)) { //#6375
            $k[$j++] = 'bwipp.issnNinthCharacterBadFormat#6374'; //#6374
            $k[$j++] = "ISSN ninth character must be a number or the character X"; //#6374
            bwipp_raiseerror(); //#6374
        } //#6374
    } //#6374
    if ($_.seqvar.length != 2) { //#6379
        $k[$j++] = 'bwipp.issnBadSequenceVariantLength#6378'; //#6378
        $k[$j++] = "Sequence variant for ISSN must be 2 digits"; //#6378
        bwipp_raiseerror(); //#6378
    } //#6378
    $forall($_.seqvar, function() { //#6384
        var _T = $k[--$j]; //#6381
        if ((_T < 48) || (_T > 57)) { //#6383
            $k[$j++] = 'bwipp.issnSequenceVariantBadCharacter#6382'; //#6382
            $k[$j++] = "Sequence variant for ISSN must contain only digits"; //#6382
            bwipp_raiseerror(); //#6382
        } //#6382
    }); //#6382
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#6387
        $k[$j++] = 'bwipp.issnBadAddOnLength#6386'; //#6386
        $k[$j++] = "Add-on for ISSN must be 2 or 5 digits"; //#6386
        bwipp_raiseerror(); //#6386
    } //#6386
    $_.issn = $s(8); //#6390
    $_.checksum = 0; //#6391
    $_.i = 0; //#6392
    $_.n = 0; //#6392
    for (;;) { //#6404
        $_.issnchar = $get($_.issntxt, $_.i) - 48; //#6394
        if ($_.issnchar != -3) { //#6401
            $put($_.issn, $_.n, $_.issnchar + 48); //#6396
            if ($_.n < 7) { //#6399
                $_.checksum = $f($_.checksum + ($_.issnchar * (8 - $_.n))); //#6398
            } //#6398
            $_.n = $_.n + 1; //#6400
        } //#6400
        $_.i = $_.i + 1; //#6402
        if ($_.i == $_.issntxt.length) { //#6403
            break; //#6403
        } //#6403
    } //#6403
    $_.checksum = (11 - ($_.checksum % 11)) % 11; //#6405
    var _p = $_.checksum + 48; //#6406
    $k[$j++] = 'checksum'; //#6406
    $k[$j++] = _p; //#6406
    if (_p == 58) { //#6406
        $k[$j - 1] = 88; //#6406
    } //#6406
    var _q = $k[--$j]; //#6406
    var _r = $k[--$j]; //#6406
    $_[_r] = _q; //#6406
    if ($_.issntxt.length == 9) { //#6411
        if ($get($_.issntxt, 8) != $_.checksum) { //#6410
            $k[$j++] = 'bwipp.issnBadCheckDigit#6409'; //#6409
            $k[$j++] = "Incorrect ISSN check digit provided"; //#6409
            bwipp_raiseerror(); //#6409
        } //#6409
    } //#6409
    $_.pad = $s(14); //#6414
    $puti($_.pad, 0, "ISSN "); //#6415
    $puti($_.pad, 5, $_.issntxt); //#6416
    $put($_.pad, 13, $_.checksum); //#6417
    $_.issntxt = $_.pad; //#6418
    $_.barcode = $geti($_.issn, 0, 7); //#6421
    $_.barcode = $s(12); //#6424
    $puti($_.barcode, 0, "977"); //#6425
    $puti($_.barcode, 3, $_.issn); //#6426
    $puti($_.barcode, 10, $_.seqvar); //#6427
    if ($_.addon.length != 0) { //#6436
        var _1D = $s((12 + $_.addon.length) + 1); //#6431
        $puti(_1D, 0, $_.barcode); //#6432
        $puti(_1D, 12, " "); //#6433
        $puti(_1D, 13, $_.addon); //#6434
        $_.barcode = _1D; //#6435
    } //#6435
    $put($_.options, "dontdraw", true); //#6439
    $put($_.options, "addongap", $_.addongap); //#6440
    $k[$j++] = 'args'; //#6441
    $k[$j++] = $_.barcode; //#6441
    $k[$j++] = $_.options; //#6441
    bwipp_ean13(); //#6441
    var _1L = $k[--$j]; //#6441
    $_[$k[--$j]] = _1L; //#6441
    if ($_.includetext) { //#6456
        if ($_.issntextxoffset == null) { //#6445
            $_.issntextxoffset = 10; //#6445
        } //#6445
        if ($_.issntextyoffset == null) { //#6446
            $_.issntextyoffset = ($_.height * 72) + 3; //#6446
        } //#6446
        var _1S = $get($_.args, "txt") !== undefined; //#6447
        if (_1S) { //#6454
            $_.txt = $get($_.args, "txt"); //#6448
            $_.newtxt = $a($_.txt.length + 1); //#6449
            $puti($_.newtxt, 0, $_.txt); //#6450
            $put($_.newtxt, $_.newtxt.length - 1, $a([$_.issntxt, $_.issntextxoffset, $_.issntextyoffset, $_.issntextfont, $_.issntextsize])); //#6451
            $put($_.args, "txt", $_.newtxt); //#6452
        } else { //#6454
            $put($_.args, "txt", $a([$a([$_.issntxt, $_.issntextxoffset, $_.issntextyoffset, $_.issntextfont, $_.issntextsize])])); //#6454
        } //#6454
    } //#6454
    $put($_.args, "opt", $_.options); //#6458
    $k[$j++] = $_.args; //#6461
    if (!$_.dontdraw) { //#6461
        bwipp_renlinear(); //#6461
    } //#6461
    $_ = $__; //#6463
} //bwipp_issn
function bwipp_mands() {
    var $__ = $_; //#6492
    $_ = Object.assign({}, $_); //#6492
    $_.dontdraw = false; //#6495
    $_.includetext = false; //#6496
    $k[$j++] = $_; //#6498
    bwipp_processoptions(); //#6498
    $_.options = $k[--$j]; //#6498
    $_.barcode = $k[--$j]; //#6499
    $_.barlen = $_.barcode.length; //#6501
    if (($_.barlen != 7) && ($_.barlen != 8)) { //#6506
        $k[$j++] = 'bwipp.MandSbadLength#6505'; //#6505
        $k[$j++] = "M&S barcode must be 7 or 8 characters"; //#6505
        bwipp_raiseerror(); //#6505
    } //#6505
    if ($_.barlen == 7) { //#6510
        var _7 = $strcpy($s(8), "00000000"); //#6509
        $puti(_7, 1, $_.barcode); //#6509
        $_.barcode = _7; //#6509
    } //#6509
    $put($_.options, "dontdraw", true); //#6513
    $k[$j++] = 'args'; //#6514
    $k[$j++] = $_.barcode; //#6514
    $k[$j++] = $_.options; //#6514
    bwipp_ean8(); //#6514
    var _C = $k[--$j]; //#6514
    $_[$k[--$j]] = _C; //#6514
    var _F = $get($_.args, "bbs"); //#6517
    $put(_F, 10, $get(_F, 2)); //#6518
    $put(_F, 11, $get(_F, 2)); //#6519
    var _J = $get($_.args, "bhs"); //#6520
    $put(_J, 10, $get(_J, 2)); //#6521
    $put(_J, 11, $get(_J, 2)); //#6522
    $_.txt = $get($_.args, "txt"); //#6525
    if ($_.barlen == 7) { //#6533
        for (var _P = 0; _P <= 6; _P += 1) { //#6531
            var _Q = $_.txt; //#6528
            $puti($get($get(_Q, _P), 0), 0, $get($get(_Q, _P + 1), 0)); //#6530
        } //#6530
        $puti($get($get($_.txt, 7), 0), 0, " "); //#6532
    } //#6532
    var _Y = $a(10); //#6536
    $puti(_Y, 0, $_.txt); //#6536
    $_.txt = _Y; //#6536
    var _b = $get($_.txt, 0); //#6537
    $put($_.txt, 8, $arrcpy($a(_b.length), _b)); //#6537
    var _g = $get($_.txt, 0); //#6538
    $put($_.txt, 9, $arrcpy($a(_g.length), _g)); //#6538
    $put($get($_.txt, 8), 0, "M"); //#6539
    $put($get($_.txt, 8), 1, -12); //#6539
    $put($get($_.txt, 9), 0, "S"); //#6540
    var _r = $get($_.txt, 9); //#6540
    $put(_r, 1, 69); //#6540
    $put($_.args, "txt", $_.txt); //#6542
    $put($_.args, "opt", $_.options); //#6543
    $k[$j++] = $_.args; //#6546
    if (!$_.dontdraw) { //#6546
        bwipp_renlinear(); //#6546
    } //#6546
    $_ = $__; //#6548
} //bwipp_mands
function bwipp_code128() {
    var $__ = $_; //#6579
    $_ = Object.assign({}, $_); //#6579
    $_.dontdraw = false; //#6582
    $_.includetext = false; //#6583
    $_.textfont = "OCR-B"; //#6584
    $_.textsize = 10; //#6585
    $_.textxoffset = 0; //#6586
    $_.textyoffset = -8; //#6587
    $_.height = 1; //#6588
    $_.raw = false; //#6589
    $_.newencoder = false; //#6590
    $_.parse = false; //#6591
    $_.parsefnc = false; //#6592
    $_.suppressc = false; //#6593
    $_.unlatchextbeforec = false; //#6594
    $k[$j++] = $_; //#6596
    bwipp_processoptions(); //#6596
    $_.options = $k[--$j]; //#6596
    $_.barcode = $k[--$j]; //#6597
    $_.sta = -1; //#6603
    $_.stb = -2; //#6603
    $_.stc = -3; //#6603
    $_.swa = -4; //#6604
    $_.swb = -5; //#6604
    $_.swc = -6; //#6604
    $_.fn1 = -7; //#6605
    $_.fn2 = -8; //#6605
    $_.fn3 = -9; //#6605
    $_.fn4 = -10; //#6606
    $_.sft = -11; //#6606
    $_.stp = -12; //#6606
    $_.lka = -13; //#6607
    $_.lkc = -14; //#6607
    var _A = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["FNC1", $_.fn1],
        ["FNC2", $_.fn2],
        ["FNC3", $_.fn3],
        ["LNKA", $_.lka],
        ["LNKC", $_.lkc]
    ]); //#6619
    $_.fncvals = _A; //#6620
    $k[$j++] = 'msg'; //#6621
    $k[$j++] = $_.barcode; //#6621
    $k[$j++] = $_.fncvals; //#6621
    bwipp_parseinput(); //#6621
    var _D = $k[--$j]; //#6621
    $_[$k[--$j]] = _D; //#6621
    $_.msglen = $_.msg.length; //#6622
    $_.encoding = "legacy"; //#6624
    if ($_.newencoder) { //#6625
        $_.encoding = "new"; //#6625
    } //#6625
    if ($_.raw) { //#6626
        $_.encoding = "raw"; //#6626
    } //#6626
    if ($eq($_.encoding, "raw")) { //#6644
        $_.cws = $a($_.barcode.length); //#6629
        $_.i = 0; //#6630
        $_.j = 0; //#6630
        for (;;) { //#6637
            if ($_.i == $_.barcode.length) { //#6632
                break; //#6632
            } //#6632
            $_.cw = $cvi($geti($_.barcode, $_.i + 1, 3)); //#6633
            $put($_.cws, $_.j, $_.cw); //#6634
            $_.i = $_.i + 4; //#6635
            $_.j = $_.j + 1; //#6636
        } //#6636
        $_.cws = $geti($_.cws, 0, $_.j); //#6638
        $_.text = ""; //#6639
    } else { //#6644
        $_.text = $s($_.msglen); //#6641
        for (var _c = 0, _b = $_.msglen - 1; _c <= _b; _c += 1) { //#6645
            $_.i = _c; //#6643
            var _h = $get($_.msg, $_.i); //#6644
            $k[$j++] = $_.text; //#6644
            $k[$j++] = $_.i; //#6644
            $k[$j++] = _h; //#6644
            if (_h < 0) { //#6644
                $k[$j - 1] = 32; //#6644
            } //#6644
            var _i = $k[--$j]; //#6644
            var _j = $k[--$j]; //#6644
            $put($k[--$j], _j, _i); //#6644
        } //#6644
    } //#6644
    $_.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$_.fn3, $_.fn3, "96"]), $a([$_.fn2, $_.fn2, "97"]), $a([$_.sft, $_.sft, "98"]), $a([$_.swc, $_.swc, "99"]), $a([$_.swb, $_.fn4, $_.swb]), $a([$_.fn4, $_.swa, $_.swa]), $a([$_.fn1, $_.fn1, $_.fn1]), $a([$_.sta, $_.sta, $_.sta]), $a([$_.stb, $_.stb, $_.stb]), $a([$_.stc, $_.stc, $_.stc]), $a([$_.stp, $_.stp, $_.stp])]); //#6688
    $_.charvals = $a([new Map, new Map, new Map]); //#6691
    for (var _31 = 0, _30 = $_.charmaps.length - 1; _31 <= _30; _31 += 1) { //#6700
        $_.i = _31; //#6693
        $_.encs = $get($_.charmaps, $_.i); //#6694
        for (var _35 = 0; _35 <= 2; _35 += 1) { //#6699
            $_.j = _35; //#6696
            var _38 = $get($_.encs, $_.j); //#6697
            $k[$j++] = _38; //#6697
            if ($eq($type(_38), 'stringtype')) { //#6697
                var _3B = $get($k[--$j], 0); //#6697
                $k[$j++] = _3B; //#6697
            } //#6697
            $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#6698
        } //#6698
    } //#6698
    if ($eq($_.encoding, "legacy")) { //#6927
        $_.seta = $get($_.charvals, 0); //#6706
        $put($_.seta, $_.lka, $get($_.seta, $_.swb)); //#6706
        $put($_.seta, $_.lkc, $get($_.seta, $_.swc)); //#6706
        $_.setb = $get($_.charvals, 1); //#6707
        $put($_.setb, $_.lka, $get($_.setb, $_.swc)); //#6707
        $put($_.setb, $_.lkc, $get($_.setb, $_.swa)); //#6707
        $_.setc = $get($_.charvals, 2); //#6708
        $put($_.setc, $_.lka, $get($_.setc, $_.swa)); //#6708
        $put($_.setc, $_.lkc, $get($_.setc, $_.swb)); //#6708
        $k[$j++] = Infinity; //#6711
        for (var _3u = 0, _3v = $_.msglen; _3u < _3v; _3u++) { //#6711
            $k[$j++] = 0; //#6711
        } //#6711
        $k[$j++] = 0; //#6711
        $_.numSA = $a(); //#6711
        $k[$j++] = Infinity; //#6712
        for (var _3y = 0, _3z = $_.msglen; _3y < _3z; _3y++) { //#6712
            $k[$j++] = 0; //#6712
        } //#6712
        $k[$j++] = 0; //#6712
        $_.numEA = $a(); //#6712
        for (var _42 = $_.msglen - 1; _42 >= 0; _42 -= 1) { //#6722
            $_.i = _42; //#6714
            if ($get($_.msg, $_.i) >= 0) { //#6721
                if ($get($_.msg, $_.i) >= 128) { //#6719
                    $put($_.numEA, $_.i, $get($_.numEA, $_.i + 1) + 1); //#6717
                } else { //#6719
                    $put($_.numSA, $_.i, $get($_.numSA, $_.i + 1) + 1); //#6719
                } //#6719
            } //#6719
        } //#6719
        $_.ea = false; //#6725
        $_.msgtmp = $a([]); //#6725
        for (var _4M = 0, _4L = $_.msglen - 1; _4M <= _4L; _4M += 1) { //#6740
            $_.i = _4M; //#6727
            $_.c = $get($_.msg, $_.i); //#6728
            if ((!($_.ea != ($_.c < 128))) && ($_.c >= 0)) { //#6738
                if ($_.ea) { //#6730
                    $k[$j++] = $_.numSA; //#6730
                } else { //#6730
                    $k[$j++] = $_.numEA; //#6730
                } //#6730
                var _4Y = $get($k[--$j], $_.i); //#6730
                var _4b = ($f(_4Y + $_.i) == $_.msglen) ? 3 : 5; //#6731
                if (_4Y < _4b) { //#6736
                    $k[$j++] = Infinity; //#6733
                    $aload($_.msgtmp); //#6733
                    $k[$j++] = $_.fn4; //#6733
                    $_.msgtmp = $a(); //#6733
                } else { //#6736
                    $k[$j++] = Infinity; //#6735
                    $aload($_.msgtmp); //#6735
                    $k[$j++] = $_.fn4; //#6735
                    $k[$j++] = $_.fn4; //#6735
                    $_.msgtmp = $a(); //#6735
                    $_.ea = !$_.ea; //#6736
                } //#6736
            } //#6736
            $k[$j++] = Infinity; //#6739
            $aload($_.msgtmp); //#6739
            if ($_.c >= 0) { //#6739
                $k[$j++] = $_.c & 127; //#6739
            } else { //#6739
                $k[$j++] = $_.c; //#6739
            } //#6739
            $_.msgtmp = $a(); //#6739
        } //#6739
        $_.msg = $_.msgtmp; //#6741
        $_.msglen = $_.msg.length; //#6742
        $_.numsscr = function() {
            $_.s = 0; //#6746
            $_.p = $k[--$j]; //#6747
            for (;;) { //#6759
                if ($_.p >= $_.msglen) { //#6748
                    break; //#6748
                } //#6748
                var _4w = $get($_.msg, $_.p); //#6749
                var _4y = $get($_.setc, _4w) !== undefined; //#6750
                $k[$j++] = _4w; //#6750
                if (!_4y) { //#6750
                    $j--; //#6750
                    break; //#6750
                } //#6750
                var _4z = $k[$j - 1]; //#6751
                if (_4z <= -1) { //#6755
                    var _51 = $k[--$j]; //#6753
                    if ((_51 == $_.fn1) && (($_.s % 2) == 0)) { //#6753
                        $_.s = $_.s + 1; //#6753
                    } else { //#6753
                        break; //#6753
                    } //#6753
                } else { //#6755
                    $j--; //#6755
                } //#6755
                $_.s = $_.s + 1; //#6757
                $_.p = $_.p + 1; //#6758
            } //#6758
            $k[$j++] = $_.s; //#6760
        }; //#6760
        $_.enca = function() {
            $put($_.cws, $_.j, $get($_.seta, $k[--$j])); //#6765
            $_.j = $_.j + 1; //#6766
        }; //#6766
        $_.encb = function() {
            $put($_.cws, $_.j, $get($_.setb, $k[--$j])); //#6769
            $_.j = $_.j + 1; //#6770
        }; //#6770
        $_.encc = function() {
            var _5J = $k[$j - 1]; //#6773
            if ($ne($type(_5J), 'arraytype')) { //#6776
                var _5N = $get($_.setc, $k[--$j]); //#6774
                $k[$j++] = _5N; //#6774
            } else { //#6776
                $aload($k[--$j]); //#6776
                var _5P = $k[--$j]; //#6776
                var _5Q = $k[--$j]; //#6776
                $k[$j++] = $f((_5P - 48) + ((_5Q - 48) * 10)); //#6776
            } //#6776
            $put($_.cws, $_.j, $k[--$j]); //#6778
            $_.j = $_.j + 1; //#6779
        }; //#6779
        $_.anotb = function() {
            var _5V = $k[--$j]; //#6783
            var _5X = $get($_.seta, _5V) !== undefined; //#6783
            var _5Z = $get($_.setb, _5V) !== undefined; //#6783
            $k[$j++] = _5X && (!_5Z); //#6783
        }; //#6783
        $_.bnota = function() {
            var _5a = $k[--$j]; //#6784
            var _5c = $get($_.setb, _5a) !== undefined; //#6784
            var _5e = $get($_.seta, _5a) !== undefined; //#6784
            $k[$j++] = _5c && (!_5e); //#6784
        }; //#6784
        $k[$j++] = Infinity; //#6787
        for (var _5g = 0, _5h = $_.msg.length; _5g < _5h; _5g++) { //#6787
            $k[$j++] = 0; //#6787
        } //#6787
        $k[$j++] = 9999; //#6787
        $_.nextanotb = $a(); //#6787
        $k[$j++] = Infinity; //#6788
        for (var _5k = 0, _5l = $_.msg.length; _5k < _5l; _5k++) { //#6788
            $k[$j++] = 0; //#6788
        } //#6788
        $k[$j++] = 9999; //#6788
        $_.nextbnota = $a(); //#6788
        for (var _5o = $_.msg.length - 1; _5o >= 0; _5o -= 1) { //#6801
            $_.i = _5o; //#6790
            $k[$j++] = $get($_.msg, $_.i); //#6791
            $_.anotb(); //#6791
            if ($k[--$j]) { //#6794
                $put($_.nextanotb, $_.i, 0); //#6792
            } else { //#6794
                $put($_.nextanotb, $_.i, $get($_.nextanotb, $_.i + 1) + 1); //#6794
            } //#6794
            $k[$j++] = $get($_.msg, $_.i); //#6796
            $_.bnota(); //#6796
            if ($k[--$j]) { //#6799
                $put($_.nextbnota, $_.i, 0); //#6797
            } else { //#6799
                $put($_.nextbnota, $_.i, $get($_.nextbnota, $_.i + 1) + 1); //#6799
            } //#6799
        } //#6799
        $_.abeforeb = function() {
            var _6B = $k[--$j]; //#6804
            $k[$j++] = $lt($get($_.nextanotb, _6B), $get($_.nextbnota, _6B)); //#6804
        }; //#6804
        $_.bbeforea = function() {
            var _6G = $k[--$j]; //#6805
            $k[$j++] = $lt($get($_.nextbnota, _6G), $get($_.nextanotb, _6G)); //#6805
        }; //#6805
        $_.cws = $a(($_.barcode.length * 2) + 3); //#6807
        $_.j = 0; //#6810
        if ($_.msglen > 0) { //#6811
            $k[$j++] = 0; //#6811
            $_.numsscr(); //#6811
        } else { //#6811
            $k[$j++] = -1; //#6811
        } //#6811
        $_.nums = $k[--$j]; //#6811
        for (;;) { //#6836
            if ($_.msglen == 0) { //#6817
                $k[$j++] = $_.stb; //#6814
                $_.enca(); //#6814
                $_.cset = "setb"; //#6815
                break; //#6816
            } //#6816
            if (($_.msglen == 2) && ($_.nums == 2)) { //#6822
                $k[$j++] = $_.stc; //#6819
                $_.enca(); //#6819
                $_.cset = "setc"; //#6820
                break; //#6821
            } //#6821
            if ($_.nums >= 4) { //#6827
                $k[$j++] = $_.stc; //#6824
                $_.enca(); //#6824
                $_.cset = "setc"; //#6825
                break; //#6826
            } //#6826
            $k[$j++] = 0; //#6828
            $_.abeforeb(); //#6828
            if ($k[--$j]) { //#6832
                $k[$j++] = $_.sta; //#6829
                $_.enca(); //#6829
                $_.cset = "seta"; //#6830
                break; //#6831
            } //#6831
            $k[$j++] = $_.stb; //#6833
            $_.enca(); //#6833
            $_.cset = "setb"; //#6834
            break; //#6835
        } //#6835
        $_.i = 0; //#6839
        for (;;) { //#6924
            if ($_.i == $_.msglen) { //#6840
                break; //#6840
            } //#6840
            $k[$j++] = $_.i; //#6842
            $_.numsscr(); //#6842
            $_.nums = $k[--$j]; //#6842
            for (;;) { //#6922
                if ((($eq($_.cset, "seta") || $eq($_.cset, "setb")) && ($_.nums >= 4)) && ($get($_.msg, $_.i) != $_.fn1)) { //#6861
                    if (($_.nums % 2) == 0) { //#6858
                        $k[$j++] = $_.swc; //#6849
                        if ($eq($_.cset, "seta")) { //#6849
                            $_.enca(); //#6849
                        } else { //#6849
                            $_.encb(); //#6849
                        } //#6849
                        $_.cset = "setc"; //#6850
                        break; //#6851
                    } else { //#6858
                        $k[$j++] = $get($_.msg, $_.i); //#6853
                        if ($eq($_.cset, "seta")) { //#6853
                            $_.enca(); //#6853
                        } else { //#6853
                            $_.encb(); //#6853
                        } //#6853
                        $_.i = $_.i + 1; //#6854
                        $k[$j++] = $_.i; //#6855
                        $_.numsscr(); //#6855
                        if ($k[--$j] >= 4) { //#6859
                            $k[$j++] = $_.swc; //#6856
                            if ($eq($_.cset, "seta")) { //#6856
                                $_.enca(); //#6856
                            } else { //#6856
                                $_.encb(); //#6856
                            } //#6856
                            $_.cset = "setc"; //#6857
                            break; //#6858
                        } //#6858
                    } //#6858
                } //#6858
                $k[$j++] = $eq($_.cset, "setb"); //#6862
                $k[$j++] = $get($_.msg, $_.i); //#6862
                $_.anotb(); //#6862
                var _70 = $k[--$j]; //#6862
                if ($k[--$j] && _70) { //#6874
                    if ($_.i < ($_.msglen - 1)) { //#6870
                        $k[$j++] = $_.i + 1; //#6864
                        $_.bbeforea(); //#6864
                        if ($k[--$j]) { //#6869
                            $k[$j++] = $_.sft; //#6865
                            $_.encb(); //#6865
                            $k[$j++] = $get($_.msg, $_.i); //#6866
                            $_.enca(); //#6866
                            $_.i = $_.i + 1; //#6867
                            break; //#6868
                        } //#6868
                    } //#6868
                    $k[$j++] = $_.swa; //#6871
                    $_.encb(); //#6871
                    $_.cset = "seta"; //#6872
                    break; //#6873
                } //#6873
                $k[$j++] = $eq($_.cset, "seta"); //#6875
                $k[$j++] = $get($_.msg, $_.i); //#6875
                $_.bnota(); //#6875
                var _7G = $k[--$j]; //#6875
                if ($k[--$j] && _7G) { //#6887
                    if ($_.i < ($_.msglen - 1)) { //#6883
                        $k[$j++] = $_.i + 1; //#6877
                        $_.abeforeb(); //#6877
                        if ($k[--$j]) { //#6882
                            $k[$j++] = $_.sft; //#6878
                            $_.enca(); //#6878
                            $k[$j++] = $get($_.msg, $_.i); //#6879
                            $_.encb(); //#6879
                            $_.i = $_.i + 1; //#6880
                            break; //#6881
                        } //#6881
                    } //#6881
                    $k[$j++] = $_.swb; //#6884
                    $_.enca(); //#6884
                    $_.cset = "setb"; //#6885
                    break; //#6886
                } //#6886
                if (($eq($_.cset, "setc") && ($_.nums < 2)) && (($get($_.msg, $_.i) > -1) || ($get($_.msg, $_.i) == $_.fn4))) { //#6897
                    $k[$j++] = $_.i; //#6889
                    $_.abeforeb(); //#6889
                    if ($k[--$j]) { //#6893
                        $k[$j++] = $_.swa; //#6890
                        $_.encc(); //#6890
                        $_.cset = "seta"; //#6891
                        break; //#6892
                    } //#6892
                    $k[$j++] = $_.swb; //#6894
                    $_.encc(); //#6894
                    $_.cset = "setb"; //#6895
                    break; //#6896
                } //#6896
                if ($eq($_.cset, "seta")) { //#6904
                    $k[$j++] = $get($_.msg, $_.i); //#6901
                    $_.enca(); //#6901
                    $_.i = $_.i + 1; //#6902
                    break; //#6903
                } //#6903
                if ($eq($_.cset, "setb")) { //#6909
                    $k[$j++] = $get($_.msg, $_.i); //#6906
                    $_.encb(); //#6906
                    $_.i = $_.i + 1; //#6907
                    break; //#6908
                } //#6908
                if ($eq($_.cset, "setc")) { //#6919
                    if ($get($_.msg, $_.i) <= -1) { //#6916
                        $k[$j++] = $get($_.msg, $_.i); //#6912
                        $_.encc(); //#6912
                        $_.i = $_.i + 1; //#6913
                    } else { //#6916
                        $k[$j++] = $geti($_.msg, $_.i, 2); //#6915
                        $_.encc(); //#6915
                        $_.i = $_.i + 2; //#6916
                    } //#6916
                    break; //#6918
                } //#6918
                break; //#6921
            } //#6921
        } //#6921
        $_.cws = $geti($_.cws, 0, $_.j); //#6925
    } //#6925
    if ($eq($_.encoding, "new")) { //#7090
        $k[$j++] = Infinity; //#6932
        $k[$j++] = $_.fn3; //#6932
        $k[$j++] = 96; //#6932
        $k[$j++] = $_.fn2; //#6932
        $k[$j++] = 97; //#6932
        $k[$j++] = $_.fn1; //#6932
        $k[$j++] = 102; //#6932
        $k[$j++] = $_.stp; //#6932
        $k[$j++] = 106; //#6932
        $k[$j++] = $_.lka; //#6932
        $k[$j++] = 100; //#6932
        $k[$j++] = $_.lkc; //#6932
        $k[$j++] = 99; //#6932
        $_.seta = $d(); //#6932
        $k[$j++] = Infinity; //#6933
        $k[$j++] = $_.fn3; //#6933
        $k[$j++] = 96; //#6933
        $k[$j++] = $_.fn2; //#6933
        $k[$j++] = 97; //#6933
        $k[$j++] = $_.fn1; //#6933
        $k[$j++] = 102; //#6933
        $k[$j++] = $_.stp; //#6933
        $k[$j++] = 106; //#6933
        $k[$j++] = $_.lka; //#6933
        $k[$j++] = 99; //#6933
        $k[$j++] = $_.lkc; //#6933
        $k[$j++] = 101; //#6933
        $_.setb = $d(); //#6933
        $k[$j++] = Infinity; //#6934
        $k[$j++] = $_.fn1; //#6934
        $k[$j++] = 102; //#6934
        $k[$j++] = $_.stp; //#6934
        $k[$j++] = 106; //#6934
        $k[$j++] = $_.lka; //#6934
        $k[$j++] = 101; //#6934
        $k[$j++] = $_.lkc; //#6934
        $k[$j++] = 100; //#6934
        $_.setc = $d(); //#6934
        $_.latch_a0 = $a(["", "e", "e", "ee", "eee", "eee"]); //#6947
        $_.latch_b0 = $a(["d", "", "d", "ddd", "dd", "ddd"]); //#6948
        $_.latch_c0 = $a(["c", "c", "", "eec", "ddc", "dddc"]); //#6949
        $_.latch_a1 = $a(["ee", "eee", "eee", "", "e", "e"]); //#6950
        $_.latch_b1 = $a(["ddd", "dd", "ddd", "d", "", "d"]); //#6951
        $_.latch_c1 = $a(["eec", "ddc", "dddc", "c", "c", ""]); //#6952
        $k[$j++] = Infinity; //#6954
        var _8U = $_.latch_a0; //#6954
        for (var _8V = 0, _8W = _8U.length; _8V < _8W; _8V++) { //#6954
            $k[$j++] = $get(_8U, _8V).length; //#6954
        } //#6954
        $_.latch_length_a0 = $a(); //#6954
        $k[$j++] = Infinity; //#6955
        var _8Z = $_.latch_a1; //#6955
        for (var _8a = 0, _8b = _8Z.length; _8a < _8b; _8a++) { //#6955
            $k[$j++] = $get(_8Z, _8a).length; //#6955
        } //#6955
        $_.latch_length_a1 = $a(); //#6955
        $k[$j++] = Infinity; //#6956
        var _8e = $_.latch_b0; //#6956
        for (var _8f = 0, _8g = _8e.length; _8f < _8g; _8f++) { //#6956
            $k[$j++] = $get(_8e, _8f).length; //#6956
        } //#6956
        $_.latch_length_b0 = $a(); //#6956
        $k[$j++] = Infinity; //#6957
        var _8j = $_.latch_b1; //#6957
        for (var _8k = 0, _8l = _8j.length; _8k < _8l; _8k++) { //#6957
            $k[$j++] = $get(_8j, _8k).length; //#6957
        } //#6957
        $_.latch_length_b1 = $a(); //#6957
        $k[$j++] = Infinity; //#6958
        var _8o = $_.latch_c0; //#6958
        for (var _8p = 0, _8q = _8o.length; _8p < _8q; _8p++) { //#6958
            $k[$j++] = $get(_8o, _8p).length; //#6958
        } //#6958
        $_.latch_length_c0 = $a(); //#6958
        $k[$j++] = Infinity; //#6959
        var _8t = $_.latch_c1; //#6959
        for (var _8u = 0, _8v = _8t.length; _8u < _8v; _8u++) { //#6959
            $k[$j++] = $get(_8t, _8u).length; //#6959
        } //#6959
        $_.latch_length_c1 = $a(); //#6959
        $_.latch_sequence = $a([$_.latch_a0, $_.latch_b0, $_.latch_c0, $_.latch_a1, $_.latch_b1, $_.latch_c1]); //#6962
        var _95 = $a([function() {
            $_.enc_a0(); //#6963
        }, function() {
            $_.enc_b0(); //#6963
        }, function() {
            $_.enc_c(); //#6963
        }, function() {
            $_.enc_a1(); //#6963
        }, function() {
            $_.enc_b1(); //#6963
        }, function() {
            $_.enc_c(); //#6963
        }]); //#6963
        $_.encode = _95; //#6963
        $_.start_code = $a([103, 104, 105]); //#6964
        $_.state_priority = $a([1, 0, 2, 4, 3, 5]); //#6966
        $_.start_state = $a([0, 1, 2, 0, 1, 2]); //#6967
        $_.start_length = $a([1, 1, 1, 1, 1, 1]); //#6968
        $k[$j++] = Infinity; //#6971
        var _9A = $a([5, 4, 3, 2, 1, 0]); //#6971
        for (var _9B = 0, _9C = _9A.length; _9B < _9C; _9B++) { //#6971
            $k[$j++] = $get($_.state_priority, $get(_9A, _9B)); //#6971
        } //#6971
        $_.reverse_priority = $a(); //#6971
        $k[$j++] = Infinity; //#6974
        var _9H = $_.reverse_priority; //#6974
        for (var _9I = 0, _9J = _9H.length; _9I < _9J; _9I++) { //#6974
            var _9K = $get(_9H, _9I); //#6974
            $k[$j++] = _9K; //#6974
            $k[$j++] = $get($_.latch_length_a0, _9K); //#6974
            $k[$j++] = _9K; //#6974
        } //#6974
        $_.prioritized_latch_length_a0 = $a(); //#6974
        $k[$j++] = Infinity; //#6975
        var _9O = $_.reverse_priority; //#6975
        for (var _9P = 0, _9Q = _9O.length; _9P < _9Q; _9P++) { //#6975
            var _9R = $get(_9O, _9P); //#6975
            $k[$j++] = _9R; //#6975
            $k[$j++] = $get($_.latch_length_a1, _9R); //#6975
            $k[$j++] = _9R; //#6975
        } //#6975
        $_.prioritized_latch_length_a1 = $a(); //#6975
        $k[$j++] = Infinity; //#6976
        var _9V = $_.reverse_priority; //#6976
        for (var _9W = 0, _9X = _9V.length; _9W < _9X; _9W++) { //#6976
            var _9Y = $get(_9V, _9W); //#6976
            $k[$j++] = _9Y; //#6976
            $k[$j++] = $get($_.latch_length_b0, _9Y); //#6976
            $k[$j++] = _9Y; //#6976
        } //#6976
        $_.prioritized_latch_length_b0 = $a(); //#6976
        $k[$j++] = Infinity; //#6977
        var _9c = $_.reverse_priority; //#6977
        for (var _9d = 0, _9e = _9c.length; _9d < _9e; _9d++) { //#6977
            var _9f = $get(_9c, _9d); //#6977
            $k[$j++] = _9f; //#6977
            $k[$j++] = $get($_.latch_length_b1, _9f); //#6977
            $k[$j++] = _9f; //#6977
        } //#6977
        $_.prioritized_latch_length_b1 = $a(); //#6977
        $k[$j++] = Infinity; //#6978
        var _9j = $_.reverse_priority; //#6978
        for (var _9k = 0, _9l = _9j.length; _9k < _9l; _9k++) { //#6978
            var _9m = $get(_9j, _9k); //#6978
            $k[$j++] = _9m; //#6978
            $k[$j++] = $get($_.latch_length_c0, _9m); //#6978
            $k[$j++] = _9m; //#6978
        } //#6978
        $_.prioritized_latch_length_c0 = $a(); //#6978
        $k[$j++] = Infinity; //#6979
        var _9q = $_.reverse_priority; //#6979
        for (var _9r = 0, _9s = _9q.length; _9r < _9s; _9r++) { //#6979
            var _9t = $get(_9q, _9r); //#6979
            $k[$j++] = _9t; //#6979
            $k[$j++] = $get($_.latch_length_c1, _9t); //#6979
            $k[$j++] = _9t; //#6979
        } //#6979
        $_.prioritized_latch_length_c1 = $a(); //#6979
        $_.max_int = 2147483647; //#6981
        $_.can_a = function() {
            if ($_.c >= 0) { //#6984
                $k[$j++] = true; //#6984
            } else { //#6984
                var _A0 = $get($_.seta, $_.c) !== undefined; //#6984
                $k[$j++] = _A0; //#6984
            } //#6984
        }; //#6984
        $_.can_b = function() {
            if ($_.c >= 0) { //#6985
                $k[$j++] = true; //#6985
            } else { //#6985
                var _A4 = $get($_.setb, $_.c) !== undefined; //#6985
                $k[$j++] = _A4; //#6985
            } //#6985
        }; //#6985
        $_.can_c0 = function() {
            if ($_.num_digits >= 2) { //#6986
                $k[$j++] = true; //#6986
            } else { //#6986
                var _A8 = $get($_.setc, $_.c) !== undefined; //#6986
                $k[$j++] = _A8; //#6986
            } //#6986
        }; //#6986
        $_.can_c1 = function() {
            if ($_.num_digits >= 2) { //#6987
                $k[$j++] = true; //#6987
            } else { //#6987
                var _AC = $get($_.setc, $_.c) !== undefined; //#6987
                $k[$j++] = _AC; //#6987
            } //#6987
        }; //#6987
        if ($_.suppressc) { //#6990
            $_.can_c0 = function() {
                $k[$j++] = false; //#6990
            }; //#6990
        } //#6990
        if ($_.suppressc || $_.unlatchextbeforec) { //#6991
            $_.can_c1 = function() {
                $k[$j++] = false; //#6991
            }; //#6991
        } //#6991
        $_.out_a0 = function() {
            $k[$j++] = 1; //#6994
            if ($_.c >= 0) { //#6994
                if ($_.c >= 128) { //#6994
                    var _AI = $k[--$j]; //#6994
                    $k[$j++] = _AI + 1; //#6994
                } //#6994
                if (($_.c & 127) >= 96) { //#6994
                    var _AK = $k[--$j]; //#6994
                    $k[$j++] = _AK + 1; //#6994
                } //#6994
            } //#6994
        }; //#6994
        $_.out_a1 = function() {
            $k[$j++] = 1; //#6995
            if ($_.c >= 0) { //#6995
                if ($_.c < 128) { //#6995
                    var _AN = $k[--$j]; //#6995
                    $k[$j++] = _AN + 1; //#6995
                } //#6995
                if (($_.c & 127) >= 96) { //#6995
                    var _AP = $k[--$j]; //#6995
                    $k[$j++] = _AP + 1; //#6995
                } //#6995
            } //#6995
        }; //#6995
        $_.out_b0 = function() {
            $k[$j++] = 1; //#6996
            if ($_.c >= 0) { //#6996
                if ($_.c >= 128) { //#6996
                    var _AS = $k[--$j]; //#6996
                    $k[$j++] = _AS + 1; //#6996
                } //#6996
                if (($_.c & 127) < 32) { //#6996
                    var _AU = $k[--$j]; //#6996
                    $k[$j++] = _AU + 1; //#6996
                } //#6996
            } //#6996
        }; //#6996
        $_.out_b1 = function() {
            $k[$j++] = 1; //#6997
            if ($_.c >= 0) { //#6997
                if ($_.c < 128) { //#6997
                    var _AX = $k[--$j]; //#6997
                    $k[$j++] = _AX + 1; //#6997
                } //#6997
                if (($_.c & 127) < 32) { //#6997
                    var _AZ = $k[--$j]; //#6997
                    $k[$j++] = _AZ + 1; //#6997
                } //#6997
            } //#6997
        }; //#6997
        $_.map_ab = function() {
            var _Aa = $k[$j - 1]; //#7000
            if (_Aa < 32) { //#7000
                var _Ab = $k[--$j]; //#7000
                $k[$j++] = _Ab + 64; //#7000
            } else { //#7000
                var _Ac = $k[--$j]; //#7000
                $k[$j++] = _Ac - 32; //#7000
            } //#7000
        }; //#7000
        $_.enc_a0 = function() {
            $k[$j++] = Infinity; //#7001
            if ($_.c < 0) { //#7001
                $k[$j++] = $get($_.seta, $_.c); //#7001
            } else { //#7001
                if ($_.c >= 128) { //#7001
                    $k[$j++] = 101; //#7001
                } //#7001
                var _Aj = $_.c & 127; //#7001
                $k[$j++] = _Aj; //#7001
                if (_Aj >= 96) { //#7001
                    var _Ak = $k[--$j]; //#7001
                    $k[$j++] = 98; //#7001
                    $k[$j++] = _Ak; //#7001
                } //#7001
                $_.map_ab(); //#7001
            } //#7001
            var _Al = $a(); //#7001
            $k[$j++] = _Al; //#7001
        }; //#7001
        $_.enc_a1 = function() {
            $k[$j++] = Infinity; //#7002
            if ($_.c < 0) { //#7002
                $k[$j++] = $get($_.seta, $_.c); //#7002
            } else { //#7002
                if ($_.c < 128) { //#7002
                    $k[$j++] = 101; //#7002
                } //#7002
                var _As = $_.c & 127; //#7002
                $k[$j++] = _As; //#7002
                if (_As >= 96) { //#7002
                    var _At = $k[--$j]; //#7002
                    $k[$j++] = 98; //#7002
                    $k[$j++] = _At; //#7002
                } //#7002
                $_.map_ab(); //#7002
            } //#7002
            var _Au = $a(); //#7002
            $k[$j++] = _Au; //#7002
        }; //#7002
        $_.enc_b0 = function() {
            $k[$j++] = Infinity; //#7003
            if ($_.c < 0) { //#7003
                $k[$j++] = $get($_.setb, $_.c); //#7003
            } else { //#7003
                if ($_.c >= 128) { //#7003
                    $k[$j++] = 100; //#7003
                } //#7003
                var _B1 = $_.c & 127; //#7003
                $k[$j++] = _B1; //#7003
                if (_B1 < 32) { //#7003
                    var _B2 = $k[--$j]; //#7003
                    $k[$j++] = 98; //#7003
                    $k[$j++] = _B2; //#7003
                } //#7003
                $_.map_ab(); //#7003
            } //#7003
            var _B3 = $a(); //#7003
            $k[$j++] = _B3; //#7003
        }; //#7003
        $_.enc_b1 = function() {
            $k[$j++] = Infinity; //#7004
            if ($_.c < 0) { //#7004
                $k[$j++] = $get($_.setb, $_.c); //#7004
            } else { //#7004
                if ($_.c < 128) { //#7004
                    $k[$j++] = 100; //#7004
                } //#7004
                var _BA = $_.c & 127; //#7004
                $k[$j++] = _BA; //#7004
                if (_BA < 32) { //#7004
                    var _BB = $k[--$j]; //#7004
                    $k[$j++] = 98; //#7004
                    $k[$j++] = _BB; //#7004
                } //#7004
                $_.map_ab(); //#7004
            } //#7004
            var _BC = $a(); //#7004
            $k[$j++] = _BC; //#7004
        }; //#7004
        $_.enc_c = function() {
            $k[$j++] = Infinity; //#7005
            if ($_.c < 0) { //#7005
                $k[$j++] = $get($_.setc, $_.c); //#7005
            } else { //#7005
                $k[$j++] = $f((($get($_.msg, $_.n) - 48) * 10) + ($get($_.msg, $_.n + 1) - 48)); //#7005
            } //#7005
            var _BN = $a(); //#7005
            $k[$j++] = _BN; //#7005
        }; //#7005
        $_.get_best_prior_state = function() {
            var _BQ = $get($_.bln_0, $k[--$j]); //#7010
            $_.len = $f($k[--$j] + _BQ); //#7010
            $_.o = $k[--$j]; //#7010
            var _BV = $get($_.bln_0, $k[--$j]); //#7011
            var _BX = $f($k[--$j] + _BV); //#7011
            $k[$j++] = _BX; //#7011
            if (_BX < $_.len) { //#7011
                $_.len = $k[--$j]; //#7011
                $_.o = $k[--$j]; //#7011
            } else { //#7011
                $j -= 2; //#7011
            } //#7011
            var _Bd = $get($_.bln_0, $k[--$j]); //#7012
            var _Bf = $f($k[--$j] + _Bd); //#7012
            $k[$j++] = _Bf; //#7012
            if (_Bf < $_.len) { //#7012
                $_.len = $k[--$j]; //#7012
                $_.o = $k[--$j]; //#7012
            } else { //#7012
                $j -= 2; //#7012
            } //#7012
            var _Bl = $get($_.bln_0, $k[--$j]); //#7013
            var _Bn = $f($k[--$j] + _Bl); //#7013
            $k[$j++] = _Bn; //#7013
            if (_Bn < $_.len) { //#7013
                $_.len = $k[--$j]; //#7013
                $_.o = $k[--$j]; //#7013
            } else { //#7013
                $j -= 2; //#7013
            } //#7013
            var _Bt = $get($_.bln_0, $k[--$j]); //#7014
            var _Bv = $f($k[--$j] + _Bt); //#7014
            $k[$j++] = _Bv; //#7014
            if (_Bv < $_.len) { //#7014
                $_.len = $k[--$j]; //#7014
                $_.o = $k[--$j]; //#7014
            } else { //#7014
                $j -= 2; //#7014
            } //#7014
            var _C1 = $get($_.bln_0, $k[--$j]); //#7015
            if ($f($k[--$j] + _C1) < $_.len) { //#7015
                $_.o = $k[--$j]; //#7015
            } else { //#7015
                $j--; //#7015
            } //#7015
            $k[$j++] = $_.o; //#7016
        }; //#7016
        $_.bln_0 = $_.start_length; //#7022
        $_.bln_1 = $_.start_length; //#7022
        $k[$j++] = Infinity; //#7022
        for (var _C8 = 0; _C8 < 4; _C8++) { //#7022
            $k[$j++] = $a([0, 0, 0, 0, 0, 0]); //#7022
        } //#7022
        $_.bln = $a(); //#7022
        $_.bps_0 = $_.start_state; //#7023
        $_.bps_1 = $_.start_state; //#7023
        $k[$j++] = Infinity; //#7023
        for (var _CD = 0; _CD < 4; _CD++) { //#7023
            $k[$j++] = $a([0, 0, 0, 0, 0, 0]); //#7023
        } //#7023
        $_.bps = $a(); //#7023
        $k[$j++] = Infinity; //#7026
        for (var _CH = 0, _CI = $_.msg.length; _CH < _CI; _CH++) { //#7026
            $k[$j++] = $a([0, 0, 0, 0, 0, 0]); //#7026
        } //#7026
        $_.path = $a(); //#7026
        $_.make_tables = function() {
            $_.num_digits = 0; //#7029
            for (var _CN = 0, _CM = $_.msg.length - 1; _CN <= _CM; _CN += 1) { //#7060
                $_.n = _CN; //#7031
                $_.c = $get($_.msg, $_.n); //#7032
                $k[$j++] = 'num_digits'; //#7035
                if (($_.c >= 48) && ($_.c < 58)) { //#7035
                    $k[$j++] = $_.num_digits + 1; //#7035
                } else { //#7035
                    $k[$j++] = 0; //#7035
                } //#7035
                var _CU = $k[--$j]; //#7035
                $_[$k[--$j]] = _CU; //#7035
                $_.bln_2 = $_.bln_1; //#7038
                $_.bln_1 = $_.bln_0; //#7038
                $_.bln_0 = $get($_.bln, $_.n & 3); //#7038
                $_.bps_2 = $_.bps_1; //#7039
                $_.bps_1 = $_.bps_0; //#7039
                $_.bps_0 = $get($_.bps, $_.n & 3); //#7039
                $k[$j++] = 'bps_c'; //#7042
                if ($_.num_digits >= 2) { //#7042
                    $k[$j++] = $_.bps_2; //#7042
                } else { //#7042
                    $k[$j++] = $_.bps_1; //#7042
                } //#7042
                var _Cj = $k[--$j]; //#7042
                $_[$k[--$j]] = _Cj; //#7042
                $k[$j++] = 'bln_c'; //#7043
                if ($_.num_digits >= 2) { //#7043
                    $k[$j++] = $_.bln_2; //#7043
                } else { //#7043
                    $k[$j++] = $_.bln_1; //#7043
                } //#7043
                var _Co = $k[--$j]; //#7043
                $_[$k[--$j]] = _Co; //#7043
                $k[$j++] = $_.bln_0; //#7046
                $k[$j++] = 0; //#7046
                $_.can_a(); //#7046
                if ($k[--$j]) { //#7046
                    $_.p = $get($_.bps_1, 0); //#7046
                    $put($get($_.path, $_.n), 0, $_.p); //#7046
                    $k[$j++] = $f($get($_.bln_1, $_.p) + $get($_.latch_length_a0, $_.p)); //#7046
                    $_.out_a0(); //#7046
                    var _D4 = $k[--$j]; //#7046
                    var _D5 = $k[--$j]; //#7046
                    $k[$j++] = $f(_D5 + _D4); //#7046
                } else { //#7046
                    $k[$j++] = $_.max_int; //#7046
                } //#7046
                var _D7 = $k[--$j]; //#7046
                var _D8 = $k[--$j]; //#7046
                $put($k[--$j], _D8, _D7); //#7046
                $k[$j++] = $_.bln_0; //#7047
                $k[$j++] = 3; //#7047
                $_.can_a(); //#7047
                if ($k[--$j]) { //#7047
                    $_.p = $get($_.bps_1, 3); //#7047
                    $put($get($_.path, $_.n), 3, $_.p); //#7047
                    $k[$j++] = $f($get($_.bln_1, $_.p) + $get($_.latch_length_a1, $_.p)); //#7047
                    $_.out_a1(); //#7047
                    var _DO = $k[--$j]; //#7047
                    var _DP = $k[--$j]; //#7047
                    $k[$j++] = $f(_DP + _DO); //#7047
                } else { //#7047
                    $k[$j++] = $_.max_int; //#7047
                } //#7047
                var _DR = $k[--$j]; //#7047
                var _DS = $k[--$j]; //#7047
                $put($k[--$j], _DS, _DR); //#7047
                $k[$j++] = $_.bln_0; //#7048
                $k[$j++] = 1; //#7048
                $_.can_b(); //#7048
                if ($k[--$j]) { //#7048
                    $_.p = $get($_.bps_1, 1); //#7048
                    $put($get($_.path, $_.n), 1, $_.p); //#7048
                    $k[$j++] = $f($get($_.bln_1, $_.p) + $get($_.latch_length_b0, $_.p)); //#7048
                    $_.out_b0(); //#7048
                    var _Di = $k[--$j]; //#7048
                    var _Dj = $k[--$j]; //#7048
                    $k[$j++] = $f(_Dj + _Di); //#7048
                } else { //#7048
                    $k[$j++] = $_.max_int; //#7048
                } //#7048
                var _Dl = $k[--$j]; //#7048
                var _Dm = $k[--$j]; //#7048
                $put($k[--$j], _Dm, _Dl); //#7048
                $k[$j++] = $_.bln_0; //#7049
                $k[$j++] = 4; //#7049
                $_.can_b(); //#7049
                if ($k[--$j]) { //#7049
                    $_.p = $get($_.bps_1, 4); //#7049
                    $put($get($_.path, $_.n), 4, $_.p); //#7049
                    $k[$j++] = $f($get($_.bln_1, $_.p) + $get($_.latch_length_b1, $_.p)); //#7049
                    $_.out_b1(); //#7049
                    var _E2 = $k[--$j]; //#7049
                    var _E3 = $k[--$j]; //#7049
                    $k[$j++] = $f(_E3 + _E2); //#7049
                } else { //#7049
                    $k[$j++] = $_.max_int; //#7049
                } //#7049
                var _E5 = $k[--$j]; //#7049
                var _E6 = $k[--$j]; //#7049
                $put($k[--$j], _E6, _E5); //#7049
                $k[$j++] = $_.bln_0; //#7050
                $k[$j++] = 2; //#7050
                $_.can_c0(); //#7050
                if ($k[--$j]) { //#7050
                    $_.p = $get($_.bps_c, 2); //#7050
                    $put($get($_.path, $_.n), 2, $_.p); //#7050
                    $k[$j++] = $f($get($_.bln_c, $_.p) + $get($_.latch_length_c0, $_.p)) + 1; //#7050
                } else { //#7050
                    $k[$j++] = $_.max_int; //#7050
                } //#7050
                var _EN = $k[--$j]; //#7050
                var _EO = $k[--$j]; //#7050
                $put($k[--$j], _EO, _EN); //#7050
                $k[$j++] = $_.bln_0; //#7051
                $k[$j++] = 5; //#7051
                $_.can_c1(); //#7051
                if ($k[--$j]) { //#7051
                    $_.p = $get($_.bps_c, 5); //#7051
                    $put($get($_.path, $_.n), 5, $_.p); //#7051
                    $k[$j++] = $f($get($_.bln_c, $_.p) + $get($_.latch_length_c1, $_.p)) + 1; //#7051
                } else { //#7051
                    $k[$j++] = $_.max_int; //#7051
                } //#7051
                var _Ef = $k[--$j]; //#7051
                var _Eg = $k[--$j]; //#7051
                $put($k[--$j], _Eg, _Ef); //#7051
                $k[$j++] = $_.bps_0; //#7054
                $k[$j++] = 0; //#7054
                $aload($_.prioritized_latch_length_a0); //#7054
                $_.get_best_prior_state(); //#7054
                var _Ek = $k[--$j]; //#7054
                var _El = $k[--$j]; //#7054
                $put($k[--$j], _El, _Ek); //#7054
                $k[$j++] = $_.bps_0; //#7055
                $k[$j++] = 3; //#7055
                $aload($_.prioritized_latch_length_a1); //#7055
                $_.get_best_prior_state(); //#7055
                var _Ep = $k[--$j]; //#7055
                var _Eq = $k[--$j]; //#7055
                $put($k[--$j], _Eq, _Ep); //#7055
                $k[$j++] = $_.bps_0; //#7056
                $k[$j++] = 1; //#7056
                $aload($_.prioritized_latch_length_b0); //#7056
                $_.get_best_prior_state(); //#7056
                var _Eu = $k[--$j]; //#7056
                var _Ev = $k[--$j]; //#7056
                $put($k[--$j], _Ev, _Eu); //#7056
                $k[$j++] = $_.bps_0; //#7057
                $k[$j++] = 4; //#7057
                $aload($_.prioritized_latch_length_b1); //#7057
                $_.get_best_prior_state(); //#7057
                var _Ez = $k[--$j]; //#7057
                var _F0 = $k[--$j]; //#7057
                $put($k[--$j], _F0, _Ez); //#7057
                $k[$j++] = $_.bps_0; //#7058
                $k[$j++] = 2; //#7058
                $aload($_.prioritized_latch_length_c0); //#7058
                $_.get_best_prior_state(); //#7058
                var _F4 = $k[--$j]; //#7058
                var _F5 = $k[--$j]; //#7058
                $put($k[--$j], _F5, _F4); //#7058
                $k[$j++] = $_.bps_0; //#7059
                $k[$j++] = 5; //#7059
                $aload($_.prioritized_latch_length_c1); //#7059
                $_.get_best_prior_state(); //#7059
                var _F9 = $k[--$j]; //#7059
                var _FA = $k[--$j]; //#7059
                $put($k[--$j], _FA, _F9); //#7059
            } //#7059
        }; //#7059
        $_.backtrack = function() {
            $_.n = $_.msg.length; //#7064
            var _FD = $_.reverse_priority; //#7067
            for (var _FE = 0, _FF = _FD.length; _FE < _FF; _FE++) { //#7067
                var _FG = $get(_FD, _FE); //#7067
                var _FI = $get($_.bln_0, _FG); //#7067
                $k[$j++] = _FG; //#7067
                $k[$j++] = _FI; //#7067
                $k[$j++] = _FI; //#7067
            } //#7067
            $j--; //#7068
            $_.len = $k[--$j]; //#7068
            $_.state = $k[--$j]; //#7068
            for (var _FL = 0; _FL < 5; _FL++) { //#7069
                if ($lt($k[--$j], $_.len)) { //#7069
                    $_.len = $k[--$j]; //#7069
                    $_.state = $k[--$j]; //#7069
                } else { //#7069
                    $j -= 2; //#7069
                } //#7069
            } //#7069
            $k[$j++] = $a($_.len); //#7082
            for (;;) { //#7082
                if ($_.n <= 0) { //#7073
                    break; //#7073
                } //#7073
                $_.prior_state = $get($get($_.path, $_.n - 1), $_.state); //#7074
                $k[$j++] = Infinity; //#7075
                $forall($get($get($_.latch_sequence, $_.state), $_.prior_state)); //#7075
                $_.latch = $a(); //#7075
                var _Fk = ((($_.state == 2) || ($_.state == 5)) && ($get($_.msg, $_.n - 1) >= 48)) ? 2 : 1; //#7076
                $_.n = $_.n - _Fk; //#7076
                $_.c = $get($_.msg, $_.n); //#7077
                $k[$j++] = 'enc'; //#7078
                if ($get($_.encode, $_.state)() === true) {
                    break;
                } //#7078
                var _Fr = $k[--$j]; //#7078
                $_[$k[--$j]] = _Fr; //#7078
                $_.len = $f($_.len - $_.latch.length - $_.enc.length); //#7079
                var _Fw = $k[--$j]; //#7080
                var _Fx = $_.len; //#7080
                var _Fy = $_.latch; //#7080
                $puti(_Fw, _Fx, _Fy); //#7080
                $puti(_Fw, $f(_Fx + _Fy.length), $_.enc); //#7080
                $_.state = $_.prior_state; //#7081
                $k[$j++] = _Fw; //#7081
            } //#7081
            var _G1 = $k[$j - 1]; //#7083
            $put(_G1, 0, $get($_.start_code, $_.state)); //#7083
        }; //#7083
        $_.make_tables(); //#7086
        $_.backtrack(); //#7086
        $_.cws = $k[--$j]; //#7088
    } //#7088
    $_.j = $_.cws.length; //#7093
    var _G8 = $a($_.j + 2); //#7094
    $puti(_G8, 0, $_.cws); //#7094
    $_.cws = _G8; //#7094
    $_.csum = $get($_.cws, 0); //#7095
    for (var _GE = 1, _GD = $_.j - 1; _GE <= _GD; _GE += 1) { //#7099
        $_.i = _GE; //#7097
        $_.csum = $f($_.csum + ($get($_.cws, $_.i) * $_.i)); //#7098
    } //#7098
    $_.csum = $_.csum % 103; //#7100
    $put($_.cws, $_.j, $_.csum); //#7101
    $put($_.cws, $_.j + 1, 106); //#7102
    var _GR = $get($_.options, 'debugcws') !== undefined; //#7104
    if (_GR) { //#7104
        $k[$j++] = 'bwipp.debugcws#7104'; //#7104
        $k[$j++] = $_.cws; //#7104
        bwipp_raiseerror(); //#7104
    } //#7104
    $_.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "211214", "211232", "2331112"]); //#7125
    $_.sbs = $s(($_.cws.length * 6) + 1); //#7129
    for (var _GZ = 0, _GY = $_.cws.length - 1; _GZ <= _GY; _GZ += 1) { //#7133
        $_.i = _GZ; //#7131
        $puti($_.sbs, $_.i * 6, $get($_.encs, $get($_.cws, $_.i))); //#7132
    } //#7132
    $k[$j++] = Infinity; //#7136
    $k[$j++] = Infinity; //#7138
    var _Gh = $_.sbs; //#7138
    for (var _Gi = 0, _Gj = _Gh.length; _Gi < _Gj; _Gi++) { //#7138
        $k[$j++] = $get(_Gh, _Gi) - 48; //#7138
    } //#7138
    var _Gl = $a(); //#7138
    $k[$j++] = Infinity; //#7139
    for (var _Gn = 0, _Go = ~~(($_.sbs.length + 1) / 2); _Gn < _Go; _Gn++) { //#7139
        $k[$j++] = $_.height; //#7139
    } //#7139
    var _Gq = $a(); //#7139
    $k[$j++] = Infinity; //#7140
    for (var _Gs = 0, _Gt = ~~(($_.sbs.length + 1) / 2); _Gs < _Gt; _Gs++) { //#7140
        $k[$j++] = 0; //#7140
    } //#7140
    var _Gu = $a(); //#7140
    $k[$j++] = 'ren'; //#7143
    $k[$j++] = 'renlinear'; //#7143
    $k[$j++] = 'sbs'; //#7143
    $k[$j++] = _Gl; //#7143
    $k[$j++] = 'bhs'; //#7143
    $k[$j++] = _Gq; //#7143
    $k[$j++] = 'bbs'; //#7143
    $k[$j++] = _Gu; //#7143
    $k[$j++] = 'txt'; //#7143
    $k[$j++] = $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])]); //#7143
    $k[$j++] = 'textxalign'; //#7143
    $k[$j++] = "center"; //#7143
    $k[$j++] = 'opt'; //#7143
    $k[$j++] = $_.options; //#7143
    var _H3 = $d(); //#7143
    $k[$j++] = _H3; //#7146
    if (!$_.dontdraw) { //#7146
        bwipp_renlinear(); //#7146
    } //#7146
    $_ = $__; //#7150
} //bwipp_code128
function bwipp_gs1_128() {
    var $__ = $_; //#7181
    $_ = Object.assign({}, $_); //#7181
    $_.dontdraw = false; //#7184
    $_.includetext = false; //#7185
    $_.textfont = "OCR-B"; //#7186
    $_.textsize = 10; //#7187
    $_.textxoffset = 0; //#7188
    $_.textyoffset = -8; //#7189
    $_.height = 0.5; //#7190
    $_.linkagea = false; //#7191
    $_.linkagec = false; //#7192
    $_.parse = false; //#7193
    $_.dontlint = false; //#7194
    $_.lintreqs = false; //#7195
    $k[$j++] = $_; //#7197
    bwipp_processoptions(); //#7197
    $_.options = $k[--$j]; //#7197
    $_.barcode = $k[--$j]; //#7198
    if ($_.linkagea && $_.linkagec) { //#7202
        $k[$j++] = 'bwipp.gs1128badLinkage#7201'; //#7201
        $k[$j++] = "linkagea and linkagec cannot be used together"; //#7201
        bwipp_raiseerror(); //#7201
    } //#7201
    $_.text = $_.barcode; //#7204
    $k[$j++] = $_.barcode; //#7206
    $k[$j++] = 'ai'; //#7206
    bwipp_gs1process(); //#7206
    $_.fncs = $k[--$j]; //#7207
    $_.vals = $k[--$j]; //#7208
    $_.ais = $k[--$j]; //#7209
    $_.fnc1 = -1; //#7212
    $_.c128 = $a([$_.fnc1]); //#7213
    for (var _D = 0, _C = $_.ais.length - 1; _D <= _C; _D += 1) { //#7229
        $_.i = _D; //#7215
        $_.ai = $get($_.ais, $_.i); //#7216
        $_.val = $get($_.vals, $_.i); //#7217
        var _N = $a(($_.c128.length + $_.ai.length) + $_.val.length); //#7218
        $puti(_N, 0, $_.c128); //#7219
        $k[$j++] = _N; //#7220
        $k[$j++] = _N; //#7220
        $k[$j++] = $_.c128.length; //#7220
        var _R = Infinity; //#7220
        var _S = $_.ai; //#7220
        $k[$j++] = _R; //#7220
        $forall(_S); //#7220
        var _T = $a(); //#7220
        var _U = $k[--$j]; //#7220
        $puti($k[--$j], _U, _T); //#7220
        var _W = $k[$j - 1]; //#7221
        $k[$j++] = _W; //#7221
        $k[$j++] = $_.c128.length + $_.ai.length; //#7221
        var _a = Infinity; //#7221
        var _b = $_.val; //#7221
        $k[$j++] = _a; //#7221
        $forall(_b); //#7221
        var _c = $a(); //#7221
        var _d = $k[--$j]; //#7221
        $puti($k[--$j], _d, _c); //#7221
        $_.c128 = $k[--$j]; //#7222
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#7228
            var _m = $a($_.c128.length + 1); //#7224
            $puti(_m, 0, $_.c128); //#7225
            $put(_m, $_.c128.length, $_.fnc1); //#7226
            $_.c128 = _m; //#7227
        } //#7227
    } //#7227
    $_.barcode = $s(($_.c128.length + 1) * 5); //#7232
    $_.i = 0; //#7233
    $_.j = 0; //#7233
    for (;;) { //#7243
        if ($_.i == $_.c128.length) { //#7234
            break; //#7234
        } //#7234
        var _w = $get($_.c128, $_.i); //#7235
        $k[$j++] = _w; //#7240
        if (_w == $_.fnc1) { //#7239
            $j--; //#7236
            $puti($_.barcode, $_.j, "^FNC1"); //#7236
            $_.j = $_.j + 4; //#7237
        } else { //#7239
            $put($_.barcode, $_.j, $k[--$j]); //#7239
        } //#7239
        $_.i = $_.i + 1; //#7241
        $_.j = $_.j + 1; //#7242
    } //#7242
    if ($_.linkagea || $_.linkagec) { //#7247
        $k[$j++] = $_.barcode; //#7245
        $k[$j++] = $_.j; //#7245
        if ($_.linkagea) { //#7245
            $k[$j++] = "^LNKA"; //#7245
        } else { //#7245
            $k[$j++] = "^LNKC"; //#7245
        } //#7245
        var _1B = $k[--$j]; //#7245
        var _1C = $k[--$j]; //#7245
        $puti($k[--$j], _1C, _1B); //#7245
        $_.j = $_.j + 5; //#7246
    } //#7246
    $_.barcode = $geti($_.barcode, 0, $_.j); //#7248
    delete $_.options["parse"]; //#7251
    $put($_.options, "height", $_.height); //#7252
    $put($_.options, "dontdraw", true); //#7253
    $put($_.options, "parsefnc", true); //#7254
    $k[$j++] = 'args'; //#7255
    $k[$j++] = $_.barcode; //#7255
    $k[$j++] = $_.options; //#7255
    bwipp_code128(); //#7255
    var _1P = $k[--$j]; //#7255
    $_[$k[--$j]] = _1P; //#7255
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#7257
    $put($_.args, "textxalign", "center"); //#7258
    $put($_.args, "opt", $_.options); //#7259
    $k[$j++] = $_.args; //#7262
    if (!$_.dontdraw) { //#7262
        bwipp_renlinear(); //#7262
    } //#7262
    $_ = $__; //#7264
} //bwipp_gs1_128
function bwipp_ean14() {
    var $__ = $_; //#7293
    $_ = Object.assign({}, $_); //#7293
    $_.dontdraw = false; //#7296
    $_.includetext = false; //#7297
    $_.textfont = "OCR-B"; //#7298
    $_.textsize = 10; //#7299
    $_.textxoffset = 0; //#7300
    $_.textyoffset = -8; //#7301
    $_.height = 1; //#7302
    $k[$j++] = $_; //#7304
    bwipp_processoptions(); //#7304
    $_.options = $k[--$j]; //#7304
    $_.barcode = $k[--$j]; //#7305
    $_.text = $_.barcode; //#7308
    var _3 = $_.barcode; //#7309
    $k[$j++] = $s(_3.length); //#7310
    $k[$j++] = 0; //#7310
    $forall(_3, function() { //#7310
        var _5 = $k[$j - 1]; //#7310
        if (_5 != 32) { //#7310
            var _6 = $k[--$j]; //#7310
            var _7 = $k[--$j]; //#7310
            var _8 = $k[$j - 1]; //#7310
            $put(_8, _7, _6); //#7310
            $k[$j++] = _7 + 1; //#7310
        } else { //#7310
            $j--; //#7310
        } //#7310
    }); //#7310
    var _9 = $k[--$j]; //#7311
    $_.barcode = $geti($k[--$j], 0, _9); //#7311
    $_.hasspace = $_.text.length != $_.barcode.length; //#7312
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#7317
        $k[$j++] = 'bwipp.ean14badLength#7316'; //#7316
        $k[$j++] = "EAN-14 must be 13 or 14 digits"; //#7316
        bwipp_raiseerror(); //#7316
    } //#7316
    if ($ne($geti($_.barcode, 0, 4), "\(01\)")) { //#7320
        $k[$j++] = 'bwipp.ean14badAI#7319'; //#7319
        $k[$j++] = "EAN-14 must begin with (01) application identifier"; //#7319
        bwipp_raiseerror(); //#7319
    } //#7319
    var _K = $geti($_.barcode, 4, $_.barcode.length - 4); //#7321
    for (var _L = 0, _M = _K.length; _L < _M; _L++) { //#7325
        var _N = $get(_K, _L); //#7325
        if ((_N < 48) || (_N > 57)) { //#7324
            $k[$j++] = 'bwipp.ean14badCharacter#7323'; //#7323
            $k[$j++] = "EAN-14 must contain only digits"; //#7323
            bwipp_raiseerror(); //#7323
        } //#7323
    } //#7323
    $_.checksum = 0; //#7328
    for (var _O = 0; _O <= 12; _O += 1) { //#7332
        $_.i = _O; //#7330
        $k[$j++] = 'checksum'; //#7331
        $k[$j++] = $_.checksum; //#7331
        $k[$j++] = $get($_.barcode, $_.i + 4) - 48; //#7331
        if (($_.i % 2) == 0) { //#7331
            var _U = $k[--$j]; //#7331
            $k[$j++] = _U * 3; //#7331
        } //#7331
        var _V = $k[--$j]; //#7331
        var _W = $k[--$j]; //#7331
        $_[$k[--$j]] = $f(_W + _V); //#7331
    } //#7331
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#7333
    if ($_.barcode.length == 18) { //#7347
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#7337
            $k[$j++] = 'bwipp.ean14badCheckDigit#7336'; //#7336
            $k[$j++] = "Incorrect EAN-14 check digit provided"; //#7336
            bwipp_raiseerror(); //#7336
        } //#7336
    } else { //#7347
        var _d = $s(18); //#7339
        $puti(_d, 0, $_.barcode); //#7340
        $put(_d, 17, $_.checksum + 48); //#7341
        $_.barcode = _d; //#7342
        var _i = $_.hasspace ? 2 : 1; //#7343
        var _j = $s($_.text.length + _i); //#7343
        $puti(_j, _j.length - 2, " "); //#7344
        $put(_j, _j.length - 1, $_.checksum + 48); //#7345
        $puti(_j, 0, $_.text); //#7346
        $_.text = _j; //#7347
    } //#7347
    $_.gtin = $geti($_.barcode, 4, 14); //#7349
    $_.barcode = $s(21); //#7352
    $puti($_.barcode, 0, "^FNC101"); //#7353
    var _r = $_.gtin; //#7354
    $puti($_.barcode, 7, _r); //#7354
    $put($_.options, "dontdraw", true); //#7357
    $put($_.options, "parsefnc", true); //#7358
    $k[$j++] = 'args'; //#7359
    $k[$j++] = $_.barcode; //#7359
    $k[$j++] = $_.options; //#7359
    bwipp_code128(); //#7359
    var _w = $k[--$j]; //#7359
    $_[$k[--$j]] = _w; //#7359
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#7361
    $put($_.args, "textxalign", "center"); //#7362
    $put($_.args, "opt", $_.options); //#7363
    $k[$j++] = $_.args; //#7366
    if (!$_.dontdraw) { //#7366
        bwipp_renlinear(); //#7366
    } //#7366
    $_ = $__; //#7368
} //bwipp_ean14
function bwipp_sscc18() {
    var $__ = $_; //#7397
    $_ = Object.assign({}, $_); //#7397
    $_.dontdraw = false; //#7400
    $_.includetext = false; //#7401
    $_.textfont = "OCR-B"; //#7402
    $_.textsize = 10; //#7403
    $_.textxoffset = 0; //#7404
    $_.textyoffset = -8; //#7405
    $_.height = 1; //#7406
    $k[$j++] = $_; //#7408
    bwipp_processoptions(); //#7408
    $_.options = $k[--$j]; //#7408
    $_.barcode = $k[--$j]; //#7409
    $_.text = $_.barcode; //#7412
    var _3 = $_.barcode; //#7413
    $k[$j++] = $s(_3.length); //#7414
    $k[$j++] = 0; //#7414
    $forall(_3, function() { //#7414
        var _5 = $k[$j - 1]; //#7414
        if (_5 != 32) { //#7414
            var _6 = $k[--$j]; //#7414
            var _7 = $k[--$j]; //#7414
            var _8 = $k[$j - 1]; //#7414
            $put(_8, _7, _6); //#7414
            $k[$j++] = _7 + 1; //#7414
        } else { //#7414
            $j--; //#7414
        } //#7414
    }); //#7414
    var _9 = $k[--$j]; //#7415
    $_.barcode = $geti($k[--$j], 0, _9); //#7415
    $_.hasspace = $_.text.length != $_.barcode.length; //#7416
    if (($_.barcode.length != 21) && ($_.barcode.length != 22)) { //#7421
        $k[$j++] = 'bwipp.sscc18badLength#7420'; //#7420
        $k[$j++] = "SSCC-18 must be 17 or 18 digits"; //#7420
        bwipp_raiseerror(); //#7420
    } //#7420
    if ($ne($geti($_.barcode, 0, 4), "\(00\)")) { //#7424
        $k[$j++] = 'bwipp.sscc18badAI#7423'; //#7423
        $k[$j++] = "SSCC-18 must begin with (00) application identifier"; //#7423
        bwipp_raiseerror(); //#7423
    } //#7423
    var _K = $geti($_.barcode, 4, $_.barcode.length - 4); //#7425
    for (var _L = 0, _M = _K.length; _L < _M; _L++) { //#7429
        var _N = $get(_K, _L); //#7429
        if ((_N < 48) || (_N > 57)) { //#7428
            $k[$j++] = 'bwipp.sscc18badCharacter#7427'; //#7427
            $k[$j++] = "SSCC-18 must contain only digits"; //#7427
            bwipp_raiseerror(); //#7427
        } //#7427
    } //#7427
    $_.checksum = 0; //#7432
    for (var _O = 0; _O <= 16; _O += 1) { //#7436
        $_.i = _O; //#7434
        $k[$j++] = 'checksum'; //#7435
        $k[$j++] = $_.checksum; //#7435
        $k[$j++] = $get($_.barcode, $_.i + 4) - 48; //#7435
        if (($_.i % 2) == 0) { //#7435
            var _U = $k[--$j]; //#7435
            $k[$j++] = _U * 3; //#7435
        } //#7435
        var _V = $k[--$j]; //#7435
        var _W = $k[--$j]; //#7435
        $_[$k[--$j]] = $f(_W + _V); //#7435
    } //#7435
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#7437
    if ($_.barcode.length == 22) { //#7451
        if ($get($_.barcode, 21) != ($_.checksum + 48)) { //#7441
            $k[$j++] = 'bwipp.sscc18badCheckDigit#7440'; //#7440
            $k[$j++] = "Incorrect SSCC-18 check digit provided"; //#7440
            bwipp_raiseerror(); //#7440
        } //#7440
    } else { //#7451
        var _d = $s(22); //#7443
        $puti(_d, 0, $_.barcode); //#7444
        $put(_d, 21, $_.checksum + 48); //#7445
        $_.barcode = _d; //#7446
        var _i = $_.hasspace ? 2 : 1; //#7447
        var _j = $s($_.text.length + _i); //#7447
        $puti(_j, _j.length - 2, " "); //#7448
        $put(_j, _j.length - 1, $_.checksum + 48); //#7449
        $puti(_j, 0, $_.text); //#7450
        $_.text = _j; //#7451
    } //#7451
    $_.sscc = $geti($_.barcode, 4, 18); //#7453
    $_.barcode = $s(25); //#7456
    $puti($_.barcode, 0, "^FNC100"); //#7457
    var _r = $_.sscc; //#7458
    $puti($_.barcode, 7, _r); //#7458
    $put($_.options, "dontdraw", true); //#7461
    $put($_.options, "parsefnc", true); //#7462
    $k[$j++] = 'args'; //#7463
    $k[$j++] = $_.barcode; //#7463
    $k[$j++] = $_.options; //#7463
    bwipp_code128(); //#7463
    var _w = $k[--$j]; //#7463
    $_[$k[--$j]] = _w; //#7463
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#7465
    $put($_.args, "textxalign", "center"); //#7466
    $put($_.args, "opt", $_.options); //#7467
    $k[$j++] = $_.args; //#7470
    if (!$_.dontdraw) { //#7470
        bwipp_renlinear(); //#7470
    } //#7470
    $_ = $__; //#7472
} //bwipp_sscc18
function bwipp_code39() {
    var $__ = $_; //#7502
    $_ = Object.assign({}, $_); //#7502
    $_.dontdraw = false; //#7505
    $_.includecheck = false; //#7506
    $_.validatecheck = false; //#7507
    $_.includetext = false; //#7508
    $_.includecheckintext = false; //#7509
    $_.hidestars = false; //#7510
    $_.textfont = "OCR-B"; //#7511
    $_.textsize = 10; //#7512
    $_.textyoffset = -8; //#7513
    $_.height = 1; //#7514
    $k[$j++] = $_; //#7516
    bwipp_processoptions(); //#7516
    $_.options = $k[--$j]; //#7516
    $_.barcode = $k[--$j]; //#7517
    if ($_.barcode.length == 0) { //#7521
        $k[$j++] = 'bwipp.code39emptyData#7520'; //#7520
        $k[$j++] = "The data must not be empty"; //#7520
        bwipp_raiseerror(); //#7520
    } //#7520
    $_.encs = $a(["1113313111", "3113111131", "1133111131", "3133111111", "1113311131", "3113311111", "1133311111", "1113113131", "3113113111", "1133113111", "3111131131", "1131131131", "3131131111", "1111331131", "3111331111", "1131331111", "1111133131", "3111133111", "1131133111", "1111333111", "3111111331", "1131111331", "3131111311", "1111311331", "3111311311", "1131311311", "1111113331", "3111113311", "1131113311", "1111313311", "3311111131", "1331111131", "3331111111", "1311311131", "3311311111", "1331311111", "1311113131", "3311113111", "1331113111", "1313131111", "1313111311", "1311131311", "1113131311", "1311313111"]); //#7537
    $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#7540
    $_.charvals = new Map; //#7541
    for (var _4 = 0; _4 <= 42; _4 += 1) { //#7542
        $put($_.charvals, $geti($_.barchars, _4, 1), _4); //#7542
    } //#7542
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#7550
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#7547
        if (!_F) { //#7549
            $k[$j++] = 'bwipp.code39badCharacter#7548'; //#7548
            $k[$j++] = "Code 39 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#7548
            bwipp_raiseerror(); //#7548
        } //#7548
    } //#7548
    $k[$j++] = 'barlen'; //#7552
    $k[$j++] = $_.barcode.length; //#7552
    if ($_.validatecheck) { //#7552
        var _I = $k[--$j]; //#7552
        $k[$j++] = _I - 1; //#7552
    } //#7552
    var _J = $k[--$j]; //#7552
    $_[$k[--$j]] = _J; //#7552
    $_.checksum = 0; //#7554
    for (var _N = 0, _M = $_.barlen - 1; _N <= _M; _N += 1) { //#7558
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _N, 1)) + $_.checksum); //#7557
    } //#7557
    $_.checksum = $_.checksum % 43; //#7559
    if ($_.validatecheck) { //#7566
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#7563
            $k[$j++] = 'bwipp.code39badCheckDigit#7562'; //#7562
            $k[$j++] = "Incorrect Code 39 check digit provided"; //#7562
            bwipp_raiseerror(); //#7562
        } //#7562
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#7564
        $_.includecheck = true; //#7565
    } //#7565
    var _g = $_.includecheck ? 3 : 2; //#7568
    $_.sbs = $s($f($_.barlen + _g) * 10); //#7568
    var _k = $_.includecheck ? 3 : 2; //#7569
    $_.txt = $a($f($_.barlen + _k)); //#7569
    $puti($_.sbs, 0, $get($_.encs, 43)); //#7572
    if (!$_.hidestars) { //#7576
        $put($_.txt, 0, $a(["*", 0, $_.textyoffset, $_.textfont, $_.textsize])); //#7574
    } else { //#7576
        $put($_.txt, 0, $a(["", 0, $_.textyoffset, $_.textfont, $_.textsize])); //#7576
    } //#7576
    for (var _12 = 0, _11 = $_.barlen - 1; _12 <= _11; _12 += 1) { //#7584
        $_.i = _12; //#7580
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#7581
        $puti($_.sbs, ($_.i * 10) + 10, $get($_.encs, $_.indx)); //#7582
        $put($_.txt, $_.i + 1, $a([$geti($_.barcode, $_.i, 1), ($_.i + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#7583
    } //#7583
    if ($_.includecheck) { //#7605
        $puti($_.sbs, ($_.barlen * 10) + 10, $get($_.encs, $_.checksum)); //#7588
        if ($_.includecheckintext) { //#7592
            $put($_.txt, $_.barlen + 1, $a([$geti($_.barchars, $_.checksum, 1), ($_.barlen + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#7590
        } else { //#7592
            $put($_.txt, $_.barlen + 1, $a(["", ($_.barlen + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#7592
        } //#7592
        $puti($_.sbs, ($_.barlen * 10) + 20, $get($_.encs, 43)); //#7594
        if (!$_.hidestars) { //#7598
            $put($_.txt, $_.barlen + 2, $a(["*", ($_.barlen + 2) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#7596
        } else { //#7598
            $put($_.txt, $_.barlen + 2, $a(["", ($_.barlen + 2) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#7598
        } //#7598
    } else { //#7605
        $puti($_.sbs, ($_.barlen * 10) + 10, $get($_.encs, 43)); //#7601
        if (!$_.hidestars) { //#7605
            $put($_.txt, $_.barlen + 1, $a(["*", ($_.barlen + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#7603
        } else { //#7605
            $put($_.txt, $_.barlen + 1, $a(["", ($_.barlen + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#7605
        } //#7605
    } //#7605
    $k[$j++] = Infinity; //#7610
    $k[$j++] = Infinity; //#7612
    var _2N = $_.sbs; //#7612
    for (var _2O = 0, _2P = _2N.length; _2O < _2P; _2O++) { //#7612
        $k[$j++] = $get(_2N, _2O) - 48; //#7612
    } //#7612
    var _2R = $a(); //#7612
    $k[$j++] = Infinity; //#7613
    for (var _2T = 0, _2U = ~~(($_.sbs.length + 1) / 2); _2T < _2U; _2T++) { //#7613
        $k[$j++] = $_.height; //#7613
    } //#7613
    var _2W = $a(); //#7613
    $k[$j++] = Infinity; //#7614
    for (var _2Y = 0, _2Z = ~~(($_.sbs.length + 1) / 2); _2Y < _2Z; _2Y++) { //#7614
        $k[$j++] = 0; //#7614
    } //#7614
    var _2a = $a(); //#7614
    $k[$j++] = 'ren'; //#7617
    $k[$j++] = 'renlinear'; //#7617
    $k[$j++] = 'sbs'; //#7617
    $k[$j++] = _2R; //#7617
    $k[$j++] = 'bhs'; //#7617
    $k[$j++] = _2W; //#7617
    $k[$j++] = 'bbs'; //#7617
    $k[$j++] = _2a; //#7617
    if ($_.includetext) { //#7617
        $k[$j++] = 'txt'; //#7616
        $k[$j++] = $_.txt; //#7616
    } //#7616
    $k[$j++] = 'opt'; //#7618
    $k[$j++] = $_.options; //#7618
    var _2e = $d(); //#7618
    $k[$j++] = _2e; //#7621
    if (!$_.dontdraw) { //#7621
        bwipp_renlinear(); //#7621
    } //#7621
    $_ = $__; //#7625
} //bwipp_code39
function bwipp_code39ext() {
    var $__ = $_; //#7657
    $_ = Object.assign({}, $_); //#7657
    $_.dontdraw = false; //#7660
    $_.includetext = false; //#7661
    $_.parse = false; //#7662
    $k[$j++] = $_; //#7664
    bwipp_processoptions(); //#7664
    $_.options = $k[--$j]; //#7664
    $_.barcode = $k[--$j]; //#7665
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#7673
    $_.fncvals = _3; //#7674
    $k[$j++] = 'barcode'; //#7675
    $k[$j++] = $_.barcode; //#7675
    $k[$j++] = $_.fncvals; //#7675
    bwipp_parseinput(); //#7675
    var _6 = $k[--$j]; //#7675
    $_[$k[--$j]] = _6; //#7675
    $_.barlen = $_.barcode.length; //#7676
    delete $_.options["parse"]; //#7677
    $forall($_.barcode, function() { //#7684
        if ($k[--$j] >= 128) { //#7683
            $k[$j++] = 'bwipp.code39extBadCharacter#7682'; //#7682
            $k[$j++] = "Code 39 Extended must contain only ASCII characters"; //#7682
            bwipp_raiseerror(); //#7682
        } //#7682
    }); //#7682
    $_.extencs = $a
    $_.newcode = $s($_.barlen * 2); //#7700
    $_.newtext = $s($_.barlen * 2); //#7701
    $_.j = 0; //#7702
    for (var _K = 0, _J = $_.barlen - 1; _K <= _J; _K += 1) { //#7710
        $_.i = _K; //#7704
        $_.extchar = $get($_.extencs, $get($_.barcode, $_.i)); //#7705
        $puti($_.newcode, $_.j, $_.extchar); //#7706
        var _X = $get($_.barcode, $_.i); //#7707
        $k[$j++] = $_.newtext; //#7707
        $k[$j++] = $_.j; //#7707
        $k[$j++] = _X; //#7707
        if ((_X < 32) || (_X == 127)) { //#7707
            $k[$j - 1] = 32; //#7707
        } //#7707
        var _Y = $k[--$j]; //#7707
        var _Z = $k[--$j]; //#7707
        $put($k[--$j], _Z, _Y); //#7707
        if ($_.extchar.length != 1) { //#7708
            $put($_.newtext, $_.j + 1, 32); //#7708
        } //#7708
        $_.j = $_.j + $_.extchar.length; //#7709
    } //#7709
    $_.newcode = $geti($_.newcode, 0, $_.j); //#7711
    $_.newtext = $geti($_.newtext, 0, $_.j); //#7712
    $put($_.options, "dontdraw", true); //#7715
    $k[$j++] = 'args'; //#7716
    $k[$j++] = $_.newcode; //#7716
    $k[$j++] = $_.options; //#7716
    bwipp_code39(); //#7716
    var _p = $k[--$j]; //#7716
    $_[$k[--$j]] = _p; //#7716
    if ($_.includetext) { //#7728
        $_.txt = $get($_.args, "txt"); //#7720
        for (var _w = 0, _v = $_.newtext.length - 1; _w <= _v; _w += 1) { //#7726
            $_.i = _w; //#7722
            $_.txtentry = $get($_.txt, $_.i + 1); //#7723
            $put($_.txtentry, 0, $geti($_.newtext, $_.i, 1)); //#7724
            $put($_.txt, $_.i + 1, $_.txtentry); //#7725
        } //#7725
        $put($_.args, "txt", $_.txt); //#7727
    } //#7727
    $put($_.args, "opt", $_.options); //#7729
    $k[$j++] = $_.args; //#7732
    if (!$_.dontdraw) { //#7732
        bwipp_renlinear(); //#7732
    } //#7732
    $_ = $__; //#7736
} //bwipp_code39ext
function bwipp_code32() {
    var $__ = $_; //#7765
    $_ = Object.assign({}, $_); //#7765
    $_.dontdraw = false; //#7768
    $_.includetext = false; //#7769
    $_.textfont = "OCR-B"; //#7770
    $_.textsize = 10; //#7771
    $_.textyoffset = -8; //#7772
    $_.textxoffset = 0; //#7773
    $_.height = 1; //#7774
    $k[$j++] = $_; //#7776
    bwipp_processoptions(); //#7776
    $_.options = $k[--$j]; //#7776
    $_.barcode = $k[--$j]; //#7777
    if (($_.barcode.length != 8) && ($_.barcode.length != 9)) { //#7782
        $k[$j++] = 'bwipp.code32badLength#7781'; //#7781
        $k[$j++] = "Italian Pharmacode must be 8 or 9 digits"; //#7781
        bwipp_raiseerror(); //#7781
    } //#7781
    $forall($_.barcode, function() { //#7787
        var _5 = $k[--$j]; //#7784
        if ((_5 < 48) || (_5 > 57)) { //#7786
            $k[$j++] = 'bwipp.code32badCharacter#7785'; //#7785
            $k[$j++] = "Italian Pharmacode must contain only digits"; //#7785
            bwipp_raiseerror(); //#7785
        } //#7785
    }); //#7785
    $_.checksum = 0; //#7790
    for (var _6 = 0; _6 <= 7; _6 += 1) { //#7795
        $_.i = _6; //#7792
        $k[$j++] = $get($_.barcode, $_.i) - 48; //#7793
        if (($_.i % 2) != 0) { //#7793
            var _B = $k[--$j]; //#7793
            $k[$j++] = _B * 2; //#7793
        } //#7793
        var _C = $k[$j - 1]; //#7793
        if (_C > 9) { //#7793
            var _D = $k[--$j]; //#7793
            $k[$j++] = _D - 9; //#7793
        } //#7793
        $_.checksum = $f($k[--$j] + $_.checksum); //#7794
    } //#7794
    $_.checksum = $_.checksum % 10; //#7796
    if ($_.barcode.length == 9) { //#7801
        if ($get($_.barcode, 8) != ($_.checksum + 48)) { //#7800
            $k[$j++] = 'bwipp.code32badCheckDigit#7799'; //#7799
            $k[$j++] = "Incorrect Italian Pharmacode check digit provided"; //#7799
            bwipp_raiseerror(); //#7799
        } //#7799
    } //#7799
    var _L = $s(10); //#7802
    $puti(_L, 0, $_.barcode); //#7803
    $put(_L, 8, $_.checksum + 48); //#7804
    $_.text = _L; //#7805
    $_.val = $cvrs($s(6), $cvi($_.text), 32); //#7808
    $_.barcode = $s(6); //#7809
    for (var _S = 0; _S <= 5; _S += 1) { //#7810
        $put($_.barcode, _S, 48); //#7810
    } //#7810
    $puti($_.barcode, 6 - $_.val.length, $_.val); //#7811
    for (var _X = 0; _X <= 5; _X += 1) { //#7818
        var _Z = $get($_.barcode, _X); //#7815
        $k[$j++] = _X; //#7816
        $k[$j++] = _Z; //#7816
        $k[$j++] = _Z; //#7816
        for (var _a = 0, _b = "AEIO".length; _a < _b; _a++) { //#7816
            if ($k[--$j] >= $get("AEIO", _a)) { //#7816
                var _e = $k[--$j]; //#7816
                $k[$j++] = _e + 1; //#7816
            } //#7816
            var _f = $k[$j - 1]; //#7816
            $k[$j++] = _f; //#7816
        } //#7816
        $k[$j - 1] = $_.barcode; //#7817
        var _h = $k[$j - 2]; //#7817
        var _i = $k[$j - 3]; //#7817
        $put($k[$j - 1], _i, _h); //#7817
        $j -= 3; //#7817
    } //#7817
    $puti($_.text, 1, $geti($_.text, 0, 9)); //#7821
    $put($_.text, 0, 65); //#7822
    $put($_.options, "dontdraw", true); //#7825
    $k[$j++] = 'args'; //#7826
    $k[$j++] = $_.barcode; //#7826
    $k[$j++] = $_.options; //#7826
    bwipp_code39(); //#7826
    var _r = $k[--$j]; //#7826
    $_[$k[--$j]] = _r; //#7826
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#7828
    $put($_.args, "textxalign", "center"); //#7829
    $put($_.args, "opt", $_.options); //#7830
    $k[$j++] = $_.args; //#7833
    if (!$_.dontdraw) { //#7833
        bwipp_renlinear(); //#7833
    } //#7833
    $_ = $__; //#7835
} //bwipp_code32
function bwipp_pzn() {
    var $__ = $_; //#7864
    $_ = Object.assign({}, $_); //#7864
    $_.dontdraw = false; //#7867
    $_.includetext = false; //#7868
    $_.textfont = "OCR-B"; //#7869
    $_.textsize = 10; //#7870
    $_.textyoffset = -8; //#7871
    $_.textxoffset = 0; //#7872
    $_.height = 1; //#7873
    $_.pzn8 = false; //#7874
    $k[$j++] = $_; //#7876
    bwipp_processoptions(); //#7876
    $_.options = $k[--$j]; //#7876
    $_.barcode = $k[--$j]; //#7877
    if ($_.pzn8) { //#7886
        if (($_.barcode.length != 7) && ($_.barcode.length != 8)) { //#7883
            $k[$j++] = 'bwipp.pzn8badLength#7882'; //#7882
            $k[$j++] = "PZN8 must be 7 or 8 digits"; //#7882
            bwipp_raiseerror(); //#7882
        } //#7882
    } else { //#7886
        if (($_.barcode.length != 6) && ($_.barcode.length != 7)) { //#7887
            $k[$j++] = 'bwipp.pzn7badLength#7886'; //#7886
            $k[$j++] = "PZN7 must be 6 or 7 digits"; //#7886
            bwipp_raiseerror(); //#7886
        } //#7886
    } //#7886
    $forall($_.barcode, function() { //#7893
        var _8 = $k[--$j]; //#7890
        if ((_8 < 48) || (_8 > 57)) { //#7892
            $k[$j++] = 'bwipp.pznBadCharacter#7891'; //#7891
            $k[$j++] = "PZN must contain only digits"; //#7891
            bwipp_raiseerror(); //#7891
        } //#7891
    }); //#7891
    var _A = $_.pzn8 ? 9 : 8; //#7896
    $_.msglen = _A; //#7896
    $_.checksum = 0; //#7897
    for (var _D = 0, _C = $_.msglen - 3; _D <= _C; _D += 1) { //#7902
        $_.i = _D; //#7899
        var _J = $_.pzn8 ? 1 : 2; //#7900
        $_.checksum = $f((($get($_.barcode, $_.i) - 48) * ($_.i + _J)) + $_.checksum); //#7901
    } //#7901
    $_.checksum = $_.checksum % 11; //#7903
    if ($_.checksum == 10) { //#7906
        $k[$j++] = 'bwipp.pznBadInputSequence#7905'; //#7905
        $k[$j++] = "Incorrect PZN input sequence provided"; //#7905
        bwipp_raiseerror(); //#7905
    } //#7905
    if ($_.barcode.length == ($_.msglen - 1)) { //#7911
        if ($get($_.barcode, $_.msglen - 2) != ($_.checksum + 48)) { //#7910
            $k[$j++] = 'bwipp.pznBadCheckDigit#7909'; //#7909
            $k[$j++] = "Incorrect PZN check digit provided"; //#7909
            bwipp_raiseerror(); //#7909
        } //#7909
    } //#7909
    var _U = $s($_.msglen); //#7912
    $put(_U, 0, 45); //#7913
    $puti(_U, 1, $_.barcode); //#7914
    $put(_U, $_.msglen - 1, $_.checksum + 48); //#7915
    $_.msg = _U; //#7916
    $put($_.options, "dontdraw", true); //#7919
    $k[$j++] = 'args'; //#7920
    $k[$j++] = $_.msg; //#7920
    $k[$j++] = $_.options; //#7920
    bwipp_code39(); //#7920
    var _b = $k[--$j]; //#7920
    $_[$k[--$j]] = _b; //#7920
    $_.text = $s($_.msglen + 5); //#7923
    $puti($_.text, 0, "PZN - "); //#7924
    $puti($_.text, 6, $geti($_.msg, 1, $_.msglen - 1)); //#7925
    var _r = $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])]); //#7927
    $put($_.args, "txt", _r); //#7927
    $put($_.args, "textxalign", "center"); //#7928
    $put($_.args, "opt", $_.options); //#7929
    $k[$j++] = $_.args; //#7932
    if (!$_.dontdraw) { //#7932
        bwipp_renlinear(); //#7932
    } //#7932
    $_ = $__; //#7934
} //bwipp_pzn
function bwipp_code93() {
    var $__ = $_; //#7965
    $_ = Object.assign({}, $_); //#7965
    $_.dontdraw = false; //#7968
    $_.includecheck = false; //#7969
    $_.includetext = false; //#7970
    $_.textfont = "OCR-B"; //#7971
    $_.textsize = 10; //#7972
    $_.textyoffset = -8; //#7973
    $_.height = 1; //#7974
    $_.parse = false; //#7975
    $_.parsefnc = false; //#7976
    $k[$j++] = $_; //#7978
    bwipp_processoptions(); //#7978
    $_.options = $k[--$j]; //#7978
    $_.barcode = $k[--$j]; //#7979
    $_.encs = $a(["131112", "111213", "111312", "111411", "121113", "121212", "121311", "111114", "131211", "141111", "211113", "211212", "211311", "221112", "221211", "231111", "112113", "112212", "112311", "122112", "132111", "111123", "111222", "111321", "121122", "131121", "212112", "212211", "211122", "211221", "221121", "222111", "112122", "112221", "122121", "123111", "121131", "311112", "311211", "321111", "112131", "113121", "211131", "121221", "312111", "311121", "122211", "111141", "1111411"]); //#7995
    $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#7998
    $_.charvals = new Map; //#7999
    for (var _3 = 0; _3 <= 42; _3 += 1) { //#8000
        $put($_.charvals, $get($_.barchars, _3), _3); //#8000
    } //#8000
    $_.sft1 = -1; //#8002
    $_.sft2 = -2; //#8002
    $_.sft3 = -3; //#8002
    $_.sft4 = -4; //#8002
    $put($_.charvals, $_.sft1, 43); //#8004
    $put($_.charvals, $_.sft2, 44); //#8005
    $put($_.charvals, $_.sft3, 45); //#8006
    $put($_.charvals, $_.sft4, 46); //#8007
    var _M = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["SFT$", $_.sft1],
        ["SFT%", $_.sft2],
        ["SFT/", $_.sft3],
        ["SFT+", $_.sft4]
    ]); //#8018
    $_.fncvals = _M; //#8019
    $k[$j++] = 'msg'; //#8020
    $k[$j++] = $_.barcode; //#8020
    $k[$j++] = $_.fncvals; //#8020
    bwipp_parseinput(); //#8020
    var _P = $k[--$j]; //#8020
    $_[$k[--$j]] = _P; //#8020
    $_.msglen = $_.msg.length; //#8021
    $forall($_.msg, function() { //#8028
        var _V = $get($_.charvals, $k[--$j]) !== undefined; //#8025
        if (!_V) { //#8027
            $k[$j++] = 'bwipp.code93BadCharacter#8026'; //#8026
            $k[$j++] = "Code 93 must only contain digits, capital letters, spaces, the symbols -.$/+ and shift non-data characters"; //#8026
            bwipp_raiseerror(); //#8026
        } //#8026
    }); //#8026
    if ($_.includecheck) { //#8033
        $_.sbs = $s(($_.msglen * 6) + 25); //#8031
    } else { //#8033
        $_.sbs = $s(($_.msglen * 6) + 13); //#8033
    } //#8033
    $_.txt = $a($_.msglen); //#8035
    $puti($_.sbs, 0, $get($_.encs, 47)); //#8038
    $_.checksum1 = 0; //#8040
    $_.checksum2 = 0; //#8040
    for (var _i = 0, _h = $_.msglen - 1; _i <= _h; _i += 1) { //#8049
        $_.i = _i; //#8042
        $_.indx = $get($_.charvals, $get($_.msg, $_.i)); //#8043
        $puti($_.sbs, ($_.i * 6) + 6, $get($_.encs, $_.indx)); //#8044
        var _v = $get($_.msg, $_.i); //#8045
        $k[$j++] = 'char'; //#8045
        $k[$j++] = _v; //#8045
        if (_v < 0) { //#8045
            $k[$j - 1] = " "; //#8045
        } else { //#8045
            var _w = $s(1); //#8045
            $k[$j++] = _w; //#8045
            $k[$j++] = _w; //#8045
            $k[$j++] = 0; //#8045
            $r(4, -1); //#8045
            var _x = $k[--$j]; //#8045
            var _y = $k[--$j]; //#8045
            $put($k[--$j], _y, _x); //#8045
        } //#8045
        var _10 = $k[--$j]; //#8045
        $_[$k[--$j]] = _10; //#8045
        $put($_.txt, $_.i, $a([$_.char, ($_.i * 9) + 9, $_.textyoffset, $_.textfont, $_.textsize])); //#8046
        $_.checksum1 = $f($_.checksum1 + ((((($_.msglen - $_.i) - 1) % 20) + 1) * $_.indx)); //#8047
        $_.checksum2 = $f($_.checksum2 + (((($_.msglen - $_.i) % 15) + 1) * $_.indx)); //#8048
    } //#8048
    if ($_.includecheck) { //#8061
        $_.checksum1 = $_.checksum1 % 47; //#8053
        $_.checksum2 = $f($_.checksum2 + $_.checksum1) % 47; //#8054
        $puti($_.sbs, ($_.msglen * 6) + 6, $get($_.encs, $_.checksum1)); //#8055
        $puti($_.sbs, ($_.msglen * 6) + 12, $get($_.encs, $_.checksum2)); //#8056
        $puti($_.sbs, ($_.msglen * 6) + 18, $get($_.encs, 48)); //#8058
    } else { //#8061
        $puti($_.sbs, ($_.msglen * 6) + 6, $get($_.encs, 48)); //#8061
    } //#8061
    $k[$j++] = Infinity; //#8065
    $k[$j++] = Infinity; //#8067
    var _1e = $_.sbs; //#8067
    for (var _1f = 0, _1g = _1e.length; _1f < _1g; _1f++) { //#8067
        $k[$j++] = $get(_1e, _1f) - 48; //#8067
    } //#8067
    var _1i = $a(); //#8067
    $k[$j++] = Infinity; //#8068
    for (var _1k = 0, _1l = ~~(($_.sbs.length + 1) / 2); _1k < _1l; _1k++) { //#8068
        $k[$j++] = $_.height; //#8068
    } //#8068
    var _1n = $a(); //#8068
    $k[$j++] = Infinity; //#8069
    for (var _1p = 0, _1q = ~~(($_.sbs.length + 1) / 2); _1p < _1q; _1p++) { //#8069
        $k[$j++] = 0; //#8069
    } //#8069
    var _1r = $a(); //#8069
    $k[$j++] = 'ren'; //#8072
    $k[$j++] = 'renlinear'; //#8072
    $k[$j++] = 'sbs'; //#8072
    $k[$j++] = _1i; //#8072
    $k[$j++] = 'bhs'; //#8072
    $k[$j++] = _1n; //#8072
    $k[$j++] = 'bbs'; //#8072
    $k[$j++] = _1r; //#8072
    if ($_.includetext) { //#8072
        $k[$j++] = 'txt'; //#8071
        $k[$j++] = $_.txt; //#8071
    } //#8071
    $k[$j++] = 'opt'; //#8073
    $k[$j++] = $_.options; //#8073
    var _1v = $d(); //#8073
    $k[$j++] = _1v; //#8076
    if (!$_.dontdraw) { //#8076
        bwipp_renlinear(); //#8076
    } //#8076
    $_ = $__; //#8080
} //bwipp_code93
function bwipp_code93ext() {
    var $__ = $_; //#8112
    $_ = Object.assign({}, $_); //#8112
    $_.dontdraw = false; //#8115
    $_.includetext = false; //#8116
    $_.parse = false; //#8117
    $k[$j++] = $_; //#8119
    bwipp_processoptions(); //#8119
    $_.options = $k[--$j]; //#8119
    $_.barcode = $k[--$j]; //#8120
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#8128
    $_.fncvals = _3; //#8129
    $k[$j++] = 'barcode'; //#8130
    $k[$j++] = $_.barcode; //#8130
    $k[$j++] = $_.fncvals; //#8130
    bwipp_parseinput(); //#8130
    var _6 = $k[--$j]; //#8130
    $_[$k[--$j]] = _6; //#8130
    $_.barlen = $_.barcode.length; //#8131
    delete $_.options["parse"]; //#8132
    $_.extencs = $a
    $_.newcode = $s($_.barlen * 6); //#8156
    $_.newtext = $s($_.barlen * 6); //#8157
    $_.j = 0; //#8158
    $_.k = 0; //#8158
    for (var _I = 0, _H = $_.barlen - 1; _I <= _H; _I += 1) { //#8172
        $_.i = _I; //#8160
        var _L = $get($_.barcode, $_.i); //#8161
        $k[$j++] = _L; //#8164
        if (_L > 127) { //#8164
            $j--; //#8163
            $k[$j++] = 'bwipp.code93extbadCharacter#8163'; //#8163
            $k[$j++] = "Code 93 Extended only support ASCII characters with values 0 to 127"; //#8163
            bwipp_raiseerror(); //#8163
        } //#8163
        $_.extchar = $get($_.extencs, $k[--$j]); //#8165
        $_.extlen = $_.extchar.length; //#8166
        $puti($_.newcode, $_.j, $_.extchar); //#8167
        var _X = $get($_.barcode, $_.i); //#8168
        $k[$j++] = $_.newtext; //#8168
        $k[$j++] = $_.k; //#8168
        $k[$j++] = _X; //#8168
        if ((_X < 32) || (_X == 127)) { //#8168
            $k[$j - 1] = 32; //#8168
        } //#8168
        var _Y = $k[--$j]; //#8168
        var _Z = $k[--$j]; //#8168
        $put($k[--$j], _Z, _Y); //#8168
        if ($_.extlen != 1) { //#8169
            $put($_.newtext, $_.k + 1, 32); //#8169
        } //#8169
        $_.j = $_.j + $_.extlen; //#8170
        var _i = ($_.extlen == 1) ? 1 : 2; //#8171
        $_.k = $_.k + _i; //#8171
    } //#8171
    $_.newcode = $geti($_.newcode, 0, $_.j); //#8173
    $_.newtext = $geti($_.newtext, 0, $_.k); //#8174
    $put($_.options, "dontdraw", true); //#8177
    $put($_.options, "parsefnc", true); //#8178
    $k[$j++] = 'args'; //#8179
    $k[$j++] = $_.newcode; //#8179
    $k[$j++] = $_.options; //#8179
    bwipp_code93(); //#8179
    var _t = $k[--$j]; //#8179
    $_[$k[--$j]] = _t; //#8179
    if ($_.includetext) { //#8191
        $_.txt = $get($_.args, "txt"); //#8183
        for (var _10 = 0, _z = $_.newtext.length - 1; _10 <= _z; _10 += 1) { //#8189
            $_.i = _10; //#8185
            $_.txtentry = $get($_.txt, $_.i); //#8186
            $put($_.txtentry, 0, $geti($_.newtext, $_.i, 1)); //#8187
            $put($_.txt, $_.i, $_.txtentry); //#8188
        } //#8188
        $put($_.args, "txt", $_.txt); //#8190
    } //#8190
    $put($_.args, "opt", $_.options); //#8192
    $k[$j++] = $_.args; //#8195
    if (!$_.dontdraw) { //#8195
        bwipp_renlinear(); //#8195
    } //#8195
    $_ = $__; //#8199
} //bwipp_code93ext
function bwipp_interleaved2of5() {
    var $__ = $_; //#8229
    $_ = Object.assign({}, $_); //#8229
    $_.dontdraw = false; //#8232
    $_.includecheck = false; //#8233
    $_.includetext = false; //#8234
    $_.includecheckintext = false; //#8235
    $_.textfont = "OCR-B"; //#8236
    $_.textsize = 10; //#8237
    $_.textyoffset = -8; //#8238
    $_.height = 1; //#8239
    $k[$j++] = $_; //#8241
    bwipp_processoptions(); //#8241
    $_.options = $k[--$j]; //#8241
    $_.barcode = $k[--$j]; //#8242
    $forall($_.barcode, function() { //#8251
        var _3 = $k[--$j]; //#8248
        if ((_3 < 48) || (_3 > 57)) { //#8250
            $k[$j++] = 'bwipp.interleaved2of5badCharacter#8249'; //#8249
            $k[$j++] = "Interleaved 2 of 5 must contain only digits"; //#8249
            bwipp_raiseerror(); //#8249
        } //#8249
    }); //#8249
    $_.barlen = $_.barcode.length; //#8253
    if (((($_.barlen % 2) == 0) && $_.includecheck) || ((($_.barlen % 2) != 0) && (!$_.includecheck))) { //#8264
        $_.pad = $s($_.barlen + 1); //#8259
        $put($_.pad, 0, 48); //#8260
        $puti($_.pad, 1, $_.barcode); //#8261
        $_.barcode = $_.pad; //#8262
        $_.barlen = $_.barlen + 1; //#8263
    } //#8263
    if ($_.includecheck) { //#8283
        $_.checksum = 0; //#8268
        for (var _J = 0, _I = $_.barlen - 1; _J <= _I; _J += 1) { //#8276
            $_.i = _J; //#8270
            if (($_.i % 2) == 0) { //#8274
                $_.checksum = $_.checksum + (($get($_.barcode, $_.i) - 48) * 3); //#8272
            } else { //#8274
                $_.checksum = $_.checksum + ($get($_.barcode, $_.i) - 48); //#8274
            } //#8274
        } //#8274
        $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8277
        $_.pad = $s($_.barlen + 1); //#8278
        $puti($_.pad, 0, $_.barcode); //#8279
        $put($_.pad, $_.barlen, $_.checksum + 48); //#8280
        $_.barcode = $_.pad; //#8281
        $_.barlen = $_.barlen + 1; //#8282
    } //#8282
    $_.encs = $a(["11221", "21112", "12112", "22111", "11212", "21211", "12211", "11122", "21121", "12121", "1111", "2111"]); //#8291
    $_.barchars = "0123456789"; //#8294
    $_.sbs = $s(($_.barlen * 5) + 8); //#8297
    $_.txt = $a($_.barlen); //#8298
    $puti($_.sbs, 0, $get($_.encs, 10)); //#8301
    for (var _o = 0, _n = $_.barlen - 1; _o <= _n; _o += 2) { //#8335
        $_.i = _o; //#8304
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#8306
        $j--; //#8307
        $_.indx = $k[--$j].length; //#8308
        $j -= 2; //#8309
        $_.enca = $get($_.encs, $_.indx); //#8310
        $search($_.barchars, $geti($_.barcode, $_.i + 1, 1)); //#8312
        $j--; //#8313
        $_.indx = $k[--$j].length; //#8314
        $j -= 2; //#8315
        $_.encb = $get($_.encs, $_.indx); //#8316
        $_.intl = $s($_.enca.length * 2); //#8319
        for (var _19 = 0, _18 = $_.enca.length - 1; _19 <= _18; _19 += 1) { //#8326
            $_.j = _19; //#8321
            $_.achar = $get($_.enca, $_.j); //#8322
            $_.bchar = $get($_.encb, $_.j); //#8323
            $put($_.intl, $_.j * 2, $_.achar); //#8324
            $put($_.intl, ($_.j * 2) + 1, $_.bchar); //#8325
        } //#8325
        $puti($_.sbs, ($_.i * 5) + 4, $_.intl); //#8328
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 9) + 4, $_.textyoffset, $_.textfont, $_.textsize])); //#8329
        if (($_.includecheck && (!$_.includecheckintext)) && (($_.barlen - 2) == $_.i)) { //#8333
            $put($_.txt, $_.i + 1, $a([" ", (($_.i + 1) * 9) + 4, $_.textyoffset, $_.textfont, $_.textsize])); //#8331
        } else { //#8333
            $put($_.txt, $_.i + 1, $a([$geti($_.barcode, $_.i + 1, 1), (($_.i + 1) * 9) + 4, $_.textyoffset, $_.textfont, $_.textsize])); //#8333
        } //#8333
    } //#8333
    $puti($_.sbs, ($_.barlen * 5) + 4, $get($_.encs, 11)); //#8338
    $k[$j++] = Infinity; //#8341
    $k[$j++] = Infinity; //#8343
    var _1y = $_.sbs; //#8343
    for (var _1z = 0, _20 = _1y.length; _1z < _20; _1z++) { //#8343
        $k[$j++] = $get(_1y, _1z) - 48; //#8343
    } //#8343
    var _22 = $a(); //#8343
    $k[$j++] = Infinity; //#8344
    for (var _24 = 0, _25 = ~~(($_.sbs.length + 1) / 2); _24 < _25; _24++) { //#8344
        $k[$j++] = $_.height; //#8344
    } //#8344
    var _27 = $a(); //#8344
    $k[$j++] = Infinity; //#8345
    for (var _29 = 0, _2A = ~~(($_.sbs.length + 1) / 2); _29 < _2A; _29++) { //#8345
        $k[$j++] = 0; //#8345
    } //#8345
    var _2B = $a(); //#8345
    $k[$j++] = 'ren'; //#8348
    $k[$j++] = 'renlinear'; //#8348
    $k[$j++] = 'sbs'; //#8348
    $k[$j++] = _22; //#8348
    $k[$j++] = 'bhs'; //#8348
    $k[$j++] = _27; //#8348
    $k[$j++] = 'bbs'; //#8348
    $k[$j++] = _2B; //#8348
    if ($_.includetext) { //#8348
        $k[$j++] = 'txt'; //#8347
        $k[$j++] = $_.txt; //#8347
    } //#8347
    $k[$j++] = 'barratio'; //#8351
    $k[$j++] = 2; //#8351
    $k[$j++] = 'spaceratio'; //#8351
    $k[$j++] = 2; //#8351
    $k[$j++] = 'opt'; //#8351
    $k[$j++] = $_.options; //#8351
    var _2F = $d(); //#8351
    $k[$j++] = _2F; //#8354
    if (!$_.dontdraw) { //#8354
        bwipp_renlinear(); //#8354
    } //#8354
    $_ = $__; //#8358
} //bwipp_interleaved2of5
function bwipp_itf14() {
    var $__ = $_; //#8387
    $_ = Object.assign({}, $_); //#8387
    $_.dontdraw = false; //#8390
    $_.includetext = false; //#8391
    $_.includecheckintext = true; //#8392
    $_.textfont = "OCR-B"; //#8393
    $_.textsize = 10; //#8394
    $_.textxoffset = 0; //#8395
    $_.textyoffset = 3.5; //#8396
    $_.height = 0.5; //#8397
    $_.showborder = true; //#8398
    $_.borderwidth = 4; //#8399
    $_.borderleft = 10; //#8400
    $_.borderright = 10; //#8401
    $_.bordertop = -0.55; //#8402
    $_.borderbottom = -0.55; //#8403
    $k[$j++] = $_; //#8405
    bwipp_processoptions(); //#8405
    $_.options = $k[--$j]; //#8405
    $_.barcode = $k[--$j]; //#8406
    $_.text = $_.barcode; //#8409
    var _3 = $_.barcode; //#8410
    $k[$j++] = $s(_3.length); //#8411
    $k[$j++] = 0; //#8411
    $forall(_3, function() { //#8411
        var _5 = $k[$j - 1]; //#8411
        if (_5 != 32) { //#8411
            var _6 = $k[--$j]; //#8411
            var _7 = $k[--$j]; //#8411
            var _8 = $k[$j - 1]; //#8411
            $put(_8, _7, _6); //#8411
            $k[$j++] = _7 + 1; //#8411
        } else { //#8411
            $j--; //#8411
        } //#8411
    }); //#8411
    var _9 = $k[--$j]; //#8412
    $_.barcode = $geti($k[--$j], 0, _9); //#8412
    $_.hasspace = $_.text.length != $_.barcode.length; //#8413
    if (($_.barcode.length != 13) && ($_.barcode.length != 14)) { //#8418
        $k[$j++] = 'bwipp.itf14badLength#8417'; //#8417
        $k[$j++] = "ITF-14 must be 13 or 14 digits"; //#8417
        bwipp_raiseerror(); //#8417
    } //#8417
    var _G = $_.barcode; //#8419
    for (var _H = 0, _I = _G.length; _H < _I; _H++) { //#8423
        var _J = $get(_G, _H); //#8423
        if ((_J < 48) || (_J > 57)) { //#8422
            $k[$j++] = 'bwipp.itf14badCharacter#8421'; //#8421
            $k[$j++] = "ITF-14 must contain only digits"; //#8421
            bwipp_raiseerror(); //#8421
        } //#8421
    } //#8421
    $_.checksum = 0; //#8426
    for (var _K = 0; _K <= 12; _K += 1) { //#8430
        $_.i = _K; //#8428
        $k[$j++] = 'checksum'; //#8429
        $k[$j++] = $_.checksum; //#8429
        $k[$j++] = $get($_.barcode, $_.i) - 48; //#8429
        if (($_.i % 2) == 0) { //#8429
            var _Q = $k[--$j]; //#8429
            $k[$j++] = _Q * 3; //#8429
        } //#8429
        var _R = $k[--$j]; //#8429
        var _S = $k[--$j]; //#8429
        $_[$k[--$j]] = $f(_S + _R); //#8429
    } //#8429
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8431
    if ($_.barcode.length == 14) { //#8445
        if ($get($_.barcode, 13) != ($_.checksum + 48)) { //#8435
            $k[$j++] = 'bwipp.itf14badCheckDigit#8434'; //#8434
            $k[$j++] = "Incorrect ITF-14 check digit provided"; //#8434
            bwipp_raiseerror(); //#8434
        } //#8434
    } else { //#8445
        var _Z = $s(14); //#8437
        $puti(_Z, 0, $_.barcode); //#8438
        $put(_Z, 13, $_.checksum + 48); //#8439
        $_.barcode = _Z; //#8440
        var _e = $_.hasspace ? 2 : 1; //#8441
        var _f = $s($_.text.length + _e); //#8441
        $puti(_f, _f.length - 2, " "); //#8442
        $put(_f, _f.length - 1, $_.checksum + 48); //#8443
        $puti(_f, 0, $_.text); //#8444
        $_.text = _f; //#8445
    } //#8445
    var _i = $_.options; //#8449
    $put(_i, "dontdraw", true); //#8449
    $put($_.options, "showborder", $_.showborder); //#8450
    $put($_.options, "borderwidth", $_.borderwidth); //#8451
    $put($_.options, "borderleft", $_.borderleft); //#8452
    $put($_.options, "borderright", $_.borderright); //#8453
    var _r = $_.options; //#8454
    $put(_r, "bordertop", $_.bordertop); //#8454
    $put($_.options, "borderbottom", $_.borderbottom); //#8455
    $put($_.options, "height", $_.height); //#8456
    $put($_.options, "textyoffset", $_.textyoffset); //#8457
    $k[$j++] = 'args'; //#8458
    $k[$j++] = $_.barcode; //#8458
    $k[$j++] = $_.options; //#8458
    bwipp_interleaved2of5(); //#8458
    var _11 = $k[--$j]; //#8458
    $_[$k[--$j]] = _11; //#8458
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#8460
    $put($_.args, "textxalign", "center"); //#8461
    $put($_.args, "opt", $_.options); //#8462
    $k[$j++] = $_.args; //#8465
    if (!$_.dontdraw) { //#8465
        bwipp_renlinear(); //#8465
    } //#8465
    $_ = $__; //#8467
} //bwipp_itf14
function bwipp_identcode() {
    var $__ = $_; //#8496
    $_ = Object.assign({}, $_); //#8496
    $_.dontdraw = false; //#8499
    $_.includetext = false; //#8500
    $_.textfont = "OCR-B"; //#8501
    $_.textsize = 10; //#8502
    $_.textxoffset = 0; //#8503
    $_.textyoffset = -8; //#8504
    $_.height = 1; //#8505
    $k[$j++] = $_; //#8507
    bwipp_processoptions(); //#8507
    $_.options = $k[--$j]; //#8507
    $_.barcode = $k[--$j]; //#8508
    if (($_.barcode.length != 11) && ($_.barcode.length != 12)) { //#8513
        $k[$j++] = 'bwipp.identcodeBadLength#8512'; //#8512
        $k[$j++] = "Deutsche Post Identcode must be 11 or 12 digits"; //#8512
        bwipp_raiseerror(); //#8512
    } //#8512
    $forall($_.barcode, function() { //#8518
        var _5 = $k[--$j]; //#8515
        if ((_5 < 48) || (_5 > 57)) { //#8517
            $k[$j++] = 'bwipp.identcodeBadCharacter#8516'; //#8516
            $k[$j++] = "Deutsche Post Identcode must contain only digits"; //#8516
            bwipp_raiseerror(); //#8516
        } //#8516
    }); //#8516
    $_.checksum = 0; //#8521
    for (var _6 = 0; _6 <= 10; _6 += 1) { //#8525
        $_.i = _6; //#8523
        $k[$j++] = 'checksum'; //#8524
        $k[$j++] = $_.checksum; //#8524
        $k[$j++] = $get($_.barcode, $_.i) - 48; //#8524
        if (($_.i % 2) == 0) { //#8524
            var _C = $k[--$j]; //#8524
            $k[$j++] = _C * 4; //#8524
        } else { //#8524
            var _D = $k[--$j]; //#8524
            $k[$j++] = _D * 9; //#8524
        } //#8524
        var _E = $k[--$j]; //#8524
        var _F = $k[--$j]; //#8524
        $_[$k[--$j]] = $f(_F + _E); //#8524
    } //#8524
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8526
    if ($_.barcode.length == 12) { //#8531
        if ($get($_.barcode, 11) != ($_.checksum + 48)) { //#8530
            $k[$j++] = 'bwipp.identcodeBadCheckDigit#8529'; //#8529
            $k[$j++] = "Incorrect Deutsche Post Identcode check digit provided"; //#8529
            bwipp_raiseerror(); //#8529
        } //#8529
    } //#8529
    var _M = $s(12); //#8532
    $puti(_M, 0, $_.barcode); //#8533
    $put(_M, 11, $_.checksum + 48); //#8534
    $_.barcode = _M; //#8535
    $_.text = $strcpy($s(16), "  .       .     "); //#8538
    $puti($_.text, 0, $geti($_.barcode, 0, 2)); //#8539
    $puti($_.text, 3, $geti($_.barcode, 2, 3)); //#8540
    $puti($_.text, 7, $geti($_.barcode, 5, 3)); //#8541
    $puti($_.text, 11, $geti($_.barcode, 8, 3)); //#8542
    $puti($_.text, 15, $geti($_.barcode, 11, 1)); //#8543
    $put($_.options, "dontdraw", true); //#8546
    $put($_.options, "includecheck", false); //#8547
    var _i = $_.barcode; //#8548
    $k[$j++] = 'args'; //#8548
    $k[$j++] = _i; //#8548
    $k[$j++] = $_.options; //#8548
    bwipp_interleaved2of5(); //#8548
    var _k = $k[--$j]; //#8548
    $_[$k[--$j]] = _k; //#8548
    var _r = $_.textsize; //#8550
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, _r])])); //#8550
    $put($_.args, "textxalign", "center"); //#8551
    $put($_.args, "opt", $_.options); //#8552
    $k[$j++] = $_.args; //#8555
    if (!$_.dontdraw) { //#8555
        bwipp_renlinear(); //#8555
    } //#8555
    $_ = $__; //#8557
} //bwipp_identcode
function bwipp_leitcode() {
    var $__ = $_; //#8586
    $_ = Object.assign({}, $_); //#8586
    $_.dontdraw = false; //#8589
    $_.includetext = false; //#8590
    $_.textfont = "OCR-B"; //#8591
    $_.textsize = 10; //#8592
    $_.textxoffset = 0; //#8593
    $_.textyoffset = -8; //#8594
    $_.height = 1; //#8595
    $k[$j++] = $_; //#8597
    bwipp_processoptions(); //#8597
    $_.options = $k[--$j]; //#8597
    $_.barcode = $k[--$j]; //#8598
    if (($_.barcode.length != 13) && ($_.barcode.length != 14)) { //#8603
        $k[$j++] = 'bwipp.leitcodeBadLength#8602'; //#8602
        $k[$j++] = "Deutsche Post Leitcode must be 13 or 14 digits"; //#8602
        bwipp_raiseerror(); //#8602
    } //#8602
    $forall($_.barcode, function() { //#8608
        var _5 = $k[--$j]; //#8605
        if ((_5 < 48) || (_5 > 57)) { //#8607
            $k[$j++] = 'bwipp.leitcodeBadCharacter#8606'; //#8606
            $k[$j++] = "Deutsche Post Leitcode must contain only digits"; //#8606
            bwipp_raiseerror(); //#8606
        } //#8606
    }); //#8606
    $_.checksum = 0; //#8611
    for (var _6 = 0; _6 <= 12; _6 += 1) { //#8615
        $_.i = _6; //#8613
        $k[$j++] = 'checksum'; //#8614
        $k[$j++] = $_.checksum; //#8614
        $k[$j++] = $get($_.barcode, $_.i) - 48; //#8614
        if (($_.i % 2) == 0) { //#8614
            var _C = $k[--$j]; //#8614
            $k[$j++] = _C * 4; //#8614
        } else { //#8614
            var _D = $k[--$j]; //#8614
            $k[$j++] = _D * 9; //#8614
        } //#8614
        var _E = $k[--$j]; //#8614
        var _F = $k[--$j]; //#8614
        $_[$k[--$j]] = $f(_F + _E); //#8614
    } //#8614
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8616
    if ($_.barcode.length == 14) { //#8621
        if ($get($_.barcode, 13) != ($_.checksum + 48)) { //#8620
            $k[$j++] = 'bwipp.leitcodeBadCheckDigit#8619'; //#8619
            $k[$j++] = "Incorrect Deutsche Post Leitcode check digit provided"; //#8619
            bwipp_raiseerror(); //#8619
        } //#8619
    } //#8619
    var _M = $s(14); //#8622
    $puti(_M, 0, $_.barcode); //#8623
    $put(_M, 13, $_.checksum + 48); //#8624
    $_.barcode = _M; //#8625
    $_.text = $strcpy($s(18), "     .   .   .    "); //#8628
    $puti($_.text, 0, $geti($_.barcode, 0, 5)); //#8629
    $puti($_.text, 6, $geti($_.barcode, 5, 3)); //#8630
    $puti($_.text, 10, $geti($_.barcode, 8, 3)); //#8631
    $puti($_.text, 14, $geti($_.barcode, 11, 2)); //#8632
    $puti($_.text, 17, $geti($_.barcode, 13, 1)); //#8633
    $put($_.options, "dontdraw", true); //#8636
    $put($_.options, "includecheck", false); //#8637
    var _i = $_.barcode; //#8638
    $k[$j++] = 'args'; //#8638
    $k[$j++] = _i; //#8638
    $k[$j++] = $_.options; //#8638
    bwipp_interleaved2of5(); //#8638
    var _k = $k[--$j]; //#8638
    $_[$k[--$j]] = _k; //#8638
    var _r = $_.textsize; //#8640
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, _r])])); //#8640
    $put($_.args, "textxalign", "center"); //#8641
    $put($_.args, "opt", $_.options); //#8642
    $k[$j++] = $_.args; //#8645
    if (!$_.dontdraw) { //#8645
        bwipp_renlinear(); //#8645
    } //#8645
    $_ = $__; //#8647
} //bwipp_leitcode
function bwipp_databaromni() {
    var $__ = $_; //#8678
    $_ = Object.assign({}, $_); //#8678
    $_.dontdraw = false; //#8681
    $_.height = 33 / 72; //#8682
    $_.linkage = false; //#8683
    $_.format = "omni"; //#8684
    $_.barxmult = 33; //#8685
    $k[$j++] = $_; //#8687
    bwipp_processoptions(); //#8687
    $_.options = $k[--$j]; //#8687
    $_.barcode = $k[--$j]; //#8688
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#8692
        $k[$j++] = 'bwipp.databaromniBadLength#8691'; //#8691
        $k[$j++] = "GS1 DataBar Omnidirectional must be 13 or 14 digits"; //#8691
        bwipp_raiseerror(); //#8691
    } //#8691
    if ($ne($geti($_.barcode, 0, 4), "\(01\)")) { //#8695
        $k[$j++] = 'bwipp.databaromniBadAI#8694'; //#8694
        $k[$j++] = "GS1 DataBar Omnidirectional must begin with (01) application identifier"; //#8694
        bwipp_raiseerror(); //#8694
    } //#8694
    var _8 = $geti($_.barcode, 4, $_.barcode.length - 4); //#8696
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#8700
        var _B = $get(_8, _9); //#8700
        if ((_B < 48) || (_B > 57)) { //#8699
            $k[$j++] = 'bwipp.databaromniBadCharacter#8698'; //#8698
            $k[$j++] = "GS1 DataBar Omnidirectional must contain only digits"; //#8698
            bwipp_raiseerror(); //#8698
        } //#8698
    } //#8698
    if ($_.barxmult < 33) { //#8704
        $k[$j++] = 'bwipp.databarStackedOmniBarXmult#8703'; //#8703
        $k[$j++] = "GS1 DataBar Stacked Omnidirectional must have a barxmult of at least 33"; //#8703
        bwipp_raiseerror(); //#8703
    } //#8703
    if ((($ne($_.format, "omni") && $ne($_.format, "stacked")) && $ne($_.format, "stackedomni")) && $ne($_.format, "truncated")) { //#8708
        $k[$j++] = 'bwipp.databaromniBadFormat#8707'; //#8707
        $k[$j++] = "Valid formats are omni, stacked, stackedomni and truncated"; //#8707
        bwipp_raiseerror(); //#8707
    } //#8707
    if ($eq($_.format, "truncated")) { //#8710
        $_.height = 13 / 72; //#8710
    } //#8710
    $_.checksum = 0; //#8715
    for (var _I = 0; _I <= 12; _I += 1) { //#8719
        $_.i = _I; //#8717
        $k[$j++] = 'checksum'; //#8718
        $k[$j++] = $_.checksum; //#8718
        $k[$j++] = $get($_.barcode, $_.i + 4) - 48; //#8718
        if (($_.i % 2) == 0) { //#8718
            var _O = $k[--$j]; //#8718
            $k[$j++] = _O * 3; //#8718
        } //#8718
        var _P = $k[--$j]; //#8718
        var _Q = $k[--$j]; //#8718
        $_[$k[--$j]] = $f(_Q + _P); //#8718
    } //#8718
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8720
    if ($_.barcode.length == 18) { //#8725
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#8724
            $k[$j++] = 'bwipp.databaromniBadCheckDigit#8723'; //#8723
            $k[$j++] = "Incorrect GS1 DataBar Omnidirectional check digit provided"; //#8723
            bwipp_raiseerror(); //#8723
        } //#8723
    } //#8723
    var _X = $s(18); //#8726
    $puti(_X, 0, $_.barcode); //#8727
    $put(_X, 17, $_.checksum + 48); //#8728
    $_.barcode = _X; //#8729
    $_.txt = $a($_.barcode.length); //#8732
    for (var _e = 0, _d = $_.barcode.length - 1; _e <= _d; _e += 1) { //#8736
        $_.i = _e; //#8734
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#8735
    } //#8735
    $_.ncr = function() {
        var _l = $k[--$j]; //#8739
        var _m = $k[--$j]; //#8739
        var _n = $f(_m - _l); //#8739
        if (_l < $f(_m - _l)) { //#8739
            var _ = _n; //#8739
            _n = _l; //#8739
            _l = _; //#8739
        } //#8739
        $k[$j++] = _n; //#8746
        $k[$j++] = 1; //#8746
        $k[$j++] = 1; //#8746
        for (var _p = _m, _o = _l + 1; _p >= _o; _p -= 1) { //#8746
            var _q = $k[--$j]; //#8742
            var _r = $k[$j - 1]; //#8743
            var _s = $k[$j - 2]; //#8743
            $k[$j++] = _q * _p; //#8745
            if ($le(_r, _s)) { //#8745
                var _t = $k[--$j]; //#8744
                var _u = $k[--$j]; //#8744
                $k[$j++] = _u + 1; //#8744
                $k[$j++] = ~~(_t / _u); //#8744
            } //#8744
        } //#8744
        for (;;) { //#8750
            var _w = $k[$j - 2]; //#8748
            var _x = $k[$j - 3]; //#8748
            if ($gt(_w, _x)) { //#8748
                break; //#8748
            } //#8748
            var _y = $k[--$j]; //#8749
            var _z = $k[--$j]; //#8749
            $k[$j++] = _z + 1; //#8749
            $k[$j++] = ~~(_y / _z); //#8749
        } //#8749
        var _10 = $k[--$j]; //#8751
        $k[$j - 1] = _10; //#8751
        var _12 = $k[--$j]; //#8751
        $k[$j - 1] = _12; //#8751
    }; //#8751
    $_.getRSSwidths = function() {
        $_.oe = $k[--$j]; //#8755
        $_.el = $k[--$j]; //#8756
        $_.mw = $k[--$j]; //#8757
        $_.nm = $k[--$j]; //#8758
        $_.val = $k[--$j]; //#8759
        $_.out = $a($_.el); //#8760
        $_.mask = 0; //#8761
        for (var _1D = 0, _1C = $_.el - 2; _1D <= _1C; _1D += 1) { //#8788
            $_.bar = _1D; //#8763
            $_.ew = 1; //#8764
            var _1F = $_.bar; //#8765
            $_.mask = $_.mask | ((_1F < 0 ? 1 >>> -_1F : 1 << _1F)); //#8765
            for (;;) { //#8784
                $k[$j++] = 'sval'; //#8766
                $k[$j++] = $f($_.nm - $_.ew) - 1; //#8766
                $k[$j++] = $f($_.el - $_.bar) - 2; //#8766
                $_.ncr(); //#8766
                var _1K = $k[--$j]; //#8766
                $_[$k[--$j]] = _1K; //#8766
                if ($_.oe && $_.mask == 0 && $f($_.nm - $_.ew - $_.el * 2 + $_.bar * 2) >= -2) { //#8769
                    $k[$j++] = 'sval'; //#8768
                    $k[$j++] = $_.sval; //#8768
                    $k[$j++] = $f($_.nm - $_.ew - $_.el + $_.bar); //#8768
                    $k[$j++] = $f($_.el - $_.bar) - 2; //#8768
                    $_.ncr(); //#8768
                    var _1Z = $k[--$j]; //#8768
                    var _1a = $k[--$j]; //#8768
                    $_[$k[--$j]] = $f(_1a - _1Z); //#8768
                } //#8768
                if ($f($_.el - $_.bar) > 2) { //#8778
                    $_.lval = 0; //#8771
                    for (var _1k = $f($_.nm - $_.ew - $_.el + $_.bar) + 2, _1j = $_.mw + 1; _1k >= _1j; _1k -= 1) { //#8775
                        $k[$j++] = $f($_.nm - _1k - $_.ew) - 1; //#8773
                        $k[$j++] = $f($_.el - $_.bar) - 3; //#8773
                        $_.ncr(); //#8773
                        $_.lval = $f($k[--$j] + $_.lval); //#8774
                    } //#8774
                    $_.sval = $f($_.sval - $_.lval * ($_.el - $_.bar - 1)); //#8776
                } else { //#8778
                    if ($f($_.nm - $_.ew) > $_.mw) { //#8778
                        $_.sval = $_.sval - 1; //#8778
                    } //#8778
                } //#8778
                $_.val = $f($_.val - $_.sval); //#8780
                if ($_.val < 0) { //#8781
                    break; //#8781
                } //#8781
                $_.ew = $_.ew + 1; //#8782
                var _24 = $_.bar; //#8783
                $_.mask = $_.mask & (~((_24 < 0 ? 1 >>> -_24 : 1 << _24))); //#8783
            } //#8783
            $_.val = $f($_.val + $_.sval); //#8785
            $_.nm = $f($_.nm - $_.ew); //#8786
            $put($_.out, $_.bar, $_.ew); //#8787
        } //#8787
        $put($_.out, $_.el - 1, $_.nm); //#8789
        $k[$j++] = $_.out; //#8790
    }; //#8790
    $k[$j++] = Infinity; //#8793
    var _2H = $_.linkage ? 1 : 0; //#8794
    var _2J = $geti($_.barcode, 4, 13); //#8795
    $k[$j++] = _2H; //#8795
    for (var _2K = 0, _2L = _2J.length; _2K < _2L; _2K++) { //#8795
        $k[$j++] = $get(_2J, _2K) - 48; //#8795
    } //#8795
    $_.binval = $a(); //#8795
    for (var _2O = 0; _2O <= 12; _2O += 1) { //#8802
        $_.i = _2O; //#8799
        var _2P = $_.binval; //#8800
        var _2Q = $_.i; //#8800
        $put(_2P, _2Q + 1, $f($get(_2P, _2Q + 1) + (($get($_.binval, $_.i) % 4537077) * 10))); //#8800
        $put($_.binval, $_.i, ~~($get($_.binval, $_.i) / 4537077)); //#8801
    } //#8801
    $_.right = $get($_.binval, 13) % 4537077; //#8803
    var _2c = $_.binval; //#8804
    $put(_2c, 13, ~~($get(_2c, 13) / 4537077)); //#8804
    $_.left = 0; //#8806
    $_.i = true; //#8807
    for (var _2e = 0; _2e <= 13; _2e += 1) { //#8817
        $_.j = _2e; //#8809
        var _2h = $get($_.binval, $_.j); //#8810
        $k[$j++] = _2h; //#8816
        if ((_2h == 0) && $_.i) { //#8815
            $j--; //#8812
        } else { //#8815
            $_.i = false; //#8814
            $k[$j++] = 'left'; //#8815
            $k[$j++] = $_.left; //#8815
            var _2l = $k[$j - 3]; //#8815
            var _2m = $k[$j - 1]; //#8815
            $_[$k[$j - 2]] = $f(_2m + (_2l * (~~$pow(10, 13 - $_.j)))); //#8815
            $j -= 3; //#8815
        } //#8815
    } //#8815
    $_.d1 = ~~($_.left / 1597); //#8819
    $_.d2 = $_.left % 1597; //#8820
    $_.d3 = ~~($_.right / 1597); //#8821
    $_.d4 = $_.right % 1597; //#8822
    $_.tab164 = $a([160, 0, 12, 4, 8, 1, 161, 1, 960, 161, 10, 6, 6, 3, 80, 10, 2014, 961, 8, 8, 4, 5, 31, 34, 2714, 2015, 6, 10, 3, 6, 10, 70, 2840, 2715, 4, 12, 1, 8, 1, 126]); //#8831
    $_.tab154 = $a([335, 0, 5, 10, 2, 7, 4, 84, 1035, 336, 7, 8, 4, 5, 20, 35, 1515, 1036, 9, 6, 6, 3, 48, 10, 1596, 1516, 11, 4, 8, 1, 81, 1]); //#8838
    $_.i = 0; //#8841
    for (;;) { //#8851
        if ($_.d1 <= $get($_.tab164, $_.i)) { //#8849
            $aload($geti($_.tab164, $_.i + 1, 7)); //#8843
            $_.d1te = $k[--$j]; //#8844
            $_.d1to = $k[--$j]; //#8844
            $_.d1mwe = $k[--$j]; //#8845
            $_.d1mwo = $k[--$j]; //#8845
            $_.d1ele = $k[--$j]; //#8846
            $_.d1elo = $k[--$j]; //#8846
            $_.d1gs = $k[--$j]; //#8847
            break; //#8848
        } //#8848
        $_.i = $_.i + 8; //#8850
    } //#8850
    $_.i = 0; //#8853
    for (;;) { //#8863
        if ($_.d2 <= $get($_.tab154, $_.i)) { //#8861
            $aload($geti($_.tab154, $_.i + 1, 7)); //#8855
            $_.d2te = $k[--$j]; //#8856
            $_.d2to = $k[--$j]; //#8856
            $_.d2mwe = $k[--$j]; //#8857
            $_.d2mwo = $k[--$j]; //#8857
            $_.d2ele = $k[--$j]; //#8858
            $_.d2elo = $k[--$j]; //#8858
            $_.d2gs = $k[--$j]; //#8859
            break; //#8860
        } //#8860
        $_.i = $_.i + 8; //#8862
    } //#8862
    $_.i = 0; //#8865
    for (;;) { //#8875
        if ($_.d3 <= $get($_.tab164, $_.i)) { //#8873
            $aload($geti($_.tab164, $_.i + 1, 7)); //#8867
            $_.d3te = $k[--$j]; //#8868
            $_.d3to = $k[--$j]; //#8868
            $_.d3mwe = $k[--$j]; //#8869
            $_.d3mwo = $k[--$j]; //#8869
            $_.d3ele = $k[--$j]; //#8870
            $_.d3elo = $k[--$j]; //#8870
            $_.d3gs = $k[--$j]; //#8871
            break; //#8872
        } //#8872
        $_.i = $_.i + 8; //#8874
    } //#8874
    $_.i = 0; //#8877
    for (;;) { //#8887
        if ($_.d4 <= $get($_.tab154, $_.i)) { //#8885
            $aload($geti($_.tab154, $_.i + 1, 7)); //#8879
            $_.d4te = $k[--$j]; //#8880
            $_.d4to = $k[--$j]; //#8880
            $_.d4mwe = $k[--$j]; //#8881
            $_.d4mwo = $k[--$j]; //#8881
            $_.d4ele = $k[--$j]; //#8882
            $_.d4elo = $k[--$j]; //#8882
            $_.d4gs = $k[--$j]; //#8883
            break; //#8884
        } //#8884
        $_.i = $_.i + 8; //#8886
    } //#8886
    $k[$j++] = 'd1wo'; //#8889
    $k[$j++] = ~~($f($_.d1 - $_.d1gs) / $_.d1te); //#8889
    $k[$j++] = $_.d1elo; //#8889
    $k[$j++] = $_.d1mwo; //#8889
    $k[$j++] = 4; //#8889
    $k[$j++] = false; //#8889
    $_.getRSSwidths(); //#8889
    var _3y = $k[--$j]; //#8889
    $_[$k[--$j]] = _3y; //#8889
    $k[$j++] = 'd1we'; //#8890
    $k[$j++] = $f($_.d1 - $_.d1gs) % $_.d1te; //#8890
    $k[$j++] = $_.d1ele; //#8890
    $k[$j++] = $_.d1mwe; //#8890
    $k[$j++] = 4; //#8890
    $k[$j++] = true; //#8890
    $_.getRSSwidths(); //#8890
    var _45 = $k[--$j]; //#8890
    $_[$k[--$j]] = _45; //#8890
    $k[$j++] = 'd2wo'; //#8891
    $k[$j++] = $f($_.d2 - $_.d2gs) % $_.d2to; //#8891
    $k[$j++] = $_.d2elo; //#8891
    $k[$j++] = $_.d2mwo; //#8891
    $k[$j++] = 4; //#8891
    $k[$j++] = true; //#8891
    $_.getRSSwidths(); //#8891
    var _4C = $k[--$j]; //#8891
    $_[$k[--$j]] = _4C; //#8891
    $k[$j++] = 'd2we'; //#8892
    $k[$j++] = ~~($f($_.d2 - $_.d2gs) / $_.d2to); //#8892
    $k[$j++] = $_.d2ele; //#8892
    $k[$j++] = $_.d2mwe; //#8892
    $k[$j++] = 4; //#8892
    $k[$j++] = false; //#8892
    $_.getRSSwidths(); //#8892
    var _4J = $k[--$j]; //#8892
    $_[$k[--$j]] = _4J; //#8892
    $k[$j++] = 'd3wo'; //#8893
    $k[$j++] = ~~($f($_.d3 - $_.d3gs) / $_.d3te); //#8893
    $k[$j++] = $_.d3elo; //#8893
    $k[$j++] = $_.d3mwo; //#8893
    $k[$j++] = 4; //#8893
    $k[$j++] = false; //#8893
    $_.getRSSwidths(); //#8893
    var _4Q = $k[--$j]; //#8893
    $_[$k[--$j]] = _4Q; //#8893
    $k[$j++] = 'd3we'; //#8894
    $k[$j++] = $f($_.d3 - $_.d3gs) % $_.d3te; //#8894
    $k[$j++] = $_.d3ele; //#8894
    $k[$j++] = $_.d3mwe; //#8894
    $k[$j++] = 4; //#8894
    $k[$j++] = true; //#8894
    $_.getRSSwidths(); //#8894
    var _4X = $k[--$j]; //#8894
    $_[$k[--$j]] = _4X; //#8894
    $k[$j++] = 'd4wo'; //#8895
    $k[$j++] = $f($_.d4 - $_.d4gs) % $_.d4to; //#8895
    $k[$j++] = $_.d4elo; //#8895
    $k[$j++] = $_.d4mwo; //#8895
    $k[$j++] = 4; //#8895
    $k[$j++] = true; //#8895
    $_.getRSSwidths(); //#8895
    var _4e = $k[--$j]; //#8895
    $_[$k[--$j]] = _4e; //#8895
    $k[$j++] = 'd4we'; //#8896
    $k[$j++] = ~~($f($_.d4 - $_.d4gs) / $_.d4to); //#8896
    $k[$j++] = $_.d4ele; //#8896
    $k[$j++] = $_.d4mwe; //#8896
    $k[$j++] = 4; //#8896
    $k[$j++] = false; //#8896
    $_.getRSSwidths(); //#8896
    var _4l = $k[--$j]; //#8896
    $_[$k[--$j]] = _4l; //#8896
    $_.d1w = $a(8); //#8898
    for (var _4o = 0; _4o <= 3; _4o += 1) { //#8903
        $_.i = _4o; //#8900
        $put($_.d1w, $_.i * 2, $get($_.d1wo, $_.i)); //#8901
        $put($_.d1w, ($_.i * 2) + 1, $get($_.d1we, $_.i)); //#8902
    } //#8902
    $_.d2w = $a(8); //#8905
    for (var _50 = 0; _50 <= 3; _50 += 1) { //#8910
        $_.i = _50; //#8907
        $put($_.d2w, 7 - ($_.i * 2), $get($_.d2wo, $_.i)); //#8908
        $put($_.d2w, 6 - ($_.i * 2), $get($_.d2we, $_.i)); //#8909
    } //#8909
    $_.d3w = $a(8); //#8912
    for (var _5C = 0; _5C <= 3; _5C += 1) { //#8917
        $_.i = _5C; //#8914
        $put($_.d3w, 7 - ($_.i * 2), $get($_.d3wo, $_.i)); //#8915
        $put($_.d3w, 6 - ($_.i * 2), $get($_.d3we, $_.i)); //#8916
    } //#8916
    $_.d4w = $a(8); //#8919
    for (var _5O = 0; _5O <= 3; _5O += 1) { //#8924
        $_.i = _5O; //#8921
        $put($_.d4w, $_.i * 2, $get($_.d4wo, $_.i)); //#8922
        $put($_.d4w, ($_.i * 2) + 1, $get($_.d4we, $_.i)); //#8923
    } //#8923
    $k[$j++] = Infinity; //#8926
    $aload($_.d1w); //#8927
    $aload($_.d2w); //#8928
    $aload($_.d3w); //#8929
    $aload($_.d4w); //#8930
    $_.widths = $a(); //#8930
    $_.checkweights = $a([1, 3, 9, 27, 2, 6, 18, 54, 58, 72, 24, 8, 29, 36, 12, 4, 74, 51, 17, 32, 37, 65, 48, 16, 64, 34, 23, 69, 49, 68, 46, 59]); //#8939
    $_.checkwidths = $a([3, 8, 2, 1, 1, 3, 5, 5, 1, 1, 3, 3, 7, 1, 1, 3, 1, 9, 1, 1, 2, 7, 4, 1, 1, 2, 5, 6, 1, 1, 2, 3, 8, 1, 1, 1, 5, 7, 1, 1, 1, 3, 9, 1, 1]); //#8945
    $_.checksum = 0; //#8948
    for (var _5h = 0; _5h <= 31; _5h += 1) { //#8952
        $_.i = _5h; //#8950
        $_.checksum = $f($_.checksum + ($get($_.widths, $_.i) * $get($_.checkweights, $_.i))); //#8951
    } //#8951
    $_.checksum = $_.checksum % 79; //#8953
    if ($_.checksum >= 8) { //#8954
        $_.checksum = $_.checksum + 1; //#8954
    } //#8954
    if ($_.checksum >= 72) { //#8955
        $_.checksum = $_.checksum + 1; //#8955
    } //#8955
    $_.checklt = $geti($_.checkwidths, (~~($_.checksum / 9)) * 5, 5); //#8956
    $_.checkrtrev = $geti($_.checkwidths, ($_.checksum % 9) * 5, 5); //#8957
    $_.checkrt = $a(5); //#8958
    for (var _61 = 0; _61 <= 4; _61 += 1) { //#8962
        $_.i = _61; //#8960
        $put($_.checkrt, $_.i, $get($_.checkrtrev, 4 - $_.i)); //#8961
    } //#8961
    if ($eq($_.format, "omni") || $eq($_.format, "truncated")) { //#9108
        $k[$j++] = Infinity; //#8967
        $k[$j++] = 1; //#8969
        $aload($_.d1w); //#8969
        $aload($_.checklt); //#8970
        $aload($_.d2w); //#8971
        $aload($_.d4w); //#8972
        $aload($_.checkrt); //#8973
        $aload($_.d3w); //#8974
        $k[$j++] = 1; //#8975
        $k[$j++] = 1; //#8975
        $_.sbs = $a(); //#8975
        $k[$j++] = Infinity; //#8978
        var _6G = $_.sbs; //#8980
        $k[$j++] = Infinity; //#8981
        for (var _6I = 0, _6J = ~~(($_.sbs.length + 1) / 2); _6I < _6J; _6I++) { //#8981
            $k[$j++] = $_.height; //#8981
        } //#8981
        var _6L = $a(); //#8981
        $k[$j++] = Infinity; //#8982
        for (var _6N = 0, _6O = ~~(($_.sbs.length + 1) / 2); _6N < _6O; _6N++) { //#8982
            $k[$j++] = 0; //#8982
        } //#8982
        var _6P = $a(); //#8982
        $k[$j++] = 'ren'; //#8987
        $k[$j++] = 'renlinear'; //#8987
        $k[$j++] = 'sbs'; //#8987
        $k[$j++] = _6G; //#8987
        $k[$j++] = 'bhs'; //#8987
        $k[$j++] = _6L; //#8987
        $k[$j++] = 'bbs'; //#8987
        $k[$j++] = _6P; //#8987
        $k[$j++] = 'txt'; //#8987
        $k[$j++] = $_.txt; //#8987
        $k[$j++] = 'textxalign'; //#8987
        $k[$j++] = "center"; //#8987
        $k[$j++] = 'borderleft'; //#8987
        $k[$j++] = 0; //#8987
        $k[$j++] = 'borderright'; //#8987
        $k[$j++] = 0; //#8987
        $k[$j++] = 'opt'; //#8987
        $k[$j++] = $_.options; //#8987
        var _6S = $d(); //#8987
        $k[$j++] = _6S; //#8990
        if (!$_.dontdraw) { //#8990
            bwipp_renlinear(); //#8990
        } //#8990
    } else { //#9108
        $k[$j++] = Infinity; //#8994
        $k[$j++] = 1; //#8996
        $k[$j++] = 1; //#8996
        $aload($_.d1w); //#8996
        $aload($_.checklt); //#8997
        $aload($_.d2w); //#8998
        $k[$j++] = 1; //#8999
        $k[$j++] = 1; //#8999
        $k[$j++] = 0; //#8999
        $_.top = $a(); //#8999
        $k[$j++] = Infinity; //#9001
        $k[$j++] = 1; //#9003
        $k[$j++] = 1; //#9003
        $aload($_.d4w); //#9003
        $aload($_.checkrt); //#9004
        $aload($_.d3w); //#9005
        $k[$j++] = 1; //#9006
        $k[$j++] = 1; //#9006
        $k[$j++] = 0; //#9006
        $_.bot = $a(); //#9006
        for (var _6c = 0; _6c <= 24; _6c += 2) { //#9012
            $_.i = _6c; //#9009
            for (var _6g = 0, _6h = $get($_.top, $_.i); _6g < _6h; _6g++) { //#9010
                $k[$j++] = 0; //#9010
            } //#9010
            for (var _6l = 0, _6m = $get($_.top, $_.i + 1); _6l < _6m; _6l++) { //#9011
                $k[$j++] = 1; //#9011
            } //#9011
        } //#9011
        $astore($a(50)); //#9013
        $_.top = $k[--$j]; //#9013
        for (var _6p = 0; _6p <= 24; _6p += 2) { //#9018
            $_.i = _6p; //#9015
            for (var _6t = 0, _6u = $get($_.bot, $_.i); _6t < _6u; _6t++) { //#9016
                $k[$j++] = 1; //#9016
            } //#9016
            for (var _6y = 0, _6z = $get($_.bot, $_.i + 1); _6y < _6z; _6y++) { //#9017
                $k[$j++] = 0; //#9017
            } //#9017
        } //#9017
        $astore($a(50)); //#9019
        $_.bot = $k[--$j]; //#9019
        if ($eq($_.format, "stacked")) { //#9041
            $_.sep = $a(50); //#9023
            $put($_.sep, 0, 0); //#9024
            for (var _75 = 1; _75 <= 49; _75 += 1) { //#9032
                $_.i = _75; //#9026
                if ($eq($get($_.top, $_.i), $get($_.bot, $_.i))) { //#9030
                    $put($_.sep, $_.i, 1 - $get($_.top, $_.i)); //#9028
                } else { //#9030
                    $put($_.sep, $_.i, 1 - $get($_.sep, $_.i - 1)); //#9030
                } //#9030
            } //#9030
            $puti($_.sep, 0, $a([0, 0, 0, 0])); //#9033
            $puti($_.sep, 46, $a([0, 0, 0, 0])); //#9034
            $k[$j++] = Infinity; //#9035
            for (var _7Q = 0; _7Q < 5; _7Q++) { //#9036
                $aload($_.top); //#9036
            } //#9036
            $aload($_.sep); //#9037
            for (var _7T = 0; _7T < 7; _7T++) { //#9038
                $aload($_.bot); //#9038
            } //#9038
            $_.pixs = $a(); //#9038
            $_.pixy = ~~($_.pixs.length / 50); //#9040
        } //#9040
        if ($eq($_.format, "stackedomni")) { //#9091
            $k[$j++] = Infinity; //#9045
            $forall($_.top, function() { //#9045
                var _7Z = $k[--$j]; //#9045
                $k[$j++] = 1 - _7Z; //#9045
            }); //#9045
            $_.sep1 = $a(); //#9045
            $puti($_.sep1, 0, $a([0, 0, 0, 0])); //#9046
            $puti($_.sep1, 46, $a([0, 0, 0, 0])); //#9047
            for (var _7f = 18; _7f <= 30; _7f += 1) { //#9060
                $_.i = _7f; //#9049
                if ($get($_.top, $_.i) == 0) { //#9057
                    if ($get($_.top, $_.i - 1) == 1) { //#9054
                        $k[$j++] = 1; //#9052
                    } else { //#9054
                        var _7p = ($get($_.sep1, $_.i - 1) == 0) ? 1 : 0; //#9054
                        $k[$j++] = _7p; //#9054
                    } //#9054
                } else { //#9057
                    $k[$j++] = 0; //#9057
                } //#9057
                $put($_.sep1, $_.i, $k[--$j]); //#9059
            } //#9059
            $k[$j++] = Infinity; //#9061
            $k[$j++] = 0; //#9061
            $k[$j++] = 0; //#9061
            $k[$j++] = 0; //#9061
            $k[$j++] = 0; //#9061
            for (var _7t = 0; _7t < 21; _7t++) { //#9061
                $k[$j++] = 0; //#9061
                $k[$j++] = 1; //#9061
            } //#9061
            $k[$j++] = 0; //#9061
            $k[$j++] = 0; //#9061
            $k[$j++] = 0; //#9061
            $k[$j++] = 0; //#9061
            $_.sep2 = $a(); //#9061
            $k[$j++] = Infinity; //#9062
            $forall($_.bot, function() { //#9062
                var _7w = $k[--$j]; //#9062
                $k[$j++] = 1 - _7w; //#9062
            }); //#9062
            $_.sep3 = $a(); //#9062
            $puti($_.sep3, 0, $a([0, 0, 0, 0])); //#9063
            $puti($_.sep3, 46, $a([0, 0, 0, 0])); //#9064
            for (var _82 = 19; _82 <= 31; _82 += 1) { //#9077
                $_.i = _82; //#9066
                if ($get($_.bot, $_.i) == 0) { //#9074
                    if ($get($_.bot, $_.i - 1) == 1) { //#9071
                        $k[$j++] = 1; //#9069
                    } else { //#9071
                        var _8C = ($get($_.sep3, $_.i - 1) == 0) ? 1 : 0; //#9071
                        $k[$j++] = _8C; //#9071
                    } //#9071
                } else { //#9074
                    $k[$j++] = 0; //#9074
                } //#9074
                $put($_.sep3, $_.i, $k[--$j]); //#9076
            } //#9076
            $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#9078
            $k[$j++] = true; //#9079
            for (var _8H = 0; _8H <= 12; _8H += 1) { //#9079
                var _8M = $k[--$j]; //#9079
                $k[$j++] = _8M && $eq($get($_.bot, _8H + 19), $get($_.f3, _8H)); //#9079
            } //#9079
            if ($k[--$j]) { //#9082
                $puti($_.sep3, 19, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#9081
            } //#9081
            $k[$j++] = Infinity; //#9083
            for (var _8R = 0, _8S = $_.barxmult; _8R < _8S; _8R++) { //#9084
                $aload($_.top); //#9084
            } //#9084
            $aload($_.sep1); //#9085
            $aload($_.sep2); //#9086
            $aload($_.sep3); //#9087
            for (var _8Y = 0, _8Z = $_.barxmult; _8Y < _8Z; _8Y++) { //#9088
                $aload($_.bot); //#9088
            } //#9088
            $_.pixs = $a(); //#9088
            $_.pixy = ~~($_.pixs.length / 50); //#9090
        } //#9090
        var _8h = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", 50],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", 50 / 72],
            ["borderleft", 0],
            ["borderright", 0],
            ["bordertop", 0],
            ["borderbottom", 0],
            ["opt", $_.options]
        ]); //#9105
        $k[$j++] = _8h; //#9108
        if (!$_.dontdraw) { //#9108
            bwipp_renmatrix(); //#9108
        } //#9108
    } //#9108
    $_ = $__; //#9114
} //bwipp_databaromni
function bwipp_databarstacked() {
    var $__ = $_; //#9143
    $_ = Object.assign({}, $_); //#9143
    $_.dontdraw = false; //#9146
    $k[$j++] = $_; //#9148
    bwipp_processoptions(); //#9148
    $_.options = $k[--$j]; //#9148
    $_.barcode = $k[--$j]; //#9149
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#9154
        $k[$j++] = 'bwipp.databarstackedBadLength#9153'; //#9153
        $k[$j++] = "GS1 DataBar Stacked must be 13 or 14 digits"; //#9153
        bwipp_raiseerror(); //#9153
    } //#9153
    if ($ne($geti($_.barcode, 0, 4), "\(01\)")) { //#9157
        $k[$j++] = 'bwipp.databarstackedBadAI#9156'; //#9156
        $k[$j++] = "GS1 DataBar Stacked must begin with (01) application identifier"; //#9156
        bwipp_raiseerror(); //#9156
    } //#9156
    var _8 = $geti($_.barcode, 4, $_.barcode.length - 4); //#9158
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#9162
        var _B = $get(_8, _9); //#9162
        if ((_B < 48) || (_B > 57)) { //#9161
            $k[$j++] = 'bwipp.databarstackedBadCharacter#9160'; //#9160
            $k[$j++] = "GS1 DataBar Stacked must contain only digits"; //#9160
            bwipp_raiseerror(); //#9160
        } //#9160
    } //#9160
    $_.checksum = 0; //#9165
    for (var _C = 0; _C <= 12; _C += 1) { //#9169
        $_.i = _C; //#9167
        $k[$j++] = 'checksum'; //#9168
        $k[$j++] = $_.checksum; //#9168
        $k[$j++] = $get($_.barcode, $_.i + 4) - 48; //#9168
        if (($_.i % 2) == 0) { //#9168
            var _I = $k[--$j]; //#9168
            $k[$j++] = _I * 3; //#9168
        } //#9168
        var _J = $k[--$j]; //#9168
        var _K = $k[--$j]; //#9168
        $_[$k[--$j]] = $f(_K + _J); //#9168
    } //#9168
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#9170
    if ($_.barcode.length == 18) { //#9175
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#9174
            $k[$j++] = 'bwipp.databarstackedBadCheckDigit#9173'; //#9173
            $k[$j++] = "Incorrect GS1 DataBar Stacked check digit provided"; //#9173
            bwipp_raiseerror(); //#9173
        } //#9173
    } //#9173
    var _R = $s(18); //#9176
    $puti(_R, 0, $_.barcode); //#9177
    $put(_R, 17, $_.checksum + 48); //#9178
    $_.barcode = _R; //#9179
    $put($_.options, "dontdraw", true); //#9182
    $put($_.options, "format", "stacked"); //#9183
    $k[$j++] = 'args'; //#9185
    $k[$j++] = $_.barcode; //#9185
    $k[$j++] = $_.options; //#9185
    bwipp_databaromni(); //#9185
    var _Y = $k[--$j]; //#9185
    $_[$k[--$j]] = _Y; //#9185
    $put($_.args, "opt", $_.options); //#9187
    $k[$j++] = $_.args; //#9190
    if (!$_.dontdraw) { //#9190
        bwipp_renmatrix(); //#9190
    } //#9190
    $_ = $__; //#9192
} //bwipp_databarstacked
function bwipp_databarstackedomni() {
    var $__ = $_; //#9221
    $_ = Object.assign({}, $_); //#9221
    $_.dontdraw = false; //#9224
    $k[$j++] = $_; //#9226
    bwipp_processoptions(); //#9226
    $_.options = $k[--$j]; //#9226
    $_.barcode = $k[--$j]; //#9227
    if ($ne($geti($_.barcode, 0, 4), "\(01\)")) { //#9232
        $k[$j++] = 'bwipp.databarstackedomniBadAI#9231'; //#9231
        $k[$j++] = "GS1 DataBar Stacked Omnidirectional must begin with (01) application identifier"; //#9231
        bwipp_raiseerror(); //#9231
    } //#9231
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#9235
        $k[$j++] = 'bwipp.databarstackedomniBadLength#9234'; //#9234
        $k[$j++] = "GS1 DataBar Stacked Omnidirectional must be 13 or 14 digits"; //#9234
        bwipp_raiseerror(); //#9234
    } //#9234
    var _8 = $geti($_.barcode, 4, $_.barcode.length - 4); //#9236
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#9240
        var _B = $get(_8, _9); //#9240
        if ((_B < 48) || (_B > 57)) { //#9239
            $k[$j++] = 'bwipp.databarstackedomniBadCharacter#9238'; //#9238
            $k[$j++] = "GS1 DataBar Stacked Omnidirectional must contain only digits"; //#9238
            bwipp_raiseerror(); //#9238
        } //#9238
    } //#9238
    $_.checksum = 0; //#9243
    for (var _C = 0; _C <= 12; _C += 1) { //#9247
        $_.i = _C; //#9245
        $k[$j++] = 'checksum'; //#9246
        $k[$j++] = $_.checksum; //#9246
        $k[$j++] = $get($_.barcode, $_.i + 4) - 48; //#9246
        if (($_.i % 2) == 0) { //#9246
            var _I = $k[--$j]; //#9246
            $k[$j++] = _I * 3; //#9246
        } //#9246
        var _J = $k[--$j]; //#9246
        var _K = $k[--$j]; //#9246
        $_[$k[--$j]] = $f(_K + _J); //#9246
    } //#9246
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#9248
    if ($_.barcode.length == 18) { //#9253
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#9252
            $k[$j++] = 'bwipp.databarstackedomniBadCheckDigit#9251'; //#9251
            $k[$j++] = "Incorrect GS1 DataBar Stacked Omnidirectional check digit provided"; //#9251
            bwipp_raiseerror(); //#9251
        } //#9251
    } //#9251
    var _R = $s(18); //#9254
    $puti(_R, 0, $_.barcode); //#9255
    $put(_R, 17, $_.checksum + 48); //#9256
    $_.barcode = _R; //#9257
    $put($_.options, "dontdraw", true); //#9260
    $put($_.options, "format", "stackedomni"); //#9261
    $k[$j++] = 'args'; //#9263
    $k[$j++] = $_.barcode; //#9263
    $k[$j++] = $_.options; //#9263
    bwipp_databaromni(); //#9263
    var _Y = $k[--$j]; //#9263
    $_[$k[--$j]] = _Y; //#9263
    $put($_.args, "opt", $_.options); //#9265
    $k[$j++] = $_.args; //#9268
    if (!$_.dontdraw) { //#9268
        bwipp_renmatrix(); //#9268
    } //#9268
    $_ = $__; //#9270
} //bwipp_databarstackedomni
function bwipp_databartruncated() {
    var $__ = $_; //#9299
    $_ = Object.assign({}, $_); //#9299
    $_.dontdraw = false; //#9302
    $k[$j++] = $_; //#9304
    bwipp_processoptions(); //#9304
    $_.options = $k[--$j]; //#9304
    $_.barcode = $k[--$j]; //#9305
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#9310
        $k[$j++] = 'bwipp.databartruncatedBadLength#9309'; //#9309
        $k[$j++] = "GS1 DataBar Truncated must be 13 or 14 digits"; //#9309
        bwipp_raiseerror(); //#9309
    } //#9309
    if ($ne($geti($_.barcode, 0, 4), "\(01\)")) { //#9313
        $k[$j++] = 'bwipp.databartruncatedBadAI#9312'; //#9312
        $k[$j++] = "GS1 DataBar Truncated must begin with (01) application identifier"; //#9312
        bwipp_raiseerror(); //#9312
    } //#9312
    var _8 = $geti($_.barcode, 4, $_.barcode.length - 4); //#9314
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#9318
        var _B = $get(_8, _9); //#9318
        if ((_B < 48) || (_B > 57)) { //#9317
            $k[$j++] = 'bwipp.databartruncatedBadCharacter#9316'; //#9316
            $k[$j++] = "GS1 DataBar Truncated must contain only digits"; //#9316
            bwipp_raiseerror(); //#9316
        } //#9316
    } //#9316
    $_.checksum = 0; //#9321
    for (var _C = 0; _C <= 12; _C += 1) { //#9325
        $_.i = _C; //#9323
        $k[$j++] = 'checksum'; //#9324
        $k[$j++] = $_.checksum; //#9324
        $k[$j++] = $get($_.barcode, $_.i + 4) - 48; //#9324
        if (($_.i % 2) == 0) { //#9324
            var _I = $k[--$j]; //#9324
            $k[$j++] = _I * 3; //#9324
        } //#9324
        var _J = $k[--$j]; //#9324
        var _K = $k[--$j]; //#9324
        $_[$k[--$j]] = $f(_K + _J); //#9324
    } //#9324
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#9326
    if ($_.barcode.length == 18) { //#9331
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#9330
            $k[$j++] = 'bwipp.databartruncatedBadCheckDigit#9329'; //#9329
            $k[$j++] = "Incorrect GS1 DataBar Truncated check digit provided"; //#9329
            bwipp_raiseerror(); //#9329
        } //#9329
    } //#9329
    var _R = $s(18); //#9332
    $puti(_R, 0, $_.barcode); //#9333
    $put(_R, 17, $_.checksum + 48); //#9334
    $_.barcode = _R; //#9335
    $put($_.options, "dontdraw", true); //#9338
    $put($_.options, "format", "truncated"); //#9339
    $k[$j++] = 'args'; //#9341
    $k[$j++] = $_.barcode; //#9341
    $k[$j++] = $_.options; //#9341
    bwipp_databaromni(); //#9341
    var _Y = $k[--$j]; //#9341
    $_[$k[--$j]] = _Y; //#9341
    $put($_.args, "opt", $_.options); //#9343
    $k[$j++] = $_.args; //#9346
    if (!$_.dontdraw) { //#9346
        bwipp_renlinear(); //#9346
    } //#9346
    $_ = $__; //#9348
} //bwipp_databartruncated
function bwipp_databarlimited() {
    var $__ = $_; //#9378
    $_ = Object.assign({}, $_); //#9378
    $_.dontdraw = false; //#9381
    $_.height = 10 / 72; //#9382
    $_.linkage = false; //#9383
    $k[$j++] = $_; //#9385
    bwipp_processoptions(); //#9385
    $_.options = $k[--$j]; //#9385
    $_.barcode = $k[--$j]; //#9386
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#9393
        $k[$j++] = 'bwipp.databarlimitedBadLength#9392'; //#9392
        $k[$j++] = "GS1 DataBar Limited must be 13 or 14 digits"; //#9392
        bwipp_raiseerror(); //#9392
    } //#9392
    if ($ne($geti($_.barcode, 0, 4), "\(01\)")) { //#9396
        $k[$j++] = 'bwipp.databarlimitedBadAI#9395'; //#9395
        $k[$j++] = "GS1 DataBar Limited must begin with (01) application identifier"; //#9395
        bwipp_raiseerror(); //#9395
    } //#9395
    var _7 = $get($_.barcode, 4); //#9397
    if ((_7 < 48) || (_7 > 49)) { //#9399
        $k[$j++] = 'bwipp.databarlimitedBadStartDigit#9398'; //#9398
        $k[$j++] = "GS1 DataBar Limited must begin with 0 or 1"; //#9398
        bwipp_raiseerror(); //#9398
    } //#9398
    var _A = $geti($_.barcode, 5, $_.barcode.length - 5); //#9400
    for (var _B = 0, _C = _A.length; _B < _C; _B++) { //#9404
        var _D = $get(_A, _B); //#9404
        if ((_D < 48) || (_D > 57)) { //#9403
            $k[$j++] = 'bwipp.databarlimitedBadCharacter#9402'; //#9402
            $k[$j++] = "GS1 DataBar Limited must contain only digits"; //#9402
            bwipp_raiseerror(); //#9402
        } //#9402
    } //#9402
    $_.checksum = 0; //#9407
    for (var _E = 0; _E <= 12; _E += 1) { //#9411
        $_.i = _E; //#9409
        $k[$j++] = 'checksum'; //#9410
        $k[$j++] = $_.checksum; //#9410
        $k[$j++] = $get($_.barcode, $_.i + 4) - 48; //#9410
        if (($_.i % 2) == 0) { //#9410
            var _K = $k[--$j]; //#9410
            $k[$j++] = _K * 3; //#9410
        } //#9410
        var _L = $k[--$j]; //#9410
        var _M = $k[--$j]; //#9410
        $_[$k[--$j]] = $f(_M + _L); //#9410
    } //#9410
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#9412
    if ($_.barcode.length == 18) { //#9417
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#9416
            $k[$j++] = 'bwipp.databarlimitedBadCheckDigit#9415'; //#9415
            $k[$j++] = "Incorrect GS1 DataBar Limited check digit provided"; //#9415
            bwipp_raiseerror(); //#9415
        } //#9415
    } //#9415
    var _T = $s(18); //#9418
    $puti(_T, 0, $_.barcode); //#9419
    $put(_T, 17, $_.checksum + 48); //#9420
    $_.barcode = _T; //#9421
    $_.linkval = $a([2, 0, 1, 5, 1, 3, 3, 5, 3, 1, 0, 9, 6]); //#9425
    $k[$j++] = Infinity; //#9427
    var _Z = $geti($_.barcode, 4, 13); //#9428
    for (var _a = 0, _b = _Z.length; _a < _b; _a++) { //#9428
        $k[$j++] = $get(_Z, _a) - 48; //#9428
    } //#9428
    $_.binval = $a(); //#9428
    if ($_.linkage) { //#9435
        for (var _h = 0, _g = $_.binval.length - 1; _h <= _g; _h += 1) { //#9434
            $_.i = _h; //#9432
            $put($_.binval, $_.i, $f($get($_.binval, $_.i) + $get($_.linkval, $_.i))); //#9433
        } //#9433
    } //#9433
    $_.txt = $a($_.barcode.length); //#9438
    for (var _u = 0, _t = $_.barcode.length - 1; _u <= _t; _u += 1) { //#9442
        $_.i = _u; //#9440
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#9441
    } //#9441
    $_.ncr = function() {
        var _11 = $k[--$j]; //#9445
        var _12 = $k[--$j]; //#9445
        var _13 = $f(_12 - _11); //#9445
        if (_11 < $f(_12 - _11)) { //#9445
            var _ = _13; //#9445
            _13 = _11; //#9445
            _11 = _; //#9445
        } //#9445
        $k[$j++] = _13; //#9452
        $k[$j++] = 1; //#9452
        $k[$j++] = 1; //#9452
        for (var _15 = _12, _14 = _11 + 1; _15 >= _14; _15 -= 1) { //#9452
            var _16 = $k[--$j]; //#9448
            var _17 = $k[$j - 1]; //#9449
            var _18 = $k[$j - 2]; //#9449
            $k[$j++] = _16 * _15; //#9451
            if ($le(_17, _18)) { //#9451
                var _19 = $k[--$j]; //#9450
                var _1A = $k[--$j]; //#9450
                $k[$j++] = _1A + 1; //#9450
                $k[$j++] = ~~(_19 / _1A); //#9450
            } //#9450
        } //#9450
        for (;;) { //#9456
            var _1C = $k[$j - 2]; //#9454
            var _1D = $k[$j - 3]; //#9454
            if ($gt(_1C, _1D)) { //#9454
                break; //#9454
            } //#9454
            var _1E = $k[--$j]; //#9455
            var _1F = $k[--$j]; //#9455
            $k[$j++] = _1F + 1; //#9455
            $k[$j++] = ~~(_1E / _1F); //#9455
        } //#9455
        var _1G = $k[--$j]; //#9457
        $k[$j - 1] = _1G; //#9457
        var _1I = $k[--$j]; //#9457
        $k[$j - 1] = _1I; //#9457
    }; //#9457
    $_.getRSSwidths = function() {
        $_.oe = $k[--$j]; //#9461
        $_.el = $k[--$j]; //#9462
        $_.mw = $k[--$j]; //#9463
        $_.nm = $k[--$j]; //#9464
        $_.val = $k[--$j]; //#9465
        $_.out = $a($_.el); //#9466
        $_.mask = 0; //#9467
        for (var _1T = 0, _1S = $_.el - 2; _1T <= _1S; _1T += 1) { //#9494
            $_.bar = _1T; //#9469
            $_.ew = 1; //#9470
            var _1V = $_.bar; //#9471
            $_.mask = $_.mask | ((_1V < 0 ? 1 >>> -_1V : 1 << _1V)); //#9471
            for (;;) { //#9490
                $k[$j++] = 'sval'; //#9472
                $k[$j++] = $f($_.nm - $_.ew) - 1; //#9472
                $k[$j++] = $f($_.el - $_.bar) - 2; //#9472
                $_.ncr(); //#9472
                var _1a = $k[--$j]; //#9472
                $_[$k[--$j]] = _1a; //#9472
                if ($_.oe && $_.mask == 0 && $f($_.nm - $_.ew - $_.el * 2 + $_.bar * 2) >= -2) { //#9475
                    $k[$j++] = 'sval'; //#9474
                    $k[$j++] = $_.sval; //#9474
                    $k[$j++] = $f($_.nm - $_.ew - $_.el + $_.bar); //#9474
                    $k[$j++] = $f($_.el - $_.bar) - 2; //#9474
                    $_.ncr(); //#9474
                    var _1p = $k[--$j]; //#9474
                    var _1q = $k[--$j]; //#9474
                    $_[$k[--$j]] = $f(_1q - _1p); //#9474
                } //#9474
                if ($f($_.el - $_.bar) > 2) { //#9484
                    $_.lval = 0; //#9477
                    for (var _20 = $f($_.nm - $_.ew - $_.el + $_.bar) + 2, _1z = $_.mw + 1; _20 >= _1z; _20 -= 1) { //#9481
                        $k[$j++] = $f($_.nm - _20 - $_.ew) - 1; //#9479
                        $k[$j++] = $f($_.el - $_.bar) - 3; //#9479
                        $_.ncr(); //#9479
                        $_.lval = $f($k[--$j] + $_.lval); //#9480
                    } //#9480
                    $_.sval = $f($_.sval - $_.lval * ($_.el - $_.bar - 1)); //#9482
                } else { //#9484
                    if ($f($_.nm - $_.ew) > $_.mw) { //#9484
                        $_.sval = $_.sval - 1; //#9484
                    } //#9484
                } //#9484
                $_.val = $f($_.val - $_.sval); //#9486
                if ($_.val < 0) { //#9487
                    break; //#9487
                } //#9487
                $_.ew = $_.ew + 1; //#9488
                var _2K = $_.bar; //#9489
                $_.mask = $_.mask & (~((_2K < 0 ? 1 >>> -_2K : 1 << _2K))); //#9489
            } //#9489
            $_.val = $f($_.val + $_.sval); //#9491
            $_.nm = $f($_.nm - $_.ew); //#9492
            $put($_.out, $_.bar, $_.ew); //#9493
        } //#9493
        $put($_.out, $_.el - 1, $_.nm); //#9495
        $k[$j++] = $_.out; //#9496
    }; //#9496
    for (var _2W = 0; _2W <= 11; _2W += 1) { //#9503
        $_.i = _2W; //#9500
        var _2X = $_.binval; //#9501
        var _2Y = $_.i; //#9501
        $put(_2X, _2Y + 1, $f($get(_2X, _2Y + 1) + (($get($_.binval, $_.i) % 2013571) * 10))); //#9501
        $put($_.binval, $_.i, ~~($get($_.binval, $_.i) / 2013571)); //#9502
    } //#9502
    $_.d2 = $get($_.binval, 12) % 2013571; //#9504
    var _2k = $_.binval; //#9505
    $put(_2k, 12, ~~($get(_2k, 12) / 2013571)); //#9505
    $_.d1 = 0; //#9507
    $_.i = true; //#9508
    for (var _2m = 0; _2m <= 12; _2m += 1) { //#9518
        $_.j = _2m; //#9510
        var _2p = $get($_.binval, $_.j); //#9511
        $k[$j++] = _2p; //#9517
        if ((_2p == 0) && $_.i) { //#9516
            $j--; //#9513
        } else { //#9516
            $_.i = false; //#9515
            $k[$j++] = 'd1'; //#9516
            $k[$j++] = $_.d1; //#9516
            var _2t = $k[$j - 3]; //#9516
            var _2u = $k[$j - 1]; //#9516
            $_[$k[$j - 2]] = $f(_2u + (_2t * (~~$pow(10, 12 - $_.j)))); //#9516
            $j -= 3; //#9516
        } //#9516
    } //#9516
    $_.tab267 = $a([183063, 0, 17, 9, 6, 3, 6538, 28, 820063, 183064, 13, 13, 5, 4, 875, 728, 1000775, 820064, 9, 17, 3, 6, 28, 6454, 1491020, 1000776, 15, 11, 5, 4, 2415, 203, 1979844, 1491021, 11, 15, 4, 5, 203, 2408, 1996938, 1979845, 19, 7, 8, 1, 17094, 1, 2013570, 1996939, 7, 19, 1, 8, 1, 16632]); //#9529
    $_.i = 0; //#9532
    for (;;) { //#9542
        if ($_.d1 <= $get($_.tab267, $_.i)) { //#9540
            $aload($geti($_.tab267, $_.i + 1, 7)); //#9534
            $_.d1te = $k[--$j]; //#9535
            $_.d1to = $k[--$j]; //#9535
            $_.d1mwe = $k[--$j]; //#9536
            $_.d1mwo = $k[--$j]; //#9536
            $_.d1ele = $k[--$j]; //#9537
            $_.d1elo = $k[--$j]; //#9537
            $_.d1gs = $k[--$j]; //#9538
            break; //#9539
        } //#9539
        $_.i = $_.i + 8; //#9541
    } //#9541
    $_.i = 0; //#9544
    for (;;) { //#9554
        if ($_.d2 <= $get($_.tab267, $_.i)) { //#9552
            $aload($geti($_.tab267, $_.i + 1, 7)); //#9546
            $_.d2te = $k[--$j]; //#9547
            $_.d2to = $k[--$j]; //#9547
            $_.d2mwe = $k[--$j]; //#9548
            $_.d2mwo = $k[--$j]; //#9548
            $_.d2ele = $k[--$j]; //#9549
            $_.d2elo = $k[--$j]; //#9549
            $_.d2gs = $k[--$j]; //#9550
            break; //#9551
        } //#9551
        $_.i = $_.i + 8; //#9553
    } //#9553
    $k[$j++] = 'd1wo'; //#9556
    $k[$j++] = ~~($f($_.d1 - $_.d1gs) / $_.d1te); //#9556
    $k[$j++] = $_.d1elo; //#9556
    $k[$j++] = $_.d1mwo; //#9556
    $k[$j++] = 7; //#9556
    $k[$j++] = false; //#9556
    $_.getRSSwidths(); //#9556
    var _3X = $k[--$j]; //#9556
    $_[$k[--$j]] = _3X; //#9556
    $k[$j++] = 'd1we'; //#9557
    $k[$j++] = $f($_.d1 - $_.d1gs) % $_.d1te; //#9557
    $k[$j++] = $_.d1ele; //#9557
    $k[$j++] = $_.d1mwe; //#9557
    $k[$j++] = 7; //#9557
    $k[$j++] = true; //#9557
    $_.getRSSwidths(); //#9557
    var _3e = $k[--$j]; //#9557
    $_[$k[--$j]] = _3e; //#9557
    $k[$j++] = 'd2wo'; //#9558
    $k[$j++] = ~~($f($_.d2 - $_.d2gs) / $_.d2te); //#9558
    $k[$j++] = $_.d2elo; //#9558
    $k[$j++] = $_.d2mwo; //#9558
    $k[$j++] = 7; //#9558
    $k[$j++] = false; //#9558
    $_.getRSSwidths(); //#9558
    var _3l = $k[--$j]; //#9558
    $_[$k[--$j]] = _3l; //#9558
    $k[$j++] = 'd2we'; //#9559
    $k[$j++] = $f($_.d2 - $_.d2gs) % $_.d2te; //#9559
    $k[$j++] = $_.d2ele; //#9559
    $k[$j++] = $_.d2mwe; //#9559
    $k[$j++] = 7; //#9559
    $k[$j++] = true; //#9559
    $_.getRSSwidths(); //#9559
    var _3s = $k[--$j]; //#9559
    $_[$k[--$j]] = _3s; //#9559
    $_.d1w = $a(14); //#9561
    for (var _3v = 0; _3v <= 6; _3v += 1) { //#9566
        $_.i = _3v; //#9563
        $put($_.d1w, $_.i * 2, $get($_.d1wo, $_.i)); //#9564
        $put($_.d1w, ($_.i * 2) + 1, $get($_.d1we, $_.i)); //#9565
    } //#9565
    $_.d2w = $a(14); //#9568
    for (var _47 = 0; _47 <= 6; _47 += 1) { //#9573
        $_.i = _47; //#9570
        $put($_.d2w, $_.i * 2, $get($_.d2wo, $_.i)); //#9571
        $put($_.d2w, ($_.i * 2) + 1, $get($_.d2we, $_.i)); //#9572
    } //#9572
    $k[$j++] = Infinity; //#9575
    $aload($_.d1w); //#9576
    $aload($_.d2w); //#9577
    $_.widths = $a(); //#9577
    $_.checkweights = $a([1, 3, 9, 27, 81, 65, 17, 51, 64, 14, 42, 37, 22, 66, 20, 60, 2, 6, 18, 54, 73, 41, 34, 13, 39, 28, 84, 74]); //#9584
    $k[$j++] = Infinity; //#9586
    for (var _4M = 0; _4M <= 43; _4M += 1) { //#9587
        $k[$j++] = _4M; //#9587
    } //#9587
    $k[$j++] = 45; //#9589
    $k[$j++] = 52; //#9589
    $k[$j++] = 57; //#9589
    for (var _4N = 63; _4N <= 66; _4N += 1) { //#9589
        $k[$j++] = _4N; //#9589
    } //#9589
    for (var _4O = 73; _4O <= 79; _4O += 1) { //#9590
        $k[$j++] = _4O; //#9590
    } //#9590
    $k[$j++] = 82; //#9592
    for (var _4P = 126; _4P <= 130; _4P += 1) { //#9592
        $k[$j++] = _4P; //#9592
    } //#9592
    $k[$j++] = 132; //#9594
    for (var _4Q = 141; _4Q <= 146; _4Q += 1) { //#9594
        $k[$j++] = _4Q; //#9594
    } //#9594
    for (var _4R = 210; _4R <= 217; _4R += 1) { //#9595
        $k[$j++] = _4R; //#9595
    } //#9595
    $k[$j++] = 220; //#9597
    for (var _4S = 316; _4S <= 320; _4S += 1) { //#9597
        $k[$j++] = _4S; //#9597
    } //#9597
    $k[$j++] = 322; //#9599
    $k[$j++] = 323; //#9599
    $k[$j++] = 326; //#9599
    $k[$j++] = 337; //#9599
    $_.checkseq = $a(); //#9599
    $_.checksum = 0; //#9603
    for (var _4V = 0; _4V <= 27; _4V += 1) { //#9607
        $_.i = _4V; //#9605
        $_.checksum = $f($_.checksum + ($get($_.widths, $_.i) * $get($_.checkweights, $_.i))); //#9606
    } //#9606
    $_.checksum = $_.checksum % 89; //#9608
    $_.seq = $get($_.checkseq, $_.checksum); //#9609
    $k[$j++] = 'swidths'; //#9610
    $k[$j++] = ~~($_.seq / 21); //#9610
    $k[$j++] = 8; //#9610
    $k[$j++] = 3; //#9610
    $k[$j++] = 6; //#9610
    $k[$j++] = false; //#9610
    $_.getRSSwidths(); //#9610
    var _4i = $k[--$j]; //#9610
    $_[$k[--$j]] = _4i; //#9610
    $k[$j++] = 'bwidths'; //#9611
    $k[$j++] = $_.seq % 21; //#9611
    $k[$j++] = 8; //#9611
    $k[$j++] = 3; //#9611
    $k[$j++] = 6; //#9611
    $k[$j++] = false; //#9611
    $_.getRSSwidths(); //#9611
    var _4l = $k[--$j]; //#9611
    $_[$k[--$j]] = _4l; //#9611
    $_.checkwidths = $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]); //#9613
    for (var _4o = 0; _4o <= 5; _4o += 1) { //#9618
        $_.i = _4o; //#9615
        $put($_.checkwidths, $_.i * 2, $get($_.swidths, $_.i)); //#9616
        $put($_.checkwidths, ($_.i * 2) + 1, $get($_.bwidths, $_.i)); //#9617
    } //#9617
    $k[$j++] = Infinity; //#9620
    $k[$j++] = 1; //#9622
    $aload($_.d1w); //#9622
    $aload($_.checkwidths); //#9623
    $aload($_.d2w); //#9624
    $k[$j++] = 1; //#9625
    $k[$j++] = 1; //#9625
    $k[$j++] = 5; //#9625
    $_.sbs = $a(); //#9625
    $k[$j++] = Infinity; //#9629
    var _53 = $_.sbs; //#9631
    $k[$j++] = Infinity; //#9632
    for (var _55 = 0, _56 = ~~(($_.sbs.length + 1) / 2); _55 < _56; _55++) { //#9632
        $k[$j++] = $_.height; //#9632
    } //#9632
    var _58 = $a(); //#9632
    $k[$j++] = Infinity; //#9633
    for (var _5A = 0, _5B = ~~(($_.sbs.length + 1) / 2); _5A < _5B; _5A++) { //#9633
        $k[$j++] = 0; //#9633
    } //#9633
    var _5C = $a(); //#9633
    $k[$j++] = 'ren'; //#9638
    $k[$j++] = 'renlinear'; //#9638
    $k[$j++] = 'sbs'; //#9638
    $k[$j++] = _53; //#9638
    $k[$j++] = 'bhs'; //#9638
    $k[$j++] = _58; //#9638
    $k[$j++] = 'bbs'; //#9638
    $k[$j++] = _5C; //#9638
    $k[$j++] = 'txt'; //#9638
    $k[$j++] = $_.txt; //#9638
    $k[$j++] = 'textxalign'; //#9638
    $k[$j++] = "center"; //#9638
    $k[$j++] = 'borderleft'; //#9638
    $k[$j++] = 0; //#9638
    $k[$j++] = 'borderright'; //#9638
    $k[$j++] = 0; //#9638
    $k[$j++] = 'opt'; //#9638
    $k[$j++] = $_.options; //#9638
    var _5F = $d(); //#9638
    $k[$j++] = _5F; //#9641
    if (!$_.dontdraw) { //#9641
        bwipp_renlinear(); //#9641
    } //#9641
    $_ = $__; //#9645
} //bwipp_databarlimited
function bwipp_databarexpanded() {
    var $__ = $_; //#9677
    $_ = Object.assign({}, $_); //#9677
    $_.parse = false; //#9680
    $_.dontlint = false; //#9681
    $_.lintreqs = true; //#9682
    $_.dontdraw = false; //#9683
    $_.height = 34 / 72; //#9684
    $_.format = "expanded"; //#9685
    $_.segments = -1; //#9686
    $_.linkage = false; //#9687
    $_.barxmult = 34; //#9688
    $k[$j++] = $_; //#9690
    bwipp_processoptions(); //#9690
    $_.options = $k[--$j]; //#9690
    $_.barcode = $k[--$j]; //#9691
    if ($_.barxmult < 34) { //#9697
        $k[$j++] = 'bwipp.databarStackedOmniBarXmult#9696'; //#9696
        $k[$j++] = "GS1 DataBar Expanded Stacked must have a barxmult of at least 34"; //#9696
        bwipp_raiseerror(); //#9696
    } //#9696
    if ($ne($_.format, "expanded") && $ne($_.format, "expandedstacked")) { //#9701
        $k[$j++] = 'bwipp.databarexpandedBadFormat#9700'; //#9700
        $k[$j++] = "Valid formats are expanded and expandedstacked"; //#9700
        bwipp_raiseerror(); //#9700
    } //#9700
    if ($_.segments == -1) { //#9707
        var _7 = $eq($_.format, "expandedstacked") ? 4 : 22; //#9704
        $_.segments = _7; //#9704
    } else { //#9707
        if ((($_.segments < 2) || ($_.segments > 22)) || (($_.segments % 2) != 0)) { //#9708
            $k[$j++] = 'bwipp.gs1databarexpandedBadSegments#9707'; //#9707
            $k[$j++] = "The number of segments must be even from 2 to 22"; //#9707
            bwipp_raiseerror(); //#9707
        } //#9707
    } //#9707
    $k[$j++] = $_.barcode; //#9711
    $k[$j++] = 'ai'; //#9711
    bwipp_gs1process(); //#9711
    $_.fncs = $k[--$j]; //#9712
    $_.vals = $k[--$j]; //#9713
    $_.ais = $k[--$j]; //#9714
    for (;;) { //#9802
        if ($_.ais.length == 2) { //#9726
            if ($eq($get($_.ais, 0), "01") && $eq($get($_.ais, 1), "3103")) { //#9725
                if ($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 32767)) { //#9724
                    $k[$j++] = "0100"; //#9723
                    $k[$j++] = false; //#9723
                    break; //#9723
                } //#9723
            } //#9723
        } //#9723
        if ($_.ais.length == 2) { //#9735
            if ($eq($get($_.ais, 0), "01") && $eq($get($_.ais, 1), "3202")) { //#9734
                if ($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 9999)) { //#9733
                    $k[$j++] = "0101"; //#9732
                    $k[$j++] = false; //#9732
                    break; //#9732
                } //#9732
            } //#9732
        } //#9732
        if ($_.ais.length == 2) { //#9744
            if ($eq($get($_.ais, 0), "01") && $eq($get($_.ais, 1), "3203")) { //#9743
                if ($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 22767)) { //#9742
                    $k[$j++] = "0101"; //#9741
                    $k[$j++] = false; //#9741
                    break; //#9741
                } //#9741
            } //#9741
        } //#9741
        var _k = $_.ais.length; //#9747
        if ((_k == 2) || (_k == 3)) { //#9778
            $k[$j++] = 'ai310x'; //#9748
            $k[$j++] = false; //#9748
            for (var _l = 3100; _l <= 3109; _l += 1) { //#9748
                var _q = $k[--$j]; //#9748
                $k[$j++] = _q || $eq($cvrs($s(4), _l, 10), $get($_.ais, 1)); //#9748
            } //#9748
            var _r = $k[--$j]; //#9748
            $_[$k[--$j]] = _r; //#9748
            $k[$j++] = 'ai320x'; //#9749
            $k[$j++] = false; //#9749
            for (var _t = 3200; _t <= 3209; _t += 1) { //#9749
                var _y = $k[--$j]; //#9749
                $k[$j++] = _y || $eq($cvrs($s(4), _t, 10), $get($_.ais, 1)); //#9749
            } //#9749
            var _z = $k[--$j]; //#9749
            $_[$k[--$j]] = _z; //#9749
            if ($_.ais.length == 3) { //#9753
                var _12 = $a(["11", "13", "15", "17"]); //#9751
                $k[$j++] = 'aibad'; //#9751
                $k[$j++] = true; //#9751
                for (var _13 = 0, _14 = _12.length; _13 < _14; _13++) { //#9751
                    var _18 = $k[--$j]; //#9751
                    $k[$j++] = _18 && $ne($get(_12, _13), $get($_.ais, 2)); //#9751
                } //#9751
                var _19 = $k[--$j]; //#9751
                $_[$k[--$j]] = _19; //#9751
            } else { //#9753
                $_.aibad = false; //#9753
            } //#9753
            if ($eq($get($_.ais, 0), "01") && ($_.ai310x || $_.ai320x) && !$_.aibad) { //#9777
                if ($_.ais.length == 3) { //#9774
                    var _1P = $cvi($geti($get($_.vals, 2), 2, 2)); //#9759
                    var _1T = $cvi($geti($get($_.vals, 2), 4, 2)); //#9760
                    if ((($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 99999)) && ((_1P >= 1) && (_1P <= 12))) && ((_1T >= 0) && (_1T <= 31))) { //#9769
                        if ($_.ai310x && $eq($get($_.ais, 2), "11")) { //#9761
                            $k[$j++] = "0111000"; //#9761
                            $k[$j++] = false; //#9761
                            break; //#9761
                        } //#9761
                        if ($_.ai320x && $eq($get($_.ais, 2), "11")) { //#9762
                            $k[$j++] = "0111001"; //#9762
                            $k[$j++] = false; //#9762
                            break; //#9762
                        } //#9762
                        if ($_.ai310x && $eq($get($_.ais, 2), "13")) { //#9763
                            $k[$j++] = "0111010"; //#9763
                            $k[$j++] = false; //#9763
                            break; //#9763
                        } //#9763
                        if ($_.ai320x && $eq($get($_.ais, 2), "13")) { //#9764
                            $k[$j++] = "0111011"; //#9764
                            $k[$j++] = false; //#9764
                            break; //#9764
                        } //#9764
                        if ($_.ai310x && $eq($get($_.ais, 2), "15")) { //#9765
                            $k[$j++] = "0111100"; //#9765
                            $k[$j++] = false; //#9765
                            break; //#9765
                        } //#9765
                        if ($_.ai320x && $eq($get($_.ais, 2), "15")) { //#9766
                            $k[$j++] = "0111101"; //#9766
                            $k[$j++] = false; //#9766
                            break; //#9766
                        } //#9766
                        if ($_.ai310x && $eq($get($_.ais, 2), "17")) { //#9767
                            $k[$j++] = "0111110"; //#9767
                            $k[$j++] = false; //#9767
                            break; //#9767
                        } //#9767
                        if ($_.ai320x && $eq($get($_.ais, 2), "17")) { //#9768
                            $k[$j++] = "0111111"; //#9768
                            $k[$j++] = false; //#9768
                            break; //#9768
                        } //#9768
                    } //#9768
                } else { //#9774
                    if ($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 99999)) { //#9775
                        if ($_.ai310x) { //#9773
                            $k[$j++] = "0111000"; //#9773
                            $k[$j++] = false; //#9773
                            break; //#9773
                        } //#9773
                        if ($_.ai320x) { //#9774
                            $k[$j++] = "0111001"; //#9774
                            $k[$j++] = false; //#9774
                            break; //#9774
                        } //#9774
                    } //#9774
                } //#9774
            } //#9774
        } //#9774
        if ($_.ais.length >= 2) { //#9786
            $k[$j++] = 'ai392x'; //#9782
            $k[$j++] = false; //#9782
            for (var _20 = 3920; _20 <= 3923; _20 += 1) { //#9782
                var _25 = $k[--$j]; //#9782
                $k[$j++] = _25 || $eq($cvrs($s(4), _20, 10), $get($_.ais, 1)); //#9782
            } //#9782
            var _26 = $k[--$j]; //#9782
            $_[$k[--$j]] = _26; //#9782
            if ($eq($get($_.ais, 0), "01") && $_.ai392x) { //#9785
                if ($eq($geti($get($_.vals, 0), 0, 1), "9")) { //#9784
                    $k[$j++] = "01100"; //#9784
                    $k[$j++] = true; //#9784
                    break; //#9784
                } //#9784
            } //#9784
        } //#9784
        if ($_.ais.length >= 2) { //#9794
            $k[$j++] = 'ai393x'; //#9790
            $k[$j++] = false; //#9790
            for (var _2F = 3930; _2F <= 3933; _2F += 1) { //#9790
                var _2K = $k[--$j]; //#9790
                $k[$j++] = _2K || $eq($cvrs($s(4), _2F, 10), $get($_.ais, 1)); //#9790
            } //#9790
            var _2L = $k[--$j]; //#9790
            $_[$k[--$j]] = _2L; //#9790
            if ($eq($get($_.ais, 0), "01") && $_.ai393x) { //#9793
                if ($eq($geti($get($_.vals, 0), 0, 1), "9")) { //#9792
                    $k[$j++] = "01101"; //#9792
                    $k[$j++] = true; //#9792
                    break; //#9792
                } //#9792
            } //#9792
        } //#9792
        if ($eq($get($_.ais, 0), "01")) { //#9797
            $k[$j++] = "1"; //#9797
            $k[$j++] = true; //#9797
            break; //#9797
        } //#9797
        $k[$j++] = "00"; //#9800
        $k[$j++] = true; //#9800
        break; //#9800
    } //#9800
    $_.gpfallow = $k[--$j]; //#9803
    $_.method = $k[--$j]; //#9804
    $_.conv12to40 = function() {
        var _2Y = $strcpy($s(40), "0000000000000000000000000000000000000000"); //#9807
        var _2Z = $k[--$j]; //#9808
        var _2d = $cvrs($s(10), $cvi($geti(_2Z, 0, 3)), 2); //#9808
        $puti($geti(_2Y, 0, 10), 10 - _2d.length, _2d); //#9808
        var _2h = $cvrs($s(10), $cvi($geti(_2Z, 3, 3)), 2); //#9809
        $puti($geti(_2Y, 10, 10), 10 - _2h.length, _2h); //#9809
        var _2l = $cvrs($s(10), $cvi($geti(_2Z, 6, 3)), 2); //#9810
        $puti($geti(_2Y, 20, 10), 10 - _2l.length, _2l); //#9810
        var _2p = $cvrs($s(10), $cvi($geti(_2Z, 9, 3)), 2); //#9811
        $puti($geti(_2Y, 30, 10), 10 - _2p.length, _2p); //#9811
        $k[$j++] = _2Y; //#9812
    }; //#9812
    $_.conv13to44 = function() {
        var _2r = $strcpy($s(44), "00000000000000000000000000000000000000000000"); //#9816
        var _2s = $k[--$j]; //#9817
        var _2w = $cvrs($s(4), $cvi($geti(_2s, 0, 1)), 2); //#9817
        $puti($geti(_2r, 0, 4), 4 - _2w.length, _2w); //#9817
        $k[$j++] = _2r; //#9818
        $k[$j++] = _2r; //#9818
        $k[$j++] = $geti(_2s, 1, 12); //#9818
        $_.conv12to40(); //#9818
        var _2y = $k[--$j]; //#9818
        $puti($k[--$j], 4, _2y); //#9818
    }; //#9818
    $_.tobin = function() {
        var _31 = $s($k[--$j]); //#9822
        $k[$j++] = _31; //#9822
        for (var _33 = 0, _32 = _31.length - 1; _33 <= _32; _33 += 1) { //#9822
            var _34 = $k[$j - 1]; //#9822
            $put(_34, _33, 48); //#9822
        } //#9822
        var _35 = $k[$j - 1]; //#9823
        $k[$j++] = _35; //#9823
        var _36 = $k[$j - 3]; //#9823
        var _37 = $k[$j - 1]; //#9823
        $k[$j - 3] = $k[$j - 2]; //#9823
        $j -= 2; //#9823
        var _39 = $cvrs($s(_37.length), _36, 2); //#9823
        $puti(_37, _37.length - _39.length, _39); //#9823
    }; //#9823
    $_.fnc1 = -1; //#9826
    $_.lnumeric = -2; //#9826
    $_.lalphanumeric = -3; //#9826
    $_.liso646 = -4; //#9826
    if ($eq($_.method, "00")) { //#9831
        $_.cdf = $a([]); //#9829
        $_.gpf = $a([]); //#9830
    } //#9830
    if ($eq($_.method, "1")) { //#9840
        $k[$j++] = 'cdf'; //#9834
        $k[$j++] = $geti($get($_.vals, 0), 0, 13); //#9834
        $_.conv13to44(); //#9834
        var _3H = $k[--$j]; //#9834
        $_[$k[--$j]] = _3H; //#9834
        $k[$j++] = Infinity; //#9835
        var _3J = $_.cdf; //#9835
        for (var _3K = 0, _3L = _3J.length; _3K < _3L; _3K++) { //#9835
            $k[$j++] = $get(_3J, _3K) - 48; //#9835
        } //#9835
        $_.cdf = $a(); //#9835
        $_.gpf = $a([]); //#9836
        $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#9837
        $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#9838
        $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#9839
    } //#9839
    if ($eq($_.method, "0100")) { //#9851
        $_.cdf = $s(55); //#9843
        $k[$j++] = $_.cdf; //#9844
        $k[$j++] = 0; //#9844
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9844
        $_.conv12to40(); //#9844
        var _3e = $k[--$j]; //#9844
        var _3f = $k[--$j]; //#9844
        $puti($k[--$j], _3f, _3e); //#9844
        $k[$j++] = $_.cdf; //#9845
        $k[$j++] = 40; //#9845
        $k[$j++] = $cvi($get($_.vals, 1)); //#9845
        $k[$j++] = 15; //#9845
        $_.tobin(); //#9845
        var _3k = $k[--$j]; //#9845
        var _3l = $k[--$j]; //#9845
        $puti($k[--$j], _3l, _3k); //#9845
        $k[$j++] = Infinity; //#9846
        var _3n = $_.cdf; //#9846
        for (var _3o = 0, _3p = _3n.length; _3o < _3p; _3o++) { //#9846
            $k[$j++] = $get(_3n, _3o) - 48; //#9846
        } //#9846
        $_.cdf = $a(); //#9846
        $_.gpf = $a([]); //#9847
        $_.ais = $a([]); //#9848
        $_.vals = $a([]); //#9849
        $_.fncs = $a([]); //#9850
    } //#9850
    if ($eq($_.method, "0101")) { //#9867
        $_.cdf = $s(55); //#9854
        $k[$j++] = $_.cdf; //#9855
        $k[$j++] = 0; //#9855
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9855
        $_.conv12to40(); //#9855
        var _42 = $k[--$j]; //#9855
        var _43 = $k[--$j]; //#9855
        $puti($k[--$j], _43, _42); //#9855
        if ($eq($get($_.ais, 1), "3202")) { //#9859
            $k[$j++] = $cvi($get($_.vals, 1)); //#9857
            $k[$j++] = 15; //#9857
            $_.tobin(); //#9857
        } else { //#9859
            $k[$j++] = $cvi($get($_.vals, 1)) + 10000; //#9859
            $k[$j++] = 15; //#9859
            $_.tobin(); //#9859
        } //#9859
        $puti($_.cdf, 40, $k[--$j]); //#9861
        $k[$j++] = Infinity; //#9862
        var _4D = $_.cdf; //#9862
        for (var _4E = 0, _4F = _4D.length; _4E < _4F; _4E++) { //#9862
            $k[$j++] = $get(_4D, _4E) - 48; //#9862
        } //#9862
        $_.cdf = $a(); //#9862
        $_.gpf = $a([]); //#9863
        $_.ais = $a([]); //#9864
        $_.vals = $a([]); //#9865
        $_.fncs = $a([]); //#9866
    } //#9866
    if ($_.method.length == 7) { //#9889
        $_.cdf = $s(76); //#9870
        $k[$j++] = $_.cdf; //#9871
        $k[$j++] = 0; //#9871
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9871
        $_.conv12to40(); //#9871
        var _4S = $k[--$j]; //#9871
        var _4T = $k[--$j]; //#9871
        $puti($k[--$j], _4T, _4S); //#9871
        var _4V = $s(6); //#9872
        $puti(_4V, 0, $geti($get($_.ais, 1), 3, 1)); //#9872
        $puti(_4V, 1, $geti($get($_.vals, 1), 1, 5)); //#9873
        $k[$j++] = $cvi(_4V); //#9873
        $k[$j++] = 20; //#9873
        $_.tobin(); //#9873
        $puti($_.cdf, 40, $k[--$j]); //#9874
        if ($_.ais.length == 3) { //#9881
            var _4g = $get($_.vals, 2); //#9876
            $k[$j++] = ($cvi($geti(_4g, 0, 2)) * 384) + ((($cvi($geti(_4g, 2, 2)) - 1) * 32) + $cvi($geti(_4g, 4, 2))); //#9879
        } else { //#9881
            $k[$j++] = 38400; //#9881
        } //#9881
        $k[$j++] = 16; //#9883
        $_.tobin(); //#9883
        $puti($_.cdf, 60, $k[--$j]); //#9883
        $k[$j++] = Infinity; //#9884
        var _4m = $_.cdf; //#9884
        for (var _4n = 0, _4o = _4m.length; _4n < _4o; _4n++) { //#9884
            $k[$j++] = $get(_4m, _4n) - 48; //#9884
        } //#9884
        $_.cdf = $a(); //#9884
        $_.gpf = $a([]); //#9885
        $_.ais = $a([]); //#9886
        $_.vals = $a([]); //#9887
        $_.fncs = $a([]); //#9888
    } //#9888
    if ($eq($_.method, "01100")) { //#9900
        $_.cdf = $s(42); //#9892
        $k[$j++] = $_.cdf; //#9893
        $k[$j++] = 0; //#9893
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9893
        $_.conv12to40(); //#9893
        var _51 = $k[--$j]; //#9893
        var _52 = $k[--$j]; //#9893
        $puti($k[--$j], _52, _51); //#9893
        $k[$j++] = $_.cdf; //#9894
        $k[$j++] = 40; //#9894
        $k[$j++] = $cvi($geti($get($_.ais, 1), 3, 1)); //#9894
        $k[$j++] = 2; //#9894
        $_.tobin(); //#9894
        var _58 = $k[--$j]; //#9894
        var _59 = $k[--$j]; //#9894
        $puti($k[--$j], _59, _58); //#9894
        $k[$j++] = Infinity; //#9895
        var _5B = $_.cdf; //#9895
        for (var _5C = 0, _5D = _5B.length; _5C < _5D; _5C++) { //#9895
            $k[$j++] = $get(_5B, _5C) - 48; //#9895
        } //#9895
        $_.cdf = $a(); //#9895
        $k[$j++] = Infinity; //#9896
        $forall($get($_.vals, 1)); //#9896
        if ($_.ais.length > 2) { //#9896
            $k[$j++] = $_.fnc1; //#9896
        } //#9896
        $_.gpf = $a(); //#9896
        $_.ais = $geti($_.ais, 2, $_.ais.length - 2); //#9897
        $_.vals = $geti($_.vals, 2, $_.vals.length - 2); //#9898
        $_.fncs = $geti($_.fncs, 2, $_.fncs.length - 2); //#9899
    } //#9899
    if ($eq($_.method, "01101")) { //#9912
        $_.cdf = $s(52); //#9903
        $k[$j++] = $_.cdf; //#9904
        $k[$j++] = 0; //#9904
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9904
        $_.conv12to40(); //#9904
        var _5a = $k[--$j]; //#9904
        var _5b = $k[--$j]; //#9904
        $puti($k[--$j], _5b, _5a); //#9904
        $k[$j++] = $_.cdf; //#9905
        $k[$j++] = 40; //#9905
        $k[$j++] = $cvi($geti($get($_.ais, 1), 3, 1)); //#9905
        $k[$j++] = 2; //#9905
        $_.tobin(); //#9905
        var _5h = $k[--$j]; //#9905
        var _5i = $k[--$j]; //#9905
        $puti($k[--$j], _5i, _5h); //#9905
        $k[$j++] = $_.cdf; //#9906
        $k[$j++] = 42; //#9906
        $k[$j++] = $cvi($geti($get($_.vals, 1), 0, 3)); //#9906
        $k[$j++] = 10; //#9906
        $_.tobin(); //#9906
        var _5o = $k[--$j]; //#9906
        var _5p = $k[--$j]; //#9906
        $puti($k[--$j], _5p, _5o); //#9906
        $k[$j++] = Infinity; //#9907
        var _5r = $_.cdf; //#9907
        for (var _5s = 0, _5t = _5r.length; _5s < _5t; _5s++) { //#9907
            $k[$j++] = $get(_5r, _5s) - 48; //#9907
        } //#9907
        $_.cdf = $a(); //#9907
        $k[$j++] = Infinity; //#9908
        var _5x = $get($_.vals, 1); //#9908
        var _5y = $geti(_5x, 3, _5x.length - 3); //#9908
        for (var _5z = 0, _60 = _5y.length; _5z < _60; _5z++) { //#9908
            $k[$j++] = $get(_5y, _5z); //#9908
        } //#9908
        if ($_.ais.length > 2) { //#9908
            $k[$j++] = $_.fnc1; //#9908
        } //#9908
        $_.gpf = $a(); //#9908
        $_.ais = $geti($_.ais, 2, $_.ais.length - 2); //#9909
        $_.vals = $geti($_.vals, 2, $_.vals.length - 2); //#9910
        $_.fncs = $geti($_.fncs, 2, $_.fncs.length - 2); //#9911
    } //#9911
    if ($_.gpfallow) { //#9918
        $_.vlf = $a(2); //#9916
    } else { //#9918
        $_.vlf = $a([]); //#9918
    } //#9918
    $k[$j++] = Infinity; //#9922
    for (var _6H = 0; _6H <= 119; _6H += 1) { //#9931
        var _6J = $strcpy($s(2), "00"); //#9924
        var _6L = $cvrs($s(2), _6H, 11); //#9924
        $puti(_6J, 2 - _6L.length, _6L); //#9925
        $k[$j++] = _6H; //#9926
        $k[$j++] = _6J; //#9926
        if ($get(_6J, 0) == 65) { //#9926
            var _6N = $k[$j - 1]; //#9926
            $put(_6N, 0, 94); //#9926
        } //#9926
        var _6O = $k[$j - 1]; //#9927
        if ($get(_6O, 1) == 65) { //#9927
            var _6Q = $k[$j - 1]; //#9927
            $put(_6Q, 1, 94); //#9927
        } //#9927
        var _6R = $k[--$j]; //#9928
        var _6U = $strcpy($s(7), "0000000"); //#9929
        var _6W = $cvrs($s(7), $k[--$j] + 8, 2); //#9929
        $puti(_6U, 7 - _6W.length, _6W); //#9930
        $k[$j++] = _6R; //#9930
        $k[$j++] = _6U; //#9930
    } //#9930
    $k[$j++] = $_.lalphanumeric; //#9932
    $k[$j++] = "0000"; //#9932
    $_.numeric = $d(); //#9933
    $k[$j++] = Infinity; //#9935
    for (var _6Z = 48; _6Z <= 57; _6Z += 1) { //#9936
        $k[$j++] = _6Z; //#9936
        $k[$j++] = _6Z - 43; //#9936
        $k[$j++] = 5; //#9936
        $_.tobin(); //#9936
    } //#9936
    $k[$j++] = $_.fnc1; //#9938
    $k[$j++] = "01111"; //#9938
    for (var _6b = 65; _6b <= 90; _6b += 1) { //#9938
        $k[$j++] = _6b; //#9938
        $k[$j++] = _6b - 33; //#9938
        $k[$j++] = 6; //#9938
        $_.tobin(); //#9938
    } //#9938
    $k[$j++] = 42; //#9940
    $k[$j++] = "111010"; //#9940
    for (var _6c = 44; _6c <= 47; _6c += 1) { //#9940
        $k[$j++] = _6c; //#9940
        $k[$j++] = _6c + 15; //#9940
        $k[$j++] = 6; //#9940
        $_.tobin(); //#9940
    } //#9940
    $k[$j++] = $_.lnumeric; //#9942
    $k[$j++] = "000"; //#9942
    $k[$j++] = $_.liso646; //#9942
    $k[$j++] = "00100"; //#9942
    $_.alphanumeric = $d(); //#9943
    $k[$j++] = Infinity; //#9945
    for (var _6g = 48; _6g <= 57; _6g += 1) { //#9946
        $k[$j++] = _6g; //#9946
        $k[$j++] = _6g - 43; //#9946
        $k[$j++] = 5; //#9946
        $_.tobin(); //#9946
    } //#9946
    $k[$j++] = $_.fnc1; //#9948
    $k[$j++] = "01111"; //#9948
    for (var _6i = 65; _6i <= 90; _6i += 1) { //#9948
        $k[$j++] = _6i; //#9948
        $k[$j++] = _6i - 1; //#9948
        $k[$j++] = 7; //#9948
        $_.tobin(); //#9948
    } //#9948
    for (var _6j = 97; _6j <= 122; _6j += 1) { //#9949
        $k[$j++] = _6j; //#9949
        $k[$j++] = _6j - 7; //#9949
        $k[$j++] = 7; //#9949
        $_.tobin(); //#9949
    } //#9949
    $k[$j++] = 33; //#9952
    $k[$j++] = "11101000"; //#9952
    $k[$j++] = 34; //#9952
    $k[$j++] = "11101001"; //#9952
    for (var _6k = 37; _6k <= 47; _6k += 1) { //#9952
        $k[$j++] = _6k; //#9952
        $k[$j++] = _6k + 197; //#9952
        $k[$j++] = 8; //#9952
        $_.tobin(); //#9952
    } //#9952
    for (var _6l = 58; _6l <= 63; _6l += 1) { //#9953
        $k[$j++] = _6l; //#9953
        $k[$j++] = _6l + 187; //#9953
        $k[$j++] = 8; //#9953
        $_.tobin(); //#9953
    } //#9953
    $k[$j++] = 95; //#9957
    $k[$j++] = "11111011"; //#9957
    $k[$j++] = 32; //#9957
    $k[$j++] = "11111100"; //#9957
    $k[$j++] = $_.lnumeric; //#9957
    $k[$j++] = "000"; //#9957
    $k[$j++] = $_.lalphanumeric; //#9957
    $k[$j++] = "00100"; //#9957
    $_.iso646 = $d(); //#9958
    for (var _6s = 0, _6r = $_.ais.length - 1; _6s <= _6r; _6s += 1) { //#9977
        $_.i = _6s; //#9963
        $_.ai = $get($_.ais, $_.i); //#9964
        $_.val = $get($_.vals, $_.i); //#9965
        var _72 = $a(($_.gpf.length + $_.ai.length) + $_.val.length); //#9966
        $puti(_72, 0, $_.gpf); //#9967
        $k[$j++] = _72; //#9968
        $k[$j++] = _72; //#9968
        $k[$j++] = $_.gpf.length; //#9968
        var _76 = Infinity; //#9968
        var _77 = $_.ai; //#9968
        $k[$j++] = _76; //#9968
        $forall(_77); //#9968
        var _78 = $a(); //#9968
        var _79 = $k[--$j]; //#9968
        $puti($k[--$j], _79, _78); //#9968
        var _7B = $k[$j - 1]; //#9969
        $k[$j++] = _7B; //#9969
        $k[$j++] = $_.gpf.length + $_.ai.length; //#9969
        var _7F = Infinity; //#9969
        var _7G = $_.val; //#9969
        $k[$j++] = _7F; //#9969
        $forall(_7G); //#9969
        var _7H = $a(); //#9969
        var _7I = $k[--$j]; //#9969
        $puti($k[--$j], _7I, _7H); //#9969
        $_.gpf = $k[--$j]; //#9970
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#9976
            var _7R = $a($_.gpf.length + 1); //#9972
            $puti(_7R, 0, $_.gpf); //#9973
            $put(_7R, $_.gpf.length, $_.fnc1); //#9974
            $_.gpf = _7R; //#9975
        } //#9975
    } //#9975
    $_.rembits = function() {
        var _7V = $k[--$j]; //#9981
        var _7W = 48; //#9983
        var _7X = (~~$ceil(_7V / 12)) * 12; //#9983
        if (((~~$ceil(_7V / 12)) * 12) < 48) { //#9983
            var _ = _7W; //#9983
            _7W = _7X; //#9983
            _7X = _; //#9983
        } //#9983
        var _7Y = ~~(_7X / 12); //#9984
        $k[$j++] = _7V; //#9988
        $k[$j++] = _7X; //#9988
        $k[$j++] = _7Y; //#9988
        if ((_7Y % $_.segments) == 1) { //#9987
            var _7a = $k[--$j]; //#9985
            $k[$j - 1] = (_7a + 1) * 12; //#9985
        } else { //#9987
            $j--; //#9987
        } //#9987
        var _7c = $k[--$j]; //#9989
        var _7d = $k[--$j]; //#9989
        $k[$j++] = $f(_7c - _7d); //#9989
    }; //#9989
    $_.encode = function() {
        var _7e = $k[$j - 1]; //#9993
        if ($ne(_7e, 'raw')) { //#9993
            var _7f = $k[--$j]; //#9993
            var _7h = $get(_7f, $k[--$j]); //#9993
            $k[$j++] = _7h; //#9993
        } else { //#9993
            $j--; //#9993
        } //#9993
        var _7i = $k[$j - 1]; //#9994
        if ((_7i.length + $_.j) >= 252) { //#9996
            $j--; //#9995
            $k[$j++] = 'bwipp.gs1databarexpandedTooLong#9995'; //#9995
            $k[$j++] = "Maximum length exceeded"; //#9995
            bwipp_raiseerror(); //#9995
        } //#9995
        $k[$j++] = Infinity; //#9997
        var _7k = $k[--$j]; //#9997
        var _7l = $k[--$j]; //#9997
        $k[$j++] = _7k; //#9997
        $forall(_7l, function() { //#9997
            var _7m = $k[--$j]; //#9997
            $k[$j++] = _7m - 48; //#9997
        }); //#9997
        var _7n = $a(); //#9997
        $puti($_.gpfenc, $_.j, _7n); //#9999
        $_.j = _7n.length + $_.j; //#10000
    }; //#10000
    $k[$j++] = Infinity; //#10004
    for (var _7s = 0, _7t = $_.gpf.length; _7s < _7t; _7s++) { //#10004
        $k[$j++] = 0; //#10004
    } //#10004
    $k[$j++] = 0; //#10004
    $k[$j++] = -1; //#10004
    $_.numericruns = $a(); //#10004
    $k[$j++] = Infinity; //#10005
    for (var _7w = 0, _7x = $_.gpf.length; _7w < _7x; _7w++) { //#10005
        $k[$j++] = 0; //#10005
    } //#10005
    $k[$j++] = 0; //#10005
    $_.alphanumericruns = $a(); //#10005
    $k[$j++] = Infinity; //#10006
    for (var _80 = 0, _81 = $_.gpf.length; _80 < _81; _80++) { //#10006
        $k[$j++] = 0; //#10006
    } //#10006
    $k[$j++] = 9999; //#10006
    $_.nextiso646only = $a(); //#10006
    for (var _84 = $_.gpf.length - 1; _84 >= 0; _84 -= 1) { //#10028
        $_.i = _84; //#10008
        var _89 = $strcpy($s(2), "00"); //#10010
        var _8C = $get($_.gpf, $_.i); //#10011
        $k[$j++] = $get($_.gpf, $_.i); //#10011
        $k[$j++] = _89; //#10011
        $k[$j++] = _89; //#10011
        $k[$j++] = 0; //#10011
        $k[$j++] = _8C; //#10011
        if (_8C == $_.fnc1) { //#10011
            $k[$j - 1] = 94; //#10011
        } //#10011
        var _8E = $k[--$j]; //#10011
        var _8F = $k[--$j]; //#10011
        $put($k[--$j], _8F, _8E); //#10011
        if ($_.i < ($_.gpf.length - 1)) { //#10012
            var _8J = $k[$j - 1]; //#10012
            var _8M = $get($_.gpf, $_.i + 1); //#10012
            $k[$j++] = _8J; //#10012
            $k[$j++] = 1; //#10012
            $k[$j++] = _8M; //#10012
            if (_8M == $_.fnc1) { //#10012
                $k[$j - 1] = 94; //#10012
            } //#10012
            var _8O = $k[--$j]; //#10012
            var _8P = $k[--$j]; //#10012
            $put($k[--$j], _8P, _8O); //#10012
        } //#10012
        var _8T = $get($_.numeric, $k[--$j]) !== undefined; //#10013
        if (_8T) { //#10016
            $put($_.numericruns, $_.i, $get($_.numericruns, $_.i + 2) + 2); //#10014
        } else { //#10016
            $put($_.numericruns, $_.i, 0); //#10016
        } //#10016
        var _8b = $k[$j - 1]; //#10018
        var _8d = $get($_.alphanumeric, _8b) !== undefined; //#10018
        if (_8d) { //#10021
            $put($_.alphanumericruns, $_.i, $get($_.alphanumericruns, $_.i + 1) + 1); //#10019
        } else { //#10021
            $put($_.alphanumericruns, $_.i, 0); //#10021
        } //#10021
        var _8l = $k[--$j]; //#10023
        var _8n = $get($_.iso646, _8l) !== undefined; //#10023
        var _8p = $get($_.alphanumeric, _8l) !== undefined; //#10023
        if (_8n && (!_8p)) { //#10026
            $put($_.nextiso646only, $_.i, 0); //#10024
        } else { //#10026
            $put($_.nextiso646only, $_.i, $get($_.nextiso646only, $_.i + 1) + 1); //#10026
        } //#10026
    } //#10026
    $_.gpfenc = $a(252); //#10031
    $_.i = 0; //#10032
    $_.j = 0; //#10032
    $_.mode = "numeric"; //#10032
    for (;;) { //#10122
        if ($_.i == $_.gpf.length) { //#10034
            break; //#10034
        } //#10034
        for (;;) { //#10121
            if ($eq($_.mode, "numeric")) { //#10070
                if ($_.i <= ($_.gpf.length - 2)) { //#10067
                    var _93 = $s(2); //#10039
                    var _96 = $get($_.gpf, $_.i); //#10040
                    $k[$j++] = _93; //#10040
                    $k[$j++] = _93; //#10040
                    $k[$j++] = 0; //#10040
                    $k[$j++] = _96; //#10040
                    if (_96 == $_.fnc1) { //#10040
                        $k[$j - 1] = 94; //#10040
                    } //#10040
                    var _98 = $k[--$j]; //#10040
                    var _99 = $k[--$j]; //#10040
                    $put($k[--$j], _99, _98); //#10040
                    var _9B = $k[$j - 1]; //#10041
                    var _9E = $get($_.gpf, $_.i + 1); //#10041
                    $k[$j++] = _9B; //#10041
                    $k[$j++] = 1; //#10041
                    $k[$j++] = _9E; //#10041
                    if (_9E == $_.fnc1) { //#10041
                        $k[$j - 1] = 94; //#10041
                    } //#10041
                    var _9G = $k[--$j]; //#10041
                    var _9H = $k[--$j]; //#10041
                    $put($k[--$j], _9H, _9G); //#10041
                    var _9J = $k[$j - 1]; //#10042
                    var _9L = $get($_.numeric, _9J) !== undefined; //#10042
                    if (_9L) { //#10046
                        $k[$j++] = $_.numeric; //#10043
                        $_.encode(); //#10043
                        $_.i = $_.i + 2; //#10044
                        break; //#10045
                    } //#10045
                    $k[$j - 1] = $_.lalphanumeric; //#10048
                    $k[$j++] = $_.numeric; //#10048
                    $_.encode(); //#10048
                    $_.mode = "alphanumeric"; //#10049
                    break; //#10050
                } else { //#10067
                    var _9S = $get($_.gpf, $_.i); //#10052
                    if ((_9S < 48) || (_9S > 57)) { //#10056
                        $k[$j++] = $_.lalphanumeric; //#10053
                        $k[$j++] = $_.numeric; //#10053
                        $_.encode(); //#10053
                        $_.mode = "alphanumeric"; //#10054
                        break; //#10055
                    } //#10055
                    $k[$j++] = 'rem'; //#10057
                    $k[$j++] = ((((12 + 1) + $_.method.length) + $_.vlf.length) + $_.cdf.length) + $_.j; //#10057
                    $_.rembits(); //#10057
                    var _9Z = $k[--$j]; //#10057
                    $_[$k[--$j]] = _9Z; //#10057
                    if (($_.rem >= 4) && ($_.rem <= 6)) { //#10067
                        var _9g = $geti($strcpy($s(6), "000000"), 0, $_.rem); //#10059
                        var _9l = $cvrs($s(4), $get($_.gpf, $_.i) - 47, 2); //#10060
                        $puti(_9g, 4 - _9l.length, _9l); //#10061
                        $k[$j++] = _9g; //#10061
                        $k[$j++] = 'raw'; //#10061
                        $_.encode(); //#10061
                        $_.i = $_.i + 1; //#10062
                        break; //#10063
                    } else { //#10067
                        var _9n = $s(2); //#10065
                        $put(_9n, 0, $get($_.gpf, $_.i)); //#10065
                        $put(_9n, 1, 94); //#10065
                        $k[$j++] = _9n; //#10065
                        $k[$j++] = $_.numeric; //#10065
                        $_.encode(); //#10065
                        $_.i = $_.i + 1; //#10066
                        break; //#10067
                    } //#10067
                } //#10067
            } //#10067
            if ($eq($_.mode, "alphanumeric")) { //#10097
                if ($get($_.gpf, $_.i) == $_.fnc1) { //#10078
                    $k[$j++] = $_.fnc1; //#10074
                    $k[$j++] = $_.alphanumeric; //#10074
                    $_.encode(); //#10074
                    $_.mode = "numeric"; //#10075
                    $_.i = $_.i + 1; //#10076
                    break; //#10077
                } //#10077
                var _A3 = $get($_.gpf, $_.i); //#10079
                var _A5 = $get($_.iso646, _A3) !== undefined; //#10079
                var _A7 = $get($_.alphanumeric, _A3) !== undefined; //#10079
                if (_A5 && (!_A7)) { //#10083
                    $k[$j++] = $_.liso646; //#10080
                    $k[$j++] = $_.alphanumeric; //#10080
                    $_.encode(); //#10080
                    $_.mode = "iso646"; //#10081
                    break; //#10082
                } //#10082
                if ($get($_.numericruns, $_.i) >= 6) { //#10088
                    $k[$j++] = $_.lnumeric; //#10085
                    $k[$j++] = $_.alphanumeric; //#10085
                    $_.encode(); //#10085
                    $_.mode = "numeric"; //#10086
                    break; //#10087
                } //#10087
                var _AH = $get($_.numericruns, $_.i); //#10089
                if ((_AH >= 4) && ($f(_AH + $_.i) == $_.gpf.length)) { //#10093
                    $k[$j++] = $_.lnumeric; //#10090
                    $k[$j++] = $_.alphanumeric; //#10090
                    $_.encode(); //#10090
                    $_.mode = "numeric"; //#10091
                    break; //#10092
                } //#10092
                $k[$j++] = $get($_.gpf, $_.i); //#10094
                $k[$j++] = $_.alphanumeric; //#10094
                $_.encode(); //#10094
                $_.i = $_.i + 1; //#10095
                break; //#10096
            } //#10096
            if ($eq($_.mode, "iso646")) { //#10119
                if ($get($_.gpf, $_.i) == $_.fnc1) { //#10105
                    $k[$j++] = $_.fnc1; //#10101
                    $k[$j++] = $_.iso646; //#10101
                    $_.encode(); //#10101
                    $_.mode = "numeric"; //#10102
                    $_.i = $_.i + 1; //#10103
                    break; //#10104
                } //#10104
                if (($get($_.numericruns, $_.i) >= 4) && ($get($_.nextiso646only, $_.i) >= 10)) { //#10110
                    $k[$j++] = $_.lnumeric; //#10107
                    $k[$j++] = $_.iso646; //#10107
                    $_.encode(); //#10107
                    $_.mode = "numeric"; //#10108
                    break; //#10109
                } //#10109
                if (($get($_.alphanumericruns, $_.i) >= 5) && ($get($_.nextiso646only, $_.i) >= 10)) { //#10115
                    $k[$j++] = $_.lalphanumeric; //#10112
                    $k[$j++] = $_.iso646; //#10112
                    $_.encode(); //#10112
                    $_.mode = "alphanumeric"; //#10113
                    break; //#10114
                } //#10114
                $k[$j++] = $get($_.gpf, $_.i); //#10116
                $k[$j++] = $_.iso646; //#10116
                $_.encode(); //#10116
                $_.i = $_.i + 1; //#10117
                break; //#10118
            } //#10118
        } //#10118
    } //#10118
    $_.gpf = $geti($_.gpfenc, 0, $_.j); //#10123
    var _B1 = ((((1 + 12) + $_.method.length) + $_.vlf.length) + $_.cdf.length) + $_.gpf.length; //#10127
    $k[$j++] = _B1; //#10127
    $k[$j++] = _B1; //#10127
    $_.rembits(); //#10127
    var _B2 = $k[--$j]; //#10127
    $_.pad = $a(_B2); //#10127
    $k[$j++] = _B2; //#10134
    if ($_.vlf.length != 0) { //#10133
        var _B5 = $k[--$j]; //#10129
        var _B7 = ~~($f($k[--$j] + _B5) / 12); //#10130
        $put($_.vlf, 0, _B7 % 2); //#10130
        var _B9 = (_B7 <= 14) ? 0 : 1; //#10131
        $put($_.vlf, 1, _B9); //#10131
    } else { //#10133
        $j -= 2; //#10133
    } //#10133
    if ($_.pad.length > 0) { //#10143
        for (var _BE = 0, _BD = $_.pad.length - 1; _BE <= _BD; _BE += 5) { //#10139
            $_.i = _BE; //#10137
            var _BF = $_.pad; //#10138
            var _BG = $_.i; //#10138
            var _BH = $a([0, 0, 1, 0, 0]); //#10138
            var _BI = $_.pad; //#10138
            var _BJ = $_.i; //#10138
            var _BK = 5; //#10138
            var _BL = _BI.length - _BJ; //#10138
            if ((_BI.length - _BJ) > 5) { //#10138
                var _ = _BK; //#10138
                _BK = _BL; //#10138
                _BL = _; //#10138
            } //#10138
            $puti(_BF, _BG, $geti(_BH, 0, _BL)); //#10138
        } //#10138
        if ($eq($_.mode, "numeric")) { //#10142
            $k[$j++] = Infinity; //#10141
            $k[$j++] = 0; //#10141
            $k[$j++] = 0; //#10141
            $k[$j++] = 0; //#10141
            $k[$j++] = 0; //#10141
            $aload($_.pad); //#10141
            $_.pad = $geti($a(), 0, $_.pad.length); //#10141
        } //#10141
    } //#10141
    $k[$j++] = Infinity; //#10146
    var _BT = $_.linkage ? 1 : 0; //#10147
    $k[$j++] = _BT; //#10148
    $forall($_.method, function() { //#10148
        var _BV = $k[--$j]; //#10148
        $k[$j++] = _BV - 48; //#10148
    }); //#10148
    $aload($_.vlf); //#10149
    $aload($_.cdf); //#10150
    $aload($_.gpf); //#10151
    $aload($_.pad); //#10152
    $_.binval = $a(); //#10152
    $_.datalen = ~~($_.binval.length / 12); //#10154
    $_.ncr = function() {
        var _Bc = $k[--$j]; //#10157
        var _Bd = $k[--$j]; //#10157
        var _Be = $f(_Bd - _Bc); //#10157
        if (_Bc < $f(_Bd - _Bc)) { //#10157
            var _ = _Be; //#10157
            _Be = _Bc; //#10157
            _Bc = _; //#10157
        } //#10157
        $k[$j++] = _Be; //#10164
        $k[$j++] = 1; //#10164
        $k[$j++] = 1; //#10164
        for (var _Bg = _Bd, _Bf = _Bc + 1; _Bg >= _Bf; _Bg -= 1) { //#10164
            var _Bh = $k[--$j]; //#10160
            var _Bi = $k[$j - 1]; //#10161
            var _Bj = $k[$j - 2]; //#10161
            $k[$j++] = _Bh * _Bg; //#10163
            if ($le(_Bi, _Bj)) { //#10163
                var _Bk = $k[--$j]; //#10162
                var _Bl = $k[--$j]; //#10162
                $k[$j++] = _Bl + 1; //#10162
                $k[$j++] = ~~(_Bk / _Bl); //#10162
            } //#10162
        } //#10162
        for (;;) { //#10168
            var _Bn = $k[$j - 2]; //#10166
            var _Bo = $k[$j - 3]; //#10166
            if ($gt(_Bn, _Bo)) { //#10166
                break; //#10166
            } //#10166
            var _Bp = $k[--$j]; //#10167
            var _Bq = $k[--$j]; //#10167
            $k[$j++] = _Bq + 1; //#10167
            $k[$j++] = ~~(_Bp / _Bq); //#10167
        } //#10167
        var _Br = $k[--$j]; //#10169
        $k[$j - 1] = _Br; //#10169
        var _Bt = $k[--$j]; //#10169
        $k[$j - 1] = _Bt; //#10169
    }; //#10169
    $_.getRSSwidths = function() {
        $_.oe = $k[--$j]; //#10173
        $_.el = $k[--$j]; //#10174
        $_.mw = $k[--$j]; //#10175
        $_.nm = $k[--$j]; //#10176
        $_.val = $k[--$j]; //#10177
        $_.out = $a($_.el); //#10178
        $_.mask = 0; //#10179
        for (var _C4 = 0, _C3 = $_.el - 2; _C4 <= _C3; _C4 += 1) { //#10206
            $_.bar = _C4; //#10181
            $_.ew = 1; //#10182
            var _C6 = $_.bar; //#10183
            $_.mask = $_.mask | ((_C6 < 0 ? 1 >>> -_C6 : 1 << _C6)); //#10183
            for (;;) { //#10202
                $k[$j++] = 'sval'; //#10184
                $k[$j++] = $f($_.nm - $_.ew) - 1; //#10184
                $k[$j++] = $f($_.el - $_.bar) - 2; //#10184
                $_.ncr(); //#10184
                var _CB = $k[--$j]; //#10184
                $_[$k[--$j]] = _CB; //#10184
                if ($_.oe && $_.mask == 0 && $f($_.nm - $_.ew - $_.el * 2 + $_.bar * 2) >= -2) { //#10187
                    $k[$j++] = 'sval'; //#10186
                    $k[$j++] = $_.sval; //#10186
                    $k[$j++] = $f($_.nm - $_.ew - $_.el + $_.bar); //#10186
                    $k[$j++] = $f($_.el - $_.bar) - 2; //#10186
                    $_.ncr(); //#10186
                    var _CQ = $k[--$j]; //#10186
                    var _CR = $k[--$j]; //#10186
                    $_[$k[--$j]] = $f(_CR - _CQ); //#10186
                } //#10186
                if ($f($_.el - $_.bar) > 2) { //#10196
                    $_.lval = 0; //#10189
                    for (var _Cb = $f($_.nm - $_.ew - $_.el + $_.bar) + 2, _Ca = $_.mw + 1; _Cb >= _Ca; _Cb -= 1) { //#10193
                        $k[$j++] = $f($_.nm - _Cb - $_.ew) - 1; //#10191
                        $k[$j++] = $f($_.el - $_.bar) - 3; //#10191
                        $_.ncr(); //#10191
                        $_.lval = $f($k[--$j] + $_.lval); //#10192
                    } //#10192
                    $_.sval = $f($_.sval - $_.lval * ($_.el - $_.bar - 1)); //#10194
                } else { //#10196
                    if ($f($_.nm - $_.ew) > $_.mw) { //#10196
                        $_.sval = $_.sval - 1; //#10196
                    } //#10196
                } //#10196
                $_.val = $f($_.val - $_.sval); //#10198
                if ($_.val < 0) { //#10199
                    break; //#10199
                } //#10199
                $_.ew = $_.ew + 1; //#10200
                var _Cv = $_.bar; //#10201
                $_.mask = $_.mask & (~((_Cv < 0 ? 1 >>> -_Cv : 1 << _Cv))); //#10201
            } //#10201
            $_.val = $f($_.val + $_.sval); //#10203
            $_.nm = $f($_.nm - $_.ew); //#10204
            $put($_.out, $_.bar, $_.ew); //#10205
        } //#10205
        $put($_.out, $_.el - 1, $_.nm); //#10207
        $k[$j++] = $_.out; //#10208
    }; //#10208
    $_.tab174 = $a([347, 0, 12, 5, 7, 2, 87, 4, 1387, 348, 10, 7, 5, 4, 52, 20, 2947, 1388, 8, 9, 4, 5, 30, 52, 3987, 2948, 6, 11, 3, 6, 10, 104, 4191, 3988, 4, 13, 1, 8, 1, 204]); //#10218
    $_.dxw = $a($_.datalen); //#10221
    for (var _DD = 0, _DC = $_.datalen - 1; _DD <= _DC; _DD += 1) { //#10262
        $_.x = _DD; //#10225
        $_.d = $geti($_.binval, $_.x * 12, 12); //#10227
        $k[$j++] = 'd'; //#10228
        $k[$j++] = 0; //#10228
        for (var _DH = 0; _DH <= 11; _DH += 1) { //#10228
            $_.j = _DH; //#10228
            var _DM = $k[--$j]; //#10228
            $k[$j++] = $f(_DM + ((~~$pow(2, 11 - $_.j)) * $get($_.d, $_.j))); //#10228
        } //#10228
        var _DN = $k[--$j]; //#10228
        $_[$k[--$j]] = _DN; //#10228
        $_.j = 0; //#10230
        for (;;) { //#10240
            if ($le($_.d, $get($_.tab174, $_.j))) { //#10238
                $aload($geti($_.tab174, $_.j + 1, 7)); //#10232
                $_.dte = $k[--$j]; //#10233
                $_.dto = $k[--$j]; //#10233
                $_.dmwe = $k[--$j]; //#10234
                $_.dmwo = $k[--$j]; //#10234
                $_.dele = $k[--$j]; //#10235
                $_.delo = $k[--$j]; //#10235
                $_.dgs = $k[--$j]; //#10236
                break; //#10237
            } //#10237
            $_.j = $_.j + 8; //#10239
        } //#10239
        $k[$j++] = 'dwo'; //#10242
        $k[$j++] = ~~($f($_.d - $_.dgs) / $_.dte); //#10242
        $k[$j++] = $_.delo; //#10242
        $k[$j++] = $_.dmwo; //#10242
        $k[$j++] = 4; //#10242
        $k[$j++] = true; //#10242
        $_.getRSSwidths(); //#10242
        var _Dj = $k[--$j]; //#10242
        $_[$k[--$j]] = _Dj; //#10242
        $k[$j++] = 'dwe'; //#10243
        $k[$j++] = $f($_.d - $_.dgs) % $_.dte; //#10243
        $k[$j++] = $_.dele; //#10243
        $k[$j++] = $_.dmwe; //#10243
        $k[$j++] = 4; //#10243
        $k[$j++] = false; //#10243
        $_.getRSSwidths(); //#10243
        var _Dq = $k[--$j]; //#10243
        $_[$k[--$j]] = _Dq; //#10243
        $_.dw = $a(8); //#10245
        if (($_.x % 2) == 0) { //#10256
            for (var _Du = 0; _Du <= 3; _Du += 1) { //#10251
                $_.j = _Du; //#10248
                $put($_.dw, 7 - ($_.j * 2), $get($_.dwo, $_.j)); //#10249
                $put($_.dw, 6 - ($_.j * 2), $get($_.dwe, $_.j)); //#10250
            } //#10250
        } else { //#10256
            for (var _E5 = 0; _E5 <= 3; _E5 += 1) { //#10257
                $_.j = _E5; //#10254
                $put($_.dw, $_.j * 2, $get($_.dwo, $_.j)); //#10255
                $put($_.dw, ($_.j * 2) + 1, $get($_.dwe, $_.j)); //#10256
            } //#10256
        } //#10256
        $put($_.dxw, $_.x, $_.dw); //#10260
    } //#10260
    $_.finderwidths = $a([1, 8, 4, 1, 1, 1, 1, 4, 8, 1, 3, 6, 4, 1, 1, 1, 1, 4, 6, 3, 3, 4, 6, 1, 1, 1, 1, 6, 4, 3, 3, 2, 8, 1, 1, 1, 1, 8, 2, 3, 2, 6, 5, 1, 1, 1, 1, 5, 6, 2, 2, 2, 9, 1, 1, 1, 1, 9, 2, 2]); //#10272
    $_.finderseq = $a([$a([0, 1]), $a([0, 3, 2]), $a([0, 5, 2, 7]), $a([0, 9, 2, 7, 4]), $a([0, 9, 2, 7, 6, 11]), $a([0, 9, 2, 7, 8, 11, 10]), $a([0, 1, 2, 3, 4, 5, 6, 7]), $a([0, 1, 2, 3, 4, 5, 6, 9, 8]), $a([0, 1, 2, 3, 4, 5, 6, 9, 10, 11]), $a([0, 1, 2, 3, 4, 7, 6, 9, 8, 11, 10])]); //#10285
    $_.seq = $get($_.finderseq, ~~(($_.datalen - 2) / 2)); //#10288
    $_.fxw = $a($_.seq.length); //#10289
    for (var _Ed = 0, _Ec = $_.seq.length - 1; _Ed <= _Ec; _Ed += 1) { //#10293
        $_.x = _Ed; //#10291
        $put($_.fxw, $_.x, $geti($_.finderwidths, $get($_.seq, $_.x) * 5, 5)); //#10292
    } //#10292
    $_.checkweights = $a([-1, -1, -1, -1, -1, -1, -1, -1, 77, 96, 32, 81, 27, 9, 3, 1, 20, 60, 180, 118, 143, 7, 21, 63, 205, 209, 140, 117, 39, 13, 145, 189, 193, 157, 49, 147, 19, 57, 171, 91, 132, 44, 85, 169, 197, 136, 186, 62, 185, 133, 188, 142, 4, 12, 36, 108, 50, 87, 29, 80, 97, 173, 128, 113, 150, 28, 84, 41, 123, 158, 52, 156, 166, 196, 206, 139, 187, 203, 138, 46, 76, 17, 51, 153, 37, 111, 122, 155, 146, 119, 110, 107, 106, 176, 129, 43, 16, 48, 144, 10, 30, 90, 59, 177, 164, 125, 112, 178, 200, 137, 116, 109, 70, 210, 208, 202, 184, 130, 179, 115, 190, 204, 68, 93, 31, 151, 191, 134, 148, 22, 66, 198, 172, 94, 71, 2, 40, 154, 192, 64, 162, 54, 18, 6, 120, 149, 25, 75, 14, 42, 126, 167, 175, 199, 207, 69, 23, 78, 26, 79, 103, 98, 83, 38, 114, 131, 182, 124, 159, 53, 88, 170, 127, 183, 61, 161, 55, 165, 73, 8, 24, 72, 5, 15, 89, 100, 174, 58, 160, 194, 135, 45]); //#10321
    $k[$j++] = Infinity; //#10324
    $forall($_.seq, function() { //#10325
        $aload($geti($_.checkweights, $k[--$j] * 16, 16)); //#10325
    }); //#10325
    var _Er = $a(); //#10325
    $_.checkweightseq = $geti(_Er, 8, _Er.length - 8); //#10326
    $k[$j++] = Infinity; //#10328
    var _Et = $_.dxw; //#10329
    for (var _Eu = 0, _Ev = _Et.length; _Eu < _Ev; _Eu++) { //#10329
        $aload($get(_Et, _Eu)); //#10329
    } //#10329
    $_.widths = $a(); //#10329
    $_.checksum = 0; //#10332
    for (var _F0 = 0, _Ez = $_.widths.length - 1; _F0 <= _Ez; _F0 += 1) { //#10336
        $_.i = _F0; //#10334
        $_.checksum = $f($_.checksum + ($get($_.widths, $_.i) * $get($_.checkweightseq, $_.i))); //#10335
    } //#10335
    $_.checksum = $f(($_.checksum % 211) + (($_.datalen - 3) * 211)); //#10337
    $_.i = 0; //#10339
    for (;;) { //#10349
        if ($_.checksum <= $get($_.tab174, $_.i)) { //#10347
            $aload($geti($_.tab174, $_.i + 1, 7)); //#10341
            $_.cte = $k[--$j]; //#10342
            $_.cto = $k[--$j]; //#10342
            $_.cmwe = $k[--$j]; //#10343
            $_.cmwo = $k[--$j]; //#10343
            $_.cele = $k[--$j]; //#10344
            $_.celo = $k[--$j]; //#10344
            $_.cgs = $k[--$j]; //#10345
            break; //#10346
        } //#10346
        $_.i = $_.i + 8; //#10348
    } //#10348
    $k[$j++] = 'cwo'; //#10351
    $k[$j++] = ~~($f($_.checksum - $_.cgs) / $_.cte); //#10351
    $k[$j++] = $_.celo; //#10351
    $k[$j++] = $_.cmwo; //#10351
    $k[$j++] = 4; //#10351
    $k[$j++] = true; //#10351
    $_.getRSSwidths(); //#10351
    var _FU = $k[--$j]; //#10351
    $_[$k[--$j]] = _FU; //#10351
    $k[$j++] = 'cwe'; //#10352
    $k[$j++] = $f($_.checksum - $_.cgs) % $_.cte; //#10352
    $k[$j++] = $_.cele; //#10352
    $k[$j++] = $_.cmwe; //#10352
    $k[$j++] = 4; //#10352
    $k[$j++] = false; //#10352
    $_.getRSSwidths(); //#10352
    var _Fb = $k[--$j]; //#10352
    $_[$k[--$j]] = _Fb; //#10352
    $_.cw = $a(8); //#10354
    for (var _Fe = 0; _Fe <= 3; _Fe += 1) { //#10359
        $_.i = _Fe; //#10356
        $put($_.cw, $_.i * 2, $get($_.cwo, $_.i)); //#10357
        $put($_.cw, ($_.i * 2) + 1, $get($_.cwe, $_.i)); //#10358
    } //#10358
    var _Fp = $a(22); //#10361
    $put(_Fp, 0, $_.cw); //#10362
    $puti(_Fp, 1, $_.dxw); //#10362
    $_.dxw = $geti(_Fp, 0, $_.datalen + 1); //#10363
    $_.datalen = $_.dxw.length; //#10364
    $_.rows = $a(~~$ceil($_.datalen / $_.segments)); //#10367
    $_.numrows = $_.rows.length; //#10368
    for (var _G1 = 0, _G0 = $_.numrows - 1; _G1 <= _G0; _G1 += 1) { //#10383
        $_.r = _G1; //#10370
        $k[$j++] = Infinity; //#10371
        if ((($_.segments % 4) != 0) && (($_.r % 2) == 1)) { //#10372
            $k[$j++] = 0; //#10372
        } //#10372
        $k[$j++] = 1; //#10380
        $k[$j++] = 1; //#10380
        for (var _G6 = 0, _G5 = $_.segments - 1; _G6 <= _G5; _G6 += 1) { //#10380
            $_.pos = _G6 + ($_.r * $_.segments); //#10375
            if ($_.pos < $_.datalen) { //#10379
                $aload($get($_.dxw, $_.pos)); //#10377
                if (($_.pos % 2) == 0) { //#10378
                    $aload($get($_.fxw, ~~($_.pos / 2))); //#10378
                } //#10378
            } //#10378
        } //#10378
        var _GI = $counttomark() + 2; //#10382
        $k[$j++] = 1; //#10382
        $k[$j++] = 1; //#10382
        $astore($a(_GI)); //#10382
        $put($_.rows, $_.r, $k[--$j]); //#10382
        $j--; //#10382
    } //#10382
    if ($ne($_.format, "expandedstacked")) { //#10515
        var _GP = $get($_.rows, 0); //#10388
        $_.sbs = $geti(_GP, 1, _GP.length - 1); //#10388
        $k[$j++] = Infinity; //#10390
        $k[$j++] = 1; //#10396
        for (var _GT = 0, _GS = $_.datalen - 1; _GT <= _GS; _GT += 1) { //#10396
            $_.i = _GT; //#10393
            $aload($get($_.dxw, $_.i)); //#10394
            if (($_.i % 2) == 0) { //#10395
                $aload($get($_.fxw, ~~($_.i / 2))); //#10395
            } //#10395
        } //#10395
        $k[$j++] = 1; //#10397
        $k[$j++] = 1; //#10397
        $_.sbs = $a(); //#10397
        $k[$j++] = Infinity; //#10400
        var _Gc = $_.sbs; //#10402
        $k[$j++] = Infinity; //#10403
        for (var _Ge = 0, _Gf = ~~(($_.sbs.length + 1) / 2); _Ge < _Gf; _Ge++) { //#10403
            $k[$j++] = $_.height; //#10403
        } //#10403
        var _Gh = $a(); //#10403
        $k[$j++] = Infinity; //#10404
        for (var _Gj = 0, _Gk = ~~(($_.sbs.length + 1) / 2); _Gj < _Gk; _Gj++) { //#10404
            $k[$j++] = 0; //#10404
        } //#10404
        var _Gl = $a(); //#10404
        $k[$j++] = 'ren'; //#10409
        $k[$j++] = 'renlinear'; //#10409
        $k[$j++] = 'sbs'; //#10409
        $k[$j++] = _Gc; //#10409
        $k[$j++] = 'bhs'; //#10409
        $k[$j++] = _Gh; //#10409
        $k[$j++] = 'bbs'; //#10409
        $k[$j++] = _Gl; //#10409
        $k[$j++] = 'borderleft'; //#10409
        $k[$j++] = 0; //#10409
        $k[$j++] = 'borderright'; //#10409
        $k[$j++] = 0; //#10409
        $k[$j++] = 'bordertop'; //#10409
        $k[$j++] = 0; //#10409
        $k[$j++] = 'borderbottom'; //#10409
        $k[$j++] = 0; //#10409
        $k[$j++] = 'opt'; //#10409
        $k[$j++] = $_.options; //#10409
        var _Gn = $d(); //#10409
        $k[$j++] = _Gn; //#10412
        if (!$_.dontdraw) { //#10412
            bwipp_renlinear(); //#10412
        } //#10412
    } else { //#10515
        $_.seps = $a($_.numrows); //#10416
        for (var _Gt = 0, _Gs = $_.numrows - 1; _Gt <= _Gs; _Gt += 1) { //#10472
            $_.r = _Gt; //#10419
            $_.row = $get($_.rows, $_.r); //#10420
            $k[$j++] = Infinity; //#10423
            for (var _Gz = 0, _Gy = $_.row.length - 1; _Gz <= _Gy; _Gz += 2) { //#10428
                $_.i = _Gz; //#10425
                for (var _H3 = 0, _H4 = $get($_.row, $_.i); _H3 < _H4; _H3++) { //#10426
                    $k[$j++] = 0; //#10426
                } //#10426
                if ($_.i < ($_.row.length - 1)) { //#10427
                    for (var _HA = 0, _HB = $get($_.row, $_.i + 1); _HA < _HB; _HA++) { //#10427
                        $k[$j++] = 1; //#10427
                    } //#10427
                } //#10427
            } //#10427
            $astore($a($counttomark())); //#10429
            $_.row = $k[--$j]; //#10429
            $k[$j - 1] = Infinity; //#10432
            $forall($_.row, function() { //#10432
                var _HG = $k[--$j]; //#10432
                $k[$j++] = 1 - _HG; //#10432
            }); //#10432
            $_.sep = $a(); //#10432
            $k[$j++] = Infinity; //#10433
            for (var _HK = 19, _HJ = $_.row.length - 13; _HK <= _HJ; _HK += 98) { //#10434
                $k[$j++] = _HK; //#10434
            } //#10434
            for (var _HN = 68, _HM = $_.row.length - 13; _HN <= _HM; _HN += 98) { //#10435
                $k[$j++] = _HN; //#10435
            } //#10435
            $_.finderpos = $a(); //#10435
            var _HP = $_.finderpos; //#10437
            for (var _HQ = 0, _HR = _HP.length; _HQ < _HR; _HQ++) { //#10451
                var _HS = $get(_HP, _HQ); //#10451
                for (var _HU = _HS, _HT = _HS + 14; _HU <= _HT; _HU += 1) { //#10450
                    $_.i = _HU; //#10439
                    if ($get($_.row, $_.i) == 0) { //#10447
                        if ($get($_.row, $_.i - 1) == 1) { //#10444
                            $k[$j++] = 1; //#10442
                        } else { //#10444
                            var _He = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#10444
                            $k[$j++] = _He; //#10444
                        } //#10444
                    } else { //#10447
                        $k[$j++] = 0; //#10447
                    } //#10447
                    $put($_.sep, $_.i, $k[--$j]); //#10449
                } //#10449
            } //#10449
            $puti($_.sep, 0, $a([0, 0, 0, 0])); //#10452
            $puti($_.sep, $_.row.length - 4, $a([0, 0, 0, 0])); //#10453
            if ((($_.segments % 4) == 0) && (($_.r % 2) == 1)) { //#10467
                if (($get($_.rows, $_.r).length != $get($_.rows, 0).length) && (($_.finderpos.length % 2) == 1)) { //#10465
                    $k[$j++] = Infinity; //#10459
                    $k[$j++] = 0; //#10459
                    $aload($_.row); //#10459
                    $_.row = $a(); //#10459
                    $k[$j++] = Infinity; //#10460
                    $k[$j++] = 0; //#10460
                    $aload($_.sep); //#10460
                    $_.sep = $a(); //#10460
                } else { //#10465
                    for (var _I0 = $_.row.length - 1; _I0 >= 0; _I0 -= 1) { //#10462
                        $k[$j++] = $get($_.row, _I0); //#10462
                    } //#10462
                    $astore($_.row); //#10463
                    $j--; //#10463
                    for (var _I5 = $_.sep.length - 1; _I5 >= 0; _I5 -= 1) { //#10464
                        $k[$j++] = $get($_.sep, _I5); //#10464
                    } //#10464
                    $astore($_.sep); //#10465
                    $j--; //#10465
                } //#10465
            } //#10465
            $put($_.rows, $_.r, $_.row); //#10469
            $put($_.seps, $_.r, $_.sep); //#10470
        } //#10470
        $_.pixx = $get($_.rows, 0).length; //#10475
        $k[$j++] = Infinity; //#10476
        for (var _II = 0, _IJ = $_.pixx; _II < _IJ; _II++) { //#10476
            $k[$j++] = 0; //#10476
        } //#10476
        var _IK = $a(); //#10476
        $puti(_IK, 0, $get($_.rows, $_.numrows - 1)); //#10476
        $put($_.rows, $_.numrows - 1, _IK); //#10477
        $k[$j++] = Infinity; //#10478
        for (var _IR = 0, _IS = $_.pixx; _IR < _IS; _IR++) { //#10478
            $k[$j++] = 0; //#10478
        } //#10478
        var _IT = $a(); //#10478
        $puti(_IT, 0, $get($_.seps, $_.numrows - 1)); //#10478
        $put($_.seps, $_.numrows - 1, _IT); //#10479
        $k[$j++] = Infinity; //#10482
        for (var _Ia = 0, _Ib = (~~($_.pixx / 2)) + 1; _Ia < _Ib; _Ia++) { //#10482
            $k[$j++] = 0; //#10482
            $k[$j++] = 1; //#10482
        } //#10482
        $_.sep = $geti($a(), 0, $_.pixx); //#10482
        $puti($_.sep, 0, $a([0, 0, 0, 0])); //#10483
        $puti($_.sep, $_.pixx - 4, $a([0, 0, 0, 0])); //#10484
        $k[$j++] = Infinity; //#10487
        for (var _Im = 0, _Il = $_.numrows - 1; _Im <= _Il; _Im += 1) { //#10498
            $_.r = _Im; //#10489
            if ($_.r != 0) { //#10492
                $aload($get($_.seps, $_.r)); //#10491
            } //#10491
            for (var _Is = 0, _It = $_.barxmult; _Is < _It; _Is++) { //#10493
                $aload($get($_.rows, $_.r)); //#10493
            } //#10493
            if ($_.r != ($_.numrows - 1)) { //#10497
                $aload($get($_.seps, $_.r)); //#10495
                $aload($_.sep); //#10496
            } //#10496
        } //#10496
        $_.pixs = $a(); //#10496
        var _JC = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", ~~($_.pixs.length / $_.pixx)],
            ["height", (~~($_.pixs.length / $_.pixx)) / 72],
            ["width", $_.pixx / 72],
            ["borderleft", 0],
            ["borderright", 0],
            ["bordertop", 0],
            ["borderbottom", 0],
            ["opt", $_.options]
        ]); //#10512
        $k[$j++] = _JC; //#10515
        if (!$_.dontdraw) { //#10515
            bwipp_renmatrix(); //#10515
        } //#10515
    } //#10515
    $_ = $__; //#10521
} //bwipp_databarexpanded
function bwipp_databarexpandedstacked() {
    var $__ = $_; //#10550
    $_ = Object.assign({}, $_); //#10550
    $_.dontdraw = false; //#10553
    $k[$j++] = $_; //#10555
    bwipp_processoptions(); //#10555
    $_.options = $k[--$j]; //#10555
    $_.barcode = $k[--$j]; //#10556
    $put($_.options, "dontdraw", true); //#10559
    $put($_.options, "format", "expandedstacked"); //#10560
    $k[$j++] = 'args'; //#10562
    $k[$j++] = $_.barcode; //#10562
    $k[$j++] = $_.options; //#10562
    bwipp_databarexpanded(); //#10562
    var _6 = $k[--$j]; //#10562
    $_[$k[--$j]] = _6; //#10562
    $put($_.args, "opt", $_.options); //#10564
    $k[$j++] = $_.args; //#10567
    if (!$_.dontdraw) { //#10567
        bwipp_renmatrix(); //#10567
    } //#10567
    $_ = $__; //#10569
} //bwipp_databarexpandedstacked
function bwipp_gs1northamericancoupon() {
    var $__ = $_; //#10599
    $_ = Object.assign({}, $_); //#10599
    $_.dontdraw = false; //#10602
    $_.includetext = false; //#10603
    $_.coupontextfont = "OCR-B"; //#10604
    $_.coupontextsize = 9; //#10605
    $_.coupontextxoffset = null; //#10606
    $_.coupontextyoffset = null; //#10607
    $_.parse = false; //#10608
    $_.dontlint = false; //#10609
    $_.lintreqs = true; //#10610
    $k[$j++] = $_; //#10612
    bwipp_processoptions(); //#10612
    $_.options = $k[--$j]; //#10612
    $_.barcode = $k[--$j]; //#10613
    $k[$j++] = $_.barcode; //#10615
    $k[$j++] = 'ai'; //#10615
    bwipp_gs1process(); //#10615
    $j--; //#10616
    $_.vals = $k[--$j]; //#10617
    $_.ais = $k[--$j]; //#10618
    if ($_.ais.length != 1) { //#10623
        $k[$j++] = 'bwipp.gs1northamericancouponBadAIStructure#10622'; //#10622
        $k[$j++] = "A GS1 North American Coupon should consist of a single AI (8110)"; //#10622
        bwipp_raiseerror(); //#10622
    } //#10622
    if ($ne($get($_.ais, 0), "8110")) { //#10626
        $k[$j++] = 'bwipp.gs1northamericancouponBadAIStructure#10625'; //#10625
        $k[$j++] = "A GS1 North American Coupon should consist of a single AI (8110)"; //#10625
        bwipp_raiseerror(); //#10625
    } //#10625
    $_.val = $get($_.vals, 0); //#10629
    $_.vli = $get($_.val, 0) - 48; //#10630
    if (($_.vli < 0) || ($_.vli > 6)) { //#10633
        $k[$j++] = 'bwipp.gs1northamericancouponBadVLI#10632'; //#10632
        $k[$j++] = "The AI (8110) data should start with a Company Prefix length indicator in the range 0 to 6"; //#10632
        bwipp_raiseerror(); //#10632
    } //#10632
    $_.gcp = $geti($_.val, 1, $_.vli + 6); //#10634
    $_.cod = $geti($_.val, $_.vli + 7, 6); //#10635
    $_.coupontext = $s($_.gcp.length + 7); //#10636
    $puti($_.coupontext, 0, $_.gcp); //#10637
    $puti($_.coupontext, $_.gcp.length, "-"); //#10638
    $puti($_.coupontext, $_.gcp.length + 1, $_.cod); //#10639
    $put($_.options, "dontdraw", true); //#10642
    $k[$j++] = 'args'; //#10644
    $k[$j++] = $_.barcode; //#10644
    $k[$j++] = $_.options; //#10644
    bwipp_databarexpandedstacked(); //#10644
    var _W = $k[--$j]; //#10644
    $_[$k[--$j]] = _W; //#10644
    if ($_.includetext) { //#10663
        if ($_.coupontextxoffset == null) { //#10650
            $_.coupontextxoffset = 0; //#10649
        } //#10649
        if ($_.coupontextyoffset == null) { //#10653
            $_.coupontextyoffset = ($get($_.args, "height") * 72) + 3; //#10652
        } //#10652
        var _e = $get($_.args, "txt") !== undefined; //#10654
        if (_e) { //#10661
            $_.txt = $get($_.args, "txt"); //#10655
            $_.newtxt = $a($_.txt.length + 1); //#10656
            $puti($_.newtxt, 0, $_.txt); //#10657
            $put($_.newtxt, $_.newtxt.length - 1, $a([$_.coupontext, $_.coupontextxoffset, $_.coupontextyoffset, $_.coupontextfont, $_.coupontextsize])); //#10658
            $put($_.args, "txt", $_.newtxt); //#10659
        } else { //#10661
            $put($_.args, "txt", $a([$a([$_.coupontext, $_.coupontextxoffset, $_.coupontextyoffset, $_.coupontextfont, $_.coupontextsize])])); //#10661
        } //#10661
    } //#10661
    $put($_.args, "opt", $_.options); //#10665
    $k[$j++] = $_.args; //#10668
    if (!$_.dontdraw) { //#10668
        bwipp_renmatrix(); //#10668
    } //#10668
    $_ = $__; //#10670
} //bwipp_gs1northamericancoupon
function bwipp_pharmacode() {
    var $__ = $_; //#10698
    $_ = Object.assign({}, $_); //#10698
    $_.dontdraw = false; //#10701
    $_.height = (8 * 2.835) / 72; //#10702
    $_.nwidth = 0.5 * 2.835; //#10703
    $_.wwidth = 1.5 * 2.835; //#10704
    $_.swidth = 1 * 2.835; //#10705
    $k[$j++] = $_; //#10707
    bwipp_processoptions(); //#10707
    $_.options = $k[--$j]; //#10707
    $_.barcode = $k[--$j]; //#10708
    if (($_.barcode.length < 1) || ($_.barcode.length > 6)) { //#10713
        $k[$j++] = 'bwipp.pharmacodeBadLength#10712'; //#10712
        $k[$j++] = "Pharmacode must be 1 to 6 digits"; //#10712
        bwipp_raiseerror(); //#10712
    } //#10712
    $forall($_.barcode, function() { //#10718
        var _5 = $k[--$j]; //#10715
        if ((_5 < 48) || (_5 > 57)) { //#10717
            $k[$j++] = 'bwipp.pharmacodeBadCharacter#10716'; //#10716
            $k[$j++] = "Pharmacode must contain only digits"; //#10716
            bwipp_raiseerror(); //#10716
        } //#10716
    }); //#10716
    var _7 = $cvi($_.barcode); //#10719
    if ((_7 < 3) || (_7 > 131070)) { //#10721
        $k[$j++] = 'bwipp.pharmacodeBadValue#10720'; //#10720
        $k[$j++] = "Pharmacode value must be between 3 and 131070"; //#10720
        bwipp_raiseerror(); //#10720
    } //#10720
    $_.txt = $a($_.barcode.length); //#10724
    for (var _C = 0, _B = $_.barcode.length - 1; _C <= _B; _C += 1) { //#10728
        $_.i = _C; //#10726
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#10727
    } //#10727
    $_.barcode = $cvrs($s(17), $cvi($_.barcode) + 1, 2); //#10731
    $_.barcode = $geti($_.barcode, 1, $_.barcode.length - 1); //#10732
    $_.barlen = $_.barcode.length; //#10734
    $_.sbs = $a($_.barlen * 2); //#10735
    for (var _U = 0, _T = $_.barlen - 1; _U <= _T; _U += 1) { //#10746
        $_.i = _U; //#10738
        $_.enc = $geti($_.barcode, $_.i, 1); //#10739
        if ($eq($_.enc, "0")) { //#10743
            $put($_.sbs, $_.i * 2, $_.nwidth); //#10741
        } else { //#10743
            $put($_.sbs, $_.i * 2, $_.wwidth); //#10743
        } //#10743
        $put($_.sbs, ($_.i * 2) + 1, $_.swidth); //#10745
    } //#10745
    $k[$j++] = Infinity; //#10749
    var _i = $_.sbs; //#10751
    $k[$j++] = Infinity; //#10752
    for (var _k = 0, _l = ~~(($_.sbs.length + 1) / 2); _k < _l; _k++) { //#10752
        $k[$j++] = $_.height; //#10752
    } //#10752
    var _n = $a(); //#10752
    $k[$j++] = Infinity; //#10753
    for (var _p = 0, _q = ~~(($_.sbs.length + 1) / 2); _p < _q; _p++) { //#10753
        $k[$j++] = 0; //#10753
    } //#10753
    var _r = $a(); //#10753
    $k[$j++] = 'ren'; //#10756
    $k[$j++] = 'renlinear'; //#10756
    $k[$j++] = 'sbs'; //#10756
    $k[$j++] = _i; //#10756
    $k[$j++] = 'bhs'; //#10756
    $k[$j++] = _n; //#10756
    $k[$j++] = 'bbs'; //#10756
    $k[$j++] = _r; //#10756
    $k[$j++] = 'txt'; //#10756
    $k[$j++] = $_.txt; //#10756
    $k[$j++] = 'textxalign'; //#10756
    $k[$j++] = "center"; //#10756
    $k[$j++] = 'opt'; //#10756
    $k[$j++] = $_.options; //#10756
    var _u = $d(); //#10756
    $k[$j++] = _u; //#10759
    if (!$_.dontdraw) { //#10759
        bwipp_renlinear(); //#10759
    } //#10759
    $_ = $__; //#10761
} //bwipp_pharmacode
function bwipp_pharmacode2() {
    var $__ = $_; //#10789
    $_ = Object.assign({}, $_); //#10789
    $_.dontdraw = false; //#10792
    $_.includetext = false; //#10793
    $_.height = 4; //#10794
    $k[$j++] = $_; //#10796
    bwipp_processoptions(); //#10796
    $_.options = $k[--$j]; //#10796
    $_.barcode = $k[--$j]; //#10797
    if (($_.barcode.length < 1) || ($_.barcode.length > 8)) { //#10802
        $k[$j++] = 'bwipp.pharmacode2BadLength#10801'; //#10801
        $k[$j++] = "Two-track Pharmacode must be 1 to 6 digits"; //#10801
        bwipp_raiseerror(); //#10801
    } //#10801
    $forall($_.barcode, function() { //#10807
        var _5 = $k[--$j]; //#10804
        if ((_5 < 48) || (_5 > 57)) { //#10806
            $k[$j++] = 'bwipp.pharmacode2badCharacter#10805'; //#10805
            $k[$j++] = "Two-track Pharmacode must contain only digits"; //#10805
            bwipp_raiseerror(); //#10805
        } //#10805
    }); //#10805
    var _7 = $cvi($_.barcode); //#10808
    if ((_7 < 4) || (_7 > 64570080)) { //#10810
        $k[$j++] = 'bwipp.pharmacode2badValue#10809'; //#10809
        $k[$j++] = "Two-track Pharmacode value must be between 4 and 64570080"; //#10809
        bwipp_raiseerror(); //#10809
    } //#10809
    $_.txt = $a($_.barcode.length); //#10813
    for (var _C = 0, _B = $_.barcode.length - 1; _C <= _B; _C += 1) { //#10817
        $_.i = _C; //#10815
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#10816
    } //#10816
    $_.encstr = $s(16); //#10819
    $_.sbs = $a(32); //#10820
    $_.bar = (1 / 25.4) * $_.height; //#10821
    $_.spc = (1 / 25.4) * 72; //#10822
    $_.i = 15; //#10825
    $_.val = $cvi($_.barcode); //#10826
    for (;;) { //#10833
        if ($_.val == 0) { //#10828
            break; //#10828
        } //#10828
        var _P = $_.val % 3; //#10829
        $_.val = ~~($f($_.val - $get($a([3, 1, 2]), _P)) / 3); //#10830
        $put($_.encstr, $_.i, $get($a([2, 0, 1]), _P)); //#10831
        $_.i = $_.i - 1; //#10832
    } //#10832
    $_.encstr = $geti($_.encstr, $_.i + 1, 15 - $_.i); //#10834
    $_.bhs = $a($_.encstr.length); //#10837
    $_.bbs = $a($_.encstr.length); //#10838
    for (var _i = 0, _h = $_.encstr.length - 1; _i <= _h; _i += 1) { //#10844
        $_.i = _i; //#10840
        var _l = $get($_.encstr, $_.i); //#10841
        $put($_.bhs, $_.i, $_.bar * $get($a([1, 1, 2]), _l)); //#10842
        $put($_.bbs, $_.i, $get($a([0, $_.bar, 0]), _l)); //#10843
    } //#10843
    $k[$j++] = Infinity; //#10847
    var _w = $_.bhs; //#10849
    var _x = $_.bbs; //#10850
    $k[$j++] = Infinity; //#10851
    for (var _z = 0, _10 = $_.encstr.length * 2; _z < _10; _z++) { //#10851
        $k[$j++] = $_.spc; //#10851
    } //#10851
    var _12 = $a(); //#10851
    $k[$j++] = 'ren'; //#10855
    $k[$j++] = 'renlinear'; //#10855
    $k[$j++] = 'bhs'; //#10855
    $k[$j++] = _w; //#10855
    $k[$j++] = 'bbs'; //#10855
    $k[$j++] = _x; //#10855
    $k[$j++] = 'sbs'; //#10855
    $k[$j++] = _12; //#10855
    $k[$j++] = 'txt'; //#10855
    $k[$j++] = $_.txt; //#10855
    $k[$j++] = 'textxalign'; //#10855
    $k[$j++] = "center"; //#10855
    $k[$j++] = 'textyoffset'; //#10855
    $k[$j++] = 4; //#10855
    $k[$j++] = 'opt'; //#10855
    $k[$j++] = $_.options; //#10855
    var _15 = $d(); //#10855
    $k[$j++] = _15; //#10858
    if (!$_.dontdraw) { //#10858
        bwipp_renlinear(); //#10858
    } //#10858
    $_ = $__; //#10860
} //bwipp_pharmacode2
function bwipp_code2of5() {
    var $__ = $_; //#10890
    $_ = Object.assign({}, $_); //#10890
    $_.dontdraw = false; //#10893
    $_.includecheck = false; //#10894
    $_.validatecheck = false; //#10895
    $_.includetext = false; //#10896
    $_.includecheckintext = false; //#10897
    $_.textfont = "OCR-B"; //#10898
    $_.textsize = 10; //#10899
    $_.textyoffset = -8; //#10900
    $_.height = 1; //#10901
    $_.version = "industrial"; //#10902
    $k[$j++] = $_; //#10904
    bwipp_processoptions(); //#10904
    $_.options = $k[--$j]; //#10904
    $_.barcode = $k[--$j]; //#10905
    if ($_.barcode.length == 0) { //#10909
        $k[$j++] = 'bwipp.code2of5emptyData#10908'; //#10908
        $k[$j++] = "The data must not be empty"; //#10908
        bwipp_raiseerror(); //#10908
    } //#10908
    $forall($_.barcode, function() { //#10918
        var _4 = $k[--$j]; //#10915
        if ((_4 < 48) || (_4 > 57)) { //#10917
            $k[$j++] = 'bwipp.code2of5badCharacter#10916'; //#10916
            $k[$j++] = "Code 25 must contain only digits"; //#10916
            bwipp_raiseerror(); //#10916
        } //#10916
    }); //#10916
    $k[$j++] = 'barlen'; //#10920
    $k[$j++] = $_.barcode.length; //#10920
    if ($_.validatecheck) { //#10920
        var _7 = $k[--$j]; //#10920
        $k[$j++] = _7 - 1; //#10920
    } //#10920
    var _8 = $k[--$j]; //#10920
    $_[$k[--$j]] = _8; //#10920
    $_.checksum = 0; //#10922
    for (var _C = 0, _B = $_.barlen - 1; _C <= _B; _C += 1) { //#10926
        $_.i = _C; //#10924
        $k[$j++] = 'checksum'; //#10925
        $k[$j++] = $_.checksum; //#10925
        $k[$j++] = $get($_.barcode, $_.i) - 48; //#10925
        if (($f($_.barlen - $_.i) % 2) != 0) { //#10925
            var _J = $k[--$j]; //#10925
            $k[$j++] = _J * 3; //#10925
        } //#10925
        var _K = $k[--$j]; //#10925
        var _L = $k[--$j]; //#10925
        $_[$k[--$j]] = $f(_L + _K); //#10925
    } //#10925
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#10927
    if ($_.validatecheck) { //#10934
        if ($get($_.barcode, $_.barlen) != ($_.checksum + 48)) { //#10931
            $k[$j++] = 'bwipp.code2of5badCheckDigit#10930'; //#10930
            $k[$j++] = "Incorrect Code 25 check digit provided"; //#10930
            bwipp_raiseerror(); //#10930
        } //#10930
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#10932
        $_.includecheck = true; //#10933
    } //#10933
    var _b = new Map([
        ["industrial", $a(["1111313111", "3111111131", "1131111131", "3131111111", "1111311131", "3111311111", "1131311111", "1111113131", "3111113111", "1131113111", "313111", "31113"])],
        ["iata", $a(["1111313111", "3111111131", "1131111131", "3131111111", "1111311131", "3111311111", "1131311111", "1111113131", "3111113111", "1131113111", "1111", "311"])],
        ["matrix", $a(["113311", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "131311", "311111", "31111"])],
        ["coop", $a(["331111", "111331", "113131", "113311", "131131", "131311", "133111", "311131", "311311", "313111", "3131", "133"])],
        ["datalogic", $a(["113311", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "131311", "1111", "311"])]
    ]); //#10959
    $_.versions = _b; //#10961
    var _f = $get($_.versions, $_.version) !== undefined; //#10964
    if (!_f) { //#10966
        $k[$j++] = 'bwipp.code2of5badVersion#10965'; //#10965
        $k[$j++] = "Unrecognised Code 25 version"; //#10965
        bwipp_raiseerror(); //#10965
    } //#10965
    $_.encs = $get($_.versions, $_.version); //#10967
    $_.cs = $get($_.encs, 0).length; //#10969
    $k[$j++] = 'cw'; //#10970
    $k[$j++] = 0; //#10970
    $forall($get($_.encs, 0), function() { //#10970
        var _n = $k[--$j]; //#10970
        var _o = $k[--$j]; //#10970
        $k[$j++] = $f(_o + (_n - 48)); //#10970
    }); //#10970
    var _p = $k[--$j]; //#10970
    $_[$k[--$j]] = _p; //#10970
    $_.ss = $get($_.encs, 10).length; //#10971
    $k[$j++] = 'sw'; //#10972
    $k[$j++] = 0; //#10972
    $forall($get($_.encs, 10), function() { //#10972
        var _v = $k[--$j]; //#10972
        var _w = $k[--$j]; //#10972
        $k[$j++] = $f(_w + (_v - 48)); //#10972
    }); //#10972
    var _x = $k[--$j]; //#10972
    $_[$k[--$j]] = _x; //#10972
    $_.es = $get($_.encs, 11).length; //#10973
    $_.barchars = "0123456789"; //#10977
    $k[$j++] = 'sbs'; //#10980
    $k[$j++] = $_.barlen; //#10980
    if ($_.includecheck) { //#10980
        var _14 = $k[--$j]; //#10980
        $k[$j++] = _14 + 1; //#10980
    } //#10980
    var _19 = $s($f($k[--$j] * $_.cs + $_.ss + $_.es));; //#10980
    $_[$k[--$j]] = _19; //#10980
    $k[$j++] = 'txt'; //#10981
    $k[$j++] = $_.barlen; //#10981
    if ($_.includecheck) { //#10981
        var _1D = $k[--$j]; //#10981
        $k[$j++] = _1D + 1; //#10981
    } //#10981
    var _1F = $a($k[--$j]); //#10981
    $_[$k[--$j]] = _1F; //#10981
    $puti($_.sbs, 0, $get($_.encs, 10)); //#10984
    for (var _1M = 0, _1L = $_.barlen - 1; _1M <= _1L; _1M += 1) { //#10995
        $_.i = _1M; //#10986
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#10988
        $j--; //#10989
        $_.indx = $k[--$j].length; //#10990
        $j -= 2; //#10991
        $_.enc = $get($_.encs, $_.indx); //#10992
        $puti($_.sbs, ($_.i * $_.cs) + $_.ss, $_.enc); //#10993
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), $f(($_.i * $_.cw) + $_.sw), $_.textyoffset, $_.textfont, $_.textsize])); //#10994
    } //#10994
    if ($_.includecheck) { //#11007
        $puti($_.sbs, $f(($_.barlen * $_.cs) + $_.ss), $get($_.encs, $_.checksum)); //#10999
        $puti($_.sbs, $f($_.barlen * $_.cs + $_.cs + $_.ss), $get($_.encs, 11)); //#11000
        if ($_.includecheckintext) { //#11004
            $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), $f(($_.barlen * $_.cw) + $_.sw), $_.textyoffset, $_.textfont, $_.textsize])); //#11002
        } else { //#11004
            $put($_.txt, $_.barlen, $a([" ", $f(($_.barlen * $_.cw) + $_.sw), $_.textyoffset, $_.textfont, $_.textsize])); //#11004
        } //#11004
    } else { //#11007
        $puti($_.sbs, $f(($_.barlen * $_.cs) + $_.ss), $get($_.encs, 11)); //#11007
    } //#11007
    $k[$j++] = Infinity; //#11011
    $k[$j++] = Infinity; //#11013
    $forall($_.sbs, function() { //#11013
        var _2U = $k[--$j]; //#11013
        $k[$j++] = _2U - 48; //#11013
    }); //#11013
    var _2V = $a(); //#11013
    $k[$j++] = Infinity; //#11014
    for (var _2X = 0, _2Y = ~~(($_.sbs.length + 1) / 2); _2X < _2Y; _2X++) { //#11014
        $k[$j++] = $_.height; //#11014
    } //#11014
    var _2a = $a(); //#11014
    $k[$j++] = Infinity; //#11015
    for (var _2c = 0, _2d = ~~(($_.sbs.length + 1) / 2); _2c < _2d; _2c++) { //#11015
        $k[$j++] = 0; //#11015
    } //#11015
    var _2e = $a(); //#11015
    $k[$j++] = 'ren'; //#11018
    $k[$j++] = 'renlinear'; //#11018
    $k[$j++] = 'sbs'; //#11018
    $k[$j++] = _2V; //#11018
    $k[$j++] = 'bhs'; //#11018
    $k[$j++] = _2a; //#11018
    $k[$j++] = 'bbs'; //#11018
    $k[$j++] = _2e; //#11018
    if ($_.includetext) { //#11018
        $k[$j++] = 'txt'; //#11017
        $k[$j++] = $_.txt; //#11017
    } //#11017
    $k[$j++] = 'opt'; //#11019
    $k[$j++] = $_.options; //#11019
    var _2i = $d(); //#11019
    $k[$j++] = _2i; //#11022
    if (!$_.dontdraw) { //#11022
        bwipp_renlinear(); //#11022
    } //#11022
    $_ = $__; //#11026
} //bwipp_code2of5
function bwipp_industrial2of5() {
    var $__ = $_; //#11055
    $_ = Object.assign({}, $_); //#11055
    $_.dontdraw = false; //#11058
    $k[$j++] = $_; //#11060
    bwipp_processoptions(); //#11060
    $_.options = $k[--$j]; //#11060
    $_.barcode = $k[--$j]; //#11061
    $put($_.options, "dontdraw", true); //#11064
    $put($_.options, "version", "industrial"); //#11065
    $k[$j++] = 'args'; //#11067
    $k[$j++] = $_.barcode; //#11067
    $k[$j++] = $_.options; //#11067
    bwipp_code2of5(); //#11067
    var _6 = $k[--$j]; //#11067
    $_[$k[--$j]] = _6; //#11067
    $put($_.args, "opt", $_.options); //#11069
    $k[$j++] = $_.args; //#11072
    if (!$_.dontdraw) { //#11072
        bwipp_renlinear(); //#11072
    } //#11072
    $_ = $__; //#11074
} //bwipp_industrial2of5
function bwipp_iata2of5() {
    var $__ = $_; //#11103
    $_ = Object.assign({}, $_); //#11103
    $_.dontdraw = false; //#11106
    $k[$j++] = $_; //#11108
    bwipp_processoptions(); //#11108
    $_.options = $k[--$j]; //#11108
    $_.barcode = $k[--$j]; //#11109
    $put($_.options, "dontdraw", true); //#11112
    $put($_.options, "version", "iata"); //#11113
    $k[$j++] = 'args'; //#11115
    $k[$j++] = $_.barcode; //#11115
    $k[$j++] = $_.options; //#11115
    bwipp_code2of5(); //#11115
    var _6 = $k[--$j]; //#11115
    $_[$k[--$j]] = _6; //#11115
    $put($_.args, "opt", $_.options); //#11117
    $k[$j++] = $_.args; //#11120
    if (!$_.dontdraw) { //#11120
        bwipp_renlinear(); //#11120
    } //#11120
    $_ = $__; //#11122
} //bwipp_iata2of5
function bwipp_matrix2of5() {
    var $__ = $_; //#11151
    $_ = Object.assign({}, $_); //#11151
    $_.dontdraw = false; //#11154
    $k[$j++] = $_; //#11156
    bwipp_processoptions(); //#11156
    $_.options = $k[--$j]; //#11156
    $_.barcode = $k[--$j]; //#11157
    $put($_.options, "dontdraw", true); //#11160
    $put($_.options, "version", "matrix"); //#11161
    $k[$j++] = 'args'; //#11163
    $k[$j++] = $_.barcode; //#11163
    $k[$j++] = $_.options; //#11163
    bwipp_code2of5(); //#11163
    var _6 = $k[--$j]; //#11163
    $_[$k[--$j]] = _6; //#11163
    $put($_.args, "opt", $_.options); //#11165
    $k[$j++] = $_.args; //#11168
    if (!$_.dontdraw) { //#11168
        bwipp_renlinear(); //#11168
    } //#11168
    $_ = $__; //#11170
} //bwipp_matrix2of5
function bwipp_coop2of5() {
    var $__ = $_; //#11199
    $_ = Object.assign({}, $_); //#11199
    $_.dontdraw = false; //#11202
    $k[$j++] = $_; //#11204
    bwipp_processoptions(); //#11204
    $_.options = $k[--$j]; //#11204
    $_.barcode = $k[--$j]; //#11205
    $put($_.options, "dontdraw", true); //#11208
    $put($_.options, "version", "coop"); //#11209
    $k[$j++] = 'args'; //#11211
    $k[$j++] = $_.barcode; //#11211
    $k[$j++] = $_.options; //#11211
    bwipp_code2of5(); //#11211
    var _6 = $k[--$j]; //#11211
    $_[$k[--$j]] = _6; //#11211
    $put($_.args, "opt", $_.options); //#11213
    $k[$j++] = $_.args; //#11216
    if (!$_.dontdraw) { //#11216
        bwipp_renlinear(); //#11216
    } //#11216
    $_ = $__; //#11218
} //bwipp_coop2of5
function bwipp_datalogic2of5() {
    var $__ = $_; //#11247
    $_ = Object.assign({}, $_); //#11247
    $_.dontdraw = false; //#11250
    $k[$j++] = $_; //#11252
    bwipp_processoptions(); //#11252
    $_.options = $k[--$j]; //#11252
    $_.barcode = $k[--$j]; //#11253
    $put($_.options, "dontdraw", true); //#11256
    $put($_.options, "version", "datalogic"); //#11257
    $k[$j++] = 'args'; //#11259
    $k[$j++] = $_.barcode; //#11259
    $k[$j++] = $_.options; //#11259
    bwipp_code2of5(); //#11259
    var _6 = $k[--$j]; //#11259
    $_[$k[--$j]] = _6; //#11259
    $put($_.args, "opt", $_.options); //#11261
    $k[$j++] = $_.args; //#11264
    if (!$_.dontdraw) { //#11264
        bwipp_renlinear(); //#11264
    } //#11264
    $_ = $__; //#11266
} //bwipp_datalogic2of5
function bwipp_code11() {
    var $__ = $_; //#11296
    $_ = Object.assign({}, $_); //#11296
    $_.dontdraw = false; //#11299
    $_.includecheck = false; //#11300
    $_.validatecheck = false; //#11301
    $_.includetext = false; //#11302
    $_.includecheckintext = false; //#11303
    $_.textfont = "OCR-B"; //#11304
    $_.textsize = 10; //#11305
    $_.textyoffset = -8; //#11306
    $_.height = 1; //#11307
    $k[$j++] = $_; //#11309
    bwipp_processoptions(); //#11309
    $_.options = $k[--$j]; //#11309
    $_.barcode = $k[--$j]; //#11310
    if ($_.barcode.length == 0) { //#11314
        $k[$j++] = 'bwipp.code11emptyData#11313'; //#11313
        $k[$j++] = "The data must not be empty"; //#11313
        bwipp_raiseerror(); //#11313
    } //#11313
    $_.encs = $a(["111131", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "311111", "113111", "113311"]); //#11324
    $_.barchars = "0123456789-"; //#11327
    $_.charvals = new Map; //#11328
    for (var _4 = 0; _4 <= 10; _4 += 1) { //#11329
        $put($_.charvals, $geti($_.barchars, _4, 1), _4); //#11329
    } //#11329
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#11337
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#11334
        if (!_F) { //#11336
            $k[$j++] = 'bwipp.code11badCharacter#11335'; //#11335
            $k[$j++] = "Code 11 must contain only digits and dashes"; //#11335
            bwipp_raiseerror(); //#11335
        } //#11335
    } //#11335
    $_.barlen = $_.barcode.length; //#11339
    if ($_.validatecheck) { //#11345
        if ($_.barlen == 11) { //#11343
            $k[$j++] = 'bwipp.code11badLength#11342'; //#11342
            $k[$j++] = "Code 11 cannot be 11 characters using check digits"; //#11342
            bwipp_raiseerror(); //#11342
        } //#11342
        var _L = ($_.barlen <= 10) ? 1 : 2; //#11344
        $_.barlen = $_.barlen - _L; //#11344
    } //#11344
    $k[$j++] = 'numchecks'; //#11347
    if ($_.includecheck || $_.validatecheck) { //#11347
        var _P = ($_.barlen >= 10) ? 2 : 1; //#11347
        $k[$j++] = _P; //#11347
    } else { //#11347
        $k[$j++] = 0; //#11347
    } //#11347
    var _Q = $k[--$j]; //#11347
    $_[$k[--$j]] = _Q; //#11347
    $_.checksum1 = 0; //#11348
    $_.checksum2 = 0; //#11348
    for (var _U = 0, _T = $_.barlen - 1; _U <= _T; _U += 1) { //#11354
        $_.i = _U; //#11350
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#11351
        $_.checksum1 = $f($_.checksum1 + ((((($_.barlen - $_.i) - 1) % 10) + 1) * $_.indx)); //#11352
        $_.checksum2 = $f($_.checksum2 + (((($_.barlen - $_.i) % 9) + 1) * $_.indx)); //#11353
    } //#11353
    $_.checksum1 = $_.checksum1 % 11; //#11355
    $_.checksum2 = $f($_.checksum2 + $_.checksum1) % 11; //#11356
    if ($_.validatecheck) { //#11370
        if ($_.numchecks == 1) { //#11365
            var _r = $_.checksum1; //#11359
            if ($get($_.barcode, $_.barlen) != $get($_.barchars, _r)) { //#11361
                $k[$j++] = 'bwipp.code11badCheckDigit#11360'; //#11360
                $k[$j++] = "Incorrect Code 11 check digit provided"; //#11360
                bwipp_raiseerror(); //#11360
            } //#11360
        } else { //#11365
            if (($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum1)) || ($get($_.barcode, $_.barlen + 1) != $get($_.barchars, $_.checksum2))) { //#11366
                $k[$j++] = 'bwipp.code11badCheckDigits#11365'; //#11365
                $k[$j++] = "Incorrect Code 11 check digits provided"; //#11365
                bwipp_raiseerror(); //#11365
            } //#11365
        } //#11365
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#11368
        $_.includecheck = true; //#11369
    } //#11369
    $_.sbs = $s(($f($_.barlen + $_.numchecks) * 6) + 12); //#11372
    $_.txt = $a($f($_.barlen + $_.numchecks)); //#11373
    $puti($_.sbs, 0, $get($_.encs, 11)); //#11376
    $_.xpos = 8; //#11378
    for (var _1J = 0, _1I = $_.barlen - 1; _1J <= _1I; _1J += 1) { //#11388
        $_.i = _1J; //#11380
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#11381
        $_.enc = $get($_.encs, $_.indx); //#11382
        $puti($_.sbs, ($_.i * 6) + 6, $_.enc); //#11383
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11384
        for (var _1f = 0; _1f <= 5; _1f += 1) { //#11387
            $_.xpos = $f(($get($_.enc, _1f) - 48) + $_.xpos); //#11386
        } //#11386
    } //#11386
    if ($_.includecheck) { //#11417
        if ($_.barlen >= 10) { //#11414
            $puti($_.sbs, ($_.barlen * 6) + 6, $get($_.encs, $_.checksum1)); //#11393
            $puti($_.sbs, ($_.barlen * 6) + 12, $get($_.encs, $_.checksum2)); //#11394
            if ($_.includecheckintext) { //#11404
                $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum1, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11396
                $_.enc = $get($_.encs, $_.checksum1); //#11397
                for (var _29 = 0; _29 <= 5; _29 += 1) { //#11400
                    $_.xpos = $f(($get($_.enc, _29) - 48) + $_.xpos); //#11399
                } //#11399
                $put($_.txt, $_.barlen + 1, $a([$geti($_.barchars, $_.checksum2, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11401
            } else { //#11404
                $put($_.txt, $_.barlen, $a(["", $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11403
                $put($_.txt, $_.barlen + 1, $a(["", $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11404
            } //#11404
            $puti($_.sbs, ($_.barlen * 6) + 18, $get($_.encs, 11)); //#11406
        } else { //#11414
            $puti($_.sbs, ($_.barlen * 6) + 6, $get($_.encs, $_.checksum1)); //#11408
            if ($_.includecheckintext) { //#11412
                $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum1, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11410
            } else { //#11412
                $put($_.txt, $_.barlen, $a(["", $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11412
            } //#11412
            $puti($_.sbs, ($_.barlen * 6) + 12, $get($_.encs, 11)); //#11414
        } //#11414
    } else { //#11417
        $puti($_.sbs, ($_.barlen * 6) + 6, $get($_.encs, 11)); //#11417
    } //#11417
    $k[$j++] = Infinity; //#11421
    $k[$j++] = Infinity; //#11423
    var _3A = $_.sbs; //#11423
    for (var _3B = 0, _3C = _3A.length; _3B < _3C; _3B++) { //#11423
        $k[$j++] = $get(_3A, _3B) - 48; //#11423
    } //#11423
    var _3E = $a(); //#11423
    $k[$j++] = Infinity; //#11424
    for (var _3G = 0, _3H = ~~(($_.sbs.length + 1) / 2); _3G < _3H; _3G++) { //#11424
        $k[$j++] = $_.height; //#11424
    } //#11424
    var _3J = $a(); //#11424
    $k[$j++] = Infinity; //#11425
    for (var _3L = 0, _3M = ~~(($_.sbs.length + 1) / 2); _3L < _3M; _3L++) { //#11425
        $k[$j++] = 0; //#11425
    } //#11425
    var _3N = $a(); //#11425
    $k[$j++] = 'ren'; //#11428
    $k[$j++] = 'renlinear'; //#11428
    $k[$j++] = 'sbs'; //#11428
    $k[$j++] = _3E; //#11428
    $k[$j++] = 'bhs'; //#11428
    $k[$j++] = _3J; //#11428
    $k[$j++] = 'bbs'; //#11428
    $k[$j++] = _3N; //#11428
    if ($_.includetext) { //#11428
        $k[$j++] = 'txt'; //#11427
        $k[$j++] = $_.txt; //#11427
    } //#11427
    $k[$j++] = 'opt'; //#11429
    $k[$j++] = $_.options; //#11429
    var _3R = $d(); //#11429
    $k[$j++] = _3R; //#11432
    if (!$_.dontdraw) { //#11432
        bwipp_renlinear(); //#11432
    } //#11432
    $_ = $__; //#11436
} //bwipp_code11
function bwipp_bc412() {
    var $__ = $_; //#11466
    $_ = Object.assign({}, $_); //#11466
    $_.dontdraw = false; //#11469
    $_.includecheck = false; //#11470
    $_.validatecheck = false; //#11471
    $_.includetext = false; //#11472
    $_.includecheckintext = false; //#11473
    $_.includestartstop = false; //#11474
    $_.semi = false; //#11475
    $_.textfont = "OCR-B"; //#11476
    $_.textsize = 10; //#11477
    $_.textyoffset = -8; //#11478
    $_.height = 1; //#11479
    $k[$j++] = $_; //#11481
    bwipp_processoptions(); //#11481
    $_.options = $k[--$j]; //#11481
    $_.barcode = $k[--$j]; //#11482
    if ($_.barcode.length == 0) { //#11486
        $k[$j++] = 'bwipp.bc412emptyData#11485'; //#11485
        $k[$j++] = "The data must not be empty"; //#11485
        bwipp_raiseerror(); //#11485
    } //#11485
    if ($_.semi) { //#11491
        $_.includestartstop = true; //#11490
    } //#11490
    $_.barchars = "0R9GLVHA8EZ4NTS1J2Q6C7DYKBUIX3FWP5M"; //#11497
    $_.charvals = new Map; //#11498
    for (var _4 = 0; _4 <= 34; _4 += 1) { //#11499
        $put($_.charvals, $geti($_.barchars, _4, 1), _4); //#11499
    } //#11499
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#11507
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#11504
        if (!_F) { //#11506
            $k[$j++] = 'bwipp.bc412badCharacter#11505'; //#11505
            $k[$j++] = "BC412 must contain only digits and capital letters except O"; //#11505
            bwipp_raiseerror(); //#11505
        } //#11505
    } //#11505
    if ($_.semi) { //#11563
        if ($_.validatecheck) { //#11517
            if (($_.barcode.length < 8) || ($_.barcode.length > 19)) { //#11514
                $k[$j++] = 'bwipp.bc412semivalidateBadLength#11513'; //#11513
                $k[$j++] = "BC412 semi with check digit must be 8 to 19 characters long"; //#11513
                bwipp_raiseerror(); //#11513
            } //#11513
        } else { //#11517
            if (($_.barcode.length < 7) || ($_.barcode.length > 18)) { //#11518
                $k[$j++] = 'bwipp.bc412semiBadLength#11517'; //#11517
                $k[$j++] = "BC412 semi must be 7 to 18 characters long"; //#11517
                bwipp_raiseerror(); //#11517
            } //#11517
        } //#11517
        $_.barlen = $_.barcode.length; //#11521
        if (!$_.validatecheck) { //#11529
            $_.barlen = $_.barlen + 1; //#11523
            $_.sbarcode = $s($_.barlen); //#11524
            $put($_.sbarcode, 0, $get($_.barcode, 0)); //#11525
            $put($_.sbarcode, 1, 48); //#11526
            $puti($_.sbarcode, 2, $geti($_.barcode, 1, $_.barlen - 2)); //#11527
            $_.barcode = $_.sbarcode; //#11528
        } //#11528
        $_.sumodd = 0; //#11530
        $_.sumeven = 0; //#11530
        for (var _c = 0, _b = $_.barlen - 1; _c <= _b; _c += 1) { //#11539
            $_.i = _c; //#11532
            $k[$j++] = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#11538
            if (($_.i % 2) == 0) { //#11537
                $_.sumodd = $f($k[--$j] + $_.sumodd); //#11535
            } else { //#11537
                $_.sumeven = $f($k[--$j] + $_.sumeven); //#11537
            } //#11537
        } //#11537
        $_.checksum = ($f(($_.sumodd % 35) + (($_.sumeven % 35) * 2))) % 35; //#11540
        if ($_.validatecheck) { //#11547
            if ($_.checksum != 0) { //#11544
                $k[$j++] = 'bwipp.bc412semiBadCheckDigit#11543'; //#11543
                $k[$j++] = "Incorrect BC412 semi check digit provided"; //#11543
                bwipp_raiseerror(); //#11543
            } //#11543
        } else { //#11547
            $_.checksum = ($_.checksum * 17) % 35; //#11546
            $put($_.barcode, 1, $get($_.barchars, $_.checksum)); //#11547
        } //#11547
    } else { //#11563
        $k[$j++] = 'barlen'; //#11550
        $k[$j++] = $_.barcode.length; //#11550
        if ($_.validatecheck) { //#11550
            var _y = $k[--$j]; //#11550
            $k[$j++] = _y - 1; //#11550
        } //#11550
        var _z = $k[--$j]; //#11550
        $_[$k[--$j]] = _z; //#11550
        $_.checksum = 0; //#11552
        for (var _13 = 0, _12 = $_.barlen - 1; _13 <= _12; _13 += 1) { //#11556
            $_.checksum = $f($get($_.charvals, $geti($_.barcode, _13, 1)) + $_.checksum); //#11555
        } //#11555
        $_.checksum = $_.checksum % 35; //#11557
        if ($_.validatecheck) { //#11564
            if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#11561
                $k[$j++] = 'bwipp.bc412badCheckDigit#11560'; //#11560
                $k[$j++] = "Incorrect BC412 check digit provided"; //#11560
                bwipp_raiseerror(); //#11560
            } //#11560
            $_.barcode = $geti($_.barcode, 0, $_.barlen); //#11562
            $_.includecheck = true; //#11563
        } //#11563
    } //#11563
    $_.encs = $a(["11111115", "13111212", "11131113", "12111213", "12121311", "13131111", "12111312", "11131212", "11121411", "11151111", "15111111", "11111511", "12131211", "13121112", "13111311", "11111214", "12121113", "11111313", "13111113", "11121213", "11141112", "11121312", "11141211", "14121111", "12121212", "11131311", "13121211", "12111411", "14111211", "11111412", "12111114", "14111112", "12141111", "11121114", "12131112", "12", "111"]); //#11578
    $_.sbs = $s((($_.barlen + 1) * 8) + 5); //#11581
    if ($_.includecheck) { //#11585
        $_.txt = $a($_.barlen + 1); //#11583
    } else { //#11585
        $_.txt = $a($_.barlen); //#11585
    } //#11585
    if ($_.includestartstop) { //#11595
        $puti($_.sbs, 0, $get($_.encs, 35)); //#11590
        $_.pos = 2; //#11591
        $_.txtpos = 3; //#11592
    } else { //#11595
        $_.pos = 0; //#11594
        $_.txtpos = 0; //#11595
    } //#11595
    for (var _1Z = 0, _1Y = $_.barlen - 1; _1Z <= _1Y; _1Z += 1) { //#11604
        $_.i = _1Z; //#11599
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#11600
        $puti($_.sbs, $_.pos, $get($_.encs, $_.indx)); //#11601
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 12) + $_.txtpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11602
        $_.pos = $_.pos + 8; //#11603
    } //#11603
    if ($_.includecheck) { //#11615
        $puti($_.sbs, $_.pos, $get($_.encs, $_.checksum)); //#11608
        if ($_.includecheckintext) { //#11612
            $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), ($_.barlen * 12) + $_.txtpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11610
        } else { //#11612
            $put($_.txt, $_.barlen, $a(["", ($_.barlen * 12) + $_.txtpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11612
        } //#11612
        $_.pos = $_.pos + 8; //#11614
    } //#11614
    if ($_.includestartstop) { //#11621
        $puti($_.sbs, $_.pos, $get($_.encs, 36)); //#11619
        $_.pos = $_.pos + 3; //#11620
    } //#11620
    $_.sbs = $geti($_.sbs, 0, $_.pos); //#11624
    $k[$j++] = Infinity; //#11625
    $k[$j++] = Infinity; //#11627
    var _2W = $_.sbs; //#11627
    for (var _2X = 0, _2Y = _2W.length; _2X < _2Y; _2X++) { //#11627
        $k[$j++] = $get(_2W, _2X) - 48; //#11627
    } //#11627
    var _2a = $a(); //#11627
    $k[$j++] = Infinity; //#11628
    for (var _2c = 0, _2d = ~~(($_.sbs.length + 1) / 2); _2c < _2d; _2c++) { //#11628
        $k[$j++] = $_.height; //#11628
    } //#11628
    var _2f = $a(); //#11628
    $k[$j++] = Infinity; //#11629
    for (var _2h = 0, _2i = ~~(($_.sbs.length + 1) / 2); _2h < _2i; _2h++) { //#11629
        $k[$j++] = 0; //#11629
    } //#11629
    var _2j = $a(); //#11629
    $k[$j++] = 'ren'; //#11632
    $k[$j++] = 'renlinear'; //#11632
    $k[$j++] = 'sbs'; //#11632
    $k[$j++] = _2a; //#11632
    $k[$j++] = 'bhs'; //#11632
    $k[$j++] = _2f; //#11632
    $k[$j++] = 'bbs'; //#11632
    $k[$j++] = _2j; //#11632
    if ($_.includetext) { //#11632
        $k[$j++] = 'txt'; //#11631
        $k[$j++] = $_.txt; //#11631
    } //#11631
    $k[$j++] = 'opt'; //#11633
    $k[$j++] = $_.options; //#11633
    var _2n = $d(); //#11633
    $k[$j++] = _2n; //#11636
    if (!$_.dontdraw) { //#11636
        bwipp_renlinear(); //#11636
    } //#11636
    $_ = $__; //#11640
} //bwipp_bc412
function bwipp_rationalizedCodabar() {
    var $__ = $_; //#11670
    $_ = Object.assign({}, $_); //#11670
    $_.dontdraw = false; //#11673
    $_.altstartstop = false; //#11674
    $_.includecheck = false; //#11675
    $_.validatecheck = false; //#11676
    $_.includetext = false; //#11677
    $_.includecheckintext = false; //#11678
    $_.textfont = "OCR-B"; //#11679
    $_.textsize = 10; //#11680
    $_.textyoffset = -8; //#11681
    $_.height = 1; //#11682
    $k[$j++] = $_; //#11684
    bwipp_processoptions(); //#11684
    $_.options = $k[--$j]; //#11684
    $_.barcode = $k[--$j]; //#11685
    if (($_.barcode.length < 2) || (($_.barcode.length < 3) && $_.validatecheck)) { //#11689
        $k[$j++] = 'bwipp.rationalizedCodabarBadLength#11688'; //#11688
        $k[$j++] = "Codabar must be at least 2 characters in length excluding any check digit"; //#11688
        bwipp_raiseerror(); //#11688
    } //#11688
    $_.encs = $a(["11111331", "11113311", "11131131", "33111111", "11311311", "31111311", "13111131", "13113111", "13311111", "31131111", "11133111", "11331111", "31113131", "31311131", "31313111", "11313131", "11331311", "13131131", "11131331", "11133311"]); //#11700
    $_.barcharsnormal = "0123456789-$:/.+ABCD"; //#11703
    $_.barcharsalt = "0123456789-$:/.+TN*E"; //#11704
    var _8 = $_.altstartstop ? $_.barcharsalt : $_.barcharsnormal; //#11707
    $_.barchars = _8; //#11707
    $_.charvals = new Map; //#11709
    for (var _9 = 0; _9 <= 19; _9 += 1) { //#11710
        $put($_.charvals, $geti($_.barchars, _9, 1), _9); //#11710
    } //#11710
    $_.bodyvals = new Map; //#11711
    for (var _D = 0; _D <= 15; _D += 1) { //#11712
        $put($_.bodyvals, $geti($_.barchars, _D, 1), _D); //#11712
    } //#11712
    $_.ssvals = new Map; //#11713
    for (var _H = 16; _H <= 19; _H += 1) { //#11714
        $put($_.ssvals, $geti($_.barchars, _H, 1), _H); //#11714
    } //#11714
    var _O = $get($_.ssvals, $geti($_.barcode, 0, 1)) !== undefined; //#11717
    var _T = $get($_.ssvals, $geti($_.barcode, $_.barcode.length - 1, 1)) !== undefined; //#11718
    if ((!_O) || (!_T)) { //#11724
        if ($_.altstartstop) { //#11722
            $k[$j++] = 'bwipp.rationalizedCodabarBadAltStartStop#11720'; //#11720
            $k[$j++] = "Codabar start and stop characters must be one of E N T or *"; //#11720
            bwipp_raiseerror(); //#11720
        } else { //#11722
            $k[$j++] = 'bwipp.rationalizedCodabarBadStartStop#11722'; //#11722
            $k[$j++] = "Codabar start and stop characters must be one of A B C or D"; //#11722
            bwipp_raiseerror(); //#11722
        } //#11722
    } //#11722
    for (var _X = 1, _W = $_.barcode.length - 2; _X <= _W; _X += 1) { //#11729
        var _b = $get($_.bodyvals, $geti($_.barcode, _X, 1)) !== undefined; //#11726
        if (!_b) { //#11728
            $k[$j++] = 'bwipp.rationalizedCodabarBadCharacter#11727'; //#11727
            $k[$j++] = "Codabar body must contain only digits and symbols - $ : / . +"; //#11727
            bwipp_raiseerror(); //#11727
        } //#11727
    } //#11727
    $k[$j++] = 'barlen'; //#11731
    $k[$j++] = $_.barcode.length; //#11731
    if ($_.validatecheck) { //#11731
        var _e = $k[--$j]; //#11731
        $k[$j++] = _e - 1; //#11731
    } //#11731
    var _f = $k[--$j]; //#11731
    $_[$k[--$j]] = _f; //#11731
    $_.checksum = 0; //#11733
    for (var _j = 0, _i = $_.barlen - 2; _j <= _i; _j += 1) { //#11737
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _j, 1)) + $_.checksum); //#11736
    } //#11736
    var _r = $geti($_.barcode, $_.barcode.length - 1, 1); //#11738
    $_.checksum = $f($get($_.charvals, _r) + $_.checksum); //#11739
    $_.checksum = (16 - ($_.checksum % 16)) % 16; //#11740
    if ($_.validatecheck) { //#11750
        if ($get($_.barcode, $_.barlen - 1) != $get($_.barchars, $_.checksum)) { //#11744
            $k[$j++] = 'bwipp.rationalizedCodabarBadCheckDigit#11743'; //#11743
            $k[$j++] = "Incorrect Codabar check digit provided"; //#11743
            bwipp_raiseerror(); //#11743
        } //#11743
        var _14 = $s($_.barlen); //#11745
        $puti(_14, 0, $geti($_.barcode, 0, $_.barlen - 1)); //#11746
        $puti(_14, $_.barlen - 1, $geti($_.barcode, $_.barlen, 1)); //#11747
        $_.barcode = _14; //#11748
        $_.includecheck = true; //#11749
    } //#11749
    $k[$j++] = 'sbs'; //#11752
    $k[$j++] = $_.barlen; //#11752
    if ($_.includecheck) { //#11752
        var _1E = $k[--$j]; //#11752
        $k[$j++] = _1E + 1; //#11752
    } //#11752
    var _1G = $s($k[--$j] * 8); //#11752
    $_[$k[--$j]] = _1G; //#11752
    $k[$j++] = 'txt'; //#11753
    $k[$j++] = $_.barlen; //#11753
    if ($_.includecheck) { //#11753
        var _1K = $k[--$j]; //#11753
        $k[$j++] = _1K + 1; //#11753
    } //#11753
    var _1M = $a($k[--$j]); //#11753
    $_[$k[--$j]] = _1M; //#11753
    $_.xpos = 0; //#11755
    for (var _1Q = 0, _1P = $_.barlen - 2; _1Q <= _1P; _1Q += 1) { //#11765
        $_.i = _1Q; //#11757
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#11758
        $_.enc = $get($_.encs, $_.indx); //#11759
        $puti($_.sbs, $_.i * 8, $_.enc); //#11760
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11761
        for (var _1m = 0; _1m <= 7; _1m += 1) { //#11764
            $_.xpos = $f(($get($_.enc, _1m) - 48) + $_.xpos); //#11763
        } //#11763
    } //#11763
    if ($_.includecheck) { //#11789
        $puti($_.sbs, ($_.barlen * 8) - 8, $get($_.encs, $_.checksum)); //#11770
        if ($_.includecheckintext) { //#11774
            $put($_.txt, $_.barlen - 1, $a([$geti($_.barchars, $_.checksum, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11772
        } else { //#11774
            $put($_.txt, $_.barlen - 1, $a([" ", $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11774
        } //#11774
        for (var _2E = 0; _2E <= 7; _2E += 1) { //#11778
            $_.xpos = $f(($get($get($_.encs, $_.checksum), _2E) - 48) + $_.xpos); //#11777
        } //#11777
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.barlen - 1, 1)); //#11780
        $_.enc = $get($_.encs, $_.indx); //#11781
        $puti($_.sbs, $_.barlen * 8, $_.enc); //#11782
        $put($_.txt, $_.barlen, $a([$geti($_.barcode, $_.barlen - 1, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11783
    } else { //#11789
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.barlen - 1, 1)); //#11786
        $_.enc = $get($_.encs, $_.indx); //#11787
        $puti($_.sbs, ($_.barlen * 8) - 8, $_.enc); //#11788
        $put($_.txt, $_.barlen - 1, $a([$geti($_.barcode, $_.barlen - 1, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11789
    } //#11789
    $k[$j++] = Infinity; //#11793
    $k[$j++] = Infinity; //#11795
    $forall($_.sbs, function() { //#11795
        var _31 = $k[--$j]; //#11795
        $k[$j++] = _31 - 48; //#11795
    }); //#11795
    var _32 = $a(); //#11795
    $k[$j++] = Infinity; //#11796
    for (var _34 = 0, _35 = ~~(($_.sbs.length + 1) / 2); _34 < _35; _34++) { //#11796
        $k[$j++] = $_.height; //#11796
    } //#11796
    var _37 = $a(); //#11796
    $k[$j++] = Infinity; //#11797
    for (var _39 = 0, _3A = ~~(($_.sbs.length + 1) / 2); _39 < _3A; _39++) { //#11797
        $k[$j++] = 0; //#11797
    } //#11797
    var _3B = $a(); //#11797
    $k[$j++] = 'ren'; //#11800
    $k[$j++] = 'renlinear'; //#11800
    $k[$j++] = 'sbs'; //#11800
    $k[$j++] = _32; //#11800
    $k[$j++] = 'bhs'; //#11800
    $k[$j++] = _37; //#11800
    $k[$j++] = 'bbs'; //#11800
    $k[$j++] = _3B; //#11800
    if ($_.includetext) { //#11800
        $k[$j++] = 'txt'; //#11799
        $k[$j++] = $_.txt; //#11799
    } //#11799
    $k[$j++] = 'opt'; //#11801
    $k[$j++] = $_.options; //#11801
    var _3F = $d(); //#11801
    $k[$j++] = _3F; //#11804
    if (!$_.dontdraw) { //#11804
        bwipp_renlinear(); //#11804
    } //#11804
    $_ = $__; //#11808
} //bwipp_rationalizedCodabar
function bwipp_onecode() {
    var $__ = $_; //#11838
    $_ = Object.assign({}, $_); //#11838
    $_.dontdraw = false; //#11841
    $_.height = 0.15; //#11842
    $k[$j++] = $_; //#11844
    bwipp_processoptions(); //#11844
    $_.options = $k[--$j]; //#11844
    $_.barcode = $k[--$j]; //#11845
    $_.barlen = $_.barcode.length; //#11849
    $forall($_.barcode, function() { //#11855
        var _4 = $k[--$j]; //#11852
        if ((_4 < 48) || (_4 > 57)) { //#11854
            $k[$j++] = 'bwipp.onecodeBadCharacter#11853'; //#11853
            $k[$j++] = "The data must contain only digits"; //#11853
            bwipp_raiseerror(); //#11853
        } //#11853
    }); //#11853
    if (((($_.barlen != 20) && ($_.barlen != 25)) && ($_.barlen != 29)) && ($_.barlen != 31)) { //#11859
        $k[$j++] = 'bwipp.onecodeInvalidLength#11858'; //#11858
        $k[$j++] = "The data must be 20, 25, 29 or 31 digits"; //#11858
        bwipp_raiseerror(); //#11858
    } //#11858
    $k[$j++] = Infinity; //#11862
    var _B = $eq($geti($_.barcode, 5, 1), "9") ? 14 : 11; //#11865
    $k[$j++] = 2; //#11868
    $k[$j++] = 2; //#11868
    $k[$j++] = 5; //#11868
    $k[$j++] = 5; //#11868
    $k[$j++] = _B; //#11868
    $k[$j++] = _B; //#11868
    $k[$j++] = 20; //#11868
    $k[$j++] = 20; //#11868
    $k[$j++] = 25; //#11868
    $k[$j++] = 25; //#11868
    $k[$j++] = 29; //#11868
    $k[$j++] = 29; //#11868
    $_.txtdict = $d(); //#11869
    $_.txt = $a($_.barlen + 6); //#11870
    $_.spacecnt = 0; //#11871
    for (var _H = 0, _G = $_.barlen - 1; _H <= _G; _H += 1) { //#11879
        $_.i = _H; //#11873
        var _K = $get($_.txtdict, $_.i) !== undefined; //#11874
        if (_K) { //#11877
            $put($_.txt, $_.i + $_.spacecnt, $a([" ", 0, 0, "", 0])); //#11875
            $_.spacecnt = $_.spacecnt + 1; //#11876
        } //#11876
        $put($_.txt, $_.i + $_.spacecnt, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#11878
    } //#11878
    $_.txt = $geti($_.txt, 0, $_.barcode.length + $_.spacecnt); //#11880
    $_.normalize = function() {
        $_.base = $k[--$j]; //#11883
        $_.num = $k[--$j]; //#11884
        for (var _e = $_.num.length - 1; _e >= 1; _e -= 1) { //#11889
            $_.i = _e; //#11886
            var _f = $_.num; //#11887
            var _g = $_.i; //#11887
            $put(_f, _g - 1, $f($get(_f, _g - 1) + (~~($get($_.num, $_.i) / $_.base)))); //#11887
            $put($_.num, $_.i, $get($_.num, $_.i) % $_.base); //#11888
        } //#11888
        for (;;) { //#11895
            if ($lt($get($_.num, 0), $_.base)) { //#11891
                break; //#11891
            } //#11891
            $k[$j++] = Infinity; //#11892
            $k[$j++] = 0; //#11892
            $aload($_.num); //#11892
            $_.num = $a(); //#11892
            $put($_.num, 0, $f($get($_.num, 0) + (~~($get($_.num, 1) / $_.base)))); //#11893
            $put($_.num, 1, $get($_.num, 1) % $_.base); //#11894
        } //#11894
        $k[$j++] = Infinity; //#11897
        $_.i = true; //#11897
        var _17 = $_.num; //#11897
        for (var _18 = 0, _19 = _17.length; _18 < _19; _18++) { //#11897
            var _1A = $get(_17, _18); //#11897
            $k[$j++] = _1A; //#11897
            if ((_1A == 0) && $_.i) { //#11897
                $j--; //#11897
            } else { //#11897
                $_.i = false; //#11897
            } //#11897
        } //#11897
        $_.num = $a(); //#11897
        if ($_.num.length == 0) { //#11898
            $_.num = $a([0]); //#11898
        } //#11898
        $k[$j++] = $_.num; //#11899
    }; //#11899
    $_.bigadd = function() {
        var _1G = $k[--$j]; //#11903
        var _1H = $k[--$j]; //#11903
        $_.offset = $abs(_1G.length - _1H.length); //#11904
        if (_1G.length < _1H.length) { //#11905
            var _ = _1G; //#11905
            _1G = _1H; //#11905
            _1H = _; //#11905
        } //#11905
        $_.a = _1G; //#11906
        $_.b = _1H; //#11906
        for (var _1K = 0, _1J = $_.b.length - 1; _1K <= _1J; _1K += 1) { //#11909
            var _1L = $_.a; //#11908
            var _1M = $_.offset; //#11908
            $put(_1L, _1K + _1M, $f($get(_1L, _1K + _1M) + $get($_.b, _1K))); //#11908
        } //#11908
        $k[$j++] = $_.a; //#11910
    }; //#11910
    var _1V = new Map([
        [20, $a([0])],
        [25, $a([1])],
        [29, $a([1, 0, 0, 0, 0, 1])],
        [31, $a([1, 0, 0, 0, 1, 0, 0, 0, 0, 1])]
    ]); //#11919
    $_.startvals = _1V; //#11920
    $k[$j++] = 'binval'; //#11923
    $k[$j++] = $get($_.startvals, $_.barlen); //#11923
    $k[$j++] = Infinity; //#11923
    var _1c = $geti($_.barcode, 20, $_.barlen - 20); //#11923
    for (var _1d = 0, _1e = _1c.length; _1d < _1e; _1d++) { //#11923
        $k[$j++] = $get(_1c, _1d) - 48; //#11923
    } //#11923
    var _1g = $a(); //#11923
    $k[$j++] = _1g; //#11923
    $_.bigadd(); //#11923
    var _1h = $k[--$j]; //#11923
    $_[$k[--$j]] = _1h; //#11923
    $k[$j++] = Infinity; //#11924
    $aload($_.binval); //#11924
    $k[$j++] = $get($_.barcode, 0) - 48; //#11924
    $_.binval = $a(); //#11924
    $k[$j++] = Infinity; //#11925
    var _1n = $_.binval; //#11925
    for (var _1o = 0, _1p = _1n.length; _1o < _1p; _1o++) { //#11925
        $k[$j++] = $get(_1n, _1o) * 5; //#11925
    } //#11925
    var _1r = $a(); //#11925
    $k[$j++] = 'binval'; //#11925
    $k[$j++] = _1r; //#11925
    $k[$j++] = $a([$get($_.barcode, 1) - 48]); //#11925
    $_.bigadd(); //#11925
    $k[$j++] = 10; //#11925
    $_.normalize(); //#11925
    var _1v = $k[--$j]; //#11925
    $_[$k[--$j]] = _1v; //#11925
    $k[$j++] = Infinity; //#11926
    $aload($_.binval); //#11926
    var _1z = $geti($_.barcode, 2, 18); //#11926
    for (var _20 = 0, _21 = _1z.length; _20 < _21; _20++) { //#11926
        $k[$j++] = $get(_1z, _20) - 48; //#11926
    } //#11926
    $_.binval = $a(); //#11926
    $_.bytes = $a(13); //#11929
    var _25 = $_.binval; //#11930
    $_.bintmp = $arrcpy($a(_25.length), _25); //#11930
    for (var _28 = 12; _28 >= 0; _28 -= 1) { //#11940
        $_.i = _28; //#11932
        for (var _2B = 0, _2A = $_.bintmp.length - 2; _2B <= _2A; _2B += 1) { //#11937
            $_.j = _2B; //#11934
            var _2C = $_.bintmp; //#11935
            var _2D = $_.j; //#11935
            $put(_2C, _2D + 1, $f($get(_2C, _2D + 1) + (($get($_.bintmp, $_.j) % 256) * 10))); //#11935
            $put($_.bintmp, $_.j, ~~($get($_.bintmp, $_.j) / 256)); //#11936
        } //#11936
        $put($_.bytes, $_.i, $get($_.bintmp, $_.bintmp.length - 1) % 256); //#11938
        var _2S = $_.bintmp; //#11939
        var _2T = $_.bintmp; //#11939
        $put(_2S, _2T.length - 1, ~~($get(_2S, _2T.length - 1) / 256)); //#11939
    } //#11939
    $_.fcs = 2047; //#11943
    $_.dat = $get($_.bytes, 0) << 5; //#11944
    for (var _2X = 0; _2X < 6; _2X++) { //#11953
        if ((($_.fcs ^ $_.dat) & 1024) != 0) { //#11949
            $_.fcs = ($_.fcs << 1) ^ 3893; //#11947
        } else { //#11949
            $_.fcs = $_.fcs << 1; //#11949
        } //#11949
        $_.fcs = $_.fcs & 2047; //#11951
        $_.dat = $_.dat << 1; //#11952
    } //#11952
    for (var _2e = 1; _2e <= 12; _2e += 1) { //#11965
        $_.dat = $get($_.bytes, _2e) << 3; //#11955
        for (var _2h = 0; _2h < 8; _2h++) { //#11964
            if ((($_.fcs ^ $_.dat) & 1024) != 0) { //#11960
                $_.fcs = ($_.fcs << 1) ^ 3893; //#11958
            } else { //#11960
                $_.fcs = $_.fcs << 1; //#11960
            } //#11960
            $_.fcs = $_.fcs & 2047; //#11962
            $_.dat = $_.dat << 1; //#11963
        } //#11963
    } //#11963
    $_.codewords = $a(10); //#11968
    for (var _2p = 9; _2p >= 0; _2p -= 1) { //#11979
        $_.i = _2p; //#11970
        var _2r = ($_.i == 9) ? 636 : 1365; //#11971
        $_.b = _2r; //#11971
        for (var _2u = 0, _2t = $_.binval.length - 2; _2u <= _2t; _2u += 1) { //#11976
            $_.j = _2u; //#11973
            var _2v = $_.binval; //#11974
            var _2w = $_.j; //#11974
            $put(_2v, _2w + 1, $f($get(_2v, _2w + 1) + (($get($_.binval, $_.j) % $_.b) * 10))); //#11974
            $put($_.binval, $_.j, ~~($get($_.binval, $_.j) / $_.b)); //#11975
        } //#11975
        $put($_.codewords, $_.i, $get($_.binval, $_.binval.length - 1) % $_.b); //#11977
        var _3E = $_.binval; //#11978
        var _3F = $_.binval; //#11978
        $put(_3E, _3F.length - 1, ~~($get(_3E, _3F.length - 1) / $_.b)); //#11978
    } //#11978
    $put($_.codewords, 9, $get($_.codewords, 9) * 2); //#11982
    if (($_.fcs & 1024) != 0) { //#11985
        $put($_.codewords, 0, $get($_.codewords, 0) + 659); //#11984
    } //#11984
    $_.tab513 = $a([31, 7936, 47, 7808, 55, 7552, 59, 7040, 61, 6016, 62, 3968, 79, 7744, 87, 7488, 91, 6976, 93, 5952, 94, 3904, 103, 7360, 107, 6848, 109, 5824, 110, 3776, 115, 6592, 117, 5568, 118, 3520, 121, 5056, 122, 3008, 124, 1984, 143, 7712, 151, 7456, 155, 6944, 157, 5920, 158, 3872, 167, 7328, 171, 6816, 173, 5792, 174, 3744, 179, 6560, 181, 5536, 182, 3488, 185, 5024, 186, 2976, 188, 1952, 199, 7264, 203, 6752, 205, 5728, 206, 3680, 211, 6496, 213, 5472, 214, 3424, 217, 4960, 218, 2912, 220, 1888, 227, 6368, 229, 5344, 230, 3296, 233, 4832, 234, 2784, 236, 1760, 241, 4576, 242, 2528, 244, 1504, 248, 992, 271, 7696, 279, 7440, 283, 6928, 285, 5904, 286, 3856, 295, 7312, 299, 6800, 301, 5776, 302, 3728, 307, 6544, 309, 5520, 310, 3472, 313, 5008, 314, 2960, 316, 1936, 327, 7248, 331, 6736, 333, 5712, 334, 3664, 339, 6480, 341, 5456, 342, 3408, 345, 4944, 346, 2896, 348, 1872, 355, 6352, 357, 5328, 358, 3280, 361, 4816, 362, 2768, 364, 1744, 369, 4560, 370, 2512, 372, 1488, 376, 976, 391, 7216, 395, 6704, 397, 5680, 398, 3632, 403, 6448, 405, 5424, 406, 3376, 409, 4912, 410, 2864, 412, 1840, 419, 6320, 421, 5296, 422, 3248, 425, 4784, 426, 2736, 428, 1712, 433, 4528, 434, 2480, 436, 1456, 440, 944, 451, 6256, 453, 5232, 454, 3184, 457, 4720, 458, 2672, 460, 1648, 465, 4464, 466, 2416, 468, 1392, 472, 880, 481, 4336, 482, 2288, 484, 1264, 488, 752, 527, 7688, 535, 7432, 539, 6920, 541, 5896, 542, 3848, 551, 7304, 555, 6792, 557, 5768, 558, 3720, 563, 6536, 565, 5512, 566, 3464, 569, 5000, 570, 2952, 572, 1928, 583, 7240, 587, 6728, 589, 5704, 590, 3656, 595, 6472, 597, 5448, 598, 3400, 601, 4936, 602, 2888, 604, 1864, 611, 6344, 613, 5320, 614, 3272, 617, 4808, 618, 2760, 620, 1736, 625, 4552, 626, 2504, 628, 1480, 632, 968, 647, 7208, 651, 6696, 653, 5672, 654, 3624, 659, 6440, 661, 5416, 662, 3368, 665, 4904, 666, 2856, 668, 1832, 675, 6312, 677, 5288, 678, 3240, 681, 4776, 682, 2728, 684, 1704, 689, 4520, 690, 2472, 692, 1448, 696, 936, 707, 6248, 709, 5224, 710, 3176, 713, 4712, 714, 2664, 716, 1640, 721, 4456, 722, 2408, 724, 1384, 728, 872, 737, 4328, 738, 2280, 740, 1256, 775, 7192, 779, 6680, 781, 5656, 782, 3608, 787, 6424, 789, 5400, 790, 3352, 793, 4888, 794, 2840, 796, 1816, 803, 6296, 805, 5272, 806, 3224, 809, 4760, 810, 2712, 812, 1688, 817, 4504, 818, 2456, 820, 1432, 824, 920, 835, 6232, 837, 5208, 838, 3160, 841, 4696, 842, 2648, 844, 1624, 849, 4440, 850, 2392, 852, 1368, 865, 4312, 866, 2264, 868, 1240, 899, 6200, 901, 5176, 902, 3128, 905, 4664, 906, 2616, 908, 1592, 913, 4408, 914, 2360, 916, 1336, 929, 4280, 930, 2232, 932, 1208, 961, 4216, 962, 2168, 964, 1144, 1039, 7684, 1047, 7428, 1051, 6916, 1053, 5892, 1054, 3844, 1063, 7300, 1067, 6788, 1069, 5764, 1070, 3716, 1075, 6532, 1077, 5508, 1078, 3460, 1081, 4996, 1082, 2948, 1084, 1924, 1095, 7236, 1099, 6724, 1101, 5700, 1102, 3652, 1107, 6468, 1109, 5444, 1110, 3396, 1113, 4932, 1114, 2884, 1116, 1860, 1123, 6340, 1125, 5316, 1126, 3268, 1129, 4804, 1130, 2756, 1132, 1732, 1137, 4548, 1138, 2500, 1140, 1476, 1159, 7204, 1163, 6692, 1165, 5668, 1166, 3620, 1171, 6436, 1173, 5412, 1174, 3364, 1177, 4900, 1178, 2852, 1180, 1828, 1187, 6308, 1189, 5284, 1190, 3236, 1193, 4772, 1194, 2724, 1196, 1700, 1201, 4516, 1202, 2468, 1204, 1444, 1219, 6244, 1221, 5220, 1222, 3172, 1225, 4708, 1226, 2660, 1228, 1636, 1233, 4452, 1234, 2404, 1236, 1380, 1249, 4324, 1250, 2276, 1287, 7188, 1291, 6676, 1293, 5652, 1294, 3604, 1299, 6420, 1301, 5396, 1302, 3348, 1305, 4884, 1306, 2836, 1308, 1812, 1315, 6292, 1317, 5268, 1318, 3220, 1321, 4756, 1322, 2708, 1324, 1684, 1329, 4500, 1330, 2452, 1332, 1428, 1347, 6228, 1349, 5204, 1350, 3156, 1353, 4692, 1354, 2644, 1356, 1620, 1361, 4436, 1362, 2388, 1377, 4308, 1378, 2260, 1411, 6196, 1413, 5172, 1414, 3124, 1417, 4660, 1418, 2612, 1420, 1588, 1425, 4404, 1426, 2356, 1441, 4276, 1442, 2228, 1473, 4212, 1474, 2164, 1543, 7180, 1547, 6668, 1549, 5644, 1550, 3596, 1555, 6412, 1557, 5388, 1558, 3340, 1561, 4876, 1562, 2828, 1564, 1804, 1571, 6284, 1573, 5260, 1574, 3212, 1577, 4748, 1578, 2700, 1580, 1676, 1585, 4492, 1586, 2444, 1603, 6220, 1605, 5196, 1606, 3148, 1609, 4684, 1610, 2636, 1617, 4428, 1618, 2380, 1633, 4300, 1634, 2252, 1667, 6188, 1669, 5164, 1670, 3116, 1673, 4652, 1674, 2604, 1681, 4396, 1682, 2348, 1697, 4268, 1698, 2220, 1729, 4204, 1730, 2156, 1795, 6172, 1797, 5148, 1798, 3100, 1801, 4636, 1802, 2588, 1809, 4380, 1810, 2332, 1825, 4252, 1826, 2204, 1857, 4188, 1858, 2140, 1921, 4156, 1922, 2108, 2063, 7682, 2071, 7426, 2075, 6914, 2077, 5890, 2078, 3842, 2087, 7298, 2091, 6786, 2093, 5762, 2094, 3714, 2099, 6530, 2101, 5506, 2102, 3458, 2105, 4994, 2106, 2946, 2119, 7234, 2123, 6722, 2125, 5698, 2126, 3650, 2131, 6466, 2133, 5442, 2134, 3394, 2137, 4930, 2138, 2882, 2147, 6338, 2149, 5314, 2150, 3266, 2153, 4802, 2154, 2754, 2161, 4546, 2162, 2498, 2183, 7202, 2187, 6690, 2189, 5666, 2190, 3618, 2195, 6434, 2197, 5410, 2198, 3362, 2201, 4898, 2202, 2850, 2211, 6306, 2213, 5282, 2214, 3234, 2217, 4770, 2218, 2722, 2225, 4514, 2226, 2466, 2243, 6242, 2245, 5218, 2246, 3170, 2249, 4706, 2250, 2658, 2257, 4450, 2258, 2402, 2273, 4322, 2311, 7186, 2315, 6674, 2317, 5650, 2318, 3602, 2323, 6418, 2325, 5394, 2326, 3346, 2329, 4882, 2330, 2834, 2339, 6290, 2341, 5266, 2342, 3218, 2345, 4754, 2346, 2706, 2353, 4498, 2354, 2450, 2371, 6226, 2373, 5202, 2374, 3154, 2377, 4690, 2378, 2642, 2385, 4434, 2401, 4306, 2435, 6194, 2437, 5170, 2438, 3122, 2441, 4658, 2442, 2610, 2449, 4402, 2465, 4274, 2497, 4210, 2567, 7178, 2571, 6666, 2573, 5642, 2574, 3594, 2579, 6410, 2581, 5386, 2582, 3338, 2585, 4874, 2586, 2826, 2595, 6282, 2597, 5258, 2598, 3210, 2601, 4746, 2602, 2698, 2609, 4490, 2627, 6218, 2629, 5194, 2630, 3146, 2633, 4682, 2641, 4426, 2657, 4298, 2691, 6186, 2693, 5162, 2694, 3114, 2697, 4650, 2705, 4394, 2721, 4266, 2753, 4202, 2819, 6170, 2821, 5146, 2822, 3098, 2825, 4634, 2833, 4378, 2849, 4250, 2881, 4186, 2945, 4154, 3079, 7174, 3083, 6662, 3085, 5638, 3086, 3590, 3091, 6406, 3093, 5382, 3094, 3334, 3097, 4870, 3107, 6278, 3109, 5254, 3110, 3206, 3113, 4742, 3121, 4486, 3139, 6214, 3141, 5190, 3145, 4678, 3153, 4422, 3169, 4294, 3203, 6182, 3205, 5158, 3209, 4646, 3217, 4390, 3233, 4262, 3265, 4198, 3331, 6166, 3333, 5142, 3337, 4630, 3345, 4374, 3361, 4246, 3393, 4182, 3457, 4150, 3587, 6158, 3589, 5134, 3593, 4622, 3601, 4366, 3617, 4238, 3649, 4174, 3713, 4142, 3841, 4126, 4111, 7681, 4119, 7425, 4123, 6913, 4125, 5889, 4135, 7297, 4139, 6785, 4141, 5761, 4147, 6529, 4149, 5505, 4153, 4993, 4167, 7233, 4171, 6721, 4173, 5697, 4179, 6465, 4181, 5441, 4185, 4929, 4195, 6337, 4197, 5313, 4201, 4801, 4209, 4545, 4231, 7201, 4235, 6689, 4237, 5665, 4243, 6433, 4245, 5409, 4249, 4897, 4259, 6305, 4261, 5281, 4265, 4769, 4273, 4513, 4291, 6241, 4293, 5217, 4297, 4705, 4305, 4449, 4359, 7185, 4363, 6673, 4365, 5649, 4371, 6417, 4373, 5393, 4377, 4881, 4387, 6289, 4389, 5265, 4393, 4753, 4401, 4497, 4419, 6225, 4421, 5201, 4425, 4689, 4483, 6193, 4485, 5169, 4489, 4657, 4615, 7177, 4619, 6665, 4621, 5641, 4627, 6409, 4629, 5385, 4633, 4873, 4643, 6281, 4645, 5257, 4649, 4745, 4675, 6217, 4677, 5193, 4739, 6185, 4741, 5161, 4867, 6169, 4869, 5145, 5127, 7173, 5131, 6661, 5133, 5637, 5139, 6405, 5141, 5381, 5155, 6277, 5157, 5253, 5187, 6213, 5251, 6181, 5379, 6165, 5635, 6157, 6151, 7171, 6155, 6659, 6163, 6403, 6179, 6275, 6211, 5189, 4681, 4433, 4321, 3142, 2634, 2386, 2274, 1612, 1364, 1252, 856, 744, 496]); //#12076
    $_.tab213 = $a([3, 6144, 5, 5120, 6, 3072, 9, 4608, 10, 2560, 12, 1536, 17, 4352, 18, 2304, 20, 1280, 24, 768, 33, 4224, 34, 2176, 36, 1152, 40, 640, 48, 384, 65, 4160, 66, 2112, 68, 1088, 72, 576, 80, 320, 96, 192, 129, 4128, 130, 2080, 132, 1056, 136, 544, 144, 288, 257, 4112, 258, 2064, 260, 1040, 264, 528, 513, 4104, 514, 2056, 516, 1032, 1025, 4100, 1026, 2052, 2049, 4098, 4097, 2050, 1028, 520, 272, 160]); //#12085
    $_.chars = $a(10); //#12088
    for (var _3T = 0; _3T <= 9; _3T += 1) { //#12097
        $_.i = _3T; //#12090
        var _3W = $get($_.codewords, $_.i); //#12091
        $k[$j++] = _3W; //#12095
        if (_3W <= 1286) { //#12094
            var _3Z = $get($_.tab513, $k[--$j]); //#12092
            $k[$j++] = _3Z; //#12092
        } else { //#12094
            var _3c = $get($_.tab213, $k[--$j] - 1287); //#12094
            $k[$j++] = _3c; //#12094
        } //#12094
        $k[$j++] = $_.chars; //#12096
        $k[$j++] = $_.i; //#12096
        var _3f = $k[$j - 3]; //#12096
        var _3g = $k[$j - 1]; //#12096
        $put($k[$j - 2], _3g, _3f); //#12096
        $j -= 3; //#12096
    } //#12096
    for (var _3i = 9; _3i >= 0; _3i -= 1) { //#12104
        $_.i = _3i; //#12100
        if (((~~$pow(2, $_.i)) & $_.fcs) != 0) { //#12103
            $put($_.chars, $_.i, $get($_.chars, $_.i) ^ 8191); //#12102
        } //#12102
    } //#12102
    $_.barmap = $a([7, 2, 4, 3, 1, 10, 0, 0, 9, 12, 2, 8, 5, 5, 6, 11, 8, 9, 3, 1, 0, 1, 5, 12, 2, 5, 1, 8, 4, 4, 9, 11, 6, 3, 8, 10, 3, 9, 7, 6, 5, 11, 1, 4, 8, 5, 2, 12, 9, 10, 0, 2, 7, 1, 6, 7, 3, 6, 4, 9, 0, 3, 8, 6, 6, 4, 2, 7, 1, 1, 9, 9, 7, 10, 5, 2, 4, 0, 3, 8, 6, 2, 0, 4, 8, 11, 1, 0, 9, 8, 3, 12, 2, 6, 7, 7, 5, 1, 4, 10, 1, 12, 6, 9, 7, 3, 8, 0, 5, 8, 9, 7, 4, 6, 2, 10, 3, 4, 0, 5, 8, 4, 5, 7, 7, 11, 1, 9, 6, 0, 9, 6, 0, 6, 4, 8, 2, 1, 3, 2, 5, 9, 8, 12, 4, 11, 6, 1, 9, 5, 7, 4, 3, 3, 1, 2, 0, 7, 2, 0, 1, 3, 4, 1, 6, 10, 3, 5, 8, 7, 9, 4, 2, 11, 5, 6, 0, 8, 7, 12, 4, 2, 8, 1, 5, 10, 3, 0, 9, 3, 0, 9, 6, 5, 2, 4, 7, 8, 1, 7, 5, 0, 4, 5, 2, 3, 0, 10, 6, 12, 9, 2, 3, 11, 1, 6, 8, 8, 7, 9, 5, 4, 0, 11, 1, 5, 2, 2, 9, 1, 4, 12, 8, 3, 6, 6, 7, 0, 3, 7, 4, 7, 7, 5, 0, 12, 1, 11, 2, 9, 9, 0, 6, 8, 5, 3, 3, 10, 8, 2]); //#12122
    $_.bbs = $a(65); //#12125
    $_.bhs = $a(65); //#12126
    for (var _3u = 0; _3u <= 64; _3u += 1) { //#12147
        $_.i = _3u; //#12128
        $_.dec = ($get($_.chars, $get($_.barmap, $_.i * 4)) & (~~$pow(2, $get($_.barmap, ($_.i * 4) + 1)))) != 0; //#12129
        $_.asc = ($get($_.chars, $get($_.barmap, ($_.i * 4) + 2)) & (~~$pow(2, $get($_.barmap, ($_.i * 4) + 3)))) != 0; //#12130
        if ((!$_.dec) && (!$_.asc)) { //#12134
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12132
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#12133
        } //#12133
        if ((!$_.dec) && $_.asc) { //#12138
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12136
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12137
        } //#12137
        if ($_.dec && (!$_.asc)) { //#12142
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12140
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12141
        } //#12141
        if ($_.dec && $_.asc) { //#12146
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12144
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#12145
        } //#12145
    } //#12145
    $k[$j++] = Infinity; //#12150
    var _4h = $_.bbs; //#12152
    var _4i = $_.bhs; //#12153
    $k[$j++] = Infinity; //#12154
    for (var _4k = 0, _4l = $_.bhs.length - 1; _4k < _4l; _4k++) { //#12154
        $k[$j++] = 1.44; //#12154
        $k[$j++] = 1.872; //#12154
    } //#12154
    $k[$j++] = 1.44; //#12154
    var _4m = $a(); //#12154
    $k[$j++] = 'ren'; //#12160
    $k[$j++] = 'renlinear'; //#12160
    $k[$j++] = 'bbs'; //#12160
    $k[$j++] = _4h; //#12160
    $k[$j++] = 'bhs'; //#12160
    $k[$j++] = _4i; //#12160
    $k[$j++] = 'sbs'; //#12160
    $k[$j++] = _4m; //#12160
    $k[$j++] = 'txt'; //#12160
    $k[$j++] = $_.txt; //#12160
    $k[$j++] = 'textxalign'; //#12160
    $k[$j++] = "left"; //#12160
    $k[$j++] = 'textfont'; //#12160
    $k[$j++] = "OCR-B"; //#12160
    $k[$j++] = 'textyoffset'; //#12160
    $k[$j++] = 1; //#12160
    $k[$j++] = 'textxoffset'; //#12160
    $k[$j++] = -0.3; //#12160
    $k[$j++] = 'opt'; //#12160
    $k[$j++] = $_.options; //#12160
    var _4p = $d(); //#12160
    $k[$j++] = _4p; //#12163
    if (!$_.dontdraw) { //#12163
        bwipp_renlinear(); //#12163
    } //#12163
    $_ = $__; //#12167
} //bwipp_onecode
function bwipp_postnet() {
    var $__ = $_; //#12197
    $_ = Object.assign({}, $_); //#12197
    $_.dontdraw = false; //#12200
    $_.includetext = false; //#12201
    $_.validatecheck = false; //#12202
    $_.includecheckintext = false; //#12203
    $_.textfont = "OCR-B"; //#12204
    $_.textsize = 10; //#12205
    $_.textyoffset = -8; //#12206
    $_.height = 0.125; //#12207
    $k[$j++] = $_; //#12209
    bwipp_processoptions(); //#12209
    $_.options = $k[--$j]; //#12209
    $_.barcode = $k[--$j]; //#12210
    $k[$j++] = 'barlen'; //#12214
    $k[$j++] = $_.barcode.length; //#12214
    if ($_.validatecheck) { //#12214
        var _4 = $k[--$j]; //#12214
        $k[$j++] = _4 - 1; //#12214
    } //#12214
    var _5 = $k[--$j]; //#12214
    $_[$k[--$j]] = _5; //#12214
    if ((($_.barlen != 5) && ($_.barlen != 9)) && ($_.barlen != 11)) { //#12219
        $k[$j++] = 'bwipp.postnetBadLength#12218'; //#12218
        $k[$j++] = "USPS POSTNET must be 5, 9 or 11 digits excluding check digit"; //#12218
        bwipp_raiseerror(); //#12218
    } //#12218
    $forall($_.barcode, function() { //#12224
        var _B = $k[--$j]; //#12221
        if ((_B < 48) || (_B > 57)) { //#12223
            $k[$j++] = 'bwipp.postnetBadCharacter#12222'; //#12222
            $k[$j++] = "USPS POSTNET must contain only digits"; //#12222
            bwipp_raiseerror(); //#12222
        } //#12222
    }); //#12222
    $_.barchars = "0123456789"; //#12228
    $_.encs = $a(["55222", "22255", "22525", "22552", "25225", "25252", "25522", "52225", "52252", "52522", "5", "5"]); //#12235
    $_.checksum = 0; //#12238
    for (var _G = 0, _F = $_.barlen - 1; _G <= _F; _G += 1) { //#12242
        $_.i = _G; //#12240
        $_.checksum = $f($_.checksum + ($get($_.barcode, $_.i) - 48)); //#12241
    } //#12241
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#12243
    if ($_.validatecheck) { //#12249
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#12247
            $k[$j++] = 'bwipp.postnetBadCheckDigit#12246'; //#12246
            $k[$j++] = "Incorrect USPS POSTNET check digit provided"; //#12246
            bwipp_raiseerror(); //#12246
        } //#12246
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#12248
    } //#12248
    $_.bhs = $a(($_.barlen * 5) + 7); //#12251
    $_.txt = $a($_.barlen + 1); //#12252
    $_.enc = $get($_.encs, 10); //#12255
    $_.heights = $a($_.enc.length); //#12256
    for (var _g = 0, _f = $_.enc.length - 1; _g <= _f; _g += 1) { //#12260
        $_.j = _g; //#12258
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#12259
    } //#12259
    $puti($_.bhs, 0, $_.heights); //#12261
    for (var _r = 0, _q = $_.barlen - 1; _r <= _q; _r += 1) { //#12273
        $_.i = _r; //#12264
        $_.enc = $get($_.encs, $get($_.barcode, $_.i) - 48); //#12265
        $_.heights = $a($_.enc.length); //#12266
        for (var _11 = 0, _10 = $_.enc.length - 1; _11 <= _10; _11 += 1) { //#12270
            $_.j = _11; //#12268
            $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#12269
        } //#12269
        $puti($_.bhs, ($_.i * 5) + 1, $_.heights); //#12271
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 5) + 1) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12272
    } //#12272
    $_.enc = $get($_.encs, $_.checksum); //#12276
    $_.heights = $a($_.enc.length); //#12277
    for (var _1S = 0, _1R = $_.enc.length - 1; _1S <= _1R; _1S += 1) { //#12281
        $_.j = _1S; //#12279
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#12280
    } //#12280
    $puti($_.bhs, ($_.barlen * 5) + 1, $_.heights); //#12282
    if ($_.includecheckintext) { //#12287
        $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), (($_.barlen * 5) + 1) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12285
    } else { //#12287
        $put($_.txt, $_.barlen, $a([" ", ((($_.barlen * 5) + 1) * 72) / 25, $_.textyoffset, $_.textfont, $_.textsize])); //#12287
    } //#12287
    $_.enc = $get($_.encs, 11); //#12291
    $_.heights = $a($_.enc.length); //#12292
    for (var _20 = 0, _1z = $_.enc.length - 1; _20 <= _1z; _20 += 1) { //#12296
        $_.j = _20; //#12294
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#12295
    } //#12295
    $puti($_.bhs, ($_.barlen * 5) + 6, $_.heights); //#12297
    $k[$j++] = Infinity; //#12300
    var _2A = $_.bhs; //#12302
    $k[$j++] = Infinity; //#12303
    for (var _2C = 0, _2D = $_.bhs.length; _2C < _2D; _2C++) { //#12303
        $k[$j++] = 0; //#12303
    } //#12303
    var _2E = $a(); //#12303
    $k[$j++] = Infinity; //#12304
    for (var _2G = 0, _2H = $_.bhs.length - 1; _2G < _2H; _2G++) { //#12304
        $k[$j++] = 1.44; //#12304
        $k[$j++] = 1.872; //#12304
    } //#12304
    $k[$j++] = 1.44; //#12304
    var _2I = $a(); //#12304
    $k[$j++] = 'ren'; //#12307
    $k[$j++] = 'renlinear'; //#12307
    $k[$j++] = 'bhs'; //#12307
    $k[$j++] = _2A; //#12307
    $k[$j++] = 'bbs'; //#12307
    $k[$j++] = _2E; //#12307
    $k[$j++] = 'sbs'; //#12307
    $k[$j++] = _2I; //#12307
    if ($_.includetext) { //#12307
        $k[$j++] = 'txt'; //#12306
        $k[$j++] = $_.txt; //#12306
    } //#12306
    $k[$j++] = 'opt'; //#12308
    $k[$j++] = $_.options; //#12308
    var _2M = $d(); //#12308
    $k[$j++] = _2M; //#12311
    if (!$_.dontdraw) { //#12311
        bwipp_renlinear(); //#12311
    } //#12311
    $_ = $__; //#12315
} //bwipp_postnet
function bwipp_planet() {
    var $__ = $_; //#12345
    $_ = Object.assign({}, $_); //#12345
    $_.dontdraw = false; //#12348
    $_.includetext = false; //#12349
    $_.validatecheck = false; //#12350
    $_.includecheckintext = false; //#12351
    $_.textfont = "OCR-B"; //#12352
    $_.textsize = 10; //#12353
    $_.textyoffset = -8; //#12354
    $_.height = 0.125; //#12355
    $k[$j++] = $_; //#12357
    bwipp_processoptions(); //#12357
    $_.options = $k[--$j]; //#12357
    $_.barcode = $k[--$j]; //#12358
    $k[$j++] = 'barlen'; //#12362
    $k[$j++] = $_.barcode.length; //#12362
    if ($_.validatecheck) { //#12362
        var _4 = $k[--$j]; //#12362
        $k[$j++] = _4 - 1; //#12362
    } //#12362
    var _5 = $k[--$j]; //#12362
    $_[$k[--$j]] = _5; //#12362
    if (($_.barlen != 11) && ($_.barlen != 13)) { //#12367
        $k[$j++] = 'bwipp.planetBadLength#12366'; //#12366
        $k[$j++] = "USPS PLANET must be 11 or 13 digits excluding check digit"; //#12366
        bwipp_raiseerror(); //#12366
    } //#12366
    $forall($_.barcode, function() { //#12372
        var _A = $k[--$j]; //#12369
        if ((_A < 48) || (_A > 57)) { //#12371
            $k[$j++] = 'bwipp.planetBadCharacter#12370'; //#12370
            $k[$j++] = "USPS PLANET must contain only digits"; //#12370
            bwipp_raiseerror(); //#12370
        } //#12370
    }); //#12370
    $_.barchars = "0123456789"; //#12376
    $_.encs = $a(["22555", "55522", "55252", "55225", "52552", "52525", "52255", "25552", "25525", "25255", "5", "5"]); //#12383
    $_.checksum = 0; //#12387
    for (var _F = 0, _E = $_.barlen - 1; _F <= _E; _F += 1) { //#12391
        $_.i = _F; //#12389
        $_.checksum = $f($_.checksum + ($get($_.barcode, $_.i) - 48)); //#12390
    } //#12390
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#12392
    if ($_.validatecheck) { //#12398
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#12396
            $k[$j++] = 'bwipp.planetBadCheckDigit#12395'; //#12395
            $k[$j++] = "Incorrect USPS PLANET check digit provided"; //#12395
            bwipp_raiseerror(); //#12395
        } //#12395
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#12397
    } //#12397
    $_.bhs = $a(($_.barlen * 5) + 7); //#12400
    $_.txt = $a($_.barlen + 1); //#12401
    $_.enc = $get($_.encs, 10); //#12404
    $_.heights = $a($_.enc.length); //#12405
    for (var _f = 0, _e = $_.enc.length - 1; _f <= _e; _f += 1) { //#12409
        $_.j = _f; //#12407
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#12408
    } //#12408
    $puti($_.bhs, 0, $_.heights); //#12410
    for (var _q = 0, _p = $_.barlen - 1; _q <= _p; _q += 1) { //#12422
        $_.i = _q; //#12413
        $_.enc = $get($_.encs, $get($_.barcode, $_.i) - 48); //#12414
        $_.heights = $a($_.enc.length); //#12415
        for (var _10 = 0, _z = $_.enc.length - 1; _10 <= _z; _10 += 1) { //#12419
            $_.j = _10; //#12417
            $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#12418
        } //#12418
        $puti($_.bhs, ($_.i * 5) + 1, $_.heights); //#12420
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 5) + 1) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12421
    } //#12421
    $_.enc = $get($_.encs, $_.checksum); //#12425
    $_.heights = $a($_.enc.length); //#12426
    for (var _1R = 0, _1Q = $_.enc.length - 1; _1R <= _1Q; _1R += 1) { //#12430
        $_.j = _1R; //#12428
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#12429
    } //#12429
    $puti($_.bhs, ($_.barlen * 5) + 1, $_.heights); //#12431
    if ($_.includecheckintext) { //#12436
        $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), (($_.barlen * 5) + 1) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12434
    } else { //#12436
        $put($_.txt, $_.barlen, $a([" ", ((($_.barlen * 5) + 1) * 72) / 25, $_.textyoffset, $_.textfont, $_.textsize])); //#12436
    } //#12436
    $_.enc = $get($_.encs, 11); //#12440
    $_.heights = $a($_.enc.length); //#12441
    for (var _1z = 0, _1y = $_.enc.length - 1; _1z <= _1y; _1z += 1) { //#12445
        $_.j = _1z; //#12443
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#12444
    } //#12444
    $puti($_.bhs, ($_.barlen * 5) + 6, $_.heights); //#12446
    $k[$j++] = Infinity; //#12449
    var _29 = $_.bhs; //#12451
    $k[$j++] = Infinity; //#12452
    for (var _2B = 0, _2C = $_.bhs.length; _2B < _2C; _2B++) { //#12452
        $k[$j++] = 0; //#12452
    } //#12452
    var _2D = $a(); //#12452
    $k[$j++] = Infinity; //#12453
    for (var _2F = 0, _2G = $_.bhs.length - 1; _2F < _2G; _2F++) { //#12453
        $k[$j++] = 1.44; //#12453
        $k[$j++] = 1.872; //#12453
    } //#12453
    $k[$j++] = 1.44; //#12453
    var _2H = $a(); //#12453
    $k[$j++] = 'ren'; //#12456
    $k[$j++] = 'renlinear'; //#12456
    $k[$j++] = 'bhs'; //#12456
    $k[$j++] = _29; //#12456
    $k[$j++] = 'bbs'; //#12456
    $k[$j++] = _2D; //#12456
    $k[$j++] = 'sbs'; //#12456
    $k[$j++] = _2H; //#12456
    if ($_.includetext) { //#12456
        $k[$j++] = 'txt'; //#12455
        $k[$j++] = $_.txt; //#12455
    } //#12455
    $k[$j++] = 'opt'; //#12457
    $k[$j++] = $_.options; //#12457
    var _2L = $d(); //#12457
    $k[$j++] = _2L; //#12460
    if (!$_.dontdraw) { //#12460
        bwipp_renlinear(); //#12460
    } //#12460
    $_ = $__; //#12464
} //bwipp_planet
function bwipp_royalmail() {
    var $__ = $_; //#12494
    $_ = Object.assign({}, $_); //#12494
    $_.dontdraw = false; //#12497
    $_.includetext = false; //#12498
    $_.validatecheck = false; //#12499
    $_.includecheckintext = false; //#12500
    $_.textfont = "OCR-B"; //#12501
    $_.textsize = 10; //#12502
    $_.textyoffset = -8; //#12503
    $_.height = 0.175; //#12504
    $k[$j++] = $_; //#12506
    bwipp_processoptions(); //#12506
    $_.options = $k[--$j]; //#12506
    $_.barcode = $k[--$j]; //#12507
    if ($_.barcode.length == 0) { //#12511
        $k[$j++] = 'bwipp.royalmailEmptyData#12510'; //#12510
        $k[$j++] = "The data must not be empty"; //#12510
        bwipp_raiseerror(); //#12510
    } //#12510
    $_.barchars = "ZUVWXY501234B6789AHCDEFGNIJKLMTOPQRS"; //#12517
    $_.charvals = new Map; //#12518
    for (var _3 = 0; _3 <= 35; _3 += 1) { //#12519
        $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#12519
    } //#12519
    $_.encs = $a(["3300", "2211", "2301", "2310", "3201", "3210", "1122", "0033", "0123", "0132", "1023", "1032", "1302", "0213", "0303", "0312", "1203", "1212", "1320", "0231", "0321", "0330", "1221", "1230", "3102", "2013", "2103", "2112", "3003", "3012", "3120", "2031", "2121", "2130", "3021", "3030", "2", "3"]); //#12530
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#12538
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#12535
        if (!_F) { //#12537
            $k[$j++] = 'bwipp.royalmailBadCharacter#12536'; //#12536
            $k[$j++] = "RM4SCC must contain only capital letters and digits"; //#12536
            bwipp_raiseerror(); //#12536
        } //#12536
    } //#12536
    $k[$j++] = 'barlen'; //#12540
    $k[$j++] = $_.barcode.length; //#12540
    if ($_.validatecheck) { //#12540
        var _I = $k[--$j]; //#12540
        $k[$j++] = _I - 1; //#12540
    } //#12540
    var _J = $k[--$j]; //#12540
    $_[$k[--$j]] = _J; //#12540
    $_.checksumrow = 0; //#12542
    $_.checksumcol = 0; //#12543
    for (var _N = 0, _M = $_.barlen - 1; _N <= _M; _N += 1) { //#12549
        $_.i = _N; //#12545
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#12546
        $_.checksumrow = $_.checksumrow + (~~($_.indx / 6)); //#12547
        $_.checksumcol = $f($_.checksumcol + ($_.indx % 6)); //#12548
    } //#12548
    $_.checksum = $f((($_.checksumrow % 6) * 6) + ($_.checksumcol % 6)); //#12550
    if ($_.validatecheck) { //#12556
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#12554
            $k[$j++] = 'bwipp.royalmailBadCheckDigit#12553'; //#12553
            $k[$j++] = "Incorrect RM4SCC check digit provided"; //#12553
            bwipp_raiseerror(); //#12553
        } //#12553
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#12555
    } //#12555
    $_.encstr = $s(($_.barlen * 4) + 6); //#12558
    $_.txt = $a($_.barlen + 1); //#12559
    $puti($_.encstr, 0, $get($_.encs, 36)); //#12562
    for (var _s = 0, _r = $_.barlen - 1; _s <= _r; _s += 1) { //#12569
        $_.i = _s; //#12565
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#12566
        $puti($_.encstr, ($_.i * 4) + 1, $get($_.encs, $_.indx)); //#12567
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 4) + 1) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12568
    } //#12568
    $puti($_.encstr, ($_.barlen * 4) + 1, $get($_.encs, $_.checksum)); //#12572
    if ($_.includecheckintext) { //#12576
        $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), (($_.barlen * 4) + 1) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12574
    } else { //#12576
        $put($_.txt, $_.barlen, $a([" ", (($_.barlen * 4) + 1) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12576
    } //#12576
    $puti($_.encstr, ($_.barlen * 4) + 5, $get($_.encs, 37)); //#12580
    $_.bbs = $a($_.encstr.length); //#12582
    $_.bhs = $a($_.encstr.length); //#12583
    for (var _1k = 0, _1j = $_.encstr.length - 1; _1k <= _1j; _1k += 1) { //#12603
        $_.i = _1k; //#12585
        $_.enc = $geti($_.encstr, $_.i, 1); //#12586
        if ($eq($_.enc, "0")) { //#12590
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12588
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#12589
        } //#12589
        if ($eq($_.enc, "1")) { //#12594
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12592
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12593
        } //#12593
        if ($eq($_.enc, "2")) { //#12598
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12596
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12597
        } //#12597
        if ($eq($_.enc, "3")) { //#12602
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12600
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#12601
        } //#12601
    } //#12601
    $k[$j++] = Infinity; //#12606
    var _2G = $_.bbs; //#12608
    var _2H = $_.bhs; //#12609
    $k[$j++] = Infinity; //#12610
    for (var _2J = 0, _2K = $_.bhs.length - 1; _2J < _2K; _2J++) { //#12610
        $k[$j++] = 1.44; //#12610
        $k[$j++] = 1.872; //#12610
    } //#12610
    $k[$j++] = 1.44; //#12610
    var _2L = $a(); //#12610
    $k[$j++] = 'ren'; //#12613
    $k[$j++] = 'renlinear'; //#12613
    $k[$j++] = 'bbs'; //#12613
    $k[$j++] = _2G; //#12613
    $k[$j++] = 'bhs'; //#12613
    $k[$j++] = _2H; //#12613
    $k[$j++] = 'sbs'; //#12613
    $k[$j++] = _2L; //#12613
    if ($_.includetext) { //#12613
        $k[$j++] = 'txt'; //#12612
        $k[$j++] = $_.txt; //#12612
    } //#12612
    $k[$j++] = 'opt'; //#12614
    $k[$j++] = $_.options; //#12614
    var _2P = $d(); //#12614
    $k[$j++] = _2P; //#12617
    if (!$_.dontdraw) { //#12617
        bwipp_renlinear(); //#12617
    } //#12617
    $_ = $__; //#12621
} //bwipp_royalmail
function bwipp_auspost() {
    var $__ = $_; //#12651
    $_ = Object.assign({}, $_); //#12651
    $_.dontdraw = false; //#12654
    $_.includetext = false; //#12655
    $_.textfont = "OCR-B"; //#12656
    $_.textsize = 10; //#12657
    $_.textyoffset = -8; //#12658
    $_.height = 0.175; //#12659
    $_.custinfoenc = "character"; //#12660
    $k[$j++] = $_; //#12662
    bwipp_processoptions(); //#12662
    $_.options = $k[--$j]; //#12662
    $_.barcode = $k[--$j]; //#12663
    if ($ne($_.custinfoenc, "character") && $ne($_.custinfoenc, "numeric")) { //#12667
        $k[$j++] = 'bwipp.auspostBadCustinfoEncoding#12666'; //#12666
        $k[$j++] = "Customer information encoding must be either character or numeric"; //#12666
        bwipp_raiseerror(); //#12666
    } //#12666
    $_.encs = $a(["000", "001", "002", "010", "011", "012", "020", "021", "022", "100", "101", "102", "110", "111", "112", "120", "121", "122", "200", "201", "202", "210", "211", "212", "220", "221", "222", "300", "301", "302", "310", "311", "312", "320", "321", "322", "023", "030", "031", "032", "033", "103", "113", "123", "130", "131", "132", "133", "203", "213", "223", "230", "231", "232", "233", "303", "313", "323", "330", "331", "332", "333", "003", "013", "00", "01", "02", "10", "11", "12", "20", "21", "22", "30", "13", "3"]); //#12684
    $_.barchars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz #"; //#12687
    var _5 = new Map([
        ["11", 37],
        ["45", 37],
        ["59", 52],
        ["62", 67]
    ]); //#12690
    $_.fcclen = _5; //#12690
    $_.barlen = $_.barcode.length; //#12694
    if ($_.barlen < 10) { //#12697
        $k[$j++] = 'bwipp.auspostTooShort#12696'; //#12696
        $k[$j++] = "The data length must be at least 10"; //#12696
        bwipp_raiseerror(); //#12696
    } //#12696
    $_.txt = $a($_.barlen - 2); //#12699
    $k[$j++] = $_.fcclen; //#12701
    if ($_.barlen >= 2) { //#12701
        $k[$j++] = $geti($_.barcode, 0, 2); //#12701
    } else { //#12701
        $k[$j++] = ""; //#12701
    } //#12701
    var _F = $k[$j - 1]; //#12702
    var _G = $k[$j - 2]; //#12702
    var _H = $get(_G, _F) !== undefined; //#12702
    if (!_H) { //#12704
        $j -= 2; //#12703
        $k[$j++] = 'bwipp.auspostBadFCC#12703'; //#12703
        $k[$j++] = "Must begin with an FCC, either 11, 45, 59 or 62"; //#12703
        bwipp_raiseerror(); //#12703
    } //#12703
    var _I = $k[--$j]; //#12705
    $_.encstr = $s($get($k[--$j], _I)); //#12705
    $k[$j++] = true; //#12712
    for (var _M = 0; _M < 1; _M++) { //#12712
        if ($_.barlen < 10) { //#12710
            $k[$j - 1] = false; //#12710
            break; //#12710
        } //#12710
        var _P = $geti($_.barcode, 2, 8); //#12711
        for (var _Q = 0, _R = _P.length; _Q < _R; _Q++) { //#12711
            var _S = $get(_P, _Q); //#12711
            if ((_S < 48) || (_S > 57)) { //#12711
                $k[$j - 1] = false; //#12711
                break; //#12711
            } //#12711
        } //#12711
    } //#12711
    if (!$k[--$j]) { //#12715
        $k[$j++] = 'bwipp.auspostIncompleteDPID#12714'; //#12714
        $k[$j++] = "The DPID must be 8 digits"; //#12714
        bwipp_raiseerror(); //#12714
    } //#12714
    var _W = $eq($_.custinfoenc, "numeric") ? 2 : 3; //#12718
    if ((($_.barlen - 10) * _W) > (($_.encstr.length - 22) - 14)) { //#12721
        $k[$j++] = 'bwipp.auspostTooLong#12720'; //#12720
        $k[$j++] = "The message is too long"; //#12720
        bwipp_raiseerror(); //#12720
    } //#12720
    $puti($_.encstr, 0, $get($_.encs, 74)); //#12724
    for (var _b = 0; _b <= 1; _b += 1) { //#12731
        $_.i = _b; //#12728
        $puti($_.encstr, ($_.i * 2) + 2, $get($_.encs, $cvi($geti($_.barcode, $_.i, 1)) + 64)); //#12730
    } //#12730
    for (var _j = 2; _j <= 9; _j += 1) { //#12739
        $_.i = _j; //#12735
        $puti($_.encstr, ($_.i * 2) + 2, $get($_.encs, $cvi($geti($_.barcode, $_.i, 1)) + 64)); //#12737
        $put($_.txt, $_.i - 2, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 2) * 2) + 6) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12738
    } //#12738
    if ($eq($_.custinfoenc, "numeric")) { //#12767
        for (var _14 = 0, _13 = $_.barlen - 11; _14 <= _13; _14 += 1) { //#12752
            $_.i = _14; //#12744
            var _18 = $get($_.barcode, $_.i + 10); //#12745
            $k[$j++] = $_.encs; //#12748
            $k[$j++] = _18; //#12748
            if ((_18 < 48) || (_18 > 57)) { //#12748
                $k[$j++] = 'bwipp.auspostInvalidCustinfoDigit#12747'; //#12747
                $k[$j++] = "The customer information data contains a non-digit character"; //#12747
                bwipp_raiseerror(); //#12747
            } //#12747
            var _19 = $k[--$j]; //#12749
            $puti($_.encstr, ($_.i * 2) + 22, $get($k[--$j], (_19 - 48) + 64)); //#12750
            $put($_.txt, $_.i + 8, $a([$geti($_.barcode, $_.i + 10, 1), (($_.i * 2) + 22) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12751
        } //#12751
        $_.ciflen = ($_.barlen - 10) * 2; //#12753
    } else { //#12767
        for (var _1R = 0, _1Q = $_.barlen - 11; _1R <= _1Q; _1R += 1) { //#12766
            $_.i = _1R; //#12756
            $search($_.barchars, $geti($_.barcode, $_.i + 10, 1)); //#12757
            if (!$k[--$j]) { //#12760
                $j--; //#12759
                $k[$j++] = 'bwipp.auspostInvalidCustinfoCharacter#12759'; //#12759
                $k[$j++] = "The customer information contains an invalid character"; //#12759
                bwipp_raiseerror(); //#12759
            } //#12759
            $_.indx = $k[--$j].length; //#12761
            $j -= 2; //#12762
            $_.enc = $get($_.encs, $_.indx); //#12763
            $puti($_.encstr, ($_.i * 3) + 22, $_.enc); //#12764
            $put($_.txt, $_.i + 8, $a([$geti($_.barcode, $_.i + 10, 1), (($_.i * 3) + 22) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12765
        } //#12765
        $_.ciflen = ($_.barlen - 10) * 3; //#12767
    } //#12767
    for (var _1s = 22 + $_.ciflen, _1r = $_.encstr.length - 14; _1s <= _1r; _1s += 1) { //#12773
        $puti($_.encstr, _1s, $get($_.encs, 75)); //#12772
    } //#12772
    $_.rstable = $a(64 * 64); //#12777
    $k[$j++] = $_.rstable; //#12778
    $k[$j++] = 0; //#12778
    $k[$j++] = Infinity; //#12778
    for (var _1y = 0; _1y < 64; _1y++) { //#12778
        $k[$j++] = 0; //#12778
    } //#12778
    var _1z = $a(); //#12778
    var _20 = $k[--$j]; //#12778
    $puti($k[--$j], _20, _1z); //#12778
    $k[$j++] = $_.rstable; //#12779
    $k[$j++] = 64; //#12779
    $k[$j++] = Infinity; //#12779
    for (var _23 = 0; _23 <= 63; _23 += 1) { //#12779
        $k[$j++] = _23; //#12779
    } //#12779
    var _24 = $a(); //#12779
    var _25 = $k[--$j]; //#12779
    $puti($k[--$j], _25, _24); //#12779
    $_.prev = 1; //#12780
    for (var _27 = 0; _27 < 64; _27++) { //#12795
        $_.next = $_.prev << 1; //#12782
        if (($_.next & 64) != 0) { //#12785
            $_.next = $_.next ^ 67; //#12784
        } //#12784
        for (var _2B = 0; _2B <= 63; _2B += 1) { //#12793
            $_.j = _2B; //#12787
            $_.nextcell = function() {
                $k[$j++] = $_.rstable; //#12788
                $k[$j++] = (64 * $_.next) + $_.j; //#12788
            }; //#12788
            $_.nextcell(); //#12789
            var _2J = $k[--$j]; //#12789
            $put($k[--$j], _2J, $get($_.rstable, (64 * $_.prev) + $_.j) << 1); //#12789
            $_.nextcell(); //#12790
            var _2L = $k[--$j]; //#12790
            if (($get($k[--$j], _2L) & 64) != 0) { //#12792
                $_.nextcell(); //#12791
                $_.nextcell(); //#12791
                var _2O = $k[--$j]; //#12791
                var _2Q = $get($k[--$j], _2O); //#12791
                var _2R = $k[--$j]; //#12791
                $put($k[--$j], _2R, _2Q ^ 67); //#12791
            } //#12791
        } //#12791
        $_.prev = $_.next; //#12794
    } //#12794
    $_.rscodes = $a((~~(($_.encstr.length - 16) / 3)) + 4); //#12799
    $k[$j++] = $_.rscodes; //#12800
    $k[$j++] = 0; //#12800
    $k[$j++] = Infinity; //#12800
    for (var _2Y = 0; _2Y < 4; _2Y++) { //#12800
        $k[$j++] = 0; //#12800
    } //#12800
    var _2Z = $a(); //#12800
    var _2a = $k[--$j]; //#12800
    $puti($k[--$j], _2a, _2Z); //#12800
    for (var _2e = 2, _2d = $_.encstr.length - 16; _2e <= _2d; _2e += 3) { //#12808
        $_.i = _2e; //#12802
        $put($_.rscodes, ($_.rscodes.length - (~~(($_.i - 2) / 3))) - 1, (($cvi($geti($_.encstr, $_.i, 1)) * 16) + ($cvi($geti($_.encstr, $_.i + 1, 1)) * 4)) + $cvi($geti($_.encstr, $_.i + 2, 1))); //#12807
    } //#12807
    for (var _2s = $_.rscodes.length - 5; _2s >= 0; _2s -= 1) { //#12817
        $_.i = _2s; //#12810
        for (var _2t = 0; _2t <= 4; _2t += 1) { //#12816
            $_.j = _2t; //#12812
            $put($_.rscodes, $_.i + $_.j, $xo($get($_.rscodes, $_.i + $_.j), $get($_.rstable, $f((64 * $get($a([48, 17, 29, 30, 1]), $_.j)) + $get($_.rscodes, $_.i + 4))))); //#12815
        } //#12815
    } //#12815
    $_.checkcode = $strcpy($s(12), "000000000000"); //#12818
    for (var _3B = 0; _3B <= 3; _3B += 1) { //#12823
        $_.i = _3B; //#12820
        $_.enc = $cvrs($s(3), $get($_.rscodes, 3 - $_.i), 4); //#12821
        $puti($_.checkcode, ($_.i * 3) + (3 - $_.enc.length), $_.enc); //#12822
    } //#12822
    $puti($_.encstr, $_.encstr.length - 14, $_.checkcode); //#12826
    $puti($_.encstr, $_.encstr.length - 2, $get($_.encs, 74)); //#12827
    $_.bbs = $a($_.encstr.length); //#12829
    $_.bhs = $a($_.encstr.length); //#12830
    for (var _3Y = 0, _3X = $_.encstr.length - 1; _3Y <= _3X; _3Y += 1) { //#12850
        $_.i = _3Y; //#12832
        $_.enc = $geti($_.encstr, $_.i, 1); //#12833
        if ($eq($_.enc, "0")) { //#12837
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12835
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#12836
        } //#12836
        if ($eq($_.enc, "1")) { //#12841
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12839
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12840
        } //#12840
        if ($eq($_.enc, "2")) { //#12845
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12843
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12844
        } //#12844
        if ($eq($_.enc, "3")) { //#12849
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12847
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#12848
        } //#12848
    } //#12848
    $k[$j++] = Infinity; //#12853
    var _44 = $_.bbs; //#12855
    var _45 = $_.bhs; //#12856
    $k[$j++] = Infinity; //#12857
    for (var _47 = 0, _48 = $_.bhs.length - 1; _47 < _48; _47++) { //#12857
        $k[$j++] = 1.44; //#12857
        $k[$j++] = 1.872; //#12857
    } //#12857
    $k[$j++] = 1.44; //#12857
    var _49 = $a(); //#12857
    $k[$j++] = 'ren'; //#12860
    $k[$j++] = 'renlinear'; //#12860
    $k[$j++] = 'bbs'; //#12860
    $k[$j++] = _44; //#12860
    $k[$j++] = 'bhs'; //#12860
    $k[$j++] = _45; //#12860
    $k[$j++] = 'sbs'; //#12860
    $k[$j++] = _49; //#12860
    if ($_.includetext) { //#12860
        $k[$j++] = 'txt'; //#12859
        $k[$j++] = $_.txt; //#12859
    } //#12859
    $k[$j++] = 'opt'; //#12861
    $k[$j++] = $_.options; //#12861
    var _4D = $d(); //#12861
    $k[$j++] = _4D; //#12864
    if (!$_.dontdraw) { //#12864
        bwipp_renlinear(); //#12864
    } //#12864
    $_ = $__; //#12868
} //bwipp_auspost
function bwipp_kix() {
    var $__ = $_; //#12898
    $_ = Object.assign({}, $_); //#12898
    $_.dontdraw = false; //#12901
    $_.includetext = false; //#12902
    $_.textfont = "OCR-B"; //#12903
    $_.textsize = 10; //#12904
    $_.textyoffset = -8; //#12905
    $_.height = 0.175; //#12906
    $k[$j++] = $_; //#12908
    bwipp_processoptions(); //#12908
    $_.options = $k[--$j]; //#12908
    $_.barcode = $k[--$j]; //#12909
    if ($_.barcode.length == 0) { //#12913
        $k[$j++] = 'bwipp.kixEmptyData#12912'; //#12912
        $k[$j++] = "The data must not be empty"; //#12912
        bwipp_raiseerror(); //#12912
    } //#12912
    $_.encs = $a(["0033", "0123", "0132", "1023", "1032", "1122", "0213", "0303", "0312", "1203", "1212", "1302", "0231", "0321", "0330", "1221", "1230", "1320", "2013", "2103", "2112", "3003", "3012", "3102", "2031", "2121", "2130", "3021", "3030", "3120", "2211", "2301", "2310", "3201", "3210", "3300"]); //#12926
    $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"; //#12929
    $_.charvals = new Map; //#12930
    for (var _4 = 0; _4 <= 35; _4 += 1) { //#12931
        $put($_.charvals, $geti($_.barchars, _4, 1), _4); //#12931
    } //#12931
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#12939
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#12936
        if (!_F) { //#12938
            $k[$j++] = 'bwipp.kixBadCharacter#12937'; //#12937
            $k[$j++] = "KIX must contain only capital letters and digits"; //#12937
            bwipp_raiseerror(); //#12937
        } //#12937
    } //#12937
    $_.barlen = $_.barcode.length; //#12941
    $_.encstr = $s($_.barlen * 4); //#12942
    $_.txt = $a($_.barlen); //#12943
    for (var _N = 0, _M = $_.barlen - 1; _N <= _M; _N += 1) { //#12950
        $_.i = _N; //#12946
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#12947
        $puti($_.encstr, $_.i * 4, $get($_.encs, $_.indx)); //#12948
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 4) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12949
    } //#12949
    $_.bbs = $a($_.encstr.length); //#12952
    $_.bhs = $a($_.encstr.length); //#12953
    for (var _o = 0, _n = $_.encstr.length - 1; _o <= _n; _o += 1) { //#12973
        $_.i = _o; //#12955
        $_.enc = $geti($_.encstr, $_.i, 1); //#12956
        if ($eq($_.enc, "0")) { //#12960
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12958
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#12959
        } //#12959
        if ($eq($_.enc, "1")) { //#12964
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12962
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12963
        } //#12963
        if ($eq($_.enc, "2")) { //#12968
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12966
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12967
        } //#12967
        if ($eq($_.enc, "3")) { //#12972
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12970
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#12971
        } //#12971
    } //#12971
    $k[$j++] = Infinity; //#12976
    var _1K = $_.bbs; //#12978
    var _1L = $_.bhs; //#12979
    $k[$j++] = Infinity; //#12980
    for (var _1N = 0, _1O = $_.bhs.length - 1; _1N < _1O; _1N++) { //#12980
        $k[$j++] = 1.44; //#12980
        $k[$j++] = 1.872; //#12980
    } //#12980
    $k[$j++] = 1.44; //#12980
    var _1P = $a(); //#12980
    $k[$j++] = 'ren'; //#12983
    $k[$j++] = 'renlinear'; //#12983
    $k[$j++] = 'bbs'; //#12983
    $k[$j++] = _1K; //#12983
    $k[$j++] = 'bhs'; //#12983
    $k[$j++] = _1L; //#12983
    $k[$j++] = 'sbs'; //#12983
    $k[$j++] = _1P; //#12983
    if ($_.includetext) { //#12983
        $k[$j++] = 'txt'; //#12982
        $k[$j++] = $_.txt; //#12982
    } //#12982
    $k[$j++] = 'opt'; //#12984
    $k[$j++] = $_.options; //#12984
    var _1T = $d(); //#12984
    $k[$j++] = _1T; //#12987
    if (!$_.dontdraw) { //#12987
        bwipp_renlinear(); //#12987
    } //#12987
    $_ = $__; //#12991
} //bwipp_kix
function bwipp_japanpost() {
    var $__ = $_; //#13021
    $_ = Object.assign({}, $_); //#13021
    $_.dontdraw = false; //#13024
    $_.includetext = false; //#13025
    $_.includecheckintext = false; //#13026
    $_.textfont = "OCR-B"; //#13027
    $_.textsize = 10; //#13028
    $_.textyoffset = -8; //#13029
    $_.height = 0.175; //#13030
    $k[$j++] = $_; //#13032
    bwipp_processoptions(); //#13032
    $_.options = $k[--$j]; //#13032
    $_.barcode = $k[--$j]; //#13033
    if ($_.barcode.length == 0) { //#13037
        $k[$j++] = 'bwipp.japanpostEmptyData#13036'; //#13036
        $k[$j++] = "The data must not be empty"; //#13036
        bwipp_raiseerror(); //#13036
    } //#13036
    $forall($_.barcode, function() { //#13048
        var _4 = $k[--$j]; //#13043
        if (!(((_4 >= 48) && (_4 <= 57)) || (((_4 >= 65) && (_4 <= 90)) || (_4 == 45)))) { //#13047
            $k[$j++] = 'bwipp.japanpostBadCharacter#13046'; //#13046
            $k[$j++] = "Japan Post must contain only digits, capital letters and the dash symbol"; //#13046
            bwipp_raiseerror(); //#13046
        } //#13046
    }); //#13046
    $_.encs = $a(["300", "330", "312", "132", "321", "303", "123", "231", "213", "033", "030", "120", "102", "210", "012", "201", "021", "003", "333", "31", "13"]); //#13056
    $_.barchars = "0123456789-ABCDEFGHIJKLMNOPQRSTUVWXYZ"; //#13059
    $_.barlen = $_.barcode.length; //#13062
    $_.encstr = $s(((20 + 1) * 3) + 4); //#13064
    $_.digits = $a(20); //#13065
    $_.txt = $a($_.barlen + 1); //#13066
    $puti($_.encstr, 0, $get($_.encs, 19)); //#13069
    $_.checksum = 0; //#13071
    $_.j = 0; //#13072
    $_.i = 0; //#13072
    $k[$j++] = true; //#13107
    for (var _H = 0, _G = $_.barlen - 1; _H <= _G; _H += 1) { //#13107
        $_.i = _H; //#13075
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#13076
        $j--; //#13077
        $_.indx = $k[--$j].length; //#13078
        $j -= 2; //#13079
        if (($_.indx >= 11) && ($_.indx < 37)) { //#13090
            if ($_.j > 18) { //#13081
                $k[$j - 1] = false; //#13081
                break; //#13081
            } //#13081
            $_.digit = (~~(($_.indx - 1) / 10)) + 10; //#13085
            $puti($_.encstr, ($_.j * 3) + 2, $get($_.encs, $_.digit)); //#13086
            $_.checksum = $_.checksum + $_.digit; //#13087
            $put($_.digits, $_.j, $_.digit); //#13088
            $_.j = $_.j + 1; //#13089
        } //#13089
        if ($_.j > 19) { //#13091
            $k[$j - 1] = false; //#13091
            break; //#13091
        } //#13091
        $_.digit = 0; //#13092
        if ($_.indx == 37) { //#13095
            $_.digit = 14; //#13094
        } //#13094
        if (($_.indx >= 11) && ($_.indx < 37)) { //#13098
            $_.digit = ($_.indx - 1) % 10; //#13097
        } //#13097
        if ($_.indx < 11) { //#13101
            $_.digit = $_.indx; //#13100
        } //#13100
        $puti($_.encstr, ($_.j * 3) + 2, $get($_.encs, $_.digit)); //#13102
        $_.checksum = $_.checksum + $_.digit; //#13103
        $put($_.digits, $_.j, $_.digit); //#13104
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.j * 3) + 2) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#13105
        $_.j = $_.j + 1; //#13106
    } //#13106
    if (!$k[--$j]) { //#13111
        $k[$j++] = 'bwipp.japanpostTooLong#13110'; //#13110
        $k[$j++] = "The input is too long"; //#13110
        bwipp_raiseerror(); //#13110
    } //#13110
    for (var _17 = $_.j, _16 = 20 - 1; _17 <= _16; _17 += 1) { //#13119
        $_.k = _17; //#13115
        $puti($_.encstr, ($_.k * 3) + 2, $get($_.encs, 14)); //#13116
        $_.checksum = $_.checksum + 14; //#13117
        $put($_.digits, $_.k, 14); //#13118
    } //#13118
    $_.checksum = 19 - ($_.checksum % 19); //#13122
    $puti($_.encstr, 2 + (20 * 3), $get($_.encs, $_.checksum)); //#13123
    $puti($_.encstr, 2 + (21 * 3), $get($_.encs, 20)); //#13126
    $_.checkdigit = " "; //#13127
    if ($_.includecheckintext) { //#13130
        $_.checkdigit = $geti($_.barchars, $_.checksum, 1); //#13129
    } //#13129
    $put($_.txt, $_.i + 1, $a([$_.checkdigit, ((20 * 3) + 2) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#13131
    $puti($_.encstr, ((20 + 1) * 3) + 2, $get($_.encs, 20)); //#13134
    $_.bbs = $a((21 * 3) + 4); //#13136
    $_.bhs = $a($_.bbs.length); //#13137
    for (var _1g = 0, _1f = $_.bbs.length - 1; _1g <= _1f; _1g += 1) { //#13161
        $_.i = _1g; //#13139
        $_.enc = $geti($_.encstr, $_.i, 1); //#13140
        $_.bunit = 0; //#13141
        $_.hunit = 0; //#13142
        if ($eq($_.enc, "0")) { //#13146
            $_.bunit = 3; //#13144
            $_.hunit = 2; //#13145
        } //#13145
        if ($eq($_.enc, "1")) { //#13150
            $_.bunit = 0; //#13148
            $_.hunit = 5; //#13149
        } //#13149
        if ($eq($_.enc, "2")) { //#13154
            $_.bunit = 3; //#13152
            $_.hunit = 5; //#13153
        } //#13153
        if ($eq($_.enc, "3")) { //#13158
            $_.bunit = 0; //#13156
            $_.hunit = 8; //#13157
        } //#13157
        $put($_.bbs, $_.i, ($_.bunit * $_.height) / 8); //#13159
        $put($_.bhs, $_.i, ($_.hunit * $_.height) / 8); //#13160
    } //#13160
    $k[$j++] = Infinity; //#13164
    var _1w = $_.bbs; //#13166
    var _1x = $_.bhs; //#13167
    $k[$j++] = Infinity; //#13168
    for (var _1z = 0, _20 = $_.bhs.length - 1; _1z < _20; _1z++) { //#13168
        $k[$j++] = 1.44; //#13168
        $k[$j++] = 1.872; //#13168
    } //#13168
    $k[$j++] = 1.44; //#13168
    var _21 = $a(); //#13168
    $k[$j++] = 'ren'; //#13171
    $k[$j++] = 'renlinear'; //#13171
    $k[$j++] = 'bbs'; //#13171
    $k[$j++] = _1w; //#13171
    $k[$j++] = 'bhs'; //#13171
    $k[$j++] = _1x; //#13171
    $k[$j++] = 'sbs'; //#13171
    $k[$j++] = _21; //#13171
    if ($_.includetext) { //#13171
        $k[$j++] = 'txt'; //#13170
        $k[$j++] = $_.txt; //#13170
    } //#13170
    $k[$j++] = 'opt'; //#13172
    $k[$j++] = $_.options; //#13172
    var _25 = $d(); //#13172
    $k[$j++] = _25; //#13175
    if (!$_.dontdraw) { //#13175
        bwipp_renlinear(); //#13175
    } //#13175
    $_ = $__; //#13179
} //bwipp_japanpost
function bwipp_msi() {
    var $__ = $_; //#13209
    $_ = Object.assign({}, $_); //#13209
    $_.dontdraw = false; //#13212
    $_.includecheck = false; //#13213
    $_.includetext = false; //#13214
    $_.includecheckintext = false; //#13215
    $_.checktype = "unset"; //#13216
    $_.badmod11 = false; //#13217
    $_.textfont = "OCR-B"; //#13218
    $_.textsize = 10; //#13219
    $_.textyoffset = -8; //#13220
    $_.height = 1; //#13221
    $k[$j++] = $_; //#13223
    bwipp_processoptions(); //#13223
    $_.options = $k[--$j]; //#13223
    $_.barcode = $k[--$j]; //#13224
    if ($ne($_.checktype, "unset") && (!$_.includecheck)) { //#13228
        $k[$j++] = 'bwipp.msiCheckTypeWithoutCheck#13227'; //#13227
        $k[$j++] = "checktype requires includecheck"; //#13227
        bwipp_raiseerror(); //#13227
    } //#13227
    if ($_.badmod11 && ((($ne($_.checktype, "mod11") && $ne($_.checktype, "ncrmod11")) && $ne($_.checktype, "mod1110")) && $ne($_.checktype, "ncrmod1110"))) { //#13232
        $k[$j++] = 'bwipp.msiBadMod11Mismatch#13231'; //#13231
        $k[$j++] = "badmod11 requires checktype with mod11"; //#13231
        bwipp_raiseerror(); //#13231
    } //#13231
    if ($eq($_.checktype, "unset")) { //#13234
        $_.checktype = "mod10"; //#13234
    } //#13234
    $forall($_.barcode, function() { //#13243
        var _B = $k[--$j]; //#13240
        if ((_B < 48) || (_B > 57)) { //#13242
            $k[$j++] = 'bwipp.msiBadCharacter#13241'; //#13241
            $k[$j++] = "MSI must contain only digits"; //#13241
            bwipp_raiseerror(); //#13241
        } //#13241
    }); //#13241
    $_.encs = $a(["12121212", "12121221", "12122112", "12122121", "12211212", "12211221", "12212112", "12212121", "21121212", "21121221", "21", "121"]); //#13251
    $_.barchars = "0123456789"; //#13254
    $_.barlen = $_.barcode.length; //#13257
    $_.txtlen = $_.barlen; //#13258
    $_.mod10 = function() {
        $_.code = $k[--$j]; //#13261
        $k[$j++] = 0; //#13262
        $k[$j++] = 0; //#13262
        $forall($_.code, function() { //#13262
            var _I = $k[--$j]; //#13262
            var _J = $k[--$j]; //#13262
            var _K = $k[--$j]; //#13262
            $k[$j++] = $f((_I - 48) + (_J * 10)); //#13262
            $k[$j++] = _K; //#13262
        }); //#13262
        $j--; //#13262
        var _L = $k[--$j]; //#13262
        $k[$j++] = _L * 2; //#13263
        $k[$j++] = 0; //#13263
        for (;;) { //#13263
            var _M = $k[--$j]; //#13263
            var _N = $k[--$j]; //#13263
            var _O = ~~(_N / 10); //#13263
            $k[$j++] = $f(_M + (_N % 10)); //#13263
            $k[$j++] = _O; //#13263
            if (_O == 0) { //#13263
                $j--; //#13263
                break; //#13263
            } //#13263
            var _P = $k[--$j]; //#13263
            var _Q = $k[--$j]; //#13263
            $k[$j++] = _P; //#13263
            $k[$j++] = _Q; //#13263
        } //#13263
        $k[$j++] = 0; //#13264
        $k[$j++] = 0; //#13264
        $forall($_.code, function() { //#13264
            var _S = $k[--$j]; //#13264
            var _T = $k[--$j]; //#13264
            var _U = $k[--$j]; //#13264
            $k[$j++] = $f(_T + (_S - 48)); //#13264
            $k[$j++] = _U; //#13264
        }); //#13264
        var _V = $k[--$j]; //#13264
        $k[$j - 1] = _V; //#13264
        var _X = $k[--$j]; //#13264
        var _a = $s($_.code.length + 1); //#13266
        $puti(_a, 0, $_.code); //#13266
        $put(_a, $_.code.length, ((10 - ($f($k[--$j] + _X) % 10)) % 10) + 48); //#13266
        $k[$j++] = _a; //#13266
    }; //#13266
    $_.mod11 = function() {
        $_.code = $k[--$j]; //#13270
        $k[$j++] = $_.code.length - 1; //#13271
        $forall($_.code, function() { //#13271
            var _g = $k[--$j]; //#13271
            var _h = $k[--$j]; //#13271
            $k[$j++] = _g - 48; //#13271
            $k[$j++] = (_h % 6) + 2; //#13271
            $k[$j++] = _h - 1; //#13271
        }); //#13271
        $k[$j - 1] = 0; //#13272
        for (var _j = 0, _k = $_.code.length; _j < _k; _j++) { //#13272
            var _l = $k[$j - 2]; //#13272
            var _m = $k[$j - 3]; //#13272
            var _n = $k[$j - 1]; //#13272
            $j -= 3; //#13272
            $k[$j++] = $f(_n + (_m * _l)); //#13272
        } //#13272
        var _p = (11 - ($k[--$j] % 11)) % 11; //#13274
        $k[$j++] = _p; //#13282
        if (_p == 10) { //#13281
            if ($_.badmod11) { //#13278
                $j--; //#13276
                var _s = $s($_.code.length + 2); //#13276
                $puti(_s, 0, $_.code); //#13276
                $puti(_s, $_.code.length, "10"); //#13276
                $k[$j++] = _s; //#13276
            } else { //#13278
                $j--; //#13278
                $k[$j++] = 'bwipp.msiBadMod11NotSpecified#13278'; //#13278
                $k[$j++] = "mod11 check digit is 10 but badmod11 not specified"; //#13278
                bwipp_raiseerror(); //#13278
            } //#13278
        } else { //#13281
            var _w = $s($_.code.length + 1); //#13281
            $puti(_w, 0, $_.code); //#13281
            $k[$j++] = _w; //#13281
            $k[$j++] = _w; //#13281
            $k[$j++] = $_.code.length; //#13281
            $r(4, -1); //#13281
            var _z = $k[--$j]; //#13281
            var _10 = $k[--$j]; //#13281
            $put($k[--$j], _10, _z + 48); //#13281
        } //#13281
    }; //#13281
    $_.ncrmod11 = function() {
        $_.code = $k[--$j]; //#13286
        $k[$j++] = $_.code.length - 1; //#13287
        $forall($_.code, function() { //#13287
            var _15 = $k[--$j]; //#13287
            var _16 = $k[--$j]; //#13287
            $k[$j++] = _15 - 48; //#13287
            $k[$j++] = (_16 % 8) + 2; //#13287
            $k[$j++] = _16 - 1; //#13287
        }); //#13287
        $k[$j - 1] = 0; //#13288
        for (var _18 = 0, _19 = $_.code.length; _18 < _19; _18++) { //#13288
            var _1A = $k[$j - 2]; //#13288
            var _1B = $k[$j - 3]; //#13288
            var _1C = $k[$j - 1]; //#13288
            $j -= 3; //#13288
            $k[$j++] = $f(_1C + (_1B * _1A)); //#13288
        } //#13288
        var _1E = (11 - ($k[--$j] % 11)) % 11; //#13290
        $k[$j++] = _1E; //#13298
        if (_1E == 10) { //#13297
            if ($_.badmod11) { //#13294
                $j--; //#13292
                var _1H = $s($_.code.length + 2); //#13292
                $puti(_1H, 0, $_.code); //#13292
                $puti(_1H, $_.code.length, "10"); //#13292
                $k[$j++] = _1H; //#13292
            } else { //#13294
                $j--; //#13294
                $k[$j++] = 'bwipp.msiBadMod11NotSpecified#13294'; //#13294
                $k[$j++] = "mod11 check digit is 10 but badmod11 not specified"; //#13294
                bwipp_raiseerror(); //#13294
            } //#13294
        } else { //#13297
            var _1L = $s($_.code.length + 1); //#13297
            $puti(_1L, 0, $_.code); //#13297
            $k[$j++] = _1L; //#13297
            $k[$j++] = _1L; //#13297
            $k[$j++] = $_.code.length; //#13297
            $r(4, -1); //#13297
            var _1O = $k[--$j]; //#13297
            var _1P = $k[--$j]; //#13297
            $put($k[--$j], _1P, _1O + 48); //#13297
        } //#13297
    }; //#13297
    var _1R = new Map([
        ["mod10", function() {
            $_.mod10(); //#13303
        }],
        ["mod1010", function() {
            $_.mod10(); //#13304
            $_.mod10(); //#13304
        }],
        ["mod11", function() {
            $_.mod11(); //#13305
        }],
        ["ncrmod11", function() {
            $_.ncrmod11(); //#13306
        }],
        ["mod1110", function() {
            $_.mod11(); //#13307
            $_.mod10(); //#13307
        }],
        ["ncrmod1110", function() {
            $_.ncrmod11(); //#13308
            $_.mod10(); //#13308
        }]
    ]); //#13308
    $_.checkfunc = _1R; //#13309
    if ($_.includecheck) { //#13320
        var _1U = $_.checkfunc; //#13314
        var _1V = $_.checktype; //#13314
        var _1W = $get(_1U, _1V) !== undefined; //#13314
        $k[$j++] = _1U; //#13316
        $k[$j++] = _1V; //#13316
        if (!_1W) { //#13316
            $j -= 2; //#13315
            $k[$j++] = 'bwipp.msiBadCharacter#13315'; //#13315
            $k[$j++] = "MSI checktype must be mod10, mod1010, mod11, ncrmod11, mod1110 or ncrmod1110"; //#13315
            bwipp_raiseerror(); //#13315
        } //#13315
        var _1X = $k[--$j]; //#13317
        var _1Z = $get($k[--$j], _1X); //#13317
        $k[$j++] = $_.barcode; //#13317
        if (_1Z() === true) {
            return true;
        } //#13317
        $_.barcode = $k[--$j]; //#13317
        $_.barlen = $_.barcode.length; //#13318
        if ($_.includecheckintext) { //#13319
            $_.txtlen = $_.barlen; //#13319
        } //#13319
    } //#13319
    $_.sbs = $s(($_.barlen * 8) + 5); //#13322
    $_.txt = $a($_.barlen); //#13323
    $puti($_.sbs, 0, $get($_.encs, 10)); //#13326
    for (var _1o = 0, _1n = $_.barlen - 1; _1o <= _1n; _1o += 1) { //#13338
        $_.i = _1o; //#13329
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#13331
        $j--; //#13332
        $_.indx = $k[--$j].length; //#13333
        $j -= 2; //#13334
        $_.enc = $get($_.encs, $_.indx); //#13335
        $puti($_.sbs, ($_.i * 8) + 2, $_.enc); //#13336
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 12) + 3, $_.textyoffset, $_.textfont, $_.textsize])); //#13337
    } //#13337
    $puti($_.sbs, ($_.barlen * 8) + 2, $get($_.encs, 11)); //#13341
    $k[$j++] = Infinity; //#13344
    $k[$j++] = Infinity; //#13346
    var _2E = $_.sbs; //#13346
    for (var _2F = 0, _2G = _2E.length; _2F < _2G; _2F++) { //#13346
        $k[$j++] = $get(_2E, _2F) - 48; //#13346
    } //#13346
    var _2I = $a(); //#13346
    $k[$j++] = Infinity; //#13347
    for (var _2K = 0, _2L = ~~(($_.sbs.length + 1) / 2); _2K < _2L; _2K++) { //#13347
        $k[$j++] = $_.height; //#13347
    } //#13347
    var _2N = $a(); //#13347
    $k[$j++] = Infinity; //#13348
    for (var _2P = 0, _2Q = ~~(($_.sbs.length + 1) / 2); _2P < _2Q; _2P++) { //#13348
        $k[$j++] = 0; //#13348
    } //#13348
    var _2R = $a(); //#13348
    $k[$j++] = 'ren'; //#13351
    $k[$j++] = 'renlinear'; //#13351
    $k[$j++] = 'sbs'; //#13351
    $k[$j++] = _2I; //#13351
    $k[$j++] = 'bhs'; //#13351
    $k[$j++] = _2N; //#13351
    $k[$j++] = 'bbs'; //#13351
    $k[$j++] = _2R; //#13351
    if ($_.includetext) { //#13351
        $k[$j++] = 'txt'; //#13350
        $k[$j++] = $geti($_.txt, 0, $_.txtlen); //#13350
    } //#13350
    $k[$j++] = 'opt'; //#13352
    $k[$j++] = $_.options; //#13352
    var _2X = $d(); //#13352
    $k[$j++] = _2X; //#13355
    if (!$_.dontdraw) { //#13355
        bwipp_renlinear(); //#13355
    } //#13355
    $_ = $__; //#13359
} //bwipp_msi
function bwipp_plessey() {
    var $__ = $_; //#13389
    $_ = Object.assign({}, $_); //#13389
    $_.dontdraw = false; //#13392
    $_.includetext = false; //#13393
    $_.validatecheck = false; //#13394
    $_.includecheckintext = false; //#13395
    $_.unidirectional = false; //#13396
    $_.textfont = "OCR-B"; //#13397
    $_.textsize = 10; //#13398
    $_.textyoffset = -8; //#13399
    $_.height = 1; //#13400
    $k[$j++] = $_; //#13402
    bwipp_processoptions(); //#13402
    $_.options = $k[--$j]; //#13402
    $_.barcode = $k[--$j]; //#13403
    if ($_.barcode.length == 0) { //#13407
        $k[$j++] = 'bwipp.plesseyEmptyData#13406'; //#13406
        $k[$j++] = "The data must not be empty"; //#13406
        bwipp_raiseerror(); //#13406
    } //#13406
    $_.barchars = "0123456789ABCDEF"; //#13413
    $_.charvals = new Map; //#13414
    for (var _3 = 0; _3 <= 15; _3 += 1) { //#13415
        $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#13415
    } //#13415
    $_.encs = $a(["14141414", "32141414", "14321414", "32321414", "14143214", "32143214", "14323214", "32323214", "14141432", "32141432", "14321432", "32321432", "14143232", "32143232", "14323232", "32323232", "32321432", "541412323", "323"]); //#13424
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#13432
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#13429
        if (!_F) { //#13431
            $k[$j++] = 'bwipp.plesseyBadCharacter#13430'; //#13430
            $k[$j++] = "Plessey must contain only digits and letters A B C D E F"; //#13430
            bwipp_raiseerror(); //#13430
        } //#13430
    } //#13430
    $k[$j++] = 'barlen'; //#13434
    $k[$j++] = $_.barcode.length; //#13434
    if ($_.validatecheck) { //#13434
        var _I = $k[--$j]; //#13434
        $k[$j++] = _I - 2; //#13434
    } //#13434
    var _J = $k[--$j]; //#13434
    $_[$k[--$j]] = _J; //#13434
    $_.checkbits = $a(($_.barlen * 4) + 8); //#13437
    $puti($_.checkbits, $_.barlen * 4, $a([0, 0, 0, 0, 0, 0, 0, 0])); //#13438
    for (var _S = 0, _R = $_.barlen - 1; _S <= _R; _S += 1) { //#13448
        $_.i = _S; //#13440
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#13441
        $puti($_.checkbits, $_.i * 4, $a([$_.indx & 1, ($_.indx >>> 1) & 1, ($_.indx >>> 2) & 1, $_.indx >>> 3])); //#13447
    } //#13447
    $_.checksalt = $a([1, 1, 1, 1, 0, 1, 0, 0, 1]); //#13449
    for (var _i = 0, _h = ($_.barlen * 4) - 1; _i <= _h; _i += 1) { //#13458
        $_.i = _i; //#13451
        if ($get($_.checkbits, $_.i) == 1) { //#13457
            for (var _m = 0; _m <= 8; _m += 1) { //#13456
                $_.j = _m; //#13454
                $put($_.checkbits, $_.i + $_.j, $xo($get($_.checkbits, $_.i + $_.j), $get($_.checksalt, $_.j))); //#13455
            } //#13455
        } //#13455
    } //#13455
    $_.checkval = 0; //#13459
    for (var _x = 0; _x <= 7; _x += 1) { //#13463
        $_.i = _x; //#13461
        $_.checkval = $f($_.checkval + ~~$pow(2, $_.i) * $get($_.checkbits, $f($_.barlen * 4 + $_.i))); //#13462
    } //#13462
    $_.checksum1 = $_.checkval & 15; //#13464
    $_.checksum2 = $_.checkval >>> 4; //#13465
    if ($_.validatecheck) { //#13472
        if (($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum1)) || ($get($_.barcode, $_.barlen + 1) != $get($_.barchars, $_.checksum2))) { //#13470
            $k[$j++] = 'bwipp.plesseyBadCheckDigits#13469'; //#13469
            $k[$j++] = "Incorrect Plessey check digits provided"; //#13469
            bwipp_raiseerror(); //#13469
        } //#13469
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#13471
    } //#13471
    var _1O = $_.unidirectional ? 27 : 33; //#13474
    $_.sbs = $s($f(($_.barlen * 8) + _1O)); //#13474
    $_.txt = $a($_.barlen + 2); //#13475
    $puti($_.sbs, 0, $get($_.encs, 16)); //#13478
    for (var _1X = 0, _1W = $_.barlen - 1; _1X <= _1W; _1X += 1) { //#13485
        $_.i = _1X; //#13481
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#13482
        $puti($_.sbs, ($_.i * 8) + 8, $get($_.encs, $_.indx)); //#13483
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 20) + 20, $_.textyoffset, $_.textfont, $_.textsize])); //#13484
    } //#13484
    $puti($_.sbs, ($_.barlen * 8) + 8, $get($_.encs, $_.checksum1)); //#13488
    $puti($_.sbs, ($_.barlen * 8) + 16, $get($_.encs, $_.checksum2)); //#13489
    if ($_.includecheckintext) { //#13495
        $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum1, 1), ($_.barlen * 20) + 20, $_.textyoffset, $_.textfont, $_.textsize])); //#13491
        $put($_.txt, $_.barlen + 1, $a([$geti($_.barchars, $_.checksum2, 1), (($_.barlen + 1) * 20) + 20, $_.textyoffset, $_.textfont, $_.textsize])); //#13492
    } else { //#13495
        $put($_.txt, $_.barlen, $a([" ", ($_.barlen * 20) + 20, $_.textyoffset, $_.textfont, $_.textsize])); //#13494
        $put($_.txt, $_.barlen + 1, $a([" ", (($_.barlen + 1) * 20) + 20, $_.textyoffset, $_.textfont, $_.textsize])); //#13495
    } //#13495
    var _2f = $_.unidirectional ? 18 : 17; //#13499
    $puti($_.sbs, ($_.barlen * 8) + 24, $get($_.encs, _2f)); //#13499
    $k[$j++] = Infinity; //#13502
    $k[$j++] = Infinity; //#13504
    var _2h = $_.sbs; //#13504
    for (var _2i = 0, _2j = _2h.length; _2i < _2j; _2i++) { //#13504
        $k[$j++] = $get(_2h, _2i) - 48; //#13504
    } //#13504
    var _2l = $a(); //#13504
    $k[$j++] = Infinity; //#13505
    for (var _2n = 0, _2o = ~~(($_.sbs.length + 1) / 2); _2n < _2o; _2n++) { //#13505
        $k[$j++] = $_.height; //#13505
    } //#13505
    var _2q = $a(); //#13505
    $k[$j++] = Infinity; //#13506
    for (var _2s = 0, _2t = ~~(($_.sbs.length + 1) / 2); _2s < _2t; _2s++) { //#13506
        $k[$j++] = 0; //#13506
    } //#13506
    var _2u = $a(); //#13506
    $k[$j++] = 'ren'; //#13509
    $k[$j++] = 'renlinear'; //#13509
    $k[$j++] = 'sbs'; //#13509
    $k[$j++] = _2l; //#13509
    $k[$j++] = 'bhs'; //#13509
    $k[$j++] = _2q; //#13509
    $k[$j++] = 'bbs'; //#13509
    $k[$j++] = _2u; //#13509
    if ($_.includetext) { //#13509
        $k[$j++] = 'txt'; //#13508
        $k[$j++] = $_.txt; //#13508
    } //#13508
    $k[$j++] = 'opt'; //#13510
    $k[$j++] = $_.options; //#13510
    var _2y = $d(); //#13510
    $k[$j++] = _2y; //#13513
    if (!$_.dontdraw) { //#13513
        bwipp_renlinear(); //#13513
    } //#13513
    $_ = $__; //#13517
} //bwipp_plessey
function bwipp_telepen() {
    var $__ = $_; //#13548
    $_ = Object.assign({}, $_); //#13548
    $_.numeric = false; //#13551
    $_.dontdraw = false; //#13552
    $_.includetext = false; //#13553
    $_.textfont = "OCR-B"; //#13554
    $_.textsize = 10; //#13555
    $_.textyoffset = -8; //#13556
    $_.height = 1; //#13557
    $_.parse = false; //#13558
    $k[$j++] = $_; //#13560
    bwipp_processoptions(); //#13560
    $_.options = $k[--$j]; //#13560
    $_.barcode = $k[--$j]; //#13561
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#13569
    $_.fncvals = _3; //#13570
    $k[$j++] = 'barcode'; //#13571
    $k[$j++] = $_.barcode; //#13571
    $k[$j++] = $_.fncvals; //#13571
    bwipp_parseinput(); //#13571
    var _6 = $k[--$j]; //#13571
    $_[$k[--$j]] = _6; //#13571
    $_.barlen = $_.barcode.length; //#13572
    delete $_.options["parse"]; //#13573
    if ($_.numeric && (($_.barlen % 2) != 0)) { //#13577
        $k[$j++] = 'bwipp.telepenNumericOddLength#13576'; //#13576
        $k[$j++] = "Telepen Numeric must have an even length"; //#13576
        bwipp_raiseerror(); //#13576
    } //#13576
    $_.encs = $a(["31313131", "1131313111", "33313111", "1111313131", "3111313111", "11333131", "13133131", "111111313111", "31333111", "1131113131", "33113131", "1111333111", "3111113131", "1113133111", "1311133111", "111111113131", "3131113111", "11313331", "333331", "111131113111", "31113331", "1133113111", "1313113111", "1111113331", "31131331", "113111113111", "3311113111", "1111131331", "311111113111", "1113111331", "1311111331", "11111111113111", "31313311", "1131311131", "33311131", "1111313311", "3111311131", "11333311", "13133311", "111111311131", "31331131", "1131113311", "33113311", "1111331131", "3111113311", "1113131131", "1311131131", "111111113311", "3131111131", "1131131311", "33131311", "111131111131", "3111131311", "1133111131", "1313111131", "111111131311", "3113111311", "113111111131", "3311111131", "111113111311", "311111111131", "111311111311", "131111111311", "11111111111131", "3131311111", "11313133", "333133", "111131311111", "31113133", "1133311111", "1313311111", "1111113133", "313333", "113111311111", "3311311111", "11113333", "311111311111", "11131333", "13111333", "11111111311111", "31311133", "1131331111", "33331111", "1111311133", "3111331111", "11331133", "13131133", "111111331111", "3113131111", "1131111133", "33111133", "111113131111", "3111111133", "111311131111", "131111131111", "111111111133", "31311313", "113131111111", "3331111111", "1111311313", "311131111111", "11331313", "13131313", "11111131111111", "3133111111", "1131111313", "33111313", "111133111111", "3111111313", "111313111111", "131113111111", "111111111313", "313111111111", "1131131113", "33131113", "11113111111111", "3111131113", "113311111111", "131311111111", "111111131113", "3113111113", "11311111111111", "331111111111", "111113111113", "31111111111111", "111311111113", "131111111113", "1111111111111111"]); //#13614
    $_.sbs = $s(($_.barlen * 16) + 48); //#13617
    $_.txt = $a($_.barlen); //#13618
    $_.enc = $get($_.encs, 95); //#13621
    $puti($_.sbs, 0, $_.enc); //#13622
    $_.l = $_.enc.length; //#13623
    $_.checksum = 0; //#13625
    $_.i = 0; //#13626
    $_.j = 0; //#13626
    for (;;) { //#13669
        if ($_.i == $_.barlen) { //#13628
            break; //#13628
        } //#13628
        if ($_.numeric) { //#13662
            if ($get($_.barcode, $_.i) > 16) { //#13650
                $_.np = $geti($_.barcode, $_.i, 2); //#13631
                var _X = $get($_.np, 0); //#13632
                var _Z = $get($_.np, 1); //#13633
                if (((_X < 48) || (_X > 57)) || (((_Z < 48) || (_Z > 57)) && (!(_Z == 88)))) { //#13639
                    $k[$j++] = -1; //#13635
                } else { //#13639
                    var _e = $get($_.np, 1) - 48; //#13638
                    $k[$j++] = $get($_.np, 0) - 48; //#13638
                    $k[$j++] = _e; //#13638
                    if (_e != 40) { //#13638
                        var _f = $k[--$j]; //#13638
                        var _g = $k[--$j]; //#13638
                        $k[$j++] = ($f(_f + (_g * 10))) + 10; //#13638
                    } else { //#13638
                        $j--; //#13638
                    } //#13638
                    var _h = $k[--$j]; //#13639
                    $k[$j++] = _h + 17; //#13639
                } //#13639
                var _i = $k[$j - 1]; //#13641
                if (_i == -1) { //#13643
                    $k[$j++] = 'bwipp.telepenInvalidNumericCharacter#13642'; //#13642
                    $k[$j++] = "Telepen Numeric may contain only digits, or X in even positions"; //#13642
                    bwipp_raiseerror(); //#13642
                } //#13642
                $_.indx = $k[--$j]; //#13644
                $put($_.txt, $_.j, $a([$_.np, ($_.j * 16) + 16, $_.textyoffset, $_.textfont, $_.textsize])); //#13645
                $_.i = $_.i + 2; //#13646
            } else { //#13650
                $_.indx = $get($_.barcode, $_.i); //#13648
                $put($_.txt, $_.j, $a([" ", ($_.j * 16) + 16, $_.textyoffset, $_.textfont, $_.textsize])); //#13649
                $_.i = $_.i + 1; //#13650
            } //#13650
        } else { //#13662
            $_.indx = $get($_.barcode, $_.i); //#13653
            if ($_.indx > 127) { //#13656
                $k[$j++] = 'bwipp.telepenInvalidAlphaCharacter#13655'; //#13655
                $k[$j++] = "Telepen Alpha characters must have ordinal values 0 to 127"; //#13655
                bwipp_raiseerror(); //#13655
            } //#13655
            if (($_.indx >= 32) && ($_.indx <= 126)) { //#13660
                $put($_.txt, $_.j, $a([$geti($_.barcode, $_.i, 1), ($_.j * 16) + 16, $_.textyoffset, $_.textfont, $_.textsize])); //#13658
            } else { //#13660
                $put($_.txt, $_.j, $a([" ", ($_.j * 16) + 16, $_.textyoffset, $_.textfont, $_.textsize])); //#13660
            } //#13660
            $_.i = $_.i + 1; //#13662
        } //#13662
        $_.checksum = $f($_.checksum + $_.indx); //#13664
        $_.enc = $get($_.encs, $_.indx); //#13665
        $puti($_.sbs, $_.l, $_.enc); //#13666
        $_.l = $_.l + $_.enc.length; //#13667
        $_.j = $_.j + 1; //#13668
    } //#13668
    $_.checksum = (127 - ($_.checksum % 127)) % 127; //#13672
    $_.enc = $get($_.encs, $_.checksum); //#13673
    $puti($_.sbs, $_.l, $_.enc); //#13674
    $_.l = $_.l + $_.enc.length; //#13675
    $_.enc = $get($_.encs, 122); //#13678
    $puti($_.sbs, $_.l, $_.enc); //#13679
    $_.l = $_.l + $_.enc.length; //#13680
    $_.sbs = $geti($_.sbs, 0, $_.l); //#13683
    $_.txt = $geti($_.txt, 0, $_.j); //#13684
    $k[$j++] = Infinity; //#13687
    $k[$j++] = Infinity; //#13689
    var _1z = $_.sbs; //#13689
    for (var _20 = 0, _21 = _1z.length; _20 < _21; _20++) { //#13689
        $k[$j++] = $get(_1z, _20) - 48; //#13689
    } //#13689
    var _23 = $a(); //#13689
    $k[$j++] = Infinity; //#13690
    for (var _25 = 0, _26 = ~~(($_.sbs.length + 1) / 2); _25 < _26; _25++) { //#13690
        $k[$j++] = $_.height; //#13690
    } //#13690
    var _28 = $a(); //#13690
    $k[$j++] = Infinity; //#13691
    for (var _2A = 0, _2B = ~~(($_.sbs.length + 1) / 2); _2A < _2B; _2A++) { //#13691
        $k[$j++] = 0; //#13691
    } //#13691
    var _2C = $a(); //#13691
    $k[$j++] = 'ren'; //#13694
    $k[$j++] = 'renlinear'; //#13694
    $k[$j++] = 'sbs'; //#13694
    $k[$j++] = _23; //#13694
    $k[$j++] = 'bhs'; //#13694
    $k[$j++] = _28; //#13694
    $k[$j++] = 'bbs'; //#13694
    $k[$j++] = _2C; //#13694
    if ($_.includetext) { //#13694
        $k[$j++] = 'txt'; //#13693
        $k[$j++] = $_.txt; //#13693
    } //#13693
    $k[$j++] = 'opt'; //#13695
    $k[$j++] = $_.options; //#13695
    var _2G = $d(); //#13695
    $k[$j++] = _2G; //#13698
    if (!$_.dontdraw) { //#13698
        bwipp_renlinear(); //#13698
    } //#13698
    $_ = $__; //#13702
} //bwipp_telepen
function bwipp_telepennumeric() {
    var $__ = $_; //#13731
    $_ = Object.assign({}, $_); //#13731
    $_.dontdraw = false; //#13734
    $k[$j++] = $_; //#13736
    bwipp_processoptions(); //#13736
    $_.options = $k[--$j]; //#13736
    $_.barcode = $k[--$j]; //#13737
    $put($_.options, "dontdraw", true); //#13740
    $put($_.options, "numeric", true); //#13741
    $k[$j++] = 'args'; //#13743
    $k[$j++] = $_.barcode; //#13743
    $k[$j++] = $_.options; //#13743
    bwipp_telepen(); //#13743
    var _6 = $k[--$j]; //#13743
    $_[$k[--$j]] = _6; //#13743
    $put($_.args, "opt", $_.options); //#13745
    $k[$j++] = $_.args; //#13748
    if (!$_.dontdraw) { //#13748
        bwipp_renlinear(); //#13748
    } //#13748
    $_ = $__; //#13750
} //bwipp_telepennumeric
function bwipp_posicode() {
    var $__ = $_; //#13781
    $_ = Object.assign({}, $_); //#13781
    $_.dontdraw = false; //#13784
    $_.includetext = false; //#13785
    $_.textfont = "OCR-B"; //#13786
    $_.textsize = 10; //#13787
    $_.textxoffset = 0; //#13788
    $_.textyoffset = -8; //#13789
    $_.height = 1; //#13790
    $_.encoding = "auto"; //#13791
    $_.version = "a"; //#13792
    $_.checkoffset = 0; //#13793
    $_.raw = false; //#13794
    $_.parse = false; //#13795
    $_.parsefnc = false; //#13796
    $k[$j++] = $_; //#13798
    bwipp_processoptions(); //#13798
    $_.options = $k[--$j]; //#13798
    var _1 = $k[--$j]; //#13799
    $_.barcode = _1; //#13799
    $_.la0 = -1; //#13805
    $_.la1 = -2; //#13805
    $_.la2 = -3; //#13805
    $_.sf0 = -4; //#13806
    $_.sf1 = -5; //#13806
    $_.sf2 = -6; //#13806
    $_.fn1 = -7; //#13807
    $_.fn2 = -8; //#13807
    $_.fn3 = -9; //#13807
    $_.fn4 = -10; //#13807
    var _r = $a([$_.sf1, $_.sf0, $_.fn3]); //#13826
    $_.charmapsnormal = $a([$a(["0", "^", "'"]), $a(["1", ";", 27]), $a(["2", "<", 28]), $a(["3", "=", 29]), $a(["4", ">", 30]), $a(["5", "?", 31]), $a(["6", "@", "!"]), $a(["7", "[", "\""]), $a(["8", 92, "#"]), $a(["9", "]", "&"]), $a(["A", "a", 1]), $a(["B", "b", 2]), $a(["C", "c", 3]), $a(["D", "d", 4]), $a(["E", "e", 5]), $a(["F", "f", 6]), $a(["G", "g", 7]), $a(["H", "h", 8]), $a(["I", "i", 9]), $a(["J", "j", 10]), $a(["K", "k", 11]), $a(["L", "l", 12]), $a(["M", "m", 13]), $a(["N", "n", 14]), $a(["O", "o", 15]), $a(["P", "p", 16]), $a(["Q", "q", 17]), $a(["R", "r", 18]), $a(["S", "s", 19]), $a(["T", "t", 20]), $a(["U", "u", 21]), $a(["V", "v", 22]), $a(["W", "w", 23]), $a(["X", "x", 24]), $a(["Y", "y", 25]), $a(["Z", "z", 26]), $a(["-", "_", 40]), $a([".", "`", 41]), $a([" ", 127, 0]), $a(["$", "{", "*"]), $a(["/", "|", ","]), $a(["+", "}", ":"]), $a(["%", "~", $_.fn1]), $a([$_.la1, $_.la0, $_.fn2]), _r, $a([$_.sf2, $_.sf2, $_.fn4])]); //#13828
    $_.chapmapslimited = $a([$a(["0", -98, -98]), $a(["1", -98, -98]), $a(["2", -98, -98]), $a(["3", -98, -98]), $a(["4", -98, -98]), $a(["5", -98, -98]), $a(["6", -98, -98]), $a(["7", -98, -98]), $a(["8", -98, -98]), $a(["9", -98, -98]), $a(["A", -98, -98]), $a(["B", -98, -98]), $a(["C", -98, -98]), $a(["D", -98, -98]), $a(["E", -98, -98]), $a(["F", -98, -98]), $a(["G", -98, -98]), $a(["H", -98, -98]), $a(["I", -98, -98]), $a(["J", -98, -98]), $a(["K", -98, -98]), $a(["L", -98, -98]), $a(["M", -98, -98]), $a(["N", -98, -98]), $a(["O", -98, -98]), $a(["P", -98, -98]), $a(["Q", -98, -98]), $a(["R", -98, -98]), $a(["S", -98, -98]), $a(["T", -98, -98]), $a(["U", -98, -98]), $a(["V", -98, -98]), $a(["W", -98, -98]), $a(["X", -98, -98]), $a(["Y", -98, -98]), $a(["Z", -98, -98]), $a(["-", -98, -98]), $a([".", -98, -98])]); //#13843
    if ((($ne($_.version, "a") && $ne($_.version, "b")) && $ne($_.version, "limiteda")) && $ne($_.version, "limitedb")) { //#13848
        $k[$j++] = 'bwipp.posicodeInvalidVersion#13847'; //#13847
        $k[$j++] = "The version must be either a, b, limiteda or limitedb"; //#13847
        bwipp_raiseerror(); //#13847
    } //#13847
    $k[$j++] = 'charmaps'; //#13850
    if ($eq($_.version, "a") || $eq($_.version, "b")) { //#13850
        $k[$j++] = $_.charmapsnormal; //#13850
    } else { //#13850
        $k[$j++] = $_.chapmapslimited; //#13850
    } //#13850
    var _1j = $k[--$j]; //#13850
    $_[$k[--$j]] = _1j; //#13850
    var _1l = $_.charmaps; //#13854
    var _1m = $_.charmaps; //#13854
    var _1n = $_.charmaps; //#13854
    $_.charvals = $a([new Map, new Map, new Map]); //#13855
    for (var _1r = 0, _1q = $_.charmaps.length - 1; _1r <= _1q; _1r += 1) { //#13864
        $_.i = _1r; //#13857
        $_.encs = $get($_.charmaps, $_.i); //#13858
        for (var _1v = 0; _1v <= 2; _1v += 1) { //#13863
            $_.j = _1v; //#13860
            var _1y = $get($_.encs, $_.j); //#13861
            $k[$j++] = _1y; //#13861
            if ($eq($type(_1y), 'stringtype')) { //#13861
                var _21 = $get($k[--$j], 0); //#13861
                $k[$j++] = _21; //#13861
            } //#13861
            $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#13862
        } //#13862
    } //#13862
    $_.set0 = $get($_.charvals, 0); //#13865
    $_.set1 = $get($_.charvals, 1); //#13866
    $_.set2 = $get($_.charvals, 2); //#13867
    if ($eq($_.version, "limiteda") || $eq($_.version, "limitedb")) { //#13876
        for (var _2H = 0, _2G = $_.barcode.length - 1; _2H <= _2G; _2H += 1) { //#13875
            var _2M = $get($_.set0, $get($geti($_.barcode, _2H, 1), 0)) !== undefined; //#13872
            if (!_2M) { //#13874
                $k[$j++] = 'bwipp.posicodeBadCharacter#13873'; //#13873
                $k[$j++] = "Posicode limited must contain only digits, capital letters, and the symbols - and ."; //#13873
                bwipp_raiseerror(); //#13873
            } //#13873
        } //#13873
    } //#13873
    if ($_.raw) { //#13878
        $_.encoding = "raw"; //#13878
    } //#13878
    if ($eq($_.encoding, "raw")) { //#13892
        $_.cws = $a($_.barcode.length); //#13881
        $_.i = 0; //#13882
        $_.j = 0; //#13882
        for (;;) { //#13889
            if ($_.i == $_.barcode.length) { //#13884
                break; //#13884
            } //#13884
            $_.cw = $cvi($geti($_.barcode, $_.i + 1, 3)); //#13885
            $put($_.cws, $_.j, $_.cw); //#13886
            $_.i = $_.i + 4; //#13887
            $_.j = $_.j + 1; //#13888
        } //#13888
        $_.cws = $geti($_.cws, 0, $_.j); //#13890
        $_.text = ""; //#13891
    } //#13891
    if ($eq($_.encoding, "auto")) { //#14007
        var _2k = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["FNC1", $_.fn1],
            ["FNC2", $_.fn2],
            ["FNC3", $_.fn3]
        ]); //#13902
        $_.fncvals = _2k; //#13904
        $k[$j++] = 'msg'; //#13905
        $k[$j++] = $_.barcode; //#13905
        $k[$j++] = $_.fncvals; //#13905
        bwipp_parseinput(); //#13905
        var _2n = $k[--$j]; //#13905
        $_[$k[--$j]] = _2n; //#13905
        $_.msglen = $_.msg.length; //#13906
        $_.text = $s($_.msglen); //#13908
        for (var _2u = 0, _2t = $_.msglen - 1; _2u <= _2t; _2u += 1) { //#13912
            $_.i = _2u; //#13910
            var _2z = $get($_.msg, $_.i); //#13911
            $k[$j++] = $_.text; //#13911
            $k[$j++] = $_.i; //#13911
            $k[$j++] = _2z; //#13911
            if (_2z < 0) { //#13911
                $k[$j - 1] = 32; //#13911
            } //#13911
            var _30 = $k[--$j]; //#13911
            var _31 = $k[--$j]; //#13911
            $put($k[--$j], _31, _30); //#13911
        } //#13911
        $k[$j++] = Infinity; //#13915
        for (var _34 = 0, _35 = $_.msglen; _34 < _35; _34++) { //#13915
            $k[$j++] = 0; //#13915
        } //#13915
        $k[$j++] = 0; //#13915
        $_.numSA = $a(); //#13915
        $k[$j++] = Infinity; //#13916
        for (var _38 = 0, _39 = $_.msglen; _38 < _39; _38++) { //#13916
            $k[$j++] = 0; //#13916
        } //#13916
        $k[$j++] = 0; //#13916
        $_.numEA = $a(); //#13916
        for (var _3C = $_.msglen - 1; _3C >= 0; _3C -= 1) { //#13926
            $_.i = _3C; //#13918
            if ($get($_.msg, $_.i) >= 0) { //#13925
                if ($get($_.msg, $_.i) >= 128) { //#13923
                    $put($_.numEA, $_.i, $get($_.numEA, $_.i + 1) + 1); //#13921
                } else { //#13923
                    $put($_.numSA, $_.i, $get($_.numSA, $_.i + 1) + 1); //#13923
                } //#13923
            } //#13923
        } //#13923
        $_.ea = false; //#13929
        $_.msgtmp = $a([]); //#13929
        for (var _3W = 0, _3V = $_.msglen - 1; _3W <= _3V; _3W += 1) { //#13944
            $_.i = _3W; //#13931
            $_.c = $get($_.msg, $_.i); //#13932
            if ((!($_.ea != ($_.c < 128))) && ($_.c >= 0)) { //#13942
                if ($_.ea) { //#13934
                    $k[$j++] = $_.numSA; //#13934
                } else { //#13934
                    $k[$j++] = $_.numEA; //#13934
                } //#13934
                var _3i = $get($k[--$j], $_.i); //#13934
                var _3l = ($f(_3i + $_.i) == $_.msglen) ? 3 : 5; //#13935
                if (_3i < _3l) { //#13940
                    $k[$j++] = Infinity; //#13937
                    $aload($_.msgtmp); //#13937
                    $k[$j++] = $_.fn4; //#13937
                    $_.msgtmp = $a(); //#13937
                } else { //#13940
                    $k[$j++] = Infinity; //#13939
                    $aload($_.msgtmp); //#13939
                    $k[$j++] = $_.fn4; //#13939
                    $k[$j++] = $_.fn4; //#13939
                    $_.msgtmp = $a(); //#13939
                    $_.ea = !$_.ea; //#13940
                } //#13940
            } //#13940
            $k[$j++] = Infinity; //#13943
            $aload($_.msgtmp); //#13943
            if ($_.c >= 0) { //#13943
                $k[$j++] = $_.c & 127; //#13943
            } else { //#13943
                $k[$j++] = $_.c; //#13943
            } //#13943
            $_.msgtmp = $a(); //#13943
        } //#13943
        $_.msg = $_.msgtmp; //#13945
        $_.msglen = $_.msg.length; //#13946
        $_.enc = function() {
            var _41 = $k[--$j]; //#13950
            $put($_.cws, $_.j, $get(_41, $k[--$j])); //#13950
            $_.j = $_.j + 1; //#13951
        }; //#13951
        $_.cws = $a($_.msglen * 2); //#13954
        $_.i = 0; //#13955
        $_.j = 0; //#13955
        $_.cset = "set0"; //#13955
        for (;;) { //#14005
            if ($_.i == $_.msglen) { //#13957
                break; //#13957
            } //#13957
            for (;;) { //#14003
                $_.char1 = $get($_.msg, $_.i); //#13962
                $k[$j++] = 'char2'; //#13963
                if (($_.i + 1) < $_.msglen) { //#13963
                    $k[$j++] = $get($_.msg, $_.i + 1); //#13963
                } else { //#13963
                    $k[$j++] = -99; //#13963
                } //#13963
                var _4J = $k[--$j]; //#13963
                $_[$k[--$j]] = _4J; //#13963
                var _4O = $get($_[$_.cset], $_.char1) !== undefined; //#13966
                if (_4O) { //#13970
                    $k[$j++] = $_.char1; //#13967
                    $k[$j++] = $_[$_.cset]; //#13967
                    $_.enc(); //#13967
                    $_.i = $_.i + 1; //#13968
                    break; //#13969
                } //#13969
                var _4V = $get($_.set2, $_.char1) !== undefined; //#13973
                if (_4V) { //#13978
                    $k[$j++] = $_.sf2; //#13974
                    $k[$j++] = $_[$_.cset]; //#13974
                    $_.enc(); //#13974
                    $k[$j++] = $_.char1; //#13975
                    $k[$j++] = $_.set2; //#13975
                    $_.enc(); //#13975
                    $_.i = $_.i + 1; //#13976
                    break; //#13977
                } //#13977
                var _4f = $get($_[$_.cset], $_.char2) !== undefined; //#13981
                if (!_4f) { //#13999
                    if ($eq($_.cset, "set0")) { //#13987
                        $k[$j++] = $_.la1; //#13983
                        $k[$j++] = $_[$_.cset]; //#13983
                        $_.enc(); //#13983
                        $_.cset = "set1"; //#13984
                    } else { //#13987
                        $k[$j++] = $_.la0; //#13986
                        $k[$j++] = $_[$_.cset]; //#13986
                        $_.enc(); //#13986
                        $_.cset = "set0"; //#13987
                    } //#13987
                    break; //#13989
                } else { //#13999
                    if ($eq($_.cset, "set0")) { //#13996
                        $k[$j++] = $_.sf1; //#13992
                        $k[$j++] = $_[$_.cset]; //#13992
                        $_.enc(); //#13992
                        $k[$j++] = $_.char1; //#13993
                        $k[$j++] = $_.set1; //#13993
                        $_.enc(); //#13993
                    } else { //#13996
                        $k[$j++] = $_.sf0; //#13995
                        $k[$j++] = $_[$_.cset]; //#13995
                        $_.enc(); //#13995
                        $k[$j++] = $_.char1; //#13996
                        $k[$j++] = $_.set0; //#13996
                        $_.enc(); //#13996
                    } //#13996
                    $_.i = $_.i + 1; //#13998
                    break; //#13999
                } //#13999
                break; //#14002
            } //#14002
        } //#14002
        $_.cws = $geti($_.cws, 0, $_.j); //#14006
    } //#14006
    var _56 = new Map([
        ["a", $a(["141112", "131212", "121312", "111412", "131113", "121213", "111313", "121114", "111214", "111115", "181111", "171211", "161311", "151411", "141511", "131611", "121711", "111811", "171112", "161212", "151312", "141412", "131512", "121612", "111712", "161113", "151213", "141313", "131413", "121513", "111613", "151114", "141214", "131314", "121414", "111514", "141115", "131215", "121315", "111415", "131116", "121216", "111316", "121117", "111217", "111118", "1<111112", "111111111;1"])],
        ["b", $a(["151213", "141313", "131413", "121513", "141214", "131314", "121414", "131215", "121315", "121216", "191212", "181312", "171412", "161512", "151612", "141712", "131812", "121912", "181213", "171313", "161413", "151513", "141613", "131713", "121813", "171214", "161314", "151414", "141514", "131614", "121714", "161215", "151315", "141415", "131515", "121615", "151216", "141316", "131416", "121516", "141217", "131317", "121417", "131218", "121318", "121219", "1<121312", "121212121<1"])],
        ["limiteda", $a(["111411", "111312", "111213", "111114", "121311", "121212", "121113", "141111", "131211", "131112", "171111", "161211", "151311", "141411", "131511", "121611", "111711", "161112", "151212", "141312", "131412", "121512", "111612", "151113", "141213", "131313", "121413", "111513", "141114", "131214", "121314", "111414", "131115", "121215", "111315", "121116", "111216", "111117", "151111", "1"])],
        ["limitedb", $a(["121512", "121413", "121314", "121215", "131412", "131313", "131214", "151212", "141312", "141213", "181212", "171312", "161412", "151512", "141612", "131712", "121812", "171213", "161313", "151413", "141513", "131613", "121713", "161214", "151314", "141414", "131514", "121614", "151215", "141315", "131415", "121515", "141216", "131316", "121416", "131217", "121317", "121218", "141212", "1"])]
    ]); //#14054
    $_.encmaps = _56; //#14056
    $_.encs = $get($_.encmaps, $_.version); //#14058
    $_.c2w = $a([$a([495, 330, 210, 126, 70, 35, 15, 5]), $a([165, 120, 84, 56, 35, 20, 10, 4]), $a([45, 36, 28, 21, 15, 10, 6, 3]), $a([9, 8, 7, 6, 5, 4, 3, 2]), $a([1, 1, 1, 1, 1, 1, 1, 1])]); //#14067
    $_.v = 0; //#14069
    var _5I = $_.cws; //#14070
    for (var _5J = 0, _5K = _5I.length; _5J < _5K; _5J++) { //#14079
        $_.cw = $get(_5I, _5J); //#14071
        for (var _5M = 0; _5M < 6; _5M++) { //#14078
            if ((($_.cw ^ $_.v) & 1) != 0) { //#14075
                $_.v = $_.v ^ 7682; //#14074
            } //#14074
            $_.v = $_.v >>> 1; //#14076
            $_.cw = $_.cw >>> 1; //#14077
        } //#14077
    } //#14077
    $_.v = $_.v + $_.checkoffset; //#14080
    if ($eq($_.version, "limiteda") || $eq($_.version, "limitedb")) { //#14088
        $_.v = $_.v & 1023; //#14083
        if (($_.v > 824) && ($_.v < 853)) { //#14086
            $_.v = $_.v + 292; //#14085
        } //#14085
    } else { //#14088
        $_.v = ($_.v & 1023) + 45; //#14088
    } //#14088
    $_.d = $a([2, 2, 2, 2, 2, 2]); //#14091
    $_.r = 0; //#14092
    $_.c = 0; //#14092
    $_.w = 0; //#14092
    $_.sum = 0; //#14092
    for (;;) { //#14111
        if ($_.sum == $_.v) { //#14094
            break; //#14094
        } //#14094
        $_.t = $f($_.sum + $get($get($_.c2w, $_.r), $_.c)); //#14095
        if ($_.t == $_.v) { //#14100
            $_.w = $_.w + 1; //#14097
            $put($_.d, $_.r, $_.w + 2); //#14098
            $_.sum = $_.t; //#14099
        } //#14099
        if ($_.t > $_.v) { //#14105
            $put($_.d, $_.r, $_.w + 2); //#14102
            $_.r = $_.r + 1; //#14103
            $_.w = 0; //#14104
        } //#14104
        if ($_.t < $_.v) { //#14110
            $_.c = $_.c + 1; //#14107
            $_.w = $_.w + 1; //#14108
            $_.sum = $_.t; //#14109
        } //#14109
    } //#14109
    $k[$j++] = 20; //#14112
    for (var _62 = 0; _62 <= 4; _62 += 1) { //#14112
        var _65 = $k[--$j]; //#14112
        $k[$j++] = $f(_65 - $get($_.d, _62)); //#14112
    } //#14112
    $put($_.d, 5, $k[--$j]); //#14113
    if ($eq($_.version, "b") || $eq($_.version, "limitedb")) { //#14116
        $k[$j++] = Infinity; //#14115
        var _6A = $_.d; //#14115
        for (var _6B = 0, _6C = _6A.length; _6B < _6C; _6B++) { //#14115
            $k[$j++] = $get(_6A, _6B) + 1; //#14115
        } //#14115
        $_.d = $a(); //#14115
    } //#14115
    $_.cbs = $strcpy($s(12), "111111111111"); //#14117
    for (var _6H = 5; _6H >= 0; _6H -= 1) { //#14121
        $_.i = _6H; //#14119
        $put($_.cbs, ((5 - $_.i) * 2) + 1, $get($_.d, $_.i) + 47); //#14120
    } //#14120
    $_.sbs = $s(($_.cws.length * 6) + 31); //#14124
    var _6R = $get($_.encs, $_.encs.length - 2); //#14125
    $puti($_.sbs, 0, _6R); //#14126
    $_.j = _6R.length; //#14127
    for (var _6V = 0, _6U = $_.cws.length - 1; _6V <= _6U; _6V += 1) { //#14132
        $_.i = _6V; //#14129
        $puti($_.sbs, $_.j, $get($_.encs, $get($_.cws, $_.i))); //#14130
        $_.j = $_.j + 6; //#14131
    } //#14131
    $puti($_.sbs, $_.j, $_.cbs); //#14133
    $_.j = $_.j + 12; //#14134
    var _6k = $get($_.encs, $_.encs.length - 1); //#14135
    $puti($_.sbs, $_.j, _6k); //#14136
    $_.j = _6k.length + $_.j; //#14137
    $_.sbs = $geti($_.sbs, 0, $_.j); //#14138
    $k[$j++] = Infinity; //#14141
    $k[$j++] = Infinity; //#14143
    var _6r = $_.sbs; //#14143
    for (var _6s = 0, _6t = _6r.length; _6s < _6t; _6s++) { //#14143
        $k[$j++] = $get(_6r, _6s) - 48; //#14143
    } //#14143
    var _6v = $a(); //#14143
    $k[$j++] = Infinity; //#14144
    for (var _6x = 0, _6y = ~~(($_.sbs.length + 1) / 2); _6x < _6y; _6x++) { //#14144
        $k[$j++] = $_.height; //#14144
    } //#14144
    var _70 = $a(); //#14144
    $k[$j++] = Infinity; //#14145
    for (var _72 = 0, _73 = ~~(($_.sbs.length + 1) / 2); _72 < _73; _72++) { //#14145
        $k[$j++] = 0; //#14145
    } //#14145
    var _74 = $a(); //#14145
    var _7C = new Map([
        ["a", 0],
        ["b", 0],
        ["limiteda", 12],
        ["limitedb", 13]
    ]); //#14148
    var _7F = new Map([
        ["a", 0],
        ["b", 0],
        ["limiteda", 12],
        ["limitedb", 13]
    ]); //#14149
    $k[$j++] = 'ren'; //#14150
    $k[$j++] = 'renlinear'; //#14150
    $k[$j++] = 'sbs'; //#14150
    $k[$j++] = _6v; //#14150
    $k[$j++] = 'bhs'; //#14150
    $k[$j++] = _70; //#14150
    $k[$j++] = 'bbs'; //#14150
    $k[$j++] = _74; //#14150
    $k[$j++] = 'txt'; //#14150
    $k[$j++] = $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])]); //#14150
    $k[$j++] = 'textxalign'; //#14150
    $k[$j++] = "center"; //#14150
    $k[$j++] = 'borderleft'; //#14150
    $k[$j++] = $get(_7C, $_.version); //#14150
    $k[$j++] = 'borderright'; //#14150
    $k[$j++] = $get(_7F, $_.version); //#14150
    $k[$j++] = 'opt'; //#14150
    $k[$j++] = $_.options; //#14150
    var _7J = $d(); //#14150
    $k[$j++] = _7J; //#14153
    if (!$_.dontdraw) { //#14153
        bwipp_renlinear(); //#14153
    } //#14153
    $_ = $__; //#14157
} //bwipp_posicode
function bwipp_codablockf() {
    var $__ = $_; //#14188
    $_ = Object.assign({}, $_); //#14188
    $_.dontdraw = false; //#14191
    $_.rows = -1; //#14192
    $_.columns = 8; //#14193
    $_.rowheight = 10; //#14194
    $_.sepheight = 1; //#14195
    $_.parse = false; //#14196
    $_.parsefnc = false; //#14197
    $k[$j++] = $_; //#14199
    bwipp_processoptions(); //#14199
    $_.options = $k[--$j]; //#14199
    $_.barcode = $k[--$j]; //#14200
    if (($_.columns < 4) || ($_.columns > 62)) { //#14204
        $k[$j++] = 'bwipp.codablockfBadColumns#14203'; //#14203
        $k[$j++] = "Codablock F must have 4 to 62 columns"; //#14203
        bwipp_raiseerror(); //#14203
    } //#14203
    if (($_.rows != -1) && (($_.rows < 2) || ($_.rows > 44))) { //#14208
        $k[$j++] = 'bwipp.codablockfBadRows#14207'; //#14207
        $k[$j++] = "Codablock F must have 2 to 44 rows"; //#14207
        bwipp_raiseerror(); //#14207
    } //#14207
    if ($_.rowheight < 8) { //#14212
        $k[$j++] = 'bwipp.codablockfBadRowHeight#14211'; //#14211
        $k[$j++] = "Codablock F must have rowheight of at least 8"; //#14211
        bwipp_raiseerror(); //#14211
    } //#14211
    if ($_.sepheight < 1) { //#14216
        $k[$j++] = 'bwipp.codablockfBadSepHeight#14215'; //#14215
        $k[$j++] = "Codablock F must have sepheight of at least 1"; //#14215
        bwipp_raiseerror(); //#14215
    } //#14215
    $k[$j++] = 'c'; //#14220
    if (($_.columns >= 4) && ($_.columns <= 62)) { //#14220
        $k[$j++] = $_.columns; //#14220
    } else { //#14220
        $k[$j++] = 8; //#14220
    } //#14220
    var _C = $k[--$j]; //#14220
    $_[$k[--$j]] = _C; //#14220
    $k[$j++] = 'rows'; //#14221
    if (($_.rows >= 2) && ($_.rows <= 44)) { //#14221
        $k[$j++] = $_.rows; //#14221
    } else { //#14221
        $k[$j++] = -1; //#14221
    } //#14221
    var _H = $k[--$j]; //#14221
    $_[$k[--$j]] = _H; //#14221
    $_.swa = -1; //#14224
    $_.swb = -2; //#14224
    $_.swc = -3; //#14224
    $_.sft = -4; //#14224
    $_.fn1 = -5; //#14225
    $_.fn2 = -6; //#14225
    $_.fn3 = -7; //#14225
    $_.fn4 = -8; //#14225
    $_.sta = -9; //#14226
    $_.stp = -10; //#14226
    var _N = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["FNC1", $_.fn1],
        ["FNC3", $_.fn3]
    ]); //#14234
    $_.fncvals = _N; //#14236
    $k[$j++] = 'msg'; //#14237
    $k[$j++] = $_.barcode; //#14237
    $k[$j++] = $_.fncvals; //#14237
    bwipp_parseinput(); //#14237
    var _Q = $k[--$j]; //#14237
    $_[$k[--$j]] = _Q; //#14237
    $_.msglen = $_.msg.length; //#14238
    $_.msgtmp = $a([]); //#14241
    var _U = $_.msg; //#14242
    for (var _V = 0, _W = _U.length; _V < _W; _V++) { //#14245
        $_.char = $get(_U, _V); //#14243
        $k[$j++] = Infinity; //#14244
        $aload($_.msgtmp); //#14244
        if ($_.char < 128) { //#14244
            $k[$j++] = $_.char; //#14244
        } else { //#14244
            $k[$j++] = $_.fn4; //#14244
            $k[$j++] = $_.char & 127; //#14244
        } //#14244
        $_.msgtmp = $a(); //#14244
    } //#14244
    $_.kmsg = $_.msg; //#14246
    $_.msg = $_.msgtmp; //#14247
    $_.msglen = $_.msg.length; //#14248
    $_.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$_.fn3, $_.fn3, "96"]), $a([$_.fn2, $_.fn2, "97"]), $a([$_.sft, $_.sft, "98"]), $a([$_.swc, $_.swc, "99"]), $a([$_.swb, $_.fn4, $_.swb]), $a([$_.fn4, $_.swa, $_.swa]), $a([$_.fn1, $_.fn1, $_.fn1]), $a([$_.sta, $_.sta, $_.sta]), $a([$_.stp, $_.stp, $_.stp])]); //#14289
    $_.charvals = $a([new Map, new Map, new Map]); //#14292
    for (var _2p = 0, _2o = $_.charmaps.length - 1; _2p <= _2o; _2p += 1) { //#14301
        $_.i = _2p; //#14294
        $_.encs = $get($_.charmaps, $_.i); //#14295
        for (var _2t = 0; _2t <= 2; _2t += 1) { //#14300
            $_.j = _2t; //#14297
            var _2w = $get($_.encs, $_.j); //#14298
            $k[$j++] = _2w; //#14298
            if ($eq($type(_2w), 'stringtype')) { //#14298
                var _2z = $get($k[--$j], 0); //#14298
                $k[$j++] = _2z; //#14298
            } //#14298
            $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#14299
        } //#14299
    } //#14299
    $_.seta = $get($_.charvals, 0); //#14302
    $_.setb = $get($_.charvals, 1); //#14303
    $_.setc = $get($_.charvals, 2); //#14304
    $_.numsscr = function() {
        $_.n = 0; //#14309
        $_.s = 0; //#14309
        $_.p = $k[--$j]; //#14310
        for (;;) { //#14324
            if ($_.p >= $_.msglen) { //#14311
                break; //#14311
            } //#14311
            if ($_.p != 0) { //#14314
                if ($get($_.msg, $_.p - 1) == $_.fn4) { //#14313
                    break; //#14313
                } //#14313
            } //#14313
            var _3M = $get($_.msg, $_.p); //#14315
            var _3O = $get($_.setc, _3M) !== undefined; //#14316
            $k[$j++] = _3M; //#14316
            if (!_3O) { //#14316
                $j--; //#14316
                break; //#14316
            } //#14316
            if ($k[--$j] == $_.fn1) { //#14320
                if (($_.s % 2) == 0) { //#14319
                    $_.s = $_.s + 1; //#14319
                } else { //#14319
                    break; //#14319
                } //#14319
            } //#14319
            $_.n = $_.n + 1; //#14321
            $_.s = $_.s + 1; //#14322
            $_.p = $_.p + 1; //#14323
        } //#14323
        $k[$j++] = $_.n; //#14325
        $k[$j++] = $_.s; //#14325
    }; //#14325
    $_.enca = function() {
        $put($_.cws, $_.j, $get($_.seta, $k[--$j])); //#14330
        $_.j = $_.j + 1; //#14331
    }; //#14331
    $_.encb = function() {
        $put($_.cws, $_.j, $get($_.setb, $k[--$j])); //#14334
        $_.j = $_.j + 1; //#14335
    }; //#14335
    $_.encc = function() {
        var _3k = $k[$j - 1]; //#14338
        if ($ne($type(_3k), 'arraytype')) { //#14341
            var _3o = $get($_.setc, $k[--$j]); //#14339
            $k[$j++] = _3o; //#14339
        } else { //#14341
            $aload($k[--$j]); //#14341
            var _3q = $k[--$j]; //#14341
            var _3r = $k[--$j]; //#14341
            $k[$j++] = $f((_3q - 48) + ((_3r - 48) * 10)); //#14341
        } //#14341
        $put($_.cws, $_.j, $k[--$j]); //#14343
        $_.j = $_.j + 1; //#14344
    }; //#14344
    $_.anotb = function() {
        var _3w = $k[--$j]; //#14348
        var _3y = $get($_.seta, _3w) !== undefined; //#14348
        var _40 = $get($_.setb, _3w) !== undefined; //#14348
        $k[$j++] = _3y && (!_40); //#14348
    }; //#14348
    $_.bnota = function() {
        var _41 = $k[--$j]; //#14349
        var _43 = $get($_.setb, _41) !== undefined; //#14349
        var _45 = $get($_.seta, _41) !== undefined; //#14349
        $k[$j++] = _43 && (!_45); //#14349
    }; //#14349
    $k[$j++] = Infinity; //#14352
    for (var _47 = 0, _48 = $_.msg.length; _47 < _48; _47++) { //#14352
        $k[$j++] = 0; //#14352
    } //#14352
    $k[$j++] = 9999; //#14352
    $_.nextanotb = $a(); //#14352
    $k[$j++] = Infinity; //#14353
    for (var _4B = 0, _4C = $_.msg.length; _4B < _4C; _4B++) { //#14353
        $k[$j++] = 0; //#14353
    } //#14353
    $k[$j++] = 9999; //#14353
    $_.nextbnota = $a(); //#14353
    for (var _4F = $_.msg.length - 1; _4F >= 0; _4F -= 1) { //#14366
        $_.i = _4F; //#14355
        $k[$j++] = $get($_.msg, $_.i); //#14356
        $_.anotb(); //#14356
        if ($k[--$j]) { //#14359
            $put($_.nextanotb, $_.i, 0); //#14357
        } else { //#14359
            $put($_.nextanotb, $_.i, $get($_.nextanotb, $_.i + 1) + 1); //#14359
        } //#14359
        $k[$j++] = $get($_.msg, $_.i); //#14361
        $_.bnota(); //#14361
        if ($k[--$j]) { //#14364
            $put($_.nextbnota, $_.i, 0); //#14362
        } else { //#14364
            $put($_.nextbnota, $_.i, $get($_.nextbnota, $_.i + 1) + 1); //#14364
        } //#14364
    } //#14364
    $_.abeforeb = function() {
        var _4c = $k[--$j]; //#14369
        $k[$j++] = $lt($get($_.nextanotb, _4c), $get($_.nextbnota, _4c)); //#14369
    }; //#14369
    $_.bbeforea = function() {
        var _4h = $k[--$j]; //#14370
        $k[$j++] = $lt($get($_.nextbnota, _4h), $get($_.nextanotb, _4h)); //#14370
    }; //#14370
    $_.padrow = function() {
        for (var _4n = 0, _4o = $k[--$j]; _4n < _4o; _4n++) { //#14380
            for (;;) { //#14379
                if ($eq($_.cset, "seta")) { //#14376
                    $k[$j++] = $_.swc; //#14376
                    $_.enca(); //#14376
                    $_.cset = "setc"; //#14376
                    break; //#14376
                } //#14376
                if ($eq($_.cset, "setb")) { //#14377
                    $k[$j++] = $_.swc; //#14377
                    $_.encb(); //#14377
                    $_.cset = "setc"; //#14377
                    break; //#14377
                } //#14377
                if ($eq($_.cset, "setc")) { //#14378
                    $k[$j++] = $_.swb; //#14378
                    $_.encc(); //#14378
                    $_.cset = "setb"; //#14378
                    break; //#14378
                } //#14378
            } //#14378
        } //#14378
    }; //#14378
    $_.encafitsrow = function() {
        if (($_.rem <= 2) && ($get($_.msg, $_.i) == $_.fn4)) { //#14395
            var _54 = ($_.rem == 2) && ($get($_.msg, $_.i + 1) <= 95); //#14387
            $k[$j++] = _54; //#14391
            if (_54) { //#14391
                $k[$j++] = $_.fn4; //#14388
                $_.enca(); //#14388
                $k[$j++] = $get($_.msg, $_.i + 1); //#14389
                $_.enca(); //#14389
                $_.i = $_.i + 2; //#14390
            } //#14390
        } else { //#14395
            $k[$j++] = $get($_.msg, $_.i); //#14393
            $_.enca(); //#14393
            $_.i = $_.i + 1; //#14394
            $k[$j++] = true; //#14395
        } //#14395
    }; //#14395
    $_.encbfitsrow = function() {
        if (($_.rem <= 2) && ($get($_.msg, $_.i) == $_.fn4)) { //#14411
            var _5N = ($_.rem == 2) && ($get($_.msg, $_.i + 1) >= 32); //#14403
            $k[$j++] = _5N; //#14407
            if (_5N) { //#14407
                $k[$j++] = $_.fn4; //#14404
                $_.encb(); //#14404
                $k[$j++] = $get($_.msg, $_.i + 1); //#14405
                $_.encb(); //#14405
                $_.i = $_.i + 2; //#14406
            } //#14406
        } else { //#14411
            $k[$j++] = $get($_.msg, $_.i); //#14409
            $_.encb(); //#14409
            $_.i = $_.i + 1; //#14410
            $k[$j++] = true; //#14411
        } //#14411
    }; //#14411
    $_.cws = $a(($_.c + 5) * 44); //#14416
    $_.i = 0; //#14418
    $_.j = 0; //#14418
    $_.r = 1; //#14418
    $_.lastrow = false; //#14419
    for (;;) { //#14586
        if ($_.lastrow) { //#14421
            break; //#14421
        } //#14421
        if ($_.r > 44) { //#14425
            $k[$j++] = 'bwipp.codablockfTooBig#14424'; //#14424
            $k[$j++] = "Maximum length exceeded"; //#14424
            bwipp_raiseerror(); //#14424
        } //#14424
        $k[$j++] = $_.sta; //#14428
        $_.enca(); //#14428
        if ($_.i < $_.msglen) { //#14429
            $k[$j++] = $_.i; //#14429
            $_.numsscr(); //#14429
        } else { //#14429
            $k[$j++] = -1; //#14429
            $k[$j++] = -1; //#14429
        } //#14429
        $_.nums = $k[--$j]; //#14429
        $_.nchars = $k[--$j]; //#14429
        for (;;) { //#14449
            if ($_.msglen == 0) { //#14435
                $k[$j++] = $_.swb; //#14432
                $_.enca(); //#14432
                $_.cset = "setb"; //#14433
                break; //#14434
            } //#14434
            if ($_.nums >= 2) { //#14440
                $k[$j++] = $_.swc; //#14437
                $_.enca(); //#14437
                $_.cset = "setc"; //#14438
                break; //#14439
            } //#14439
            $k[$j++] = $_.i; //#14441
            $_.abeforeb(); //#14441
            if ($k[--$j]) { //#14445
                $k[$j++] = $_.sft; //#14442
                $_.enca(); //#14442
                $_.cset = "seta"; //#14443
                break; //#14444
            } //#14444
            $k[$j++] = $_.swb; //#14446
            $_.enca(); //#14446
            $_.cset = "setb"; //#14447
            break; //#14448
        } //#14448
        $_.j = $_.j + 1; //#14450
        $_.endofrow = false; //#14453
        for (;;) { //#14571
            $_.rem = $f(($_.c + 3) - ($_.j % ($_.c + 5))); //#14454
            if (($_.i == $_.msglen) || $_.endofrow) { //#14456
                break; //#14456
            } //#14456
            $k[$j++] = $_.i; //#14458
            $_.numsscr(); //#14458
            $_.nums = $k[--$j]; //#14458
            $_.nchars = $k[--$j]; //#14458
            $k[$j++] = 'remnums'; //#14459
            if ($_.nums > ($_.rem * 2)) { //#14459
                $k[$j++] = $_.rem * 2; //#14459
            } else { //#14459
                $k[$j++] = $_.nums; //#14459
            } //#14459
            var _63 = $k[--$j]; //#14459
            $_[$k[--$j]] = _63; //#14459
            for (;;) { //#14569
                if ((($eq($_.cset, "seta") || $eq($_.cset, "setb")) && ($_.remnums >= 4)) && ($get($_.msg, $_.i) != $_.fn1)) { //#14497
                    if ((($_.remnums % 2) == 0) && ($_.rem >= 3)) { //#14479
                        $k[$j++] = $_.swc; //#14467
                        if ($eq($_.cset, "seta")) { //#14467
                            $_.enca(); //#14467
                        } else { //#14467
                            $_.encb(); //#14467
                        } //#14467
                        $_.cset = "setc"; //#14468
                        for (var _6G = 0; _6G < 2; _6G++) { //#14477
                            if ($get($_.msg, $_.i) == $_.fn1) { //#14475
                                $k[$j++] = $_.fn1; //#14471
                                $_.encc(); //#14471
                                $_.i = $_.i + 1; //#14472
                            } else { //#14475
                                $k[$j++] = $geti($_.msg, $_.i, 2); //#14474
                                $_.encc(); //#14474
                                $_.i = $_.i + 2; //#14475
                            } //#14475
                        } //#14475
                        break; //#14478
                    } //#14478
                    if ((($_.remnums % 2) != 0) && ($_.rem >= 4)) { //#14496
                        $k[$j++] = $get($_.msg, $_.i); //#14482
                        if ($eq($_.cset, "seta")) { //#14482
                            $_.enca(); //#14482
                        } else { //#14482
                            $_.encb(); //#14482
                        } //#14482
                        $_.i = $_.i + 1; //#14483
                        $k[$j++] = $_.swc; //#14484
                        if ($eq($_.cset, "seta")) { //#14484
                            $_.enca(); //#14484
                        } else { //#14484
                            $_.encb(); //#14484
                        } //#14484
                        $_.cset = "setc"; //#14485
                        for (var _6a = 0; _6a < 2; _6a++) { //#14494
                            if ($get($_.msg, $_.i) == $_.fn1) { //#14492
                                $k[$j++] = $_.fn1; //#14488
                                $_.encc(); //#14488
                                $_.i = $_.i + 1; //#14489
                            } else { //#14492
                                $k[$j++] = $geti($_.msg, $_.i, 2); //#14491
                                $_.encc(); //#14491
                                $_.i = $_.i + 2; //#14492
                            } //#14492
                        } //#14492
                        break; //#14495
                    } //#14495
                } //#14495
                $k[$j++] = $eq($_.cset, "setb"); //#14498
                $k[$j++] = $get($_.msg, $_.i); //#14498
                $_.anotb(); //#14498
                var _6p = $k[--$j]; //#14498
                var _6q = $k[--$j]; //#14498
                if (_6q && _6p && $_.rem >= 2) { //#14513
                    if ($_.i < ($_.msglen - 1)) { //#14507
                        $k[$j++] = $_.i + 1; //#14501
                        $_.bbeforea(); //#14501
                        if ($k[--$j]) { //#14506
                            $k[$j++] = $_.sft; //#14502
                            $_.encb(); //#14502
                            $k[$j++] = $get($_.msg, $_.i); //#14503
                            $_.enca(); //#14503
                            $_.i = $_.i + 1; //#14504
                            break; //#14505
                        } //#14505
                    } //#14505
                    $k[$j++] = $_.swa; //#14508
                    $_.encb(); //#14508
                    $_.cset = "seta"; //#14509
                    $k[$j++] = $get($_.msg, $_.i); //#14510
                    $_.enca(); //#14510
                    $_.i = $_.i + 1; //#14511
                    break; //#14512
                } //#14512
                $k[$j++] = $eq($_.cset, "seta"); //#14514
                $k[$j++] = $get($_.msg, $_.i); //#14514
                $_.bnota(); //#14514
                var _7A = $k[--$j]; //#14514
                var _7B = $k[--$j]; //#14514
                if (_7B && _7A && $_.rem >= 2) { //#14529
                    if ($_.i < ($_.msglen - 1)) { //#14523
                        $k[$j++] = $_.i + 1; //#14517
                        $_.abeforeb(); //#14517
                        if ($k[--$j]) { //#14522
                            $k[$j++] = $_.sft; //#14518
                            $_.enca(); //#14518
                            $k[$j++] = $get($_.msg, $_.i); //#14519
                            $_.encb(); //#14519
                            $_.i = $_.i + 1; //#14520
                            break; //#14521
                        } //#14521
                    } //#14521
                    $k[$j++] = $_.swb; //#14524
                    $_.enca(); //#14524
                    $_.cset = "setb"; //#14525
                    $k[$j++] = $get($_.msg, $_.i); //#14526
                    $_.encb(); //#14526
                    $_.i = $_.i + 1; //#14527
                    break; //#14528
                } //#14528
                if (($eq($_.cset, "setc") && ($_.remnums < 2)) && ($_.rem >= 2)) { //#14542
                    $_.rem = $_.rem - 1; //#14532
                    $k[$j++] = $_.i; //#14533
                    $_.abeforeb(); //#14533
                    if ($k[--$j]) { //#14540
                        $k[$j++] = $_.swa; //#14534
                        $_.encc(); //#14534
                        $_.cset = "seta"; //#14535
                        $_.encafitsrow(); //#14536
                        if ($k[--$j]) { //#14536
                            break; //#14536
                        } //#14536
                    } else { //#14540
                        $k[$j++] = $_.swb; //#14538
                        $_.encc(); //#14538
                        $_.cset = "setb"; //#14539
                        $_.encbfitsrow(); //#14540
                        if ($k[--$j]) { //#14540
                            break; //#14540
                        } //#14540
                    } //#14540
                } //#14540
                var _7g = $get($_.seta, $get($_.msg, $_.i)) !== undefined; //#14545
                if (($eq($_.cset, "seta") && _7g) && ($_.rem >= 1)) { //#14548
                    $_.encafitsrow(); //#14547
                    if ($k[--$j]) { //#14547
                        break; //#14547
                    } //#14547
                } //#14547
                var _7o = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#14549
                if (($eq($_.cset, "setb") && _7o) && ($_.rem >= 1)) { //#14552
                    $_.encbfitsrow(); //#14551
                    if ($k[--$j]) { //#14551
                        break; //#14551
                    } //#14551
                } //#14551
                if (($eq($_.cset, "setc") && ($_.remnums >= 2)) && ($_.rem >= 1)) { //#14563
                    if ($get($_.msg, $_.i) == $_.fn1) { //#14560
                        $k[$j++] = $_.fn1; //#14556
                        $_.encc(); //#14556
                        $_.i = $_.i + 1; //#14557
                    } else { //#14560
                        $k[$j++] = $geti($_.msg, $_.i, 2); //#14559
                        $_.encc(); //#14559
                        $_.i = $_.i + 2; //#14560
                    } //#14560
                    break; //#14562
                } //#14562
                $_.endofrow = true; //#14566
                break; //#14567
            } //#14567
        } //#14567
        if ((((($_.r >= $_.rows) || ($_.rows == -1)) && ($_.r > 1)) && ($_.i == $_.msglen)) && ($_.rem >= 2)) { //#14583
            $k[$j++] = $_.rem - 2; //#14575
            $_.padrow(); //#14575
            $_.j = $_.j + 3; //#14576
            $k[$j++] = $_.stp; //#14577
            $_.enca(); //#14577
            $_.lastrow = true; //#14578
        } else { //#14583
            $k[$j++] = $_.rem; //#14580
            $_.padrow(); //#14580
            $_.j = $_.j + 1; //#14581
            $k[$j++] = $_.stp; //#14582
            $_.enca(); //#14582
            $_.r = $_.r + 1; //#14583
        } //#14583
    } //#14583
    $_.cws = $geti($_.cws, 0, $_.j); //#14587
    $k[$j++] = Infinity; //#14591
    for (var _8L = 64; _8L <= 95; _8L += 1) { //#14592
        $k[$j++] = _8L; //#14592
    } //#14592
    for (var _8M = 0; _8M <= 15; _8M += 1) { //#14593
        $k[$j++] = _8M; //#14593
    } //#14593
    for (var _8N = 26; _8N <= 63; _8N += 1) { //#14594
        $k[$j++] = _8N; //#14594
    } //#14594
    $_.abmap = $a(); //#14594
    $k[$j++] = Infinity; //#14596
    for (var _8P = 0; _8P <= 85; _8P += 1) { //#14596
        $k[$j++] = _8P; //#14596
    } //#14596
    $_.cmap = $a(); //#14596
    $_.chkmsg = $a($_.kmsg.length); //#14600
    $_.j = 0; //#14601
    for (var _8W = 0, _8V = $_.kmsg.length - 1; _8W <= _8V; _8W += 1) { //#14607
        $_.i = _8W; //#14603
        $_.char = $get($_.kmsg, $_.i); //#14604
        if ($_.char >= 0) { //#14605
            $put($_.chkmsg, $_.j, $_.char); //#14605
            $_.j = $_.j + 1; //#14605
        } //#14605
        if (($_.char == $_.fn1) && ($_.i != 0)) { //#14606
            $put($_.chkmsg, $_.j, 29); //#14606
            $_.j = $_.j + 1; //#14606
        } //#14606
    } //#14606
    $_.t1 = 0; //#14608
    $_.t2 = 0; //#14608
    $_.k1 = 0; //#14608
    $_.k2 = 0; //#14608
    for (var _8n = 0, _8m = $_.j - 1; _8n <= _8m; _8n += 1) { //#14615
        $_.i = _8n; //#14610
        $_.t1 = ($get($_.chkmsg, $_.i) * $_.i) % 86; //#14611
        $_.t2 = $f($_.t1 + $get($_.chkmsg, $_.i)) % 86; //#14612
        $_.k1 = $f($_.k1 + $_.t2) % 86; //#14613
        $_.k2 = $f($_.k2 + $_.t1) % 86; //#14614
    } //#14614
    $k[$j++] = $_.cws; //#14616
    $k[$j++] = $_.cws.length - 4; //#14616
    if ($ne($_.cset, "setc")) { //#14616
        $k[$j++] = $_.abmap; //#14616
    } else { //#14616
        $k[$j++] = $_.cmap; //#14616
    } //#14616
    var _97 = $get($k[--$j], $_.k1); //#14616
    var _98 = $k[--$j]; //#14616
    $put($k[--$j], _98, _97); //#14616
    $k[$j++] = $_.cws; //#14617
    $k[$j++] = $_.cws.length - 3; //#14617
    if ($ne($_.cset, "setc")) { //#14617
        $k[$j++] = $_.abmap; //#14617
    } else { //#14617
        $k[$j++] = $_.cmap; //#14617
    } //#14617
    var _9H = $get($k[--$j], $_.k2); //#14617
    var _9I = $k[--$j]; //#14617
    $put($k[--$j], _9I, _9H); //#14617
    var _9K = $_.cws; //#14620
    $k[$j++] = _9K; //#14620
    $k[$j++] = 2; //#14620
    if ($get(_9K, 2 - 1) != 99) { //#14620
        $k[$j++] = $_.abmap; //#14620
    } else { //#14620
        $k[$j++] = $_.cmap; //#14620
    } //#14620
    var _9Q = $get($k[--$j], $_.r - 2); //#14620
    var _9R = $k[--$j]; //#14620
    $put($k[--$j], _9R, _9Q); //#14620
    for (var _9V = 1, _9U = $_.r - 1; _9V <= _9U; _9V += 1) { //#14624
        $_.i = _9V; //#14622
        var _9W = $_.cws; //#14623
        var _9X = $_.i; //#14623
        var _9Y = $_.c; //#14623
        $k[$j++] = _9W; //#14623
        $k[$j++] = (_9X * (_9Y + 5)) + 2; //#14623
        if ($get(_9W, ((_9X * (_9Y + 5)) + 2) - 1) != 99) { //#14623
            $k[$j++] = $_.abmap; //#14623
        } else { //#14623
            $k[$j++] = $_.cmap; //#14623
        } //#14623
        var _9e = $get($k[--$j], $_.i + 42); //#14623
        var _9f = $k[--$j]; //#14623
        $put($k[--$j], _9f, _9e); //#14623
    } //#14623
    for (var _9j = 0, _9i = $_.r - 1; _9j <= _9i; _9j += 1) { //#14635
        $_.rcws = $geti($_.cws, _9j * ($_.c + 5), $_.c + 4); //#14628
        $_.csum = $get($_.rcws, 0); //#14629
        for (var _9s = 1, _9r = $_.rcws.length - 2; _9s <= _9r; _9s += 1) { //#14633
            $_.i = _9s; //#14631
            $_.csum = $f($_.csum + ($get($_.rcws, $_.i) * $_.i)); //#14632
        } //#14632
        $put($_.rcws, $_.rcws.length - 1, $_.csum % 103); //#14634
    } //#14634
    var _A2 = $get($_.options, 'debugcws') !== undefined; //#14637
    if (_A2) { //#14637
        $k[$j++] = 'bwipp.debugcws#14637'; //#14637
        $k[$j++] = $_.cws; //#14637
        bwipp_raiseerror(); //#14637
    } //#14637
    $_.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "2331112"]); //#14657
    $_.rowbits = $a($_.r); //#14661
    for (var _AA = 0, _A9 = $_.r - 1; _AA <= _A9; _AA += 1) { //#14673
        $_.i = _AA; //#14663
        $k[$j++] = Infinity; //#14664
        var _AF = $geti($_.cws, $_.i * ($_.c + 5), $_.c + 5); //#14665
        for (var _AG = 0, _AH = _AF.length; _AG < _AH; _AG++) { //#14667
            $forall($get($_.encs, $get(_AF, _AG)), function() { //#14666
                var _AL = $k[--$j]; //#14666
                $k[$j++] = _AL - 48; //#14666
            }); //#14666
        } //#14666
        $_.sbs = $a(); //#14666
        $k[$j++] = Infinity; //#14669
        var _AN = $_.sbs; //#14670
        $k[$j++] = 0; //#14670
        for (var _AO = 0, _AP = _AN.length; _AO < _AP; _AO++) { //#14670
            var _AR = $k[$j - 1]; //#14670
            var _AS = (_AR == 1) ? 0 : 1; //#14670
            for (var _AT = 0, _AU = $get(_AN, _AO); _AT < _AU; _AT++) { //#14670
                $k[$j++] = _AS //#14670
            } //#14670
        } //#14670
        $astore($a($counttomark() - 1)); //#14671
        var _AX = $k[--$j]; //#14671
        $k[$j - 1] = _AX; //#14671
        var _AZ = $k[--$j]; //#14671
        $k[$j - 1] = _AZ; //#14671
        $k[$j++] = $_.rowbits; //#14672
        $k[$j++] = $_.i; //#14672
        var _Ad = $k[$j - 3]; //#14672
        var _Ae = $k[$j - 1]; //#14672
        $put($k[$j - 2], _Ae, _Ad); //#14672
        $j -= 3; //#14672
    } //#14672
    $_.symwid = ($_.c * 11) + 57; //#14676
    $k[$j++] = Infinity; //#14677
    for (var _Aj = 0, _Ak = $_.symwid * $_.sepheight; _Aj < _Ak; _Aj++) { //#14678
        $k[$j++] = 1; //#14678
    } //#14678
    for (var _An = 0, _Am = $_.r - 2; _An <= _Am; _An += 1) { //#14687
        $_.i = _An; //#14680
        for (var _Ap = 0, _Aq = $_.rowheight; _Ap < _Aq; _Ap++) { //#14681
            $aload($get($_.rowbits, $_.i)); //#14681
        } //#14681
        for (var _Av = 0, _Aw = $_.sepheight; _Av < _Aw; _Av++) { //#14686
            $k[$j++] = 1; //#14684
            $k[$j++] = 1; //#14684
            $k[$j++] = 0; //#14684
            $k[$j++] = 1; //#14684
            $k[$j++] = 0; //#14684
            $k[$j++] = 0; //#14684
            $k[$j++] = 0; //#14684
            $k[$j++] = 0; //#14684
            $k[$j++] = 1; //#14684
            $k[$j++] = 0; //#14684
            $k[$j++] = 0; //#14684
            for (var _Ay = 0, _Az = $_.symwid - 24; _Ay < _Az; _Ay++) { //#14684
                $k[$j++] = 1; //#14684
            } //#14684
            $k[$j++] = 1; //#14685
            $k[$j++] = 1; //#14685
            $k[$j++] = 0; //#14685
            $k[$j++] = 0; //#14685
            $k[$j++] = 0; //#14685
            $k[$j++] = 1; //#14685
            $k[$j++] = 1; //#14685
            $k[$j++] = 1; //#14685
            $k[$j++] = 0; //#14685
            $k[$j++] = 1; //#14685
            $k[$j++] = 0; //#14685
            $k[$j++] = 1; //#14685
            $k[$j++] = 1; //#14685
        } //#14685
    } //#14685
    for (var _B1 = 0, _B2 = $_.rowheight; _B1 < _B2; _B1++) { //#14688
        $aload($get($_.rowbits, $_.r - 1)); //#14688
    } //#14688
    for (var _B8 = 0, _B9 = $_.symwid * $_.sepheight; _B8 < _B9; _B8++) { //#14689
        $k[$j++] = 1; //#14689
    } //#14689
    $_.pixs = $a(); //#14689
    var _BJ = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.symwid],
        ["pixy", ~~($_.pixs.length / $_.symwid)],
        ["height", (~~($_.pixs.length / $_.symwid)) / 72],
        ["width", $_.symwid / 72],
        ["opt", $_.options]
    ]); //#14700
    $k[$j++] = _BJ; //#14703
    if (!$_.dontdraw) { //#14703
        bwipp_renmatrix(); //#14703
    } //#14703
    $_ = $__; //#14707
} //bwipp_codablockf
function bwipp_code16k() {
    var $__ = $_; //#14738
    $_ = Object.assign({}, $_); //#14738
    $_.dontdraw = false; //#14741
    $_.sam = -1; //#14742
    $_.rows = 0; //#14743
    $_.rowheight = 8; //#14744
    $_.sepheight = 1; //#14745
    $_.raw = false; //#14746
    $_.parse = false; //#14747
    $_.parsefnc = false; //#14748
    $k[$j++] = $_; //#14750
    bwipp_processoptions(); //#14750
    $_.options = $k[--$j]; //#14750
    $_.barcode = $k[--$j]; //#14751
    if (($_.rows != 0) && (($_.rows < 2) || ($_.rows > 16))) { //#14755
        $k[$j++] = 'bwipp.code16kBadRows#14754'; //#14754
        $k[$j++] = "Code 16K must have 2 to 16 rows"; //#14754
        bwipp_raiseerror(); //#14754
    } //#14754
    if ($_.rowheight < 8) { //#14759
        $k[$j++] = 'bwipp.code16kBadRowHeight#14758'; //#14758
        $k[$j++] = "Code 16K must have rowheight of at least 8"; //#14758
        bwipp_raiseerror(); //#14758
    } //#14758
    if ($_.sepheight < 1) { //#14763
        $k[$j++] = 'bwipp.code16kBadSepHeight#14762'; //#14762
        $k[$j++] = "Code 16K must have sepheight of at least 1"; //#14762
        bwipp_raiseerror(); //#14762
    } //#14762
    if ($_.sam != -1) { //#14775
        $k[$j++] = true; //#14771
        for (var _8 = 0; _8 < 1; _8++) { //#14771
            var _9 = $_.sam; //#14768
            if ((_9 < 12) || (_9 > 99)) { //#14768
                $k[$j - 1] = false; //#14768
                break; //#14768
            } //#14768
            if (($_.sam % 10) < 2) { //#14769
                $k[$j - 1] = false; //#14769
                break; //#14769
            } //#14769
            if ((~~($_.sam / 10)) > ($_.sam % 10)) { //#14770
                $k[$j - 1] = false; //#14770
                break; //#14770
            } //#14770
        } //#14770
        if (!$k[--$j]) { //#14774
            $k[$j++] = 'bwipp.code16kBadSAM#14773'; //#14773
            $k[$j++] = "SAM must be formatted as \"NM\" for Nth of M symbols, from 2 to 9 symbols"; //#14773
            bwipp_raiseerror(); //#14773
        } //#14773
    } //#14773
    if ($_.sam != -1) { //#14779
        $_.rows = 16; //#14779
    } //#14779
    $_.swa = -1; //#14783
    $_.swb = -2; //#14783
    $_.swc = -3; //#14783
    $_.sa1 = -4; //#14784
    $_.sb1 = -5; //#14784
    $_.sc1 = -6; //#14784
    $_.sa2 = -7; //#14785
    $_.sb2 = -8; //#14785
    $_.sc2 = -9; //#14785
    $_.pad = -10; //#14786
    $_.sb3 = -11; //#14786
    $_.sc3 = -12; //#14786
    $_.fn1 = -13; //#14787
    $_.fn2 = -14; //#14787
    $_.fn3 = -15; //#14787
    $_.fn4 = -16; //#14787
    $_.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$_.fn3, $_.fn3, "96"]), $a([$_.fn2, $_.fn2, "97"]), $a([$_.sb1, $_.sa1, "98"]), $a([$_.swc, $_.swc, "99"]), $a([$_.swb, $_.fn4, $_.swb]), $a([$_.fn4, $_.swa, $_.swa]), $a([$_.fn1, $_.fn1, $_.fn1]), $a([$_.pad, $_.pad, $_.pad]), $a([$_.sb2, $_.sa2, $_.sb1]), $a([$_.sc2, $_.sc2, $_.sb2]), $a([$_.sc3, $_.sc3, $_.sb3])]); //#14828
    $_.charvals = $a([new Map, new Map, new Map]); //#14831
    for (var _2V = 0, _2U = $_.charmaps.length - 1; _2V <= _2U; _2V += 1) { //#14840
        $_.i = _2V; //#14833
        $_.encs = $get($_.charmaps, $_.i); //#14834
        for (var _2Z = 0; _2Z <= 2; _2Z += 1) { //#14839
            $_.j = _2Z; //#14836
            var _2c = $get($_.encs, $_.j); //#14837
            $k[$j++] = _2c; //#14837
            if ($eq($type(_2c), 'stringtype')) { //#14837
                var _2f = $get($k[--$j], 0); //#14837
                $k[$j++] = _2f; //#14837
            } //#14837
            $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#14838
        } //#14838
    } //#14838
    $_.seta = $get($_.charvals, 0); //#14841
    $_.setb = $get($_.charvals, 1); //#14842
    $_.setc = $get($_.charvals, 2); //#14843
    if ($_.raw) { //#15314
        $_.cws = $a($_.barcode.length); //#14848
        $_.i = 0; //#14849
        $_.j = 0; //#14849
        for (;;) { //#14860
            if ($_.i >= ($_.barcode.length - 3)) { //#14851
                break; //#14851
            } //#14851
            if ($get($_.barcode, $_.i) != 94) { //#14852
                break; //#14852
            } //#14852
            var _32 = $geti($_.barcode, $_.i + 1, 3); //#14853
            $k[$j++] = _32; //#14855
            $k[$j++] = false; //#14855
            for (var _33 = 0, _34 = _32.length; _33 < _34; _33++) { //#14855
                var _35 = $get(_32, _33); //#14855
                if ((_35 < 48) || (_35 > 57)) { //#14854
                    $k[$j - 1] = true; //#14854
                } //#14854
            } //#14854
            if ($k[--$j]) { //#14855
                $j--; //#14855
                break; //#14855
            } //#14855
            $_.cw = $cvi($k[--$j]); //#14856
            $put($_.cws, $_.j, $_.cw); //#14857
            $_.i = $_.i + 4; //#14858
            $_.j = $_.j + 1; //#14859
        } //#14859
        if ($_.i != $_.barcode.length) { //#14863
            $k[$j++] = 'bwipp.code16kBadRawFormat#14862'; //#14862
            $k[$j++] = "raw data must be formatted as ^NNN"; //#14862
            bwipp_raiseerror(); //#14862
        } //#14862
        $_.cws = $geti($_.cws, 0, $_.j); //#14864
    } else { //#15314
        var _3N = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true],
            ["FNC1", $_.fn1],
            ["FNC2", $_.fn2],
            ["FNC3", $_.fn3]
        ]); //#14875
        $_.fncvals = _3N; //#14877
        $k[$j++] = 'msg'; //#14878
        $k[$j++] = $_.barcode; //#14878
        $k[$j++] = $_.fncvals; //#14878
        bwipp_parseinput(); //#14878
        var _3Q = $k[--$j]; //#14878
        $_[$k[--$j]] = _3Q; //#14878
        $_.msglen = $_.msg.length; //#14879
        $k[$j++] = Infinity; //#14882
        for (var _3U = 0, _3V = $_.msglen; _3U < _3V; _3U++) { //#14882
            $k[$j++] = 0; //#14882
        } //#14882
        $k[$j++] = 0; //#14882
        $_.numSA = $a(); //#14882
        $k[$j++] = Infinity; //#14883
        for (var _3Y = 0, _3Z = $_.msglen; _3Y < _3Z; _3Y++) { //#14883
            $k[$j++] = 0; //#14883
        } //#14883
        $k[$j++] = 0; //#14883
        $_.numEA = $a(); //#14883
        for (var _3c = $_.msglen - 1; _3c >= 0; _3c -= 1) { //#14893
            $_.i = _3c; //#14885
            if ($get($_.msg, $_.i) >= 0) { //#14892
                if ($get($_.msg, $_.i) >= 128) { //#14890
                    $put($_.numEA, $_.i, $get($_.numEA, $_.i + 1) + 1); //#14888
                } else { //#14890
                    $put($_.numSA, $_.i, $get($_.numSA, $_.i + 1) + 1); //#14890
                } //#14890
            } //#14890
        } //#14890
        $_.ea = false; //#14896
        $_.msgtmp = $a([]); //#14896
        for (var _3w = 0, _3v = $_.msglen - 1; _3w <= _3v; _3w += 1) { //#14911
            $_.i = _3w; //#14898
            $_.c = $get($_.msg, $_.i); //#14899
            if ((!($_.ea != ($_.c < 128))) && ($_.c >= 0)) { //#14909
                if ($_.ea) { //#14901
                    $k[$j++] = $_.numSA; //#14901
                } else { //#14901
                    $k[$j++] = $_.numEA; //#14901
                } //#14901
                var _48 = $get($k[--$j], $_.i); //#14901
                var _4B = ($f(_48 + $_.i) == $_.msglen) ? 3 : 5; //#14902
                if (_48 < _4B) { //#14907
                    $k[$j++] = Infinity; //#14904
                    $aload($_.msgtmp); //#14904
                    $k[$j++] = $_.fn4; //#14904
                    $_.msgtmp = $a(); //#14904
                } else { //#14907
                    $k[$j++] = Infinity; //#14906
                    $aload($_.msgtmp); //#14906
                    $k[$j++] = $_.fn4; //#14906
                    $k[$j++] = $_.fn4; //#14906
                    $_.msgtmp = $a(); //#14906
                    $_.ea = !$_.ea; //#14907
                } //#14907
            } //#14907
            $k[$j++] = Infinity; //#14910
            $aload($_.msgtmp); //#14910
            if ($_.c >= 0) { //#14910
                $k[$j++] = $_.c & 127; //#14910
            } else { //#14910
                $k[$j++] = $_.c; //#14910
            } //#14910
            $_.msgtmp = $a(); //#14910
        } //#14910
        $_.msg = $_.msgtmp; //#14912
        $_.msglen = $_.msg.length; //#14913
        $_.numsscr = function() {
            $_.n = 0; //#14917
            $_.s = 0; //#14917
            $_.p = $k[--$j]; //#14918
            for (;;) { //#14929
                if ($_.p >= $_.msglen) { //#14919
                    break; //#14919
                } //#14919
                var _4W = $get($_.msg, $_.p); //#14920
                var _4Y = $get($_.setc, _4W) !== undefined; //#14921
                $k[$j++] = _4W; //#14921
                if (!_4Y) { //#14921
                    $j--; //#14921
                    break; //#14921
                } //#14921
                if ($k[--$j] == $_.fn1) { //#14925
                    if (($_.s % 2) == 0) { //#14924
                        $_.s = $_.s + 1; //#14924
                    } else { //#14924
                        break; //#14924
                    } //#14924
                } //#14924
                $_.n = $_.n + 1; //#14926
                $_.s = $_.s + 1; //#14927
                $_.p = $_.p + 1; //#14928
            } //#14928
            $k[$j++] = $_.n; //#14930
            $k[$j++] = $_.s; //#14930
        }; //#14930
        $_.enca = function() {
            $put($_.cws, $_.j, $get($_.seta, $k[--$j])); //#14935
            $_.j = $_.j + 1; //#14936
        }; //#14936
        $_.encb = function() {
            $put($_.cws, $_.j, $get($_.setb, $k[--$j])); //#14939
            $_.j = $_.j + 1; //#14940
        }; //#14940
        $_.encc = function() {
            var _4u = $k[$j - 1]; //#14943
            if ($ne($type(_4u), 'arraytype')) { //#14946
                var _4y = $get($_.setc, $k[--$j]); //#14944
                $k[$j++] = _4y; //#14944
            } else { //#14946
                $aload($k[--$j]); //#14946
                var _50 = $k[--$j]; //#14946
                var _51 = $k[--$j]; //#14946
                $k[$j++] = $f((_50 - 48) + ((_51 - 48) * 10)); //#14946
            } //#14946
            $put($_.cws, $_.j, $k[--$j]); //#14948
            $_.j = $_.j + 1; //#14949
        }; //#14949
        $_.anotb = function() {
            var _56 = $k[--$j]; //#14953
            var _58 = $get($_.seta, _56) !== undefined; //#14953
            var _5A = $get($_.setb, _56) !== undefined; //#14953
            $k[$j++] = _58 && (!_5A); //#14953
        }; //#14953
        $_.bnota = function() {
            var _5B = $k[--$j]; //#14954
            var _5D = $get($_.setb, _5B) !== undefined; //#14954
            var _5F = $get($_.seta, _5B) !== undefined; //#14954
            $k[$j++] = _5D && (!_5F); //#14954
        }; //#14954
        $k[$j++] = Infinity; //#14957
        for (var _5H = 0, _5I = $_.msg.length; _5H < _5I; _5H++) { //#14957
            $k[$j++] = 0; //#14957
        } //#14957
        $k[$j++] = 9999; //#14957
        $_.nextanotb = $a(); //#14957
        $k[$j++] = Infinity; //#14958
        for (var _5L = 0, _5M = $_.msg.length; _5L < _5M; _5L++) { //#14958
            $k[$j++] = 0; //#14958
        } //#14958
        $k[$j++] = 9999; //#14958
        $_.nextbnota = $a(); //#14958
        for (var _5P = $_.msg.length - 1; _5P >= 0; _5P -= 1) { //#14971
            $_.i = _5P; //#14960
            $k[$j++] = $get($_.msg, $_.i); //#14961
            $_.anotb(); //#14961
            if ($k[--$j]) { //#14964
                $put($_.nextanotb, $_.i, 0); //#14962
            } else { //#14964
                $put($_.nextanotb, $_.i, $get($_.nextanotb, $_.i + 1) + 1); //#14964
            } //#14964
            $k[$j++] = $get($_.msg, $_.i); //#14966
            $_.bnota(); //#14966
            if ($k[--$j]) { //#14969
                $put($_.nextbnota, $_.i, 0); //#14967
            } else { //#14969
                $put($_.nextbnota, $_.i, $get($_.nextbnota, $_.i + 1) + 1); //#14969
            } //#14969
        } //#14969
        $_.abeforeb = function() {
            var _5m = $k[--$j]; //#14974
            $k[$j++] = $lt($get($_.nextanotb, _5m), $get($_.nextbnota, _5m)); //#14974
        }; //#14974
        $_.bbeforea = function() {
            var _5r = $k[--$j]; //#14975
            $k[$j++] = $lt($get($_.nextbnota, _5r), $get($_.nextanotb, _5r)); //#14975
        }; //#14975
        $_.cws = $a(($_.barcode.length * 2) + 3); //#14977
        $_.i = 0; //#14980
        $_.j = 0; //#14980
        for (;;) { //#15070
            if ($_.sam != -1) { //#14991
                $put($_.cws, 0, (~~($_.sam / 10)) - 1); //#14985
                $put($_.cws, 1, ($_.sam % 10) - 1); //#14986
                $_.j = 2; //#14987
                $_.cset = "setb"; //#14988
                $_.mode = 7; //#14989
                break; //#14990
            } //#14990
            if ($_.msglen == 0) { //#14997
                $_.cset = "setb"; //#14994
                $_.mode = 1; //#14995
                break; //#14996
            } //#14996
            if ($_.msglen >= 2) { //#15006
                $k[$j++] = $get($_.msg, 0) == $_.fn1; //#15000
                $k[$j++] = 1; //#15000
                $_.numsscr(); //#15000
                var _68 = $k[--$j]; //#15000
                $k[$j - 1] = _68; //#15000
                var _6A = $k[--$j]; //#15000
                var _6B = $k[--$j]; //#15000
                if (_6B && (_6A >= 2)) { //#15005
                    $_.cset = "setc"; //#15001
                    $_.mode = 4; //#15002
                    $_.i = 1; //#15003
                    break; //#15004
                } //#15004
            } //#15004
            if ($get($_.msg, 0) == $_.fn1) { //#15013
                $_.cset = "setb"; //#15009
                $_.mode = 3; //#15010
                $_.i = 1; //#15011
                break; //#15012
            } //#15012
            if ($_.msglen >= 2) { //#15059
                $k[$j++] = 0; //#15016
                $_.numsscr(); //#15016
                var _6G = $k[--$j]; //#15016
                $k[$j - 1] = _6G; //#15016
                var _6I = $k[--$j]; //#15016
                if ((_6I >= 2) && ((_6I % 2) == 0)) { //#15020
                    $_.cset = "setc"; //#15017
                    $_.mode = 2; //#15018
                    break; //#15019
                } //#15019
                $k[$j++] = 0; //#15022
                $_.numsscr(); //#15022
                var _6J = $k[--$j]; //#15022
                $k[$j - 1] = _6J; //#15022
                var _6L = $k[--$j]; //#15022
                if ((_6L >= 3) && ((_6L % 2) == 1)) { //#15028
                    $k[$j++] = $get($_.msg, 0); //#15023
                    $_.encb(); //#15023
                    $_.cset = "setc"; //#15024
                    $_.mode = 5; //#15025
                    $_.i = 1; //#15026
                    break; //#15027
                } //#15027
                var _6R = $get($_.setb, $get($_.msg, 0)) !== undefined; //#15030
                $k[$j++] = _6R; //#15031
                $k[$j++] = 1; //#15031
                $_.numsscr(); //#15031
                var _6S = $k[--$j]; //#15031
                $k[$j - 1] = _6S; //#15031
                var _6U = $k[--$j]; //#15031
                var _6V = $k[--$j]; //#15031
                if (_6V && ((_6U >= 2) && ((_6U % 2) == 0))) { //#15037
                    $k[$j++] = $get($_.msg, 0); //#15032
                    $_.encb(); //#15032
                    $_.cset = "setc"; //#15033
                    $_.mode = 5; //#15034
                    $_.i = 1; //#15035
                    break; //#15036
                } //#15036
                var _6b = $get($_.setb, $get($_.msg, 0)) !== undefined; //#15039
                $k[$j++] = _6b; //#15040
                $k[$j++] = 1; //#15040
                $_.numsscr(); //#15040
                var _6c = $k[--$j]; //#15040
                $k[$j - 1] = _6c; //#15040
                var _6e = $k[--$j]; //#15040
                var _6f = $k[--$j]; //#15040
                if (_6f && ((_6e >= 3) && ((_6e % 2) == 1))) { //#15047
                    $k[$j++] = $get($_.msg, 0); //#15041
                    $_.encb(); //#15041
                    $k[$j++] = $get($_.msg, 1); //#15042
                    $_.encb(); //#15042
                    $_.cset = "setc"; //#15043
                    $_.mode = 6; //#15044
                    $_.i = 2; //#15045
                    break; //#15046
                } //#15046
                var _6n = $get($_.setb, $get($_.msg, 0)) !== undefined; //#15049
                var _6r = $get($_.setb, $get($_.msg, 1)) !== undefined; //#15050
                $k[$j++] = _6n && _6r; //#15051
                $k[$j++] = 2; //#15051
                $_.numsscr(); //#15051
                var _6s = $k[--$j]; //#15051
                $k[$j - 1] = _6s; //#15051
                var _6u = $k[--$j]; //#15051
                var _6v = $k[--$j]; //#15051
                if (_6v && ((_6u >= 2) && ((_6u % 2) == 0))) { //#15058
                    $k[$j++] = $get($_.msg, 0); //#15052
                    $_.encb(); //#15052
                    $k[$j++] = $get($_.msg, 1); //#15053
                    $_.encb(); //#15053
                    $_.cset = "setc"; //#15054
                    $_.mode = 6; //#15055
                    $_.i = 2; //#15056
                    break; //#15057
                } //#15057
            } //#15057
            $k[$j++] = 0; //#15061
            $_.abeforeb(); //#15061
            if ($k[--$j]) { //#15065
                $_.cset = "seta"; //#15062
                $_.mode = 0; //#15063
                break; //#15064
            } //#15064
            $_.cset = "setb"; //#15067
            $_.mode = 1; //#15068
            break; //#15069
        } //#15069
        for (;;) { //#15313
            if ($_.i == $_.msglen) { //#15073
                break; //#15073
            } //#15073
            $k[$j++] = $_.i; //#15075
            $_.numsscr(); //#15075
            $_.nums = $k[--$j]; //#15075
            $_.nchars = $k[--$j]; //#15075
            for (;;) { //#15311
                if ($eq($_.cset, "seta")) { //#15152
                    if ($_.i < ($_.msglen - 1)) { //#15089
                        $k[$j++] = $get($_.msg, $_.i); //#15082
                        $_.bnota(); //#15082
                        $k[$j++] = $_.i + 1; //#15083
                        $_.abeforeb(); //#15083
                        var _7D = $k[--$j]; //#15083
                        if ($k[--$j] && _7D) { //#15088
                            $k[$j++] = $_.sb1; //#15084
                            $_.enca(); //#15084
                            $k[$j++] = $get($_.msg, $_.i); //#15085
                            $_.encb(); //#15085
                            $_.i = $_.i + 1; //#15086
                            break; //#15087
                        } //#15087
                    } //#15087
                    if ($_.i < ($_.msglen - 2)) { //#15101
                        $k[$j++] = $get($_.msg, $_.i); //#15092
                        $_.bnota(); //#15092
                        $k[$j++] = $get($_.msg, $_.i + 1); //#15093
                        $_.bnota(); //#15093
                        var _7S = $k[--$j]; //#15093
                        var _7T = $k[--$j]; //#15093
                        $k[$j++] = $an(_7T, _7S); //#15094
                        $k[$j++] = $_.i + 2; //#15094
                        $_.abeforeb(); //#15094
                        var _7V = $k[--$j]; //#15094
                        if ($k[--$j] && _7V) { //#15100
                            $k[$j++] = $_.sb2; //#15095
                            $_.enca(); //#15095
                            $k[$j++] = $get($_.msg, $_.i); //#15096
                            $_.encb(); //#15096
                            $k[$j++] = $get($_.msg, $_.i + 1); //#15097
                            $_.encb(); //#15097
                            $_.i = $_.i + 2; //#15098
                            break; //#15099
                        } //#15099
                    } //#15099
                    $k[$j++] = $get($_.msg, $_.i); //#15103
                    $_.bnota(); //#15103
                    if ($k[--$j]) { //#15107
                        $k[$j++] = $_.swb; //#15104
                        $_.enca(); //#15104
                        $_.cset = "setb"; //#15105
                        break; //#15106
                    } //#15106
                    if ($_.i < ($_.msglen - 4)) { //#15124
                        var _7r = $get($_.seta, $get($_.msg, $_.i + 4)) !== undefined; //#15111
                        if (($_.nums == 4) && _7r) { //#15123
                            $k[$j++] = $_.sc2; //#15112
                            $_.enca(); //#15112
                            for (var _7t = 0; _7t < 2; _7t++) { //#15121
                                if ($get($_.msg, $_.i) == $_.fn1) { //#15119
                                    $k[$j++] = $_.fn1; //#15115
                                    $_.encc(); //#15115
                                    $_.i = $_.i + 1; //#15116
                                } else { //#15119
                                    $k[$j++] = $geti($_.msg, $_.i, 2); //#15118
                                    $_.encc(); //#15118
                                    $_.i = $_.i + 2; //#15119
                                } //#15119
                            } //#15119
                            break; //#15122
                        } //#15122
                    } //#15122
                    if ($_.i < ($_.msglen - 6)) { //#15141
                        var _8B = $get($_.seta, $get($_.msg, $_.i + 6)) !== undefined; //#15128
                        if (($_.nums == 6) && _8B) { //#15140
                            $k[$j++] = $_.sc3; //#15129
                            $_.enca(); //#15129
                            for (var _8D = 0; _8D < 3; _8D++) { //#15138
                                if ($get($_.msg, $_.i) == $_.fn1) { //#15136
                                    $k[$j++] = $_.fn1; //#15132
                                    $_.encc(); //#15132
                                    $_.i = $_.i + 1; //#15133
                                } else { //#15136
                                    $k[$j++] = $geti($_.msg, $_.i, 2); //#15135
                                    $_.encc(); //#15135
                                    $_.i = $_.i + 2; //#15136
                                } //#15136
                            } //#15136
                            break; //#15139
                        } //#15139
                    } //#15139
                    if (($_.nums >= 4) && (($_.nums % 2) == 0)) { //#15147
                        $k[$j++] = $_.swc; //#15144
                        $_.enca(); //#15144
                        $_.cset = "setc"; //#15145
                        break; //#15146
                    } //#15146
                    $k[$j++] = $get($_.msg, $_.i); //#15149
                    $_.enca(); //#15149
                    $_.i = $_.i + 1; //#15150
                    break; //#15151
                } //#15151
                if ($eq($_.cset, "setb")) { //#15226
                    if ($_.i < ($_.msglen - 1)) { //#15163
                        $k[$j++] = $get($_.msg, $_.i); //#15156
                        $_.anotb(); //#15156
                        $k[$j++] = $_.i + 1; //#15157
                        $_.bbeforea(); //#15157
                        var _8c = $k[--$j]; //#15157
                        if ($k[--$j] && _8c) { //#15162
                            $k[$j++] = $_.sa1; //#15158
                            $_.encb(); //#15158
                            $k[$j++] = $get($_.msg, $_.i); //#15159
                            $_.enca(); //#15159
                            $_.i = $_.i + 1; //#15160
                            break; //#15161
                        } //#15161
                    } //#15161
                    if ($_.i < ($_.msglen - 2)) { //#15175
                        $k[$j++] = $get($_.msg, $_.i); //#15166
                        $_.anotb(); //#15166
                        $k[$j++] = $get($_.msg, $_.i + 1); //#15167
                        $_.anotb(); //#15167
                        var _8r = $k[--$j]; //#15167
                        var _8s = $k[--$j]; //#15167
                        $k[$j++] = $an(_8s, _8r); //#15168
                        $k[$j++] = $_.i + 2; //#15168
                        $_.bbeforea(); //#15168
                        var _8u = $k[--$j]; //#15168
                        if ($k[--$j] && _8u) { //#15174
                            $k[$j++] = $_.sa2; //#15169
                            $_.encb(); //#15169
                            $k[$j++] = $get($_.msg, $_.i); //#15170
                            $_.enca(); //#15170
                            $k[$j++] = $get($_.msg, $_.i + 1); //#15171
                            $_.enca(); //#15171
                            $_.i = $_.i + 2; //#15172
                            break; //#15173
                        } //#15173
                    } //#15173
                    $k[$j++] = $get($_.msg, $_.i); //#15177
                    $_.anotb(); //#15177
                    if ($k[--$j]) { //#15181
                        $k[$j++] = $_.swa; //#15178
                        $_.encb(); //#15178
                        $_.cset = "seta"; //#15179
                        break; //#15180
                    } //#15180
                    if ($_.i < ($_.msglen - 4)) { //#15198
                        var _9G = $get($_.setb, $get($_.msg, $_.i + 4)) !== undefined; //#15185
                        if (($_.nums == 4) && _9G) { //#15197
                            $k[$j++] = $_.sc2; //#15186
                            $_.encb(); //#15186
                            for (var _9I = 0; _9I < 2; _9I++) { //#15195
                                if ($get($_.msg, $_.i) == $_.fn1) { //#15193
                                    $k[$j++] = $_.fn1; //#15189
                                    $_.encc(); //#15189
                                    $_.i = $_.i + 1; //#15190
                                } else { //#15193
                                    $k[$j++] = $geti($_.msg, $_.i, 2); //#15192
                                    $_.encc(); //#15192
                                    $_.i = $_.i + 2; //#15193
                                } //#15193
                            } //#15193
                            break; //#15196
                        } //#15196
                    } //#15196
                    if ($_.i < ($_.msglen - 6)) { //#15215
                        var _9a = $get($_.setb, $get($_.msg, $_.i + 6)) !== undefined; //#15202
                        if (($_.nums == 6) && _9a) { //#15214
                            $k[$j++] = $_.sc3; //#15203
                            $_.encb(); //#15203
                            for (var _9c = 0; _9c < 3; _9c++) { //#15212
                                if ($get($_.msg, $_.i) == $_.fn1) { //#15210
                                    $k[$j++] = $_.fn1; //#15206
                                    $_.encc(); //#15206
                                    $_.i = $_.i + 1; //#15207
                                } else { //#15210
                                    $k[$j++] = $geti($_.msg, $_.i, 2); //#15209
                                    $_.encc(); //#15209
                                    $_.i = $_.i + 2; //#15210
                                } //#15210
                            } //#15210
                            break; //#15213
                        } //#15213
                    } //#15213
                    if (($_.nums >= 4) && (($_.nums % 2) == 0)) { //#15221
                        $k[$j++] = $_.swc; //#15218
                        $_.encb(); //#15218
                        $_.cset = "setc"; //#15219
                        break; //#15220
                    } //#15220
                    $k[$j++] = $get($_.msg, $_.i); //#15223
                    $_.encb(); //#15223
                    $_.i = $_.i + 1; //#15224
                    break; //#15225
                } //#15225
                if ($eq($_.cset, "setc")) { //#15309
                    if ($_.nums >= 2) { //#15238
                        if ($get($_.msg, $_.i) == $_.fn1) { //#15235
                            $k[$j++] = $_.fn1; //#15231
                            $_.encc(); //#15231
                            $_.i = $_.i + 1; //#15232
                        } else { //#15235
                            $k[$j++] = $geti($_.msg, $_.i, 2); //#15234
                            $_.encc(); //#15234
                            $_.i = $_.i + 2; //#15235
                        } //#15235
                        break; //#15237
                    } //#15237
                    if ($_.i < ($_.msglen - 1)) { //#15248
                        var _AC = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#15241
                        $k[$j++] = _AC; //#15242
                        $k[$j++] = $_.i + 1; //#15242
                        $_.numsscr(); //#15242
                        var _AE = $k[--$j]; //#15242
                        $k[$j - 1] = _AE; //#15242
                        var _AG = $k[--$j]; //#15242
                        var _AH = $k[--$j]; //#15242
                        if (_AH && ((_AG >= 2) && ((_AG % 2) == 0))) { //#15247
                            $k[$j++] = $_.sb1; //#15243
                            $_.encc(); //#15243
                            $k[$j++] = $get($_.msg, $_.i); //#15244
                            $_.encb(); //#15244
                            $_.i = $_.i + 1; //#15245
                            break; //#15246
                        } //#15246
                    } //#15246
                    if ($_.i < ($_.msglen - 1)) { //#15259
                        var _AT = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#15251
                        $k[$j++] = _AT; //#15252
                        $k[$j++] = $_.i + 1; //#15252
                        $_.numsscr(); //#15252
                        var _AV = $k[--$j]; //#15252
                        $k[$j - 1] = _AV; //#15252
                        var _AX = $k[--$j]; //#15252
                        var _AY = $k[--$j]; //#15252
                        if (_AY && ((_AX >= 3) && ((_AX % 2) == 1))) { //#15258
                            $k[$j++] = $_.sb2; //#15253
                            $_.encc(); //#15253
                            $k[$j++] = $get($_.msg, $_.i); //#15254
                            $_.encb(); //#15254
                            $k[$j++] = $get($_.msg, $_.i + 1); //#15255
                            $_.encb(); //#15255
                            $_.i = $_.i + 2; //#15256
                            break; //#15257
                        } //#15257
                    } //#15257
                    if ($_.i < ($_.msglen - 2)) { //#15271
                        var _An = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#15262
                        var _As = $get($_.setb, $get($_.msg, $_.i + 1)) !== undefined; //#15263
                        $k[$j++] = _An && _As; //#15264
                        $k[$j++] = $_.i + 2; //#15264
                        $_.numsscr(); //#15264
                        var _Au = $k[--$j]; //#15264
                        $k[$j - 1] = _Au; //#15264
                        var _Aw = $k[--$j]; //#15264
                        var _Ax = $k[--$j]; //#15264
                        if (_Ax && ((_Aw >= 2) && ((_Aw % 2) == 0))) { //#15270
                            $k[$j++] = $_.sb2; //#15265
                            $_.encc(); //#15265
                            $k[$j++] = $get($_.msg, $_.i); //#15266
                            $_.encb(); //#15266
                            $k[$j++] = $get($_.msg, $_.i + 1); //#15267
                            $_.encb(); //#15267
                            $_.i = $_.i + 2; //#15268
                            break; //#15269
                        } //#15269
                    } //#15269
                    if ($_.i < ($_.msglen - 3)) { //#15284
                        var _BC = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#15274
                        var _BH = $get($_.setb, $get($_.msg, $_.i + 1)) !== undefined; //#15275
                        $k[$j++] = _BC && _BH; //#15276
                        $k[$j++] = $_.i + 2; //#15276
                        $_.numsscr(); //#15276
                        var _BJ = $k[--$j]; //#15276
                        $k[$j - 1] = _BJ; //#15276
                        var _BL = $k[--$j]; //#15276
                        var _BM = $k[--$j]; //#15276
                        if (_BM && ((_BL >= 3) && ((_BL % 2) == 1))) { //#15283
                            $k[$j++] = $_.sb3; //#15277
                            $_.encc(); //#15277
                            $k[$j++] = $get($_.msg, $_.i); //#15278
                            $_.encb(); //#15278
                            $k[$j++] = $get($_.msg, $_.i + 1); //#15279
                            $_.encb(); //#15279
                            $k[$j++] = $get($_.msg, $_.i + 2); //#15280
                            $_.encb(); //#15280
                            $_.i = $_.i + 3; //#15281
                            break; //#15282
                        } //#15282
                    } //#15282
                    if ($_.i < ($_.msglen - 3)) { //#15298
                        var _Be = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#15287
                        var _Bj = $get($_.setb, $get($_.msg, $_.i + 1)) !== undefined; //#15288
                        var _Bo = $get($_.setb, $get($_.msg, $_.i + 2)) !== undefined; //#15289
                        $k[$j++] = (_Be && _Bj) && _Bo; //#15290
                        $k[$j++] = $_.i + 3; //#15290
                        $_.numsscr(); //#15290
                        var _Bq = $k[--$j]; //#15290
                        $k[$j - 1] = _Bq; //#15290
                        var _Bs = $k[--$j]; //#15290
                        var _Bt = $k[--$j]; //#15290
                        if (_Bt && ((_Bs >= 2) && ((_Bs % 2) == 0))) { //#15297
                            $k[$j++] = $_.sb3; //#15291
                            $_.encc(); //#15291
                            $k[$j++] = $get($_.msg, $_.i); //#15292
                            $_.encb(); //#15292
                            $k[$j++] = $get($_.msg, $_.i + 1); //#15293
                            $_.encb(); //#15293
                            $k[$j++] = $get($_.msg, $_.i + 2); //#15294
                            $_.encb(); //#15294
                            $_.i = $_.i + 3; //#15295
                            break; //#15296
                        } //#15296
                    } //#15296
                    $k[$j++] = $_.i; //#15300
                    $_.abeforeb(); //#15300
                    if ($k[--$j]) { //#15304
                        $k[$j++] = $_.swa; //#15301
                        $_.encc(); //#15301
                        $_.cset = "seta"; //#15302
                        break; //#15303
                    } //#15303
                    $k[$j++] = $_.swb; //#15306
                    $_.encc(); //#15306
                    $_.cset = "setb"; //#15307
                    break; //#15308
                } //#15308
                break; //#15310
            } //#15310
        } //#15310
        $_.cws = $geti($_.cws, 0, $_.j); //#15314
    } //#15314
    $_.metrics = $a([$a([2, 7]), $a([3, 12]), $a([4, 17]), $a([5, 22]), $a([6, 27]), $a([7, 32]), $a([8, 37]), $a([9, 42]), $a([10, 47]), $a([11, 52]), $a([12, 57]), $a([13, 62]), $a([14, 67]), $a([15, 72]), $a([16, 77])]); //#15336
    $_.urows = $_.rows; //#15340
    var _CU = $_.metrics; //#15341
    for (var _CV = 0, _CW = _CU.length; _CV < _CW; _CV++) { //#15349
        $_.m = $get(_CU, _CV); //#15342
        $_.r = $get($_.m, 0); //#15343
        $_.dcws = $get($_.m, 1); //#15344
        $_.okay = true; //#15345
        if (($_.urows != 0) && ($_.urows != $_.r)) { //#15346
            $_.okay = false; //#15346
        } //#15346
        if ($_.cws.length > $_.dcws) { //#15347
            $_.okay = false; //#15347
        } //#15347
        if ($_.okay) { //#15348
            break; //#15348
        } //#15348
    } //#15348
    if (!$_.okay) { //#15353
        $k[$j++] = 'bwipp.code16kNoValidSymbol#15352'; //#15352
        $k[$j++] = "Maximum length exceeded or data too large for given options"; //#15352
        bwipp_raiseerror(); //#15352
    } //#15352
    $k[$j++] = Infinity; //#15356
    $aload($_.cws); //#15356
    for (var _Cm = 0, _Cn = $f($_.dcws - $_.cws.length); _Cm < _Cn; _Cm++) { //#15356
        $k[$j++] = 103; //#15356
    } //#15356
    $_.cws = $a(); //#15356
    $k[$j++] = Infinity; //#15359
    $k[$j++] = $f((($_.r - 2) * 7) + $_.mode); //#15359
    $aload($_.cws); //#15359
    $_.cws = $a(); //#15359
    $k[$j++] = 0; //#15362
    for (var _Cv = 0, _Cu = $_.dcws; _Cv <= _Cu; _Cv += 1) { //#15362
        var _Cy = $k[--$j]; //#15362
        $k[$j++] = $f(_Cy + ((_Cv + 2) * $get($_.cws, _Cv))); //#15362
    } //#15362
    $_.c1 = $k[--$j] % 107; //#15363
    $k[$j++] = 0; //#15364
    for (var _D2 = 0, _D1 = $_.dcws; _D2 <= _D1; _D2 += 1) { //#15364
        var _D5 = $k[--$j]; //#15364
        $k[$j++] = $f(_D5 + ((_D2 + 1) * $get($_.cws, _D2))); //#15364
    } //#15364
    $_.c2 = ($f($k[--$j] + ($_.c1 * ($_.dcws + 2)))) % 107; //#15365
    $k[$j++] = Infinity; //#15366
    $aload($_.cws); //#15366
    $k[$j++] = $_.c1; //#15366
    $k[$j++] = $_.c2; //#15366
    $_.cws = $a(); //#15366
    var _DE = $get($_.options, 'debugcws') !== undefined; //#15368
    if (_DE) { //#15368
        $k[$j++] = 'bwipp.debugcws#15368'; //#15368
        $k[$j++] = $_.cws; //#15368
        bwipp_raiseerror(); //#15368
    } //#15368
    $_.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "211214", "211232", "211133"]); //#15389
    $_.startencs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112"]); //#15395
    $_.stopencsodd = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411"]); //#15399
    $_.stopencseven = $a(["2122", "1411", "1132", "1231", "1114", "3112", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411", "3211", "2221"]); //#15403
    if (($_.sam == -1) || (((~~($_.sam / 10)) % 2) == 1)) { //#15409
        $_.stopencs = $_.stopencsodd; //#15407
    } else { //#15409
        $_.stopencs = $_.stopencseven; //#15409
    } //#15409
    $_.rowbits = $a($_.r); //#15413
    for (var _DT = 0, _DS = $_.r - 1; _DT <= _DS; _DT += 1) { //#15430
        $_.i = _DT; //#15415
        $k[$j++] = Infinity; //#15416
        $k[$j++] = 10; //#15418
        $forall($get($_.startencs, $_.i), function() { //#15418
            var _DX = $k[--$j]; //#15418
            $k[$j++] = _DX - 48; //#15418
        }); //#15418
        var _Da = $geti($_.cws, $_.i * 5, 5); //#15420
        $k[$j++] = 1; //#15422
        for (var _Db = 0, _Dc = _Da.length; _Db < _Dc; _Db++) { //#15422
            $forall($get($_.encs, $get(_Da, _Db)), function() { //#15421
                var _Dg = $k[--$j]; //#15421
                $k[$j++] = _Dg - 48; //#15421
            }); //#15421
        } //#15421
        $forall($get($_.stopencs, $_.i), function() { //#15423
            var _Dk = $k[--$j]; //#15423
            $k[$j++] = _Dk - 48; //#15423
        }); //#15423
        $k[$j++] = 1; //#15424
        $_.sbs = $a(); //#15424
        $k[$j++] = Infinity; //#15426
        var _Dm = $_.sbs; //#15427
        $k[$j++] = 1; //#15427
        for (var _Dn = 0, _Do = _Dm.length; _Dn < _Do; _Dn++) { //#15427
            var _Dq = $k[$j - 1]; //#15427
            var _Dr = (_Dq == 0) ? 1 : 0; //#15427
            for (var _Ds = 0, _Dt = $get(_Dm, _Dn); _Ds < _Dt; _Ds++) { //#15427
                $k[$j++] = _Dr //#15427
            } //#15427
        } //#15427
        $astore($a($counttomark() - 1)); //#15428
        var _Dw = $k[--$j]; //#15428
        $k[$j - 1] = _Dw; //#15428
        var _Dy = $k[--$j]; //#15428
        $k[$j - 1] = _Dy; //#15428
        $k[$j++] = $_.rowbits; //#15429
        $k[$j++] = $_.i; //#15429
        var _E2 = $k[$j - 3]; //#15429
        var _E3 = $k[$j - 1]; //#15429
        $put($k[$j - 2], _E3, _E2); //#15429
        $j -= 3; //#15429
    } //#15429
    $k[$j++] = Infinity; //#15433
    for (var _E6 = 0, _E7 = 81 * $_.sepheight; _E6 < _E7; _E6++) { //#15434
        $k[$j++] = 1; //#15434
    } //#15434
    for (var _EA = 0, _E9 = $_.r - 2; _EA <= _E9; _EA += 1) { //#15439
        $_.i = _EA; //#15436
        for (var _EC = 0, _ED = $_.rowheight; _EC < _ED; _EC++) { //#15437
            $aload($get($_.rowbits, $_.i)); //#15437
        } //#15437
        for (var _EI = 0, _EJ = $_.sepheight; _EI < _EJ; _EI++) { //#15438
            for (var _EK = 0; _EK < 10; _EK++) { //#15438
                $k[$j++] = 0; //#15438
            } //#15438
            for (var _EL = 0; _EL < 70; _EL++) { //#15438
                $k[$j++] = 1; //#15438
            } //#15438
            $k[$j++] = 0; //#15438
        } //#15438
    } //#15438
    for (var _EN = 0, _EO = $_.rowheight; _EN < _EO; _EN++) { //#15440
        $aload($get($_.rowbits, $_.r - 1)); //#15440
    } //#15440
    for (var _ET = 0, _EU = 81 * $_.sepheight; _ET < _EU; _ET++) { //#15441
        $k[$j++] = 1; //#15441
    } //#15441
    $_.pixs = $a(); //#15441
    var _Ea = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", 81],
        ["pixy", ~~($_.pixs.length / 81)],
        ["height", (~~($_.pixs.length / 81)) / 72],
        ["width", 81 / 72],
        ["opt", $_.options]
    ]); //#15452
    $k[$j++] = _Ea; //#15455
    if (!$_.dontdraw) { //#15455
        bwipp_renmatrix(); //#15455
    } //#15455
    $_ = $__; //#15459
} //bwipp_code16k
function bwipp_code49() {
    var $__ = $_; //#15490
    $_ = Object.assign({}, $_); //#15490
    $_.dontdraw = false; //#15493
    $_.sam = -1; //#15494
    $_.append = false; //#15495
    $_.rows = 0; //#15496
    $_.rowheight = 8; //#15497
    $_.sepheight = 1; //#15498
    $_.parse = false; //#15499
    $_.parsefnc = false; //#15500
    $k[$j++] = $_; //#15502
    bwipp_processoptions(); //#15502
    $_.options = $k[--$j]; //#15502
    $_.barcode = $k[--$j]; //#15503
    if (($_.rows != 0) && (($_.rows < 2) || ($_.rows > 8))) { //#15507
        $k[$j++] = 'bwipp.code49badRows#15506'; //#15506
        $k[$j++] = "Code 49 must have 2 to 8 rows"; //#15506
        bwipp_raiseerror(); //#15506
    } //#15506
    if ($_.rowheight < 8) { //#15511
        $k[$j++] = 'bwipp.code49badRowHeight#15510'; //#15510
        $k[$j++] = "Code 49 must have rowheight of at least 8"; //#15510
        bwipp_raiseerror(); //#15510
    } //#15510
    if ($_.sepheight < 1) { //#15515
        $k[$j++] = 'bwipp.code49badSepHeight#15514'; //#15514
        $k[$j++] = "Code 49 must have sepheight of at least 1"; //#15514
        bwipp_raiseerror(); //#15514
    } //#15514
    if ($_.append && ($_.sam != -1)) { //#15519
        $k[$j++] = 'bwipp.code49samAndAppend#15518'; //#15518
        $k[$j++] = "sam and append cannot be specified together"; //#15518
        bwipp_raiseerror(); //#15518
    } //#15518
    if ($_.sam != -1) { //#15531
        $k[$j++] = true; //#15527
        for (var _A = 0; _A < 1; _A++) { //#15527
            var _B = $_.sam; //#15524
            if ((_B < 12) || (_B > 99)) { //#15524
                $k[$j - 1] = false; //#15524
                break; //#15524
            } //#15524
            if (($_.sam % 10) < 2) { //#15525
                $k[$j - 1] = false; //#15525
                break; //#15525
            } //#15525
            if ((~~($_.sam / 10)) > ($_.sam % 10)) { //#15526
                $k[$j - 1] = false; //#15526
                break; //#15526
            } //#15526
        } //#15526
        if (!$k[--$j]) { //#15530
            $k[$j++] = 'bwipp.code49badSAM#15529'; //#15529
            $k[$j++] = "SAM must be formatted as \"NM\" for Nth of M symbols, from 2 to 9 symbols"; //#15529
            bwipp_raiseerror(); //#15529
        } //#15529
    } //#15529
    $_.s1 = -1; //#15536
    $_.s2 = -2; //#15536
    $_.fn1 = -3; //#15536
    $_.fn2 = -4; //#15536
    $_.fn3 = -5; //#15536
    $_.ns = -6; //#15536
    var _M = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["FNC1", $_.fn1],
        ["FNC2", $_.fn2],
        ["FNC3", $_.fn3]
    ]); //#15545
    $_.fncvals = _M; //#15546
    $k[$j++] = 'msg'; //#15547
    $k[$j++] = $_.barcode; //#15547
    $k[$j++] = $_.fncvals; //#15547
    bwipp_parseinput(); //#15547
    var _P = $k[--$j]; //#15547
    $_[$k[--$j]] = _P; //#15547
    $_.msglen = $_.msg.length; //#15548
    $forall($_.msg, function() { //#15554
        if ($k[--$j] > 127) { //#15553
            $k[$j++] = 'bwipp.code49badCharacter#15552'; //#15552
            $k[$j++] = "Code 49 can only support ASCII characters with values 0 to 127"; //#15552
            bwipp_raiseerror(); //#15552
        } //#15552
    }); //#15552
    $_.charmap = $a(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "-", ".", " ", "$", "/", "+", "%", $_.s1, $_.s2, $_.fn1, $_.fn2, $_.fn3, $_.ns]); //#15564
    $_.charvals = new Map; //#15567
    for (var _b = 0; _b <= 48; _b += 1) { //#15573
        $_.i = _b; //#15569
        var _e = $get($_.charmap, $_.i); //#15570
        $k[$j++] = _e; //#15571
        if ($eq($type(_e), 'stringtype')) { //#15571
            var _h = $get($k[--$j], 0); //#15571
            $k[$j++] = _h; //#15571
        } //#15571
        $put($_.charvals, $k[--$j], $_.i); //#15572
    } //#15572
    $_.combos = $a(["1 ", "1A", "1B", "1C", "1D", "1E", "1F", "1G", "1H", "1I", "1J", "1K", "1L", "1M", "1N", "1O", "1P", "1Q", "1R", "1S", "1T", "1U", "1V", "1W", "1X", "1Y", "1Z", "11", "12", "13", "14", "15", "  ", "16", "17", "18", " $", " %", "19", "10", "1-", "1.", "1$", " +", "1/", " -", " .", " /", " 0", " 1", " 2", " 3", " 4", " 5", " 6", " 7", " 8", " 9", "1+", "21", "22", "23", "24", "25", "26", " A", " B", " C", " D", " E", " F", " G", " H", " I", " J", " K", " L", " M", " N", " O", " P", " Q", " R", " S", " T", " U", " V", " W", " X", " Y", " Z", "27", "28", "29", "20", "2-", "2.", "2A", "2B", "2C", "2D", "2E", "2F", "2G", "2H", "2I", "2J", "2K", "2L", "2M", "2N", "2O", "2P", "2Q", "2R", "2S", "2T", "2U", "2V", "2W", "2X", "2Y", "2Z", "2$", "2/", "2+", "2%", "2 "]); //#15585
    for (var _m = 0; _m <= 127; _m += 1) { //#15595
        $_.i = _m; //#15587
        var _p = $get($_.combos, $_.i); //#15588
        $_.c1 = $get(_p, 0); //#15588
        $_.c2 = $get(_p, 1); //#15588
        if ($_.c1 == 49) { //#15591
            $put($_.charvals, $_.i, $a([$get($_.charvals, $_.s1), $get($_.charvals, $_.c2)])); //#15590
        } //#15590
        if ($_.c1 == 50) { //#15594
            $put($_.charvals, $_.i, $a([$get($_.charvals, $_.s2), $get($_.charvals, $_.c2)])); //#15593
        } //#15593
    } //#15593
    $_.encodealpha = function() {
        var _1F = $get($_.charvals, $k[--$j]); //#15599
        $k[$j++] = _1F; //#15600
        if ($ne($type(_1F), 'arraytype')) { //#15600
            $astore($a(1)); //#15600
        } //#15600
        var _1I = $k[--$j]; //#15601
        $puti($_.cws, $_.j, _1I); //#15601
        $_.j = _1I.length + $_.j; //#15602
    }; //#15602
    $_.base48 = function() {
        var _1M = $k[--$j]; //#15606
        $k[$j++] = 0; //#15606
        $forall(_1M, function() { //#15606
            var _1N = $k[--$j]; //#15606
            var _1O = $k[--$j]; //#15606
            $k[$j++] = $f((_1N - 48) + (_1O * 10)); //#15606
        }); //#15606
        $k[$j++] = Infinity; //#15607
        var _1P = $k[$j - 2]; //#15607
        var _1Q = $k[$j - 3]; //#15607
        $k[$j - 3] = $k[$j - 1]; //#15607
        $j -= 2; //#15607
        $k[$j++] = _1P; //#15607
        for (var _1R = 0, _1S = _1Q - 1; _1R < _1S; _1R++) { //#15607
            var _1T = $k[--$j]; //#15607
            $k[$j++] = _1T % 48; //#15607
            $k[$j++] = ~~(_1T / 48); //#15607
        } //#15607
        var _1U = $a(); //#15607
        var _1V = Infinity; //#15608
        var _1W = _1U; //#15608
        $k[$j++] = _1V; //#15608
        $k[$j++] = _1W; //#15608
        for (var _1X = _1W.length - 1; _1X >= 0; _1X -= 1) { //#15608
            var _1Y = $k[--$j]; //#15608
            $k[$j++] = $get(_1Y, _1X); //#15608
            $k[$j++] = _1Y; //#15608
        } //#15608
        $j--; //#15608
        var _1a = $a(); //#15608
        $puti($_.cws, $_.j, _1a); //#15609
        $_.j = _1a.length + $_.j; //#15610
    }; //#15610
    $_.encodenumeric = function() {
        $_.nums = $k[--$j]; //#15614
        var _1g = $_.nums.length; //#15615
        var _1h = _1g % 5; //#15615
        $k[$j++] = 'pre'; //#15615
        $k[$j++] = _1g; //#15615
        $k[$j++] = _1h; //#15615
        if (_1h != 2) { //#15615
            var _1i = $k[--$j]; //#15615
            var _1j = $k[--$j]; //#15615
            $k[$j++] = $f(_1j - _1i); //#15615
        } else { //#15615
            var _1k = $k[--$j]; //#15615
            var _1l = $k[--$j]; //#15615
            $k[$j++] = $f(_1l - _1k) - 5; //#15615
        } //#15615
        var _1m = $k[--$j]; //#15615
        $_[$k[--$j]] = _1m; //#15615
        for (var _1q = 0, _1p = $_.pre - 1; _1q <= _1p; _1q += 5) { //#15616
            $k[$j++] = 3; //#15616
            $k[$j++] = $geti($_.nums, _1q, 5); //#15616
            $_.base48(); //#15616
        } //#15616
        $_.nums = $geti($_.nums, $_.pre, $f($_.nums.length - $_.pre)); //#15617
        var _1z = $_.nums.length; //#15619
        $k[$j++] = _1z; //#15619
        if (_1z == 1) { //#15619
            $k[$j++] = $get($_.nums, $_.i); //#15619
            $_.encodealpha(); //#15619
        } //#15619
        var _23 = $k[$j - 1]; //#15620
        if (_23 == 3) { //#15620
            $k[$j++] = 2; //#15620
            $k[$j++] = $_.nums; //#15620
            $_.base48(); //#15620
        } //#15620
        var _25 = $k[$j - 1]; //#15621
        if (_25 == 4) { //#15621
            $k[$j++] = 3; //#15621
            $k[$j++] = Infinity; //#15621
            $k[$j++] = 49; //#15621
            $k[$j++] = 48; //#15621
            $aload($_.nums); //#15621
            var _27 = $a(); //#15621
            $k[$j++] = _27; //#15621
            $_.base48(); //#15621
        } //#15621
        if ($k[--$j] == 7) { //#15625
            $k[$j++] = 3; //#15623
            $k[$j++] = Infinity; //#15623
            $k[$j++] = 49; //#15623
            $k[$j++] = 48; //#15623
            $aload($geti($_.nums, 0, 4)); //#15623
            var _2B = $a(); //#15623
            $k[$j++] = _2B; //#15623
            $_.base48(); //#15623
            $k[$j++] = 2; //#15624
            $k[$j++] = $geti($_.nums, 4, 3); //#15624
            $_.base48(); //#15624
        } //#15624
    }; //#15624
    $k[$j++] = Infinity; //#15629
    for (var _2F = 0, _2G = $_.msglen; _2F < _2G; _2F++) { //#15629
        $k[$j++] = 0; //#15629
    } //#15629
    $k[$j++] = 0; //#15629
    $_.numericruns = $a(); //#15629
    for (var _2J = $_.msglen - 1; _2J >= 0; _2J -= 1) { //#15638
        $_.i = _2J; //#15631
        var _2M = $get($_.msg, $_.i); //#15632
        if ((_2M >= 48) && (_2M <= 57)) { //#15636
            $put($_.numericruns, $_.i, $get($_.numericruns, $_.i + 1) + 1); //#15634
        } else { //#15636
            $put($_.numericruns, $_.i, 0); //#15636
        } //#15636
    } //#15636
    $_.cws = $a(($_.msglen * 2) + 1); //#15640
    $_.samval = $a([12, 22, 13, 23, 33, 14, 24, 34, 44, 15, 25, 35, 45, 55, 16, 26, 36, 46, 56, 66, 17, 27, 37, 47, 57, 67, 77, 18, 28, 38, 48, 58, 68, 78, 88, 19, 29, 39, 49, 59, 69, 79, 89, 99]); //#15652
    for (;;) { //#15689
        if ($_.append) { //#15662
            $_.mode = 1; //#15658
            $_.method = "alpha"; //#15659
            $_.i = 0; //#15660
            $_.j = 0; //#15660
            break; //#15661
        } //#15661
        if ($_.sam != -1) { //#15669
            $_.mode = 3; //#15664
            $k[$j++] = $_.cws; //#15665
            $k[$j++] = 0; //#15665
            for (var _2b = 0; _2b <= 43; _2b += 1) { //#15665
                $k[$j++] = _2b; //#15665
                if ($get($_.samval, _2b) != $_.sam) { //#15665
                    $j--; //#15665
                } //#15665
            } //#15665
            var _2f = $k[--$j]; //#15665
            var _2g = $k[--$j]; //#15665
            $put($k[--$j], _2g, _2f + 1); //#15665
            $_.method = "alpha"; //#15666
            $_.i = 0; //#15667
            $_.j = 1; //#15667
            break; //#15668
        } //#15668
        if ($get($_.numericruns, 0) >= 5) { //#15674
            $_.mode = 2; //#15671
            $_.method = "numeric"; //#15672
            $_.i = 0; //#15672
            $_.j = 0; //#15672
            break; //#15673
        } //#15673
        var _2n = $get($_.charvals, $get($_.msg, 0)); //#15675
        $k[$j++] = _2n; //#15682
        if ($ne($type(_2n), 'arraytype')) { //#15682
            $j--; //#15677
            $_.mode = 0; //#15678
            $_.method = "alpha"; //#15679
            $_.i = 0; //#15680
            $_.j = 0; //#15680
            break; //#15681
        } //#15681
        var _2r = ($get($k[--$j], 0) == 43) ? 4 : 5; //#15684
        $_.mode = _2r; //#15684
        $put($_.cws, 0, $get($get($_.charvals, $get($_.msg, 0)), 1)); //#15685
        $_.method = "alpha"; //#15686
        $_.i = 1; //#15687
        $_.j = 1; //#15687
        break; //#15688
    } //#15688
    for (;;) { //#15716
        if ($_.i == $_.msglen) { //#15693
            break; //#15693
        } //#15693
        for (;;) { //#15715
            if ($eq($_.method, "alpha")) { //#15704
                if ($get($_.numericruns, $_.i) >= 5) { //#15700
                    $k[$j++] = $_.ns; //#15697
                    $_.encodealpha(); //#15697
                    $_.method = "numeric"; //#15698
                    break; //#15699
                } //#15699
                $k[$j++] = $get($_.msg, $_.i); //#15701
                $_.encodealpha(); //#15701
                $_.i = $_.i + 1; //#15702
                break; //#15703
            } //#15703
            if ($eq($_.method, "numeric")) { //#15714
                if ($get($_.numericruns, $_.i) < 5) { //#15710
                    $k[$j++] = $_.ns; //#15707
                    $_.encodealpha(); //#15707
                    $_.method = "alpha"; //#15708
                    break; //#15709
                } //#15709
                $k[$j++] = $geti($_.msg, $_.i, $get($_.numericruns, $_.i)); //#15711
                $_.encodenumeric(); //#15711
                $_.i = $f($_.i + $get($_.numericruns, $_.i)); //#15712
                break; //#15713
            } //#15713
        } //#15713
    } //#15713
    $_.cws = $geti($_.cws, 0, $_.j); //#15717
    $_.metrics = $a([$a([2, 9]), $a([3, 16]), $a([4, 23]), $a([5, 30]), $a([6, 37]), $a([7, 42]), $a([8, 49])]); //#15730
    $_.urows = $_.rows; //#15734
    var _3b = $_.metrics; //#15735
    for (var _3c = 0, _3d = _3b.length; _3c < _3d; _3c++) { //#15743
        $_.m = $get(_3b, _3c); //#15736
        $_.r = $get($_.m, 0); //#15737
        $_.dcws = $get($_.m, 1); //#15738
        $_.okay = true; //#15739
        if (($_.urows != 0) && ($_.urows != $_.r)) { //#15740
            $_.okay = false; //#15740
        } //#15740
        if ($_.cws.length > $_.dcws) { //#15741
            $_.okay = false; //#15741
        } //#15741
        if ($_.okay) { //#15742
            break; //#15742
        } //#15742
    } //#15742
    if (!$_.okay) { //#15747
        $k[$j++] = 'bwipp.code49noValidSymbol#15746'; //#15746
        $k[$j++] = "Maximum length exceeded"; //#15746
        bwipp_raiseerror(); //#15746
    } //#15746
    $k[$j++] = Infinity; //#15750
    $aload($_.cws); //#15750
    for (var _3t = 0, _3u = $f($_.dcws - $_.cws.length); _3t < _3u; _3t++) { //#15750
        $k[$j++] = 48; //#15750
    } //#15750
    $_.cws = $a(); //#15750
    $_.ccs = $a($_.r * 8); //#15753
    $_.j = 0; //#15754
    for (var _40 = 0, _3z = $_.r - 2; _40 <= _3z; _40 += 1) { //#15761
        $_.i = _40; //#15756
        $_.cc = $geti($_.cws, $_.j, 7); //#15757
        $puti($_.ccs, $_.i * 8, $_.cc); //#15758
        var _49 = $_.cc; //#15759
        $k[$j++] = $_.ccs; //#15759
        $k[$j++] = ($_.i * 8) + 7; //#15759
        $k[$j++] = 0; //#15759
        for (var _4A = 0, _4B = _49.length; _4A < _4B; _4A++) { //#15759
            var _4D = $k[--$j]; //#15759
            $k[$j++] = $f(_4D + $get(_49, _4A)); //#15759
        } //#15759
        var _4E = $k[--$j]; //#15759
        var _4F = $k[--$j]; //#15759
        $put($k[--$j], _4F, _4E % 49); //#15759
        $_.j = $_.j + 7; //#15760
    } //#15760
    if ($_.j < $_.dcws) { //#15764
        $puti($_.ccs, $_.ccs.length - 8, $geti($_.cws, $_.j, $f($_.dcws - $_.j))); //#15763
    } //#15763
    $_.cr7 = $f((($_.r - 2) * 7) + $_.mode); //#15767
    $put($_.ccs, $_.ccs.length - 2, $_.cr7); //#15768
    var _4W = $a([1, 9, 31, 26, 2, 12, 17, 23, 37, 18, 22, 6, 27, 44, 15, 43, 39, 11, 13, 5, 41, 33, 36, 8, 4, 32, 3, 19, 40, 25, 29, 10, 24, 30]); //#15773
    $k[$j++] = _4W; //#15774
    $k[$j++] = _4W; //#15774
    $k[$j++] = Infinity; //#15774
    var _4X = $k[--$j]; //#15774
    var _4Z = $geti($k[--$j], 0, 32); //#15774
    $k[$j++] = _4X; //#15774
    $k[$j++] = 20; //#15774
    $aload(_4Z); //#15774
    $_.weightx = $a(); //#15774
    var _4b = $k[$j - 1]; //#15775
    $k[$j++] = _4b; //#15775
    $k[$j++] = Infinity; //#15775
    var _4c = $k[--$j]; //#15775
    var _4e = $geti($k[--$j], 1, 32); //#15775
    $k[$j++] = _4c; //#15775
    $k[$j++] = 16; //#15775
    $aload(_4e); //#15775
    $_.weighty = $a(); //#15775
    $k[$j++] = Infinity; //#15776
    var _4g = $k[--$j]; //#15776
    var _4i = $geti($k[--$j], 2, 32); //#15776
    $k[$j++] = _4g; //#15776
    $k[$j++] = 38; //#15776
    $aload(_4i); //#15776
    $_.weightz = $a(); //#15776
    $_.calccheck = function() {
        $_.weights = $k[--$j]; //#15779
        $_.score = 0; //#15780
        for (var _4o = 0, _4n = (~~((($_.r - 1) * 8) / 2)) - 1; _4o <= _4n; _4o += 1) { //#15785
            $_.i = _4o; //#15782
            $_.score = $f(($get($_.ccs, $_.i * 2) * 49 + $get($_.ccs, $_.i * 2 + 1)) * $get($_.weights, $_.i + 1) + $_.score); //#15784
        } //#15784
        $k[$j++] = $_.score; //#15786
    }; //#15786
    $_.lastrow = $geti($_.ccs, $_.ccs.length - 8, 8); //#15788
    if ($_.r >= 7) { //#15795
        $k[$j++] = $_.cr7 * $get($_.weightz, 0); //#15792
        $k[$j++] = $_.weightz; //#15792
        $_.calccheck(); //#15792
        var _58 = $k[--$j]; //#15792
        var _5A = $f($k[--$j] + _58) % 2401; //#15793
        $k[$j++] = ~~(_5A / 49); //#15793
        $k[$j++] = _5A % 49; //#15793
        $astore($a(2)); //#15793
        $k[$j++] = $_.lastrow; //#15794
        $k[$j++] = 0; //#15794
        var _5D = $k[$j - 3]; //#15794
        var _5E = $k[$j - 1]; //#15794
        $puti($k[$j - 2], _5E, _5D); //#15794
        $j -= 3; //#15794
    } //#15794
    $_.wr1 = $f(($get($_.lastrow, 0) * 49) + $get($_.lastrow, 1)); //#15796
    $k[$j++] = $_.cr7 * $get($_.weighty, 0); //#15799
    $k[$j++] = $_.weighty; //#15799
    $_.calccheck(); //#15799
    var _5O = $k[--$j]; //#15799
    var _5U = $f($k[--$j] + _5O + $_.wr1 * $get($_.weighty, $_.r * 4 - 3)) % 2401;; //#15801
    $_.wr2 = _5U; //#15801
    $k[$j++] = ~~(_5U / 49); //#15802
    $k[$j++] = _5U % 49; //#15802
    $astore($a(2)); //#15802
    $k[$j++] = $_.lastrow; //#15803
    $k[$j++] = 2; //#15803
    var _5X = $k[$j - 3]; //#15803
    var _5Y = $k[$j - 1]; //#15803
    $puti($k[$j - 2], _5Y, _5X); //#15803
    $j -= 3; //#15803
    $k[$j++] = $_.cr7 * $get($_.weightx, 0); //#15806
    $k[$j++] = $_.weightx; //#15806
    $_.calccheck(); //#15806
    var _5e = $k[--$j]; //#15806
    var _5o = $f($k[--$j] + _5e + $_.wr1 * $get($_.weightx, $_.r * 4 - 3) + $_.wr2 * $get($_.weightx, $_.r * 4 - 2)) % 2401;; //#15810
    $k[$j++] = ~~(_5o / 49); //#15810
    $k[$j++] = _5o % 49; //#15810
    $astore($a(2)); //#15810
    $k[$j++] = $_.lastrow; //#15811
    $k[$j++] = 4; //#15811
    var _5r = $k[$j - 3]; //#15811
    var _5s = $k[$j - 1]; //#15811
    $puti($k[$j - 2], _5s, _5r); //#15811
    $j -= 3; //#15811
    var _5w = $geti($_.ccs, $_.ccs.length - 8, 7); //#15814
    $k[$j++] = 0; //#15814
    for (var _5x = 0, _5y = _5w.length; _5x < _5y; _5x++) { //#15814
        var _60 = $k[--$j]; //#15814
        $k[$j++] = $f(_60 + $get(_5w, _5x)); //#15814
    } //#15814
    $put($_.ccs, $_.ccs.length - 1, $k[--$j] % 49); //#15815
    var _65 = $get($_.options, 'debugcws') !== undefined; //#15817
    if (_65) { //#15817
        $k[$j++] = 'bwipp.debugcws#15817'; //#15817
        $k[$j++] = $_.ccs; //#15817
        bwipp_raiseerror(); //#15817
    } //#15817
    $_.patterns = $a([$a(["11521132", "25112131", "14212132", "25121221", "14221222", "12412132", "23321221", "12421222", "21521221", "15112222", "15121312", "13312222", "24221311", "13321312", "11512222", "22421311", "11521312", "25112311", "14212312", "23312311", "12412312", "21512311", "16121131", "14321131", "12521131", "15212131", "15221221", "13412131", "13421221", "11612131", "16112221", "16121311", "14312221", "14321311", "12512221", "12521311", "15212311", "13412311", "11612311", "11131135", "31131133", "51131131", "21122134", "41122132", "21131224", "41131222", "11113135", "31113133", "51113131", "11122225", "31122223", "51122221", "11131315", "31131313", "51131311", "21113224", "41113222", "21122314", "41122312", "11113315", "31113313", "51113311", "12131134", "32131132", "21231133", "41231131", "22122133", "42122131", "11222134", "22131223", "42131221", "11231224", "31231222", "12113134", "32113132", "12122224", "32122222", "12131314", "32131312", "21231313", "41231311", "22113223", "42113221", "11213224", "22122313", "42122311", "11222314", "31222312", "12113314", "32113312", "21213313", "41213311", "13131133", "33131131", "22231132", "11331133", "31331131", "23122132", "12222133", "23131222", "12231223", "32231221", "21331222", "13113133", "33113131", "13122223", "33122221", "11313133", "13131313", "33131311", "11322223", "22231312", "11331313", "31331311", "23113222", "12213223", "23122312", "12222313", "32222311", "21322312", "13113313", "33113311", "22213312", "11313313", "31313311", "14131132", "23231131", "12331132", "21431131", "24122131", "13222132", "24131221", "13231222", "11422132", "22331221", "11431222", "14113132", "14122222", "12313132", "14131312", "12322222", "23231311", "12331312", "21431311", "24113221", "13213222", "24122311", "13222312", "11413222", "22322311", "11422312", "14113312", "23213311", "12313312", "21413311", "15131131", "13331131", "14222131", "14231221", "12422131", "12431221", "15113131", "15122221", "13313131", "15131311", "13322221", "11513131", "13331311", "11522221", "14213221", "14222311", "12413221", "12422311", "15113311", "13313311", "11513311", "11141134", "31141132", "21132133", "41132131", "21141223", "41141221", "11123134", "31123132", "11132224", "31132222", "11141314", "31141312", "21114133", "41114131", "21123223", "41123221", "21132313", "41132311", "11114224", "31114222", "11123314", "31123312", "21114313", "41114311", "12141133", "32141131", "21241132", "22132132", "11232133", "22141222", "11241223", "31241221", "12123133", "32123131", "12132223", "32132221", "12141313", "32141311", "21241312", "22114132", "11214133", "22123222", "11223223", "22132312", "11232313", "31232311", "12114223", "32114221", "12123313", "32123311", "21223312", "22114312", "11214313", "31214311", "13141132", "22241131", "11341132", "23132131", "12232132", "23141221", "12241222", "21341221", "13123132", "13132222", "11323132", "13141312", "11332222", "22241311", "11341312", "23114131", "12214132", "23123221", "12223222", "23132311", "12232312", "21332311", "13114222", "13123312", "11314222", "22223311", "11323312", "23114311", "12214312", "21314311", "14141131", "12341131", "13232131", "13241221", "11432131", "14123131", "14132221", "12323131", "14141311", "12332221", "12341311", "13214131", "13223221", "11414131", "13232311", "11423221", "11432311", "14114221", "14123311", "12314221", "12323311", "13214311", "11414311", "11151133", "31151131", "21142132", "21151222", "11133133", "31133131", "11142223", "31142221", "11151313", "31151311", "21124132", "21133222", "21142312", "11115133", "31115131", "11124223", "31124221", "11133313", "31133311", "21115222", "21124312", "12151132", "21251131", "22142131", "11242132", "22151221", "11251222", "12133132", "12142222", "12151312", "21251311", "22124131", "11224132", "22133221", "11233222", "22142311", "11242312", "12115132", "12124222", "12133312", "21233311", "22115221", "11215222", "22124311", "11224312", "13151131", "12242131", "12251221", "13133131", "13142221", "11333131", "13151311", "11342221", "12224131", "12233221", "12242311", "13115131", "13124221", "11315131", "13133311", "11324221", "11333311", "12215221", "12224311", "11161132", "21152131", "21161221", "11143132", "11152222", "11161312", "21134131", "21143221", "21152311", "11125132", "11134222", "11143312", "21116131", "21125221", "21134311", "12161131", "11252131", "12143131", "12152221", "12161311", "11234131", "11243221", "11252311", "12125131", "12134221", "12143311", "11216131", "11225221", "11234311", "11111236", "31111234", "51111232", "21111325", "41111323", "61111321", "11111416", "31111414", "51111412", "31211143", "51211141", "12111235", "32111233", "52111231", "21211234", "41211232", "22111324", "42111322", "11211325", "31211323", "51211321", "12111415", "32111413", "52111411", "21211414", "41211412", "12211144", "32211142", "21311143", "41311141", "13111234", "33111232", "22211233", "42211231", "11311234", "31311232", "23111323", "43111321", "12211324", "32211322", "21311323", "41311321", "13111414", "33111412", "22211413", "42211411", "11311414", "31311412", "13211143", "33211141", "22311142", "11411143", "31411141", "14111233", "34111231", "23211232", "12311233", "32311231", "21411232", "24111322", "13211323", "33211321", "22311322", "11411323", "31411321", "14111413", "34111411", "23211412", "12311413", "32311411", "21411412", "14211142", "23311141", "12411142", "21511141", "15111232", "24211231", "13311232", "22411231", "11511232", "25111321", "14211322", "23311321", "12411322", "21511321", "15111412", "24211411", "13311412", "22411411", "11511412", "15211141", "13411141", "11611141", "16111231", "14311231", "12511231", "15211321", "13411321", "11611321", "16111411", "14311411", "12511411", "21121144", "41121142", "11112145", "31112143", "51112141", "11121235", "31121233", "51121231", "21112234", "41112232", "21121324", "41121322", "11112325", "31112323", "51112321", "11121415", "31121413", "51121411", "21112414", "41112412", "22121143", "42121141", "11221144", "31221142", "12112144", "32112142", "12121234", "32121232", "21221233", "41221231", "22112233", "42112231", "11212234", "22121323", "42121321", "11221324", "31221322", "12112324", "32112322", "12121414", "32121412", "21221413", "41221411", "22112413", "42112411", "11212414", "31212412", "23121142", "12221143", "32221141", "21321142", "13112143", "33112141", "13121233", "33121231", "11312143", "22221232", "11321233", "31321231", "23112232", "12212233", "23121322", "12221323", "32221321", "21321322", "13112323", "33112321", "13121413", "33121411", "11312323", "22221412", "11321413", "31321411", "23112412", "12212413", "32212411", "21312412", "24121141", "13221142", "22321141", "11421142", "14112142", "14121232", "12312142", "23221231", "12321232", "21421231", "24112231", "13212232", "24121321", "13221322", "11412232", "22321321", "11421322", "14112322", "14121412", "12312322", "23221411", "12321412", "21421411", "24112411", "13212412", "22312411", "11412412", "14221141", "12421141", "15112141", "15121231", "13312141", "13321231", "11512141", "11521231", "14212231", "14221321", "12412231", "12421321", "15112321", "15121411", "13312321", "13321411", "11512321", "11521411", "14212411", "12412411", "21131143", "41131141", "11122144", "31122142", "11131234", "31131232", "21113143", "41113141", "21122233", "41122231", "21131323", "41131321", "11113234", "31113232", "11122324", "31122322", "11131414", "31131412", "21113323", "41113321", "21122413", "41122411", "11113414", "31113412", "22131142", "11231143", "31231141", "12122143", "32122141", "12131233", "32131231", "21231232", "22113142", "11213143", "22122232", "11222233", "22131322", "11231323", "31231321", "12113233", "32113231", "12122323", "32122321", "12131413", "32131411", "21231412", "22113322", "11213323", "22122412", "11222413", "31222411", "12113413", "32113411", "21213412", "23131141", "12231142", "21331141", "13122142", "13131232", "11322142", "22231231", "11331232", "23113141", "12213142", "23122231", "12222232", "23131321", "12231322", "21331321", "13113232", "13122322", "11313232", "13131412", "11322322", "22231411", "11331412", "23113321", "12213322", "23122411", "12222412", "21322411", "13113412", "22213411", "11313412", "13231141", "11431141", "14122141", "14131231", "12322141", "12331231", "13213141", "13222231", "11413141", "13231321", "11422231", "11431321", "14113231", "14122321", "12313231", "14131411", "12322321", "12331411", "13213321", "13222411", "11413321", "11422411", "14113411", "12313411", "21141142", "11132143", "31132141", "11141233", "31141231", "21123142", "21132232", "21141322", "11114143", "31114141", "11123233", "31123231", "11132323", "31132321", "11141413", "31141411", "21114232", "21123322", "21132412", "11114323", "31114321", "11123413", "31123411", "22141141", "11241142", "12132142", "12141232", "21241231", "22123141", "11223142", "22132231", "11232232", "22141321", "11241322", "12114142", "12123232", "12132322", "12141412", "21241411", "22114231", "11214232", "22123321", "11223322", "22132411", "11232412", "12114322", "12123412", "21223411", "12241141", "13132141", "13141231", "11332141", "11341231", "12223141", "12232231", "12241321", "13114141", "13123231", "11314141", "13132321", "11323231", "13141411", "11332321", "11341411", "12214231", "12223321", "12232411", "13114321", "13123411", "11314321", "11323411", "21151141", "11142142", "11151232", "21133141", "21142231", "21151321", "11124142", "11133232", "11142322", "11151412", "21115141", "21124231", "21133321", "21142411", "11115232", "11124322", "11133412", "11251141", "12142141", "12151231", "11233141", "11242231", "11251321", "12124141", "12133231", "12142321", "12151411", "11215141", "11224231", "11233321", "11242411", "12115231", "12124321", "12133411", "11152141", "11161231", "11134141", "11143231", "11152321", "11161411", "11116141", "11125231", "11134321", "11143411", "21111244", "41111242", "11111335", "31111333", "51111331", "21111424", "41111422", "11111515", "31111513", "51111511", "21211153", "41211151", "22111243", "42111241", "11211244", "31211242", "12111334", "32111332", "21211333", "41211331", "22111423", "42111421", "11211424", "31211422", "12111514", "32111512", "21211513", "41211511", "22211152", "11311153", "31311151", "23111242", "12211243", "32211241", "21311242", "13111333", "33111331", "22211332", "11311333", "31311331", "23111422", "12211423", "32211421", "21311422", "13111513", "33111511", "22211512", "11311513", "31311511", "23211151", "12311152", "21411151", "24111241", "13211242", "22311241", "11411242", "14111332", "23211331", "12311332", "21411331", "24111421", "13211422", "22311421", "11411422", "14111512", "23211511", "12311512", "21411511", "13311151", "11511151", "14211241", "12411241", "15111331", "13311331", "11511331", "14211421", "12411421", "15111511", "13311511", "11511511", "31121152", "21112153", "41112151", "21121243", "41121241", "11112244", "31112242", "11121334", "31121332", "21112333", "41112331", "21121423", "41121421", "11112424", "31112422", "11121514", "31121512", "21112513", "41112511", "12121153", "32121151", "21221152", "22112152", "11212153", "22121242", "11221243", "31221241", "12112243", "32112241", "12121333", "32121331", "21221332", "22112332", "11212333", "22121422", "11221423", "31221421", "12112423", "32112421", "12121513", "32121511", "21221512", "22112512", "11212513", "31212511", "13121152", "22221151", "11321152", "23112151", "12212152", "23121241", "12221242", "21321241", "13112242", "13121332", "11312242", "22221331", "11321332", "23112331", "12212332", "23121421", "12221422", "21321421", "13112422", "13121512", "11312422", "22221511", "11321512", "23112511", "12212512", "21312511", "14121151", "12321151", "13212151", "13221241", "11412151", "11421241", "14112241", "14121331", "12312241", "12321331", "13212331", "13221421", "11412331", "11421421", "14112421", "14121511", "12312421", "12321511", "13212511", "11412511", "11131153", "31131151", "21122152", "21131242", "11113153", "31113151", "11122243", "31122241", "11131333", "31131331", "21113242", "21122332", "21131422", "11113333", "31113331", "11122423", "31122421", "11131513", "31131511", "21113422", "21122512", "12131152", "21231151", "22122151", "11222152", "22131241", "11231242", "12113152", "12122242", "12131332", "21231331", "22113241", "11213242", "22122331", "11222332", "22131421", "11231422", "12113332", "12122422", "12131512", "21231511", "22113421", "11213422", "22122511", "11222512", "13131151", "11331151", "12222151", "12231241", "13113151", "13122241", "11313151", "13131331", "11322241", "11331331", "12213241", "12222331", "12231421", "13113331", "13122421", "11313331", "13131511", "11322421", "11331511", "12213421", "12222511", "11141152", "21132151", "21141241", "11123152", "11132242", "11141332", "21114151", "21123241", "21132331", "21141421", "11114242", "11123332", "11132422", "11141512", "21114331", "21123421", "21132511", "12141151", "11232151", "11241241", "12123151", "12132241", "12141331", "11214151", "11223241", "11232331", "11241421", "12114241", "12123331", "12132421", "12141511", "11214331", "11223421", "11232511", "11151151", "11133151", "11142241", "11151331", "11115151", "11124241", "11133331", "11142421", "11151511", "11111254", "31111252", "21111343", "41111341", "11111434", "31111432", "21111523", "41111521", "11111614", "31111612", "31211161", "12111253", "32111251", "21211252", "22111342", "11211343", "31211341", "12111433", "32111431", "21211432", "22111522", "11211523", "31211521", "12111613", "32111611", "21211612", "12211162", "21311161", "13111252", "22211251", "11311252", "23111341", "12211342", "21311341", "13111432", "22211431", "11311432", "23111521", "12211522", "21311521", "13111612", "22211611", "11311612", "13211161", "11411161", "14111251", "12311251", "13211341", "11411341", "14111431", "12311431", "13211521", "11411521", "14111611", "12311611", "21121162", "11112163", "31112161", "11121253", "31121251", "21112252", "21121342", "11112343", "31112341", "11121433", "31121431", "21112432", "21121522", "11112523", "31112521", "11121613", "31121611", "22121161", "11221162", "12112162", "12121252", "21221251", "22112251", "11212252", "22121341", "11221342", "12112342", "12121432", "21221431", "22112431", "11212432", "22121521", "11221522", "12112522", "12121612", "21221611", "12221161", "13112161", "13121251", "11312161", "11321251", "32121115", "52121113", "21221116", "41221114", "61221112", "22112116", "42112114", "31212115", "51212113", "13121116", "33121114", "22221115", "42221113", "11321116", "31321114", "51321112", "23112115", "43112113", "12212116", "32212114", "52212112", "21312115", "41312113", "61312111", "14121115", "34121113", "23221114", "43221112", "12321115", "32321113", "52321111", "21421114", "41421112", "24112114", "13212115", "33212113", "22312114", "42312112", "11412115", "31412113", "51412111", "15121114", "24221113", "13321114", "33321112", "22421113", "42421111", "11521114", "31521112", "25112113", "14212114", "34212112", "23312113", "43312111", "12412114", "32412112", "21512113", "41512111", "16121113", "25221112", "14321113", "34321111", "23421112", "12521113", "32521111", "15212113", "24312112", "13412113", "33412111", "22512112", "11612113", "31612111", "31131115", "51131113", "21122116", "41122114", "61122112", "31113115", "51113113", "12131116", "32131114", "52131112", "21231115", "41231113", "61231111", "22122115", "42122113", "11222116", "31222114", "51222112", "12113116", "32113114", "52113112", "21213115", "41213113", "61213111", "13131115", "33131113", "22231114", "42231112", "11331115", "31331113", "51331111", "23122114", "43122112", "12222115", "32222113", "52222111", "21322114", "41322112", "13113115", "33113113", "22213114", "42213112", "11313115", "31313113", "51313111", "14131114", "34131112", "23231113", "43231111", "12331114", "32331112", "21431113", "41431111", "24122113", "13222114", "33222112", "22322113", "42322111", "11422114", "31422112", "14113114", "34113112", "23213113", "43213111", "12313114", "32313112", "21413113", "41413111", "15131113", "24231112", "13331113", "33331111", "22431112", "25122112", "14222113", "34222111", "23322112", "12422113", "32422111", "21522112", "15113113", "24213112", "13313113", "33313111", "22413112", "11513113", "31513111", "16131112", "25231111", "14331112", "23431111", "15222112", "24322111", "13422112", "22522111", "16113112", "25213111", "14313112", "23413111", "12513112", "21613111", "11141116", "31141114", "51141112", "21132115", "41132113", "61132111", "11123116", "31123114", "51123112", "21114115", "41114113", "61114111", "12141115", "32141113", "52141111", "21241114", "41241112", "22132114", "42132112", "11232115", "31232113", "51232111", "12123115", "32123113", "52123111", "21223114", "41223112", "22114114", "42114112", "11214115", "31214113", "51214111", "13141114", "33141112", "22241113", "42241111", "11341114", "31341112", "23132113", "43132111", "12232114", "32232112", "21332113", "41332111", "13123114", "33123112", "22223113", "42223111", "11323114", "31323112", "23114113", "43114111", "12214114", "32214112", "21314113", "41314111", "14141113", "34141111", "23241112", "12341113", "32341111", "24132112", "13232113", "33232111", "22332112", "11432113", "31432111", "14123113", "34123111", "23223112", "12323113", "32323111", "21423112", "24114112", "13214113", "33214111", "22314112", "11414113", "31414111", "15141112", "24241111", "13341112", "25132111", "14232112", "23332111", "12432112", "15123112", "24223111", "13323112", "22423111", "11523112", "25114111", "14214112", "23314111", "12414112", "21514111", "16141111", "14341111", "15232111", "13432111", "16123111", "14323111", "12523111", "15214111", "13414111", "11614111", "11151115", "31151113", "51151111", "21142114", "41142112", "11133115", "31133113", "51133111", "21124114", "41124112", "11115115", "31115113", "51115111", "12151114", "32151112", "21251113", "41251111", "22142113", "42142111", "11242114", "31242112", "12133114", "32133112", "21233113", "41233111", "22124113", "42124111", "11224114", "31224112", "12115114", "32115112", "21215113", "41215111", "13151113", "33151111", "22251112", "23142112", "12242113", "32242111", "21342112", "13133113", "33133111", "22233112", "11333113", "31333111", "23124112", "12224113", "32224111", "21324112", "13115113", "33115111", "22215112", "11315113", "31315111", "14151112", "23251111", "24142111", "13242112", "22342111", "14133112", "23233111", "12333112", "21433111", "24124111", "13224112", "22324111", "11424112", "14115112", "23215111", "12315112", "21415111", "15151111", "14242111", "15133111", "13333111", "14224111", "12424111", "15115111", "13315111", "11515111", "11161114", "31161112", "21152113", "41152111", "11143114", "31143112", "21134113", "41134111", "11125114", "31125112", "21116113", "41116111", "12161113", "32161111", "22152112", "11252113", "31252111", "12143113", "32143111", "21243112", "22134112", "11234113", "31234111", "12125113", "32125111", "21225112", "22116112", "11216113", "31216111", "13161112", "23152111", "12252112", "13143112", "22243111", "11343112", "23134111", "12234112", "21334111", "13125112", "22225111", "11325112", "23116111", "12216112", "21316111", "14161111", "13252111", "14143111", "12343111", "13234111", "11434111", "14125111", "12325111", "13216111", "11416111", "31111216", "51111214", "31211125", "51211123", "32111215", "52111213", "21211216", "41211214", "61211212", "12211126", "32211124", "52211122", "21311125", "41311123", "61311121", "13111216", "33111214", "22211215", "42211213", "11311216", "31311214", "51311212", "13211125", "33211123", "22311124", "42311122", "11411125", "31411123", "51411121", "14111215", "34111213", "23211214", "43211212", "12311215", "32311213", "52311211", "21411214", "41411212", "14211124", "34211122", "23311123", "43311121", "12411124", "32411122", "21511123", "41511121", "15111214", "24211213", "13311214", "33311212", "22411213", "42411211", "11511214", "31511212", "15211123", "24311122", "13411123", "33411121", "22511122", "11611123", "31611121", "16111213", "25211212", "14311213", "34311211", "23411212", "12511213", "32511211", "21611212", "21121126", "41121124", "61121122", "31112125", "51112123", "31121215", "51121213", "21112216", "41112214", "61112212", "22121125", "42121123", "11221126", "31221124", "51221122", "12112126", "32112124", "52112122", "12121216", "32121214", "52121212", "21221215", "41221213", "61221211", "22112215", "42112213", "11212216", "31212214", "51212212", "23121124", "43121122", "12221125", "32221123", "52221121", "21321124", "41321122", "13112125", "33112123", "13121215", "33121213", "11312125", "22221214", "42221212", "11321215", "31321213", "51321211", "23112214", "43112212", "12212215", "32212213", "52212211", "21312214", "41312212", "24121123", "13221124", "33221122", "22321123", "42321121", "11421124", "31421122", "14112124", "34112122", "14121214", "34121212", "12312124", "23221213", "43221211", "12321214", "32321212", "21421213", "41421211", "24112213", "13212214", "33212212", "22312213", "42312211", "11412214", "31412212", "25121122", "14221123", "34221121", "23321122", "12421123", "32421121", "21521122", "15112123", "15121213", "13312123", "24221212", "13321213", "33321211", "11512123", "22421212", "11521213", "31521211", "25112212", "14212213", "34212211", "23312212", "12412213", "32412211", "21512212", "15221122", "24321121", "13421122", "22521121", "16112122", "16121212", "14312122", "25221211", "14321212", "12512122", "23421211", "12521212", "15212212", "24312211", "13412212", "22512211", "11612212", "21131125", "41131123", "61131121", "11122126", "31122124", "51122122", "11131216", "31131214", "51131212", "21113125", "41113123", "61113121", "21122215", "41122213", "61122211", "11113216", "31113214", "51113212", "22131124", "42131122", "11231125", "31231123", "51231121", "12122125", "32122123", "52122121", "12131215", "32131213", "52131211", "21231214", "41231212", "22113124", "42113122", "11213125", "22122214", "42122212", "11222215", "31222213", "51222211", "12113215", "32113213", "52113211", "21213214", "41213212", "23131123", "43131121", "12231124", "32231122", "21331123", "41331121", "13122124", "33122122", "13131214", "33131212", "11322124", "22231213", "42231211", "11331214", "31331212", "23113123", "43113121", "12213124", "23122213", "43122211", "12222214", "32222212", "21322213", "41322211", "13113214", "33113212", "22213213", "42213211", "11313214", "31313212", "24131122", "13231123", "33231121", "22331122", "11431123", "31431121", "14122123", "34122121", "14131213", "34131211", "12322123", "23231212", "12331213", "32331211", "21431212", "24113122", "13213123", "24122212", "13222213", "33222211", "11413123", "22322212", "11422213", "31422211", "14113213", "34113211", "23213212", "12313213", "32313211", "21413212", "25131121", "14231122", "23331121", "12431122", "15122122", "15131212", "13322122", "24231211", "13331212", "11522122", "22431211", "25113121", "14213122", "25122211", "14222212", "12413122", "23322211", "12422212", "21522211", "15113212", "24213211", "13313212", "22413211", "11513212", "15231121", "13431121", "16122121", "16131211", "14322121", "14331211", "12522121", "15213121", "15222211", "13413121", "13422211", "11613121", "16113211", "14313211", "12513211", "21141124", "41141122", "11132125", "31132123", "51132121", "11141215", "31141213", "51141211", "21123124", "41123122", "21132214", "41132212", "11114125", "31114123", "51114121", "11123215", "31123213", "51123211", "21114214", "41114212", "22141123", "42141121", "11241124", "31241122", "12132124", "32132122", "12141214", "32141212", "21241213", "41241211", "22123123", "42123121", "11223124", "22132213", "42132211", "11232214", "31232212", "12114124", "32114122", "12123214", "32123212", "21223213", "41223211", "22114213", "42114211", "11214214", "31214212", "23141122", "12241123", "32241121", "21341122", "13132123", "33132121", "13141213", "33141211", "11332123", "22241212", "11341213", "31341211", "23123122", "12223123", "23132212", "12232213", "32232211", "21332212", "13114123", "33114121", "13123213", "33123211", "11314123", "22223212", "11323213", "31323211", "23114212", "12214213", "32214211", "21314212", "24141121", "13241122", "22341121", "14132122", "14141212", "12332122", "23241211", "12341212", "24123121", "13223122", "24132211", "13232212", "11423122", "22332211", "11432212", "14114122", "14123212", "12314122", "23223211", "12323212", "21423211", "24114211", "13214212", "22314211", "11414212", "14241121", "15132121", "15141211", "13332121", "13341211", "14223121", "14232211", "12423121", "12432211", "15114121", "15123211", "13314121", "13323211", "11514121", "11523211", "14214211", "12414211", "21151123", "41151121", "11142124", "31142122", "11151214", "31151212", "21133123", "41133121", "21142213", "41142211", "11124124", "31124122", "11133214", "31133212", "21115123", "41115121", "21124213", "41124211", "11115214", "31115212", "22151122", "11251123", "31251121", "12142123", "32142121", "12151213", "32151211", "21251212", "22133122", "11233123", "22142212", "11242213", "31242211", "12124123", "32124121", "12133213", "32133211", "21233212", "22115122", "11215123", "22124212", "11224213", "31224211", "12115213", "32115211", "21215212", "23151121", "12251122", "13142122", "13151212", "11342122", "22251211", "23133121", "12233122", "23142211", "12242212", "21342211", "13124122", "13133212", "11324122", "22233211", "11333212", "23115121", "12215122", "23124211", "12224212", "21324211", "13115212", "22215211", "11315212", "13251121", "14142121", "14151211", "12342121", "13233121", "13242211", "11433121", "14124121", "14133211", "12324121", "12333211", "13215121", "13224211", "11415121", "11424211", "14115211", "12315211", "21161122", "11152123", "31152121", "11161213", "31161211", "21143122", "21152212", "11134123", "31134121", "11143213", "31143211", "21125122", "21134212", "11116123", "31116121", "11125213", "31125211", "22161121", "12152122", "12161212", "22143121", "11243122", "22152211", "11252212", "12134122", "12143212", "21243211", "22125121", "11225122", "22134211", "11234212", "12116122", "12125212", "21225211", "13152121", "13161211", "12243121", "12252211", "13134121", "13143211", "11334121", "11343211", "12225121", "12234211", "13116121", "13125211", "11316121", "11325211", "21111226", "41111224", "61111222", "31111315", "51111313", "21211135", "41211133", "61211131", "22111225", "42111223", "11211226", "31211224", "51211222", "12111316", "32111314", "52111312", "21211315", "41211313", "61211311", "22211134", "42211132", "11311135", "31311133", "51311131", "23111224", "43111222", "12211225", "32211223", "52211221", "21311224", "41311222", "13111315", "33111313", "22211314", "42211312", "11311315", "31311313", "51311311", "23211133", "43211131", "12311134", "32311132", "21411133", "41411131", "24111223", "13211224", "33211222", "22311223", "42311221", "11411224", "31411222", "14111314", "34111312", "23211313", "43211311", "12311314", "32311312", "21411313", "41411311", "24211132", "13311133", "33311131", "22411132", "11511133", "31511131", "25111222", "14211223", "34211221", "23311222", "12411223", "32411221", "21511222", "15111313", "24211312", "13311313", "33311311", "22411312", "11511313", "31511311", "25211131", "14311132", "23411131", "12511132", "21611131", "15211222", "24311221", "13411222", "22511221", "11611222", "16111312", "25211311", "14311312", "23411311", "12511312", "21611311", "31121134", "51121132", "21112135", "41112133", "61112131", "21121225", "41121223", "61121221", "11112226", "31112224", "51112222", "11121316", "31121314", "51121312", "21112315", "41112313", "61112311", "12121135", "32121133", "52121131", "21221134", "41221132", "22112134", "42112132", "11212135", "22121224", "42121222", "11221225", "31221223", "51221221", "12112225", "32112223", "52112221", "12121315", "32121313", "52121311", "21221314", "41221312", "22112314", "42112312", "11212315", "31212313", "51212311", "13121134", "33121132", "22221133", "42221131", "11321134", "31321132", "23112133", "43112131", "12212134", "23121223", "43121221", "12221224", "32221222", "21321223", "41321221", "13112224", "33112222", "13121314", "33121312", "11312224", "22221313", "42221311", "11321314", "31321312", "23112313", "43112311", "12212314", "32212312", "21312313", "41312311", "14121133", "34121131", "23221132", "12321133", "32321131", "21421132", "24112132", "13212133", "24121222", "13221223", "33221221", "11412133", "22321222", "11421223", "31421221", "14112223", "34112221", "14121313", "34121311", "12312223", "23221312", "12321313", "32321311", "21421312", "24112312", "13212313", "33212311", "22312312", "11412313", "31412311", "15121132", "24221131", "13321132", "22421131"]), $a(["22121116", "42121114", "31221115", "51221113", "32112115", "52112113", "21212116", "41212114", "61212112", "23121115", "43121113", "12221116", "32221114", "52221112", "21321115", "41321113", "61321111", "13112116", "33112114", "22212115", "42212113", "11312116", "31312114", "51312112", "24121114", "13221115", "33221113", "22321114", "42321112", "11421115", "31421113", "51421111", "14112115", "34112113", "23212114", "43212112", "12312115", "32312113", "52312111", "21412114", "41412112", "25121113", "14221114", "34221112", "23321113", "43321111", "12421114", "32421112", "21521113", "41521111", "15112114", "24212113", "13312114", "33312112", "22412113", "42412111", "11512114", "31512112", "15221113", "24321112", "13421113", "33421111", "22521112", "16112113", "25212112", "14312113", "34312111", "23412112", "12512113", "32512111", "21612112", "21131116", "41131114", "61131112", "31122115", "51122113", "21113116", "41113114", "61113112", "22131115", "42131113", "11231116", "31231114", "51231112", "12122116", "32122114", "52122112", "21222115", "41222113", "61222111", "22113115", "42113113", "11213116", "31213114", "51213112", "23131114", "43131112", "12231115", "32231113", "52231111", "21331114", "41331112", "13122115", "33122113", "22222114", "42222112", "11322115", "31322113", "51322111", "23113114", "43113112", "12213115", "32213113", "52213111", "21313114", "41313112", "24131113", "13231114", "33231112", "22331113", "42331111", "11431114", "31431112", "14122114", "34122112", "23222113", "43222111", "12322114", "32322112", "21422113", "41422111", "24113113", "13213114", "33213112", "22313113", "42313111", "11413114", "31413112", "25131112", "14231113", "34231111", "23331112", "12431113", "32431111", "15122113", "24222112", "13322113", "33322111", "22422112", "11522113", "31522111", "25113112", "14213113", "34213111", "23313112", "12413113", "32413111", "21513112", "15231112", "24331111", "13431112", "16122112", "25222111", "14322112", "23422111", "12522112", "15213112", "24313111", "13413112", "22513111", "11613112", "21141115", "41141113", "61141111", "11132116", "31132114", "51132112", "21123115", "41123113", "61123111", "11114116", "31114114", "51114112", "22141114", "42141112", "11241115", "31241113", "51241111", "12132115", "32132113", "52132111", "21232114", "41232112", "22123114", "42123112", "11223115", "31223113", "51223111", "12114115", "32114113", "52114111", "21214114", "41214112", "23141113", "43141111", "12241114", "32241112", "21341113", "41341111", "13132114", "33132112", "22232113", "42232111", "11332114", "31332112", "23123113", "43123111", "12223114", "32223112", "21323113", "41323111", "13114114", "33114112", "22214113", "42214111", "11314114", "31314112", "24141112", "13241113", "33241111", "22341112", "14132113", "34132111", "23232112", "12332113", "32332111", "21432112", "24123112", "13223113", "33223111", "22323112", "11423113", "31423111", "14114113", "34114111", "23214112", "12314113", "32314111", "21414112", "25141111", "14241112", "23341111", "15132112", "24232111", "13332112", "22432111", "25123111", "14223112", "23323111", "12423112", "21523111", "15114112", "24214111", "13314112", "22414111", "11514112", "15241111", "16132111", "14332111", "15223111", "13423111", "16114111", "14314111", "12514111", "21151114", "41151112", "11142115", "31142113", "51142111", "21133114", "41133112", "11124115", "31124113", "51124111", "21115114", "41115112", "22151113", "42151111", "11251114", "31251112", "12142114", "32142112", "21242113", "41242111", "22133113", "42133111", "11233114", "31233112", "12124114", "32124112", "21224113", "41224111", "22115113", "42115111", "11215114", "31215112", "23151112", "12251113", "32251111", "13142113", "33142111", "22242112", "11342113", "31342111", "23133112", "12233113", "32233111", "21333112", "13124113", "33124111", "22224112", "11324113", "31324111", "23115112", "12215113", "32215111", "21315112", "24151111", "13251112", "14142112", "23242111", "12342112", "24133111", "13233112", "22333111", "11433112", "14124112", "23224111", "12324112", "21424111", "24115111", "13215112", "22315111", "11415112", "14251111", "15142111", "13342111", "14233111", "12433111", "15124111", "13324111", "11524111", "14215111", "12415111", "21161113", "41161111", "11152114", "31152112", "21143113", "41143111", "11134114", "31134112", "21125113", "41125111", "11116114", "31116112", "22161112", "12152113", "32152111", "21252112", "22143112", "11243113", "31243111", "12134113", "32134111", "21234112", "22125112", "11225113", "31225111", "12116113", "32116111", "21216112", "23161111", "13152112", "22252111", "23143111", "12243112", "21343111", "13134112", "22234111", "11334112", "23125111", "12225112", "21325111", "13116112", "22216111", "11316112", "14152111", "13243111", "14134111", "12334111", "13225111", "11425111", "14116111", "12316111", "41111215", "61111213", "21211126", "41211124", "61211122", "22111216", "42111214", "31211215", "51211213", "22211125", "42211123", "11311126", "31311124", "51311122", "23111215", "43111213", "12211216", "32211214", "52211212", "21311215", "41311213", "61311211", "23211124", "43211122", "12311125", "32311123", "52311121", "21411124", "41411122", "24111214", "13211215", "33211213", "22311214", "42311212", "11411215", "31411213", "51411211", "24211123", "13311124", "33311122", "22411123", "42411121", "11511124", "31511122", "25111213", "14211214", "34211212", "23311213", "43311211", "12411214", "32411212", "21511213", "41511211", "25211122", "14311123", "34311121", "23411122", "12511123", "32511121", "21611122", "15211213", "24311212", "13411213", "33411211", "22511212", "11611213", "31611211", "31121125", "51121123", "21112126", "41112124", "61112122", "21121216", "41121214", "61121212", "31112215", "51112213", "12121126", "32121124", "52121122", "21221125", "41221123", "61221121", "22112125", "42112123", "11212126", "22121215", "42121213", "11221216", "31221214", "51221212", "12112216", "32112214", "52112212", "21212215", "41212213", "61212211", "13121125", "33121123", "22221124", "42221122", "11321125", "31321123", "51321121", "23112124", "43112122", "12212125", "23121214", "43121212", "12221215", "32221213", "52221211", "21321214", "41321212", "13112215", "33112213", "22212214", "42212212", "11312215", "31312213", "51312211", "14121124", "34121122", "23221123", "43221121", "12321124", "32321122", "21421123", "41421121", "24112123", "13212124", "24121213", "13221214", "33221212", "11412124", "22321213", "42321211", "11421214", "31421212", "14112214", "34112212", "23212213", "43212211", "12312214", "32312212", "21412213", "41412211", "15121123", "24221122", "13321123", "33321121", "22421122", "11521123", "31521121", "25112122", "14212123", "25121212", "14221213", "34221211", "12412123", "23321212", "12421213", "32421211", "21521212", "15112213", "24212212", "13312213", "33312211", "22412212", "11512213", "31512211", "16121122", "25221121", "14321122", "23421121", "12521122", "15212122", "15221212", "13412122", "24321211", "13421212", "11612122", "22521211", "16112212", "25212211", "14312212", "23412211", "12512212", "21612211", "11131126", "31131124", "51131122", "21122125", "41122123", "61122121", "21131215", "41131213", "61131211", "11113126", "31113124", "51113122", "11122216", "31122214", "51122212", "21113215", "41113213", "61113211", "12131125", "32131123", "52131121", "21231124", "41231122", "22122124", "42122122", "11222125", "22131214", "42131212", "11231215", "31231213", "51231211", "12113125", "32113123", "52113121", "12122215", "32122213", "52122211", "21222214", "41222212", "22113214", "42113212", "11213215", "31213213", "51213211", "13131124", "33131122", "22231123", "42231121", "11331124", "31331122", "23122123", "43122121", "12222124", "23131213", "43131211", "12231214", "32231212", "21331213", "41331211", "13113124", "33113122", "13122214", "33122212", "11313124", "22222213", "42222211", "11322214", "31322212", "23113213", "43113211", "12213214", "32213212", "21313213", "41313211", "14131123", "34131121", "23231122", "12331123", "32331121", "21431122", "24122122", "13222123", "24131212", "13231213", "33231211", "11422123", "22331212", "11431213", "31431211", "14113123", "34113121", "14122213", "34122211", "12313123", "23222212", "12322213", "32322211", "21422212", "24113212", "13213213", "33213211", "22313212", "11413213", "31413211", "15131122", "24231121", "13331122", "22431121", "25122121", "14222122", "25131211", "14231212", "12422122", "23331211", "12431212", "15113122", "15122212", "13313122", "24222211", "13322212", "11513122", "22422211", "11522212", "25113211", "14213212", "23313211", "12413212", "21513211", "16131121", "14331121", "15222121", "15231211", "13422121", "13431211", "16113121", "16122211", "14313121", "14322211", "12513121", "12522211", "15213211", "13413211", "11613211", "11141125", "31141123", "51141121", "21132124", "41132122", "21141214", "41141212", "11123125", "31123123", "51123121", "11132215", "31132213", "51132211", "21114124", "41114122", "21123214", "41123212", "11114215", "31114213", "51114211", "12141124", "32141122", "21241123", "41241121", "22132123", "42132121", "11232124", "22141213", "42141211", "11241214", "31241212", "12123124", "32123122", "12132214", "32132212", "21232213", "41232211", "22114123", "42114121", "11214124", "22123213", "42123211", "11223214", "31223212", "12114214", "32114212", "21214213", "41214211", "13141123", "33141121", "22241122", "11341123", "31341121", "23132122", "12232123", "23141212", "12241213", "32241211", "21341212", "13123123", "33123121", "13132213", "33132211", "11323123", "22232212", "11332213", "31332211", "23114122", "12214123", "23123212", "12223213", "32223211", "21323212", "13114213", "33114211", "22214212", "11314213", "31314211", "14141122", "23241121", "12341122", "24132121", "13232122", "24141211", "13241212", "11432122", "22341211", "14123122", "14132212", "12323122", "23232211", "12332212", "21432211", "24114121", "13214122", "24123211", "13223212", "11414122", "22323211", "11423212", "14114212", "23214211", "12314212", "21414211", "15141121", "13341121", "14232121", "14241211", "12432121", "15123121", "15132211", "13323121", "13332211", "11523121", "14214121", "14223211", "12414121", "12423211", "15114211", "13314211", "11514211", "11151124", "31151122", "21142123", "41142121", "21151213", "41151211", "11133124", "31133122", "11142214", "31142212", "21124123", "41124121", "21133213", "41133211", "11115124", "31115122", "11124214", "31124212", "21115213", "41115211", "12151123", "32151121", "21251122", "22142122", "11242123", "22151212", "11251213", "31251211", "12133123", "32133121", "12142213", "32142211", "21242212", "22124122", "11224123", "22133212", "11233213", "31233211", "12115123", "32115121", "12124213", "32124211", "21224212", "22115212", "11215213", "31215211", "13151122", "22251121", "23142121", "12242122", "23151211", "12251212", "13133122", "13142212", "11333122", "22242211", "11342212", "23124121", "12224122", "23133211", "12233212", "21333211", "13115122", "13124212", "11315122", "22224211", "11324212", "23115211", "12215212", "21315211", "14151121", "13242121", "13251211", "14133121", "14142211", "12333121", "12342211", "13224121", "13233211", "11424121", "11433211", "14115121", "14124211", "12315121", "12324211", "13215211", "11415211", "11161123", "31161121", "21152122", "21161212", "11143123", "31143121", "11152213", "31152211", "21134122", "21143212", "11125123", "31125121", "11134213", "31134211", "21116122", "21125212", "12161122", "22152121", "11252122", "22161211", "12143122", "12152212", "21252211", "22134121", "11234122", "22143211", "11243212", "12125122", "12134212", "21234211", "22116121", "11216122", "22125211", "11225212", "13161121", "12252121", "13143121", "13152211", "11343121", "12234121", "12243211", "13125121", "13134211", "11325121", "11334211", "12216121", "12225211", "31111225", "51111223", "21111316", "41111314", "61111312", "31211134", "51211132", "12111226", "32111224", "52111222", "21211225", "41211223", "61211221", "22111315", "42111313", "11211316", "31211314", "51211312", "12211135", "32211133", "52211131", "21311134", "41311132", "13111225", "33111223", "22211224", "42211222", "11311225", "31311223", "51311221", "23111314", "43111312", "12211315", "32211313", "52211311", "21311314", "41311312", "13211134", "33211132", "22311133", "42311131", "11411134", "31411132", "14111224", "34111222", "23211223", "43211221", "12311224", "32311222", "21411223", "41411221", "24111313", "13211314", "33211312", "22311313", "42311311", "11411314", "31411312", "14211133", "34211131", "23311132", "12411133", "32411131", "21511132", "15111223", "24211222", "13311223", "33311221", "22411222", "11511223", "31511221", "25111312", "14211313", "34211311", "23311312", "12411313", "32411311", "21511312", "15211132", "24311131", "13411132", "22511131", "11611132", "16111222", "25211221", "14311222", "23411221", "12511222", "21611221", "15211312", "24311311", "13411312", "22511311", "11611312", "21121135", "41121133", "61121131", "11112136", "31112134", "51112132", "11121226", "31121224", "51121222", "21112225", "41112223", "61112221", "21121315", "41121313", "61121311", "11112316", "31112314", "51112312", "22121134", "42121132", "11221135", "31221133", "51221131", "12112135", "32112133", "52112131", "12121225", "32121223", "52121221", "21221224", "41221222", "22112224", "42112222", "11212225", "22121314", "42121312", "11221315", "31221313", "51221311", "12112315", "32112313", "52112311", "21212314", "41212312", "23121133", "43121131", "12221134", "32221132", "21321133", "41321131", "13112134", "33112132", "13121224", "33121222", "11312134", "22221223", "42221221", "11321224", "31321222", "23112223", "43112221", "12212224", "23121313", "43121311", "12221314", "32221312", "21321313", "41321311", "13112314", "33112312", "22212313", "42212311", "11312314", "31312312", "24121132", "13221133", "33221131", "22321132", "11421133", "31421131", "14112133", "34112131", "14121223", "34121221", "12312133", "23221222", "12321223", "32321221", "21421222", "24112222", "13212223", "24121312", "13221313", "33221311", "11412223", "22321312", "11421313", "31421311", "14112313", "34112311", "23212312", "12312313", "32312311", "21412312", "25121131", "14221132", "23321131", "12421132", "21521131", "15112132", "15121222", "13312132", "24221221", "13321222", "11512132", "22421221", "11521222", "25112221", "14212222", "25121311", "14221312", "12412222", "23321311", "12421312", "21521311", "15112312", "24212311", "13312312", "22412311", "11512312", "15221131", "13421131", "16112131", "16121221", "14312131", "14321221", "12512131", "12521221", "15212221", "15221311", "13412221", "13421311", "11612221", "16112311", "14312311", "12512311", "21131134", "41131132", "11122135", "31122133", "51122131", "11131225", "31131223", "51131221", "21113134", "41113132", "21122224", "41122222", "21131314", "41131312", "11113225", "31113223", "51113221", "11122315", "31122313", "51122311", "21113314", "41113312", "22131133", "42131131", "11231134", "31231132", "12122134", "32122132", "12131224", "32131222", "21231223", "41231221", "22113133", "42113131", "11213134", "22122223", "42122221", "11222224", "22131313", "42131311", "11231314", "31231312", "12113224", "32113222", "12122314", "32122312", "21222313", "41222311", "22113313", "42113311", "11213314", "31213312", "23131132", "12231133", "32231131", "21331132", "13122133", "33122131", "13131223", "33131221", "11322133", "22231222", "11331223", "31331221", "23113132", "12213133", "23122222", "12222223", "23131312", "12231313", "32231311", "21331312", "13113223", "33113221", "13122313", "33122311", "11313223", "22222312", "11322313", "31322311", "23113312", "12213313", "32213311", "21313312", "24131131", "13231132", "22331131", "11431132", "14122132", "14131222", "12322132", "23231221", "12331222", "21431221", "24113131", "13213132", "24122221", "13222222", "24131311", "11413132", "13231312", "11422222", "22331311", "11431312", "14113222", "14122312", "12313222", "23222311", "12322312", "21422311", "24113311", "13213312", "22313311", "11413312", "14231131", "12431131", "15122131", "15131221", "13322131", "13331221", "11522131", "14213131", "14222221", "12413131", "14231311", "12422221", "12431311", "15113221", "15122311", "13313221", "13322311", "11513221", "11522311", "14213311", "12413311", "21141133", "41141131", "11132134", "31132132", "11141224", "31141222", "21123133", "41123131", "21132223", "41132221", "21141313", "41141311", "11114134", "31114132", "11123224", "31123222", "11132314", "31132312", "21114223", "41114221", "21123313", "41123311", "11114314", "31114312", "22141132", "11241133", "31241131", "12132133", "32132131", "12141223", "32141221", "21241222", "22123132", "11223133", "22132222", "11232223", "22141312", "11241313", "31241311", "12114133", "32114131", "12123223", "32123221", "12132313", "32132311", "21232312", "22114222", "11214223", "22123312", "11223313", "31223311", "12114313", "32114311", "21214312", "23141131", "12241132", "21341131", "13132132", "13141222", "11332132", "22241221", "11341222", "23123131", "12223132", "23132221", "12232222", "23141311", "12241312", "21341311", "13114132", "13123222", "11314132", "13132312", "11323222", "22232311", "11332312", "23114221", "12214222", "23123311", "12223312", "21323311", "13114312", "22214311", "11314312", "13241131", "14132131", "14141221", "12332131", "12341221", "13223131", "13232221", "11423131", "13241311", "11432221", "14114131", "14123221", "12314131", "14132311", "12323221", "12332311", "13214221", "13223311", "11414221", "11423311", "14114311", "12314311", "21151132", "11142133", "31142131", "11151223", "31151221", "21133132", "21142222", "21151312", "11124133", "31124131", "11133223", "31133221", "11142313", "31142311", "21115132", "21124222", "21133312", "11115223", "31115221", "11124313", "31124311", "22151131", "11251132", "12142132", "12151222", "21251221", "22133131", "11233132", "22142221", "11242222", "22151311", "11251312", "12124132", "12133222", "12142312", "21242311", "22115131", "11215132", "22124221", "11224222", "22133311", "11233312", "12115222", "12124312", "21224311", "12251131", "13142131", "13151221", "11342131", "12233131", "12242221", "12251311", "13124131", "13133221", "11324131", "13142311", "11333221", "11342311", "12215131", "12224221", "12233311", "13115221", "13124311", "11315221", "11324311", "21161131", "11152132", "11161222", "21143131", "21152221", "21161311", "11134132", "11143222", "11152312", "21125131", "21134221", "21143311", "11116132", "11125222", "11134312", "12152131", "12161221", "11243131", "11252221", "12134131", "12143221", "12152311", "11225131", "11234221", "11243311", "12116131", "12125221", "12134311", "21111235", "41111233", "61111231", "11111326", "31111324", "51111322", "21111415", "41111413", "61111411", "21211144", "41211142", "22111234", "42111232", "11211235", "31211233", "51211231", "12111325", "32111323", "52111321", "21211324", "41211322", "22111414", "42111412", "11211415", "31211413", "51211411", "22211143", "42211141", "11311144", "31311142", "23111233", "43111231", "12211234", "32211232", "21311233", "41311231", "13111324", "33111322", "22211323", "42211321", "11311324", "31311322", "23111413", "43111411", "12211414", "32211412", "21311413", "41311411", "23211142", "12311143", "32311141", "21411142", "24111232", "13211233", "33211231", "22311232", "11411233", "31411231", "14111323", "34111321", "23211322", "12311323", "32311321", "21411322", "24111412", "13211413", "33211411", "22311412", "11411413", "31411411", "24211141", "13311142", "22411141", "11511142", "25111231", "14211232", "23311231", "12411232", "21511231", "15111322", "24211321", "13311322", "22411321", "11511322", "25111411", "14211412", "23311411", "12411412", "21511411", "14311141", "12511141", "15211231", "13411231", "11611231", "16111321", "14311321", "12511321", "15211411", "13411411", "11611411", "31121143", "51121141", "21112144", "41112142", "21121234", "41121232", "11112235", "31112233", "51112231", "11121325", "31121323", "51121321", "21112324", "41112322", "21121414", "41121412", "11112415", "31112413", "51112411", "12121144", "32121142", "21221143", "41221141", "22112143", "42112141", "11212144", "22121233", "42121231", "11221234", "31221232", "12112234", "32112232", "12121324", "32121322", "21221323", "41221321", "22112323", "42112321", "11212324", "22121413", "42121411", "11221414", "31221412", "12112414", "32112412", "21212413", "41212411", "13121143", "33121141", "22221142", "11321143", "31321141", "23112142", "12212143", "23121232", "12221233", "32221231", "21321232", "13112233", "33112231", "13121323", "33121321", "11312233", "22221322", "11321323", "31321321", "23112322", "12212323", "23121412", "12221413", "32221411", "21321412", "13112413", "33112411", "22212412", "11312413", "31312411", "14121142", "23221141", "12321142", "21421141", "24112141", "13212142", "24121231", "13221232", "11412142", "22321231", "11421232", "14112232", "14121322", "12312232", "23221321", "12321322", "21421321", "24112321", "13212322", "24121411", "13221412", "11412322", "22321411", "11421412", "14112412", "23212411", "12312412", "21412411", "15121141", "13321141", "11521141", "14212141", "14221231", "12412141", "12421231", "15112231", "15121321", "13312231", "13321321", "11512231", "11521321", "14212321", "14221411", "12412321", "12421411", "15112411", "13312411", "11512411", "11131144", "31131142", "21122143", "41122141", "21131233", "41131231", "11113144", "31113142", "11122234", "31122232", "11131324", "31131322", "21113233", "41113231", "21122323", "41122321", "21131413", "41131411", "11113324", "31113322", "11122414", "31122412", "21113413", "41113411", "12131143", "32131141", "21231142", "22122142", "11222143", "22131232", "11231233", "31231231", "12113143", "32113141", "12122233", "32122231", "12131323", "32131321", "21231322", "22113232", "11213233", "22122322", "11222323", "22131412", "11231413", "31231411", "12113323", "32113321", "12122413", "32122411", "21222412", "22113412", "11213413", "31213411", "13131142", "22231141", "11331142", "23122141", "12222142", "23131231", "12231232", "21331231", "13113142", "13122232", "11313142", "13131322", "11322232", "22231321", "11331322", "23113231", "12213232", "23122321", "12222322", "23131411", "12231412", "21331411", "13113322", "13122412", "11313322", "22222411", "11322412", "23113411", "12213412", "21313411", "14131141", "12331141", "13222141", "13231231", "11422141", "11431231", "14113141", "14122231", "12313141", "14131321", "12322231", "12331321", "13213231", "13222321", "11413231", "13231411", "11422321", "11431411", "14113321", "14122411", "12313321", "12322411", "13213411", "11413411", "11141143", "31141141", "21132142", "21141232", "11123143", "31123141", "11132233", "31132231", "11141323", "31141321", "21114142", "21123232", "21132322", "21141412", "11114233", "31114231", "11123323", "31123321", "11132413", "31132411", "21114322", "21123412", "12141142", "21241141", "22132141", "11232142", "22141231", "11241232", "12123142", "12132232", "12141322", "21241321", "22114141", "11214142", "22123231", "11223232", "22132321", "11232322", "22141411", "11241412", "12114232", "12123322", "12132412", "21232411", "22114321", "11214322", "22123411", "11223412", "13141141", "11341141", "12232141", "12241231", "13123141", "13132231", "11323141", "13141321", "11332231", "11341321", "12214141", "12223231", "12232321", "12241411", "13114231", "13123321", "11314231", "13132411", "11323321", "11332411", "12214321", "12223411", "11151142", "21142141", "21151231", "11133142", "11142232", "11151322", "21124141", "21133231", "21142321", "21151411", "11115142", "11124232", "11133322", "11142412", "21115231", "21124321", "21133411", "12151141", "11242141", "11251231", "12133141", "12142231", "12151321", "11224141", "11233231", "11242321", "11251411", "12115141", "12124231", "12133321", "12142411", "11215231", "11224321", "11233411", "11161141", "11143141", "11152231", "11161321", "11125141", "11134231", "11143321", "11152411", "11111245", "31111243", "51111241", "21111334", "41111332", "11111425", "31111423", "51111421", "21111514", "41111512", "31211152", "12111244", "32111242", "21211243", "41211241", "22111333", "42111331", "11211334", "31211332", "12111424", "32111422", "21211423", "41211421", "22111513", "42111511", "11211514", "31211512", "12211153", "32211151", "21311152", "13111243", "33111241", "22211242", "11311243", "31311241", "23111332", "12211333", "32211331", "21311332", "13111423", "33111421", "22211422", "11311423", "31311421", "23111512", "12211513", "32211511", "21311512", "13211152", "22311151", "11411152", "14111242", "23211241", "12311242", "21411241", "24111331", "13211332", "22311331", "11411332", "14111422", "23211421", "12311422", "21411421", "24111511", "13211512", "22311511", "11411512", "14211151", "12411151", "15111241", "13311241", "11511241", "14211331", "12411331", "15111421", "13311421", "11511421", "14211511", "12411511", "21121153", "41121151", "11112154", "31112152", "11121244", "31121242", "21112243", "41112241", "21121333", "41121331", "11112334", "31112332", "11121424", "31121422", "21112423", "41112421", "21121513", "41121511", "11112514", "31112512", "22121152", "11221153", "31221151", "12112153", "32112151", "12121243", "32121241", "21221242", "22112242", "11212243", "22121332", "11221333", "31221331", "12112333", "32112331", "12121423", "32121421", "21221422", "22112422", "11212423", "22121512", "11221513", "31221511", "12112513", "32112511", "21212512", "23121151", "12221152", "21321151", "13112152", "13121242", "11312152", "22221241", "11321242", "23112241", "12212242", "23121331", "12221332", "21321331", "13112332", "13121422", "11312332", "22221421", "11321422", "23112421", "12212422", "23121511", "12221512", "21321511", "13112512", "22212511", "11312512", "13221151", "11421151", "14112151", "14121241", "12312151", "12321241", "13212241", "13221331", "11412241", "11421331", "14112331", "14121421", "12312331", "12321421", "13212421", "13221511", "11412421", "11421511", "14112511", "12312511", "21131152", "11122153", "31122151", "11131243", "31131241", "21113152", "21122242", "21131332", "11113243", "31113241", "11122333", "31122331", "11131423", "31131421", "21113332", "21122422", "21131512", "11113423", "31113421", "11122513", "31122511", "22131151", "11231152", "12122152", "12131242", "21231241", "22113151", "11213152", "22122241", "11222242", "22131331", "11231332", "12113242", "12122332", "12131422", "21231421", "22113331", "11213332", "22122421", "11222422", "22131511", "11231512", "12113422", "12122512", "21222511", "12231151", "13122151", "13131241", "11322151", "11331241", "12213151", "12222241", "12231331", "13113241", "13122331", "11313241", "13131421", "11322331", "11331421", "12213331", "12222421", "12231511", "13113421", "13122511", "11313421", "11322511", "21141151", "11132152", "11141242", "21123151", "21132241", "21141331", "11114152", "11123242", "11132332", "11141422", "21114241", "21123331", "21132421", "21141511", "11114332", "11123422", "11132512", "11241151", "12132151", "12141241", "11223151", "11232241", "11241331", "12114151", "12123241", "12132331", "12141421", "11214241", "11223331", "11232421", "11241511", "12114331", "12123421", "12132511", "11142151", "11151241", "11124151", "11133241", "11142331", "11151421", "11115241", "11124331", "11133421", "11142511", "21111253", "41111251", "11111344", "31111342", "21111433", "41111431", "11111524", "31111522", "21111613", "41111611", "21211162", "22111252", "11211253", "31211251", "12111343", "32111341", "21211342", "22111432", "11211433", "31211431", "12111523", "32111521", "21211522", "22111612", "11211613", "31211611", "22211161", "11311162", "23111251", "12211252", "21311251", "13111342", "22211341", "11311342", "23111431", "12211432", "21311431", "13111522", "22211521", "11311522", "23111611", "12211612", "21311611", "12311161", "13211251", "11411251", "14111341", "12311341", "13211431", "11411431", "14111521", "12311521", "13211611", "11411611", "31121161", "21112162", "21121252", "11112253", "31112251", "11121343", "31121341", "21112342", "21121432", "11112433", "31112431", "11121523", "31121521", "21112522", "21121612", "12121162", "21221161", "22112161", "11212162", "22121251", "11221252", "12112252", "12121342", "21221341", "22112341", "11212342", "22121431", "11221432", "12112432", "12121522", "21221521", "22112521", "11212522", "22121611", "11221612", "13121161", "11321161", "12212161", "12221251", "13112251", "13121341", "11312251", "11321341", "12212341", "12221431", "13112431", "13121521", "11312431", "11321521", "12212521", "12221611", "11131162", "21122161", "21131251", "11113162"])]); //#16510
    $_.parity = $a(["1001", "0101", "1100", "0011", "1010", "0110", "1111", "0000"]); //#16514
    $_.rowbits = $a($_.r); //#16518
    for (var _6G = 0, _6F = $_.r - 1; _6G <= _6F; _6G += 1) { //#16538
        $_.i = _6G; //#16520
        $k[$j++] = 'p'; //#16521
        if ($_.i != ($_.r - 1)) { //#16521
            $k[$j++] = $get($_.parity, $_.i); //#16521
        } else { //#16521
            $k[$j++] = "0000"; //#16521
        } //#16521
        var _6M = $k[--$j]; //#16521
        $_[$k[--$j]] = _6M; //#16521
        $_.ccrow = $geti($_.ccs, $_.i * 8, 8); //#16522
        $k[$j++] = Infinity; //#16523
        for (var _6R = 0; _6R <= 7; _6R += 2) { //#16524
            $aload($geti($_.ccrow, _6R, 2)); //#16524
            var _6U = $k[--$j]; //#16524
            var _6V = $k[--$j]; //#16524
            $k[$j++] = $f(_6U + (_6V * 49)); //#16524
        } //#16524
        $_.scrow = $a(); //#16524
        $k[$j++] = Infinity; //#16526
        $k[$j++] = 10; //#16531
        $k[$j++] = 1; //#16531
        $k[$j++] = 1; //#16531
        for (var _6X = 0; _6X <= 3; _6X += 1) { //#16531
            $_.j = _6X; //#16529
            $forall($get($get($_.patterns, $get($_.p, $_.j) - 48), $get($_.scrow, $_.j)), function() { //#16530
                var _6h = $k[--$j]; //#16530
                $k[$j++] = _6h - 48; //#16530
            }); //#16530
        } //#16530
        $k[$j++] = 4; //#16532
        $k[$j++] = 1; //#16532
        $_.sbs = $a(); //#16532
        $k[$j++] = Infinity; //#16534
        var _6j = $_.sbs; //#16535
        $k[$j++] = 1; //#16535
        for (var _6k = 0, _6l = _6j.length; _6k < _6l; _6k++) { //#16535
            var _6n = $k[$j - 1]; //#16535
            var _6o = (_6n == 0) ? 1 : 0; //#16535
            for (var _6p = 0, _6q = $get(_6j, _6k); _6p < _6q; _6p++) { //#16535
                $k[$j++] = _6o //#16535
            } //#16535
        } //#16535
        $astore($a($counttomark() - 1)); //#16536
        var _6t = $k[--$j]; //#16536
        $k[$j - 1] = _6t; //#16536
        var _6v = $k[--$j]; //#16536
        $k[$j - 1] = _6v; //#16536
        $k[$j++] = $_.rowbits; //#16537
        $k[$j++] = $_.i; //#16537
        var _6z = $k[$j - 3]; //#16537
        var _70 = $k[$j - 1]; //#16537
        $put($k[$j - 2], _70, _6z); //#16537
        $j -= 3; //#16537
    } //#16537
    $k[$j++] = Infinity; //#16541
    for (var _73 = 0, _74 = 81 * $_.sepheight; _73 < _74; _73++) { //#16542
        $k[$j++] = 1; //#16542
    } //#16542
    for (var _77 = 0, _76 = $_.r - 2; _77 <= _76; _77 += 1) { //#16547
        $_.i = _77; //#16544
        for (var _79 = 0, _7A = $_.rowheight; _79 < _7A; _79++) { //#16545
            $aload($get($_.rowbits, $_.i)); //#16545
        } //#16545
        for (var _7F = 0, _7G = $_.sepheight; _7F < _7G; _7F++) { //#16546
            for (var _7H = 0; _7H < 10; _7H++) { //#16546
                $k[$j++] = 0; //#16546
            } //#16546
            for (var _7I = 0; _7I < 70; _7I++) { //#16546
                $k[$j++] = 1; //#16546
            } //#16546
            $k[$j++] = 0; //#16546
        } //#16546
    } //#16546
    for (var _7K = 0, _7L = $_.rowheight; _7K < _7L; _7K++) { //#16548
        $aload($get($_.rowbits, $_.r - 1)); //#16548
    } //#16548
    for (var _7Q = 0, _7R = 81 * $_.sepheight; _7Q < _7R; _7Q++) { //#16549
        $k[$j++] = 1; //#16549
    } //#16549
    $_.pixs = $a(); //#16549
    var _7X = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", 81],
        ["pixy", ~~($_.pixs.length / 81)],
        ["height", (~~($_.pixs.length / 81)) / 72],
        ["width", 81 / 72],
        ["opt", $_.options]
    ]); //#16560
    $k[$j++] = _7X; //#16563
    if (!$_.dontdraw) { //#16563
        bwipp_renmatrix(); //#16563
    } //#16563
    $_ = $__; //#16567
} //bwipp_code49
function bwipp_flattermarken() {
    var $__ = $_; //#16861
    $_ = Object.assign({}, $_); //#16861
    $_.dontdraw = false; //#16864
    $_.includetext = false; //#16865
    $_.textfont = "OCR-B"; //#16866
    $_.textsize = 10; //#16867
    $_.textyoffset = -8; //#16868
    $_.height = 0.3; //#16869
    $k[$j++] = $_; //#16871
    bwipp_processoptions(); //#16871
    $_.options = $k[--$j]; //#16871
    $_.barcode = $k[--$j]; //#16872
    $forall($_.barcode, function() { //#16881
        var _3 = $k[--$j]; //#16878
        if ((_3 < 48) || (_3 > 57)) { //#16880
            $k[$j++] = 'bwipp.flattermarkenBadCharacter#16879'; //#16879
            $k[$j++] = "Flattermarken must contain only digits"; //#16879
            bwipp_raiseerror(); //#16879
        } //#16879
    }); //#16879
    $_.encs = $a(["0018", "0117", "0216", "0315", "0414", "0513", "0612", "0711", "0810", "0900"]); //#16888
    $_.barchars = "1234567890"; //#16891
    $_.barlen = $_.barcode.length; //#16894
    $_.sbs = $s($_.barlen * 4); //#16896
    $_.txt = $a($_.barlen); //#16897
    for (var _D = 0, _C = $_.barlen - 1; _D <= _C; _D += 1) { //#16909
        $_.i = _D; //#16900
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#16902
        $j--; //#16903
        $_.indx = $k[--$j].length; //#16904
        $j -= 2; //#16905
        $_.enc = $get($_.encs, $_.indx); //#16906
        $puti($_.sbs, $_.i * 4, $_.enc); //#16907
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), $_.i * 9, $_.textyoffset, $_.textfont, $_.textsize])); //#16908
    } //#16908
    $k[$j++] = Infinity; //#16912
    $k[$j++] = Infinity; //#16914
    var _Z = $_.sbs; //#16914
    for (var _a = 0, _b = _Z.length; _a < _b; _a++) { //#16914
        $k[$j++] = $get(_Z, _a) - 48; //#16914
    } //#16914
    var _d = $a(); //#16914
    $k[$j++] = Infinity; //#16915
    for (var _f = 0, _g = ~~(($_.sbs.length + 1) / 2); _f < _g; _f++) { //#16915
        $k[$j++] = $_.height; //#16915
    } //#16915
    var _i = $a(); //#16915
    $k[$j++] = Infinity; //#16916
    for (var _k = 0, _l = ~~(($_.sbs.length + 1) / 2); _k < _l; _k++) { //#16916
        $k[$j++] = 0; //#16916
    } //#16916
    var _m = $a(); //#16916
    $k[$j++] = 'ren'; //#16918
    $k[$j++] = 'renlinear'; //#16918
    $k[$j++] = 'sbs'; //#16918
    $k[$j++] = _d; //#16918
    $k[$j++] = 'bhs'; //#16918
    $k[$j++] = _i; //#16918
    $k[$j++] = 'bbs'; //#16918
    $k[$j++] = _m; //#16918
    $k[$j++] = 'txt'; //#16918
    $k[$j++] = $_.txt; //#16918
    $k[$j++] = 'opt'; //#16918
    $k[$j++] = $_.options; //#16918
    var _p = $d(); //#16918
    $k[$j++] = _p; //#16921
    if (!$_.dontdraw) { //#16921
        bwipp_renlinear(); //#16921
    } //#16921
    $_ = $__; //#16925
} //bwipp_flattermarken
function bwipp_raw() {
    var $__ = $_; //#16953
    $_ = Object.assign({}, $_); //#16953
    $_.dontdraw = false; //#16956
    $_.height = 1; //#16957
    $k[$j++] = $_; //#16959
    bwipp_processoptions(); //#16959
    $_.options = $k[--$j]; //#16959
    $_.barcode = $k[--$j]; //#16960
    $forall($_.barcode, function() { //#16967
        var _3 = $k[--$j]; //#16964
        if ((_3 < 49) || (_3 > 57)) { //#16966
            $k[$j++] = 'bwipp.rawBadCharacter#16965'; //#16965
            $k[$j++] = "Raw must contain only digits 1 to 9"; //#16965
            bwipp_raiseerror(); //#16965
        } //#16965
    }); //#16965
    $k[$j++] = Infinity; //#16970
    $k[$j++] = Infinity; //#16972
    $forall($_.barcode, function() { //#16972
        var _5 = $k[--$j]; //#16972
        $k[$j++] = _5 - 48; //#16972
    }); //#16972
    var _6 = $a(); //#16972
    $k[$j++] = Infinity; //#16973
    for (var _8 = 0, _9 = ~~(($_.barcode.length + 1) / 2); _8 < _9; _8++) { //#16973
        $k[$j++] = $_.height; //#16973
    } //#16973
    var _B = $a(); //#16973
    $k[$j++] = Infinity; //#16974
    for (var _D = 0, _E = ~~(($_.barcode.length + 1) / 2); _D < _E; _D++) { //#16974
        $k[$j++] = 0; //#16974
    } //#16974
    var _F = $a(); //#16974
    $k[$j++] = 'ren'; //#16975
    $k[$j++] = 'renlinear'; //#16975
    $k[$j++] = 'sbs'; //#16975
    $k[$j++] = _6; //#16975
    $k[$j++] = 'bhs'; //#16975
    $k[$j++] = _B; //#16975
    $k[$j++] = 'bbs'; //#16975
    $k[$j++] = _F; //#16975
    $k[$j++] = 'opt'; //#16975
    $k[$j++] = $_.options; //#16975
    var _H = $d(); //#16975
    $k[$j++] = _H; //#16978
    if (!$_.dontdraw) { //#16978
        bwipp_renlinear(); //#16978
    } //#16978
    $_ = $__; //#16980
} //bwipp_raw
function bwipp_daft() {
    var $__ = $_; //#17008
    $_ = Object.assign({}, $_); //#17008
    $_.dontdraw = false; //#17011
    $_.height = 0.175; //#17012
    $k[$j++] = $_; //#17014
    bwipp_processoptions(); //#17014
    $_.options = $k[--$j]; //#17014
    $_.barcode = $k[--$j]; //#17015
    if ($_.barcode.length == 0) { //#17019
        $k[$j++] = 'bwipp.daftEmptyData#17018'; //#17018
        $k[$j++] = "The data must not be empty"; //#17018
        bwipp_raiseerror(); //#17018
    } //#17018
    $forall($_.barcode, function() { //#17025
        var _4 = $k[--$j]; //#17022
        if ((_4 != 68) && ((_4 != 65) && ((_4 != 70) && (_4 != 84)))) { //#17024
            $k[$j++] = 'bwipp.daftBadCharacter#17023'; //#17023
            $k[$j++] = "DAFT must contain only characters D, A, F and T"; //#17023
            bwipp_raiseerror(); //#17023
        } //#17023
    }); //#17023
    $_.barlen = $_.barcode.length; //#17027
    $_.bbs = $a($_.barlen); //#17029
    $_.bhs = $a($_.barlen); //#17030
    for (var _C = 0, _B = $_.barlen - 1; _C <= _B; _C += 1) { //#17050
        $_.i = _C; //#17032
        $_.enc = $geti($_.barcode, $_.i, 1); //#17033
        if ($eq($_.enc, "D")) { //#17037
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#17035
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#17036
        } //#17036
        if ($eq($_.enc, "A")) { //#17041
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#17039
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#17040
        } //#17040
        if ($eq($_.enc, "F")) { //#17045
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#17043
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#17044
        } //#17044
        if ($eq($_.enc, "T")) { //#17049
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#17047
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#17048
        } //#17048
    } //#17048
    $k[$j++] = Infinity; //#17053
    var _i = $_.bbs; //#17055
    var _j = $_.bhs; //#17056
    $k[$j++] = Infinity; //#17057
    for (var _l = 0, _m = $_.bhs.length - 1; _l < _m; _l++) { //#17057
        $k[$j++] = 1.44; //#17057
        $k[$j++] = 1.872; //#17057
    } //#17057
    $k[$j++] = 1.44; //#17057
    var _n = $a(); //#17057
    $k[$j++] = 'ren'; //#17058
    $k[$j++] = 'renlinear'; //#17058
    $k[$j++] = 'bbs'; //#17058
    $k[$j++] = _i; //#17058
    $k[$j++] = 'bhs'; //#17058
    $k[$j++] = _j; //#17058
    $k[$j++] = 'sbs'; //#17058
    $k[$j++] = _n; //#17058
    $k[$j++] = 'opt'; //#17058
    $k[$j++] = $_.options; //#17058
    var _p = $d(); //#17058
    $k[$j++] = _p; //#17061
    if (!$_.dontdraw) { //#17061
        bwipp_renlinear(); //#17061
    } //#17061
    $_ = $__; //#17063
} //bwipp_daft
function bwipp_symbol() {
    var $__ = $_; //#17094
    $_ = Object.assign({}, $_); //#17094
    $_.dontdraw = false; //#17097
    $k[$j++] = $_; //#17099
    bwipp_processoptions(); //#17099
    $_.options = $k[--$j]; //#17099
    $_.barcode = $k[--$j]; //#17100
    $_.fimasbs = $a([2.25, 2.25, 2.25, 11.25, 2.25, 11.25, 2.25, 2.25, 2.25]); //#17106
    $k[$j++] = Infinity; //#17107
    for (var _4 = 0, _5 = (~~($_.fimasbs.length / 2)) + 1; _4 < _5; _4++) { //#17107
        $k[$j++] = 0.625; //#17107
    } //#17107
    $_.fimabhs = $a(); //#17107
    $k[$j++] = Infinity; //#17108
    for (var _8 = 0, _9 = (~~($_.fimasbs.length / 2)) + 1; _8 < _9; _8++) { //#17108
        $k[$j++] = 0; //#17108
    } //#17108
    $_.fimabbs = $a(); //#17108
    $_.fimbsbs = $a([2.25, 6.75, 2.25, 2.25, 2.25, 6.25, 2.25, 2.25, 2.25, 6.75, 2.25]); //#17110
    $k[$j++] = Infinity; //#17111
    for (var _D = 0, _E = (~~($_.fimbsbs.length / 2)) + 1; _D < _E; _D++) { //#17111
        $k[$j++] = 0.625; //#17111
    } //#17111
    $_.fimbbhs = $a(); //#17111
    $k[$j++] = Infinity; //#17112
    for (var _H = 0, _I = (~~($_.fimbsbs.length / 2)) + 1; _H < _I; _H++) { //#17112
        $k[$j++] = 0; //#17112
    } //#17112
    $_.fimbbbs = $a(); //#17112
    $_.fimcsbs = $a([2.25, 2.25, 2.25, 6.75, 2.25, 6.75, 2.25, 6.75, 2.25, 2.25, 2.25]); //#17114
    $k[$j++] = Infinity; //#17115
    for (var _M = 0, _N = (~~($_.fimcsbs.length / 2)) + 1; _M < _N; _M++) { //#17115
        $k[$j++] = 0.625; //#17115
    } //#17115
    $_.fimcbhs = $a(); //#17115
    $k[$j++] = Infinity; //#17116
    for (var _Q = 0, _R = (~~($_.fimcsbs.length / 2)) + 1; _Q < _R; _Q++) { //#17116
        $k[$j++] = 0; //#17116
    } //#17116
    $_.fimcbbs = $a(); //#17116
    $_.fimdsbs = $a([2.25, 2.25, 2.25, 2.25, 2.25, 6.75, 2.25, 6.75, 2.25, 2.25, 2.25, 2.25, 2.25]); //#17118
    $k[$j++] = Infinity; //#17119
    for (var _V = 0, _W = (~~($_.fimdsbs.length / 2)) + 1; _V < _W; _V++) { //#17119
        $k[$j++] = 0.625; //#17119
    } //#17119
    $_.fimdbhs = $a(); //#17119
    $k[$j++] = Infinity; //#17120
    for (var _Z = 0, _a = (~~($_.fimdsbs.length / 2)) + 1; _Z < _a; _Z++) { //#17120
        $k[$j++] = 0; //#17120
    } //#17120
    $_.fimdbbs = $a(); //#17120
    $_.fimesbs = $a([2.25, 6.75, 2.25, 15.75, 2.25, 6.75, 2.25]); //#17122
    $k[$j++] = Infinity; //#17123
    for (var _e = 0, _f = (~~($_.fimesbs.length / 2)) + 1; _e < _f; _e++) { //#17123
        $k[$j++] = 0.625; //#17123
    } //#17123
    $_.fimebhs = $a(); //#17123
    $k[$j++] = Infinity; //#17124
    for (var _i = 0, _j = (~~($_.fimesbs.length / 2)) + 1; _i < _j; _i++) { //#17124
        $k[$j++] = 0; //#17124
    } //#17124
    $_.fimebbs = $a(); //#17124
    $k[$j++] = Infinity; //#17126
    for (var _l = 0; _l < 100; _l++) { //#17126
        $k[$j++] = 1; //#17126
        $k[$j++] = 1; //#17126
    } //#17126
    $k[$j++] = 1; //#17126
    $_.zebrasbs = $a(); //#17126
    $k[$j++] = Infinity; //#17127
    for (var _o = 0, _p = (~~($_.zebrasbs.length / 2)) + 1; _o < _p; _o++) { //#17127
        $k[$j++] = 1; //#17127
    } //#17127
    $_.zebrabhs = $a(); //#17127
    $k[$j++] = Infinity; //#17128
    for (var _s = 0, _t = (~~($_.zebrasbs.length / 2)) + 1; _s < _t; _s++) { //#17128
        $k[$j++] = 0; //#17128
    } //#17128
    $_.zebrabbs = $a(); //#17128
    $_.checksize = 199; //#17130
    $k[$j++] = Infinity; //#17131
    var _v = $_.checksize; //#17131
    for (var _w = 0, _x = ~~((_v * _v) / 2); _w < _x; _w++) { //#17131
        $k[$j++] = 1; //#17131
        $k[$j++] = 0; //#17131
    } //#17131
    $k[$j++] = 1; //#17131
    $_.checkpixs = $a(); //#17131
    var _z = new Map([
        ["renlinear", bwipp_renlinear],
        ["renmatrix", bwipp_renmatrix]
    ]); //#17135
    $_.renmap = _z; //#17136
    var _1V = new Map([
        ["fima", function() {
            var _14 = new Map([
                ["ren", 'renlinear'],
                ["sbs", $_.fimasbs],
                ["bhs", $_.fimabhs],
                ["bbs", $_.fimabbs]
            ]); //#17141
            $k[$j++] = _14; //#17141
        }],
        ["fimb", function() {
            var _18 = new Map([
                ["ren", 'renlinear'],
                ["sbs", $_.fimbsbs],
                ["bhs", $_.fimbbhs],
                ["bbs", $_.fimbbbs]
            ]); //#17142
            $k[$j++] = _18; //#17142
        }],
        ["fimc", function() {
            var _1C = new Map([
                ["ren", 'renlinear'],
                ["sbs", $_.fimcsbs],
                ["bhs", $_.fimcbhs],
                ["bbs", $_.fimcbbs]
            ]); //#17143
            $k[$j++] = _1C; //#17143
        }],
        ["fimd", function() {
            var _1G = new Map([
                ["ren", 'renlinear'],
                ["sbs", $_.fimdsbs],
                ["bhs", $_.fimdbhs],
                ["bbs", $_.fimdbbs]
            ]); //#17144
            $k[$j++] = _1G; //#17144
        }],
        ["fime", function() {
            var _1K = new Map([
                ["ren", 'renlinear'],
                ["sbs", $_.fimesbs],
                ["bhs", $_.fimebhs],
                ["bbs", $_.fimebbs]
            ]); //#17145
            $k[$j++] = _1K; //#17145
        }],
        ["zebra", function() {
            var _1O = new Map([
                ["ren", 'renlinear'],
                ["sbs", $_.zebrasbs],
                ["bhs", $_.zebrabhs],
                ["bbs", $_.zebrabbs]
            ]); //#17146
            $k[$j++] = _1O; //#17146
        }],
        ["check", function() {
            var _1U = new Map([
                ["ren", 'renmatrix'],
                ["pixs", $_.checkpixs],
                ["pixx", $_.checksize],
                ["pixy", $_.checksize],
                ["height", $_.checksize / 72],
                ["width", $_.checksize / 72]
            ]); //#17147
            $k[$j++] = _1U; //#17147
        }]
    ]); //#17147
    $_.symbols = _1V; //#17148
    var _1Y = $get($_.symbols, $_.barcode) !== undefined; //#17151
    if (!_1Y) { //#17153
        $k[$j++] = 'bwipp.symbolUnknownSymbol#17152'; //#17152
        $k[$j++] = "Unknown symbol name provided"; //#17152
        bwipp_raiseerror(); //#17152
    } //#17152
    if ($get($_.symbols, $_.barcode)() === true) {
        return true;
    } //#17155
    var _1c = $k[$j - 1]; //#17156
    $put(_1c, 'opt', $_.options); //#17156
    if (!$_.dontdraw) { //#17158
        var _1f = $k[$j - 1]; //#17158
        if ($get($_.renmap, $get(_1f, 'ren'))() === true) {
            return true;
        } //#17158
    } //#17158
    $_ = $__; //#17162
} //bwipp_symbol
function bwipp_pdf417() {
    var $__ = $_; //#17193
    $_ = Object.assign({}, $_); //#17193
    $_.dontdraw = false; //#17196
    $_.compact = false; //#17197
    $_.eclevel = -1; //#17198
    $_.fixedeclevel = false; //#17199
    $_.columns = 0; //#17200
    $_.rows = 0; //#17201
    $_.rowmult = 3; //#17202
    $_.ccc = false; //#17203
    $_.raw = false; //#17204
    $_.parse = false; //#17205
    $_.parsefnc = false; //#17206
    $k[$j++] = $_; //#17208
    bwipp_processoptions(); //#17208
    $_.options = $k[--$j]; //#17208
    $_.barcode = $k[--$j]; //#17209
    if ($_.barcode.length == 0) { //#17213
        $k[$j++] = 'bwipp.pdf417emptyData#17212'; //#17212
        $k[$j++] = "The data must not be empty"; //#17212
        bwipp_raiseerror(); //#17212
    } //#17212
    if (($_.eclevel != -1) && (($_.eclevel < 0) || ($_.eclevel > 8))) { //#17217
        $k[$j++] = 'bwipp.pdf417InvalidErrorCorrectionLevel#17216'; //#17216
        $k[$j++] = "Valid error correction levels are 0 to 8"; //#17216
        bwipp_raiseerror(); //#17216
    } //#17216
    if ($_.ccc && $_.raw) { //#17221
        $k[$j++] = 'bwipp.pdf417cccAndRaw#17220'; //#17220
        $k[$j++] = "Cannot combine ccc and raw"; //#17220
        bwipp_raiseerror(); //#17220
    } //#17220
    if ($_.ccc && $_.compact) { //#17225
        $k[$j++] = 'bwipp.pdf417cccAndCompact#17224'; //#17224
        $k[$j++] = "Cannot combine ccc and compact"; //#17224
        bwipp_raiseerror(); //#17224
    } //#17224
    if (($_.rows != 0) && (($_.rows < 3) || ($_.rows > 90))) { //#17229
        $k[$j++] = 'bwipp.pdf417invalidRows#17228'; //#17228
        $k[$j++] = "There must be between 3 and 90 rows"; //#17228
        bwipp_raiseerror(); //#17228
    } //#17228
    if (($_.columns != 0) && (($_.columns < 1) || ($_.columns > 30))) { //#17233
        $k[$j++] = 'bwipp.pdf417invalidColumns#17232'; //#17232
        $k[$j++] = "There must be between 1 and 30 columns"; //#17232
        bwipp_raiseerror(); //#17232
    } //#17232
    if ($_.rowmult <= 0) { //#17237
        $k[$j++] = 'bwipp.pdf417badRowMult#17236'; //#17236
        $k[$j++] = "The row multiplier must be greater than zero"; //#17236
        bwipp_raiseerror(); //#17236
    } //#17236
    $_.T = 0; //#17243
    $_.N = 1; //#17243
    $_.B = 2; //#17243
    $_.A = 0; //#17244
    $_.L = 1; //#17244
    $_.M = 2; //#17244
    $_.P = 3; //#17244
    $_.tl = -1; //#17247
    $_.nl = -2; //#17247
    $_.bl = -3; //#17247
    $_.bl6 = -4; //#17247
    $_.bs = -5; //#17247
    $_.al = -6; //#17250
    $_.ll = -7; //#17250
    $_.ml = -8; //#17250
    $_.pl = -9; //#17250
    $_.as = -10; //#17250
    $_.ps = -11; //#17250
    $_.charmaps = $a([$a(["A", "a", "0", ";"]), $a(["B", "b", "1", "<"]), $a(["C", "c", "2", ">"]), $a(["D", "d", "3", "@"]), $a(["E", "e", "4", "["]), $a(["F", "f", "5", 92]), $a(["G", "g", "6", "]"]), $a(["H", "h", "7", "_"]), $a(["I", "i", "8", "`"]), $a(["J", "j", "9", "~"]), $a(["K", "k", "&", "!"]), $a(["L", "l", 13, 13]), $a(["M", "m", 9, 9]), $a(["N", "n", ",", ","]), $a(["O", "o", ":", ":"]), $a(["P", "p", "#", 10]), $a(["Q", "q", "-", "-"]), $a(["R", "r", ".", "."]), $a(["S", "s", "$", "$"]), $a(["T", "t", "/", "/"]), $a(["U", "u", "+", "\""]), $a(["V", "v", "%", "|"]), $a(["W", "w", "*", "*"]), $a(["X", "x", "=", 40]), $a(["Y", "y", "^", 41]), $a(["Z", "z", $_.pl, "?"]), $a([" ", " ", " ", "{"]), $a([$_.ll, $_.as, $_.ll, "}"]), $a([$_.ml, $_.ml, $_.al, "'"]), $a([$_.ps, $_.ps, $_.ps, $_.al])]); //#17285
    $_.charvals = $a([new Map, new Map, new Map, new Map]); //#17288
    $_.alltext = new Map; //#17289
    for (var _10 = 0, _z = $_.charmaps.length - 1; _10 <= _z; _10 += 1) { //#17299
        $_.i = _10; //#17291
        $_.encs = $get($_.charmaps, $_.i); //#17292
        for (var _14 = 0; _14 <= 3; _14 += 1) { //#17298
            $_.j = _14; //#17294
            var _17 = $get($_.encs, $_.j); //#17295
            $k[$j++] = _17; //#17295
            if ($eq($type(_17), 'stringtype')) { //#17295
                var _1A = $get($k[--$j], 0); //#17295
                $k[$j++] = _1A; //#17295
            } //#17295
            var _1B = $k[--$j]; //#17296
            $put($get($_.charvals, $_.j), _1B, $_.i); //#17296
            $put($_.alltext, _1B, -1); //#17297
        } //#17297
    } //#17297
    $_.e = 10000; //#17301
    $_.latlen = $a([$a([0, 1, 1, 2]), $a([2, 0, 1, 2]), $a([1, 1, 0, 1]), $a([1, 2, 2, 0])]); //#17309
    $_.latseq = $a([$a([$a([]), $a([$_.ll]), $a([$_.ml]), $a([$_.ml, $_.pl])]), $a([$a([$_.ml, $_.al]), $a([]), $a([$_.ml]), $a([$_.ml, $_.pl])]), $a([$a([$_.al]), $a([$_.ll]), $a([]), $a([$_.pl])]), $a([$a([$_.al]), $a([$_.al, $_.ll]), $a([$_.al, $_.ml]), $a([])])]); //#17317
    $_.shftlen = $a([$a([$_.e, $_.e, $_.e, 1]), $a([1, $_.e, $_.e, 1]), $a([$_.e, $_.e, $_.e, 1]), $a([$_.e, $_.e, $_.e, $_.e])]); //#17325
    $k[$j++] = Infinity; //#17327
    $k[$j++] = $_.tl; //#17328
    $k[$j++] = 900; //#17328
    $k[$j++] = $_.bl; //#17328
    $k[$j++] = 901; //#17328
    $k[$j++] = $_.bl6; //#17328
    $k[$j++] = 924; //#17328
    $k[$j++] = $_.nl; //#17328
    $k[$j++] = 902; //#17328
    $k[$j++] = $_.bs; //#17328
    $k[$j++] = 913; //#17328
    $_.latchcws = $d(); //#17329
    if ($_.raw) { //#17351
        $_.datcws = $a($_.barcode.length); //#17334
        $_.i = 0; //#17335
        $_.j = 0; //#17335
        for (;;) { //#17346
            if ($_.i >= ($_.barcode.length - 3)) { //#17337
                break; //#17337
            } //#17337
            if ($get($_.barcode, $_.i) != 94) { //#17338
                break; //#17338
            } //#17338
            var _2W = $geti($_.barcode, $_.i + 1, 3); //#17339
            $k[$j++] = _2W; //#17341
            $k[$j++] = false; //#17341
            for (var _2X = 0, _2Y = _2W.length; _2X < _2Y; _2X++) { //#17341
                var _2Z = $get(_2W, _2X); //#17341
                if ((_2Z < 48) || (_2Z > 57)) { //#17340
                    $k[$j - 1] = true; //#17340
                } //#17340
            } //#17340
            if ($k[--$j]) { //#17341
                $j--; //#17341
                break; //#17341
            } //#17341
            $_.cw = $cvi($k[--$j]); //#17342
            $put($_.datcws, $_.j, $_.cw); //#17343
            $_.i = $_.i + 4; //#17344
            $_.j = $_.j + 1; //#17345
        } //#17345
        if ($_.i != $_.barcode.length) { //#17349
            $k[$j++] = 'bwipp.pdf417badRawFormat#17348'; //#17348
            $k[$j++] = "raw data must be formatted as ^NNN"; //#17348
            bwipp_raiseerror(); //#17348
        } //#17348
        $_.datcws = $geti($_.datcws, 0, $_.j); //#17350
    } //#17350
    $_.encb = function() {
        $_.in = $k[--$j]; //#17354
        $_.inlen = $_.in.length; //#17355
        $_.out = $a(((~~($_.inlen / 6)) * 5) + ($_.inlen % 6)); //#17356
        for (var _2t = 0, _2s = (~~($_.inlen / 6)) - 1; _2t <= _2s; _2t += 1) { //#17379
            $_.k = _2t; //#17358
            $k[$j++] = Infinity; //#17359
            $aload($geti($_.in, $_.k * 6, 3)); //#17359
            $_.msbs = $a(); //#17359
            $k[$j++] = Infinity; //#17360
            $aload($_.msbs); //#17361
            var _2z = $k[--$j]; //#17361
            var _30 = $k[--$j]; //#17361
            var _31 = $k[--$j]; //#17361
            $k[$j++] = $f(_2z + _30 * 256 + _31 * 65536); //#17362
            for (var _32 = 0; _32 < 3; _32++) { //#17362
                var _33 = $k[--$j]; //#17362
                $k[$j++] = _33 % 900; //#17362
                $k[$j++] = ~~(_33 / 900); //#17362
            } //#17362
            $_.mscs = $a(); //#17362
            $k[$j++] = Infinity; //#17364
            $aload($geti($_.in, ($_.k * 6) + 3, 3)); //#17364
            $_.lsbs = $a(); //#17364
            $k[$j++] = Infinity; //#17365
            $aload($_.lsbs); //#17366
            var _3A = $k[--$j]; //#17366
            var _3B = $k[--$j]; //#17366
            var _3C = $k[--$j]; //#17366
            $k[$j++] = $f(_3A + _3B * 256 + _3C * 65536); //#17367
            for (var _3D = 0; _3D < 3; _3D++) { //#17367
                var _3E = $k[--$j]; //#17367
                $k[$j++] = _3E % 900; //#17367
                $k[$j++] = ~~(_3E / 900); //#17367
            } //#17367
            $_.lscs = $a(); //#17367
            var _3H = $get($_.lscs, 0); //#17369
            var _3J = $get($_.mscs, 0); //#17369
            $put($_.out, ($_.k * 5) + 4, ($f(_3H + (_3J * 316))) % 900); //#17370
            var _3N = $get($_.lscs, 1); //#17371
            var _3P = $get($_.mscs, 0); //#17371
            var _3R = $get($_.mscs, 1); //#17371
            $put($_.out, $_.k * 5 + 3, $f(~~((_3H + _3J * 316) / 900) + _3N + _3P * 641 + _3R * 316) % 900); //#17372
            var _3V = $get($_.lscs, 2); //#17373
            var _3X = $get($_.mscs, 0); //#17373
            var _3Z = $get($_.mscs, 1); //#17373
            var _3b = $get($_.mscs, 2); //#17373
            $put($_.out, $_.k * 5 + 2, $f(~~((~~((_3H + _3J * 316) / 900) + _3N + _3P * 641 + _3R * 316) / 900) + _3V + _3X * 20 + _3Z * 641 + _3b * 316) % 900); //#17374
            var _3f = $get($_.lscs, 3); //#17375
            var _3h = $get($_.mscs, 1); //#17375
            var _3j = $get($_.mscs, 2); //#17375
            $put($_.out, $_.k * 5 + 1, $f(~~((~~((~~((_3H + _3J * 316) / 900) + _3N + _3P * 641 + _3R * 316) / 900) + _3V + _3X * 20 + _3Z * 641 + _3b * 316) / 900) + _3f + _3h * 20 + _3j * 641) % 900); //#17376
            $put($_.out, $_.k * 5, $f(~~((~~((~~((~~((_3H + _3J * 316) / 900) + _3N + _3P * 641 + _3R * 316) / 900) + _3V + _3X * 20 + _3Z * 641 + _3b * 316) / 900) + _3f + _3h * 20 + _3j * 641) / 900) + $get($_.mscs, 2) * 20) % 900); //#17378
        } //#17378
        $_.rem = $_.inlen % 6; //#17380
        if ($_.rem != 0) { //#17385
            $k[$j++] = $_.out; //#17383
            $k[$j++] = $_.out.length - $_.rem; //#17383
            $k[$j++] = Infinity; //#17383
            $aload($geti($_.in, $_.inlen - $_.rem, $_.rem)); //#17383
            var _40 = $a(); //#17383
            var _41 = $k[--$j]; //#17384
            $puti($k[--$j], _41, _40); //#17384
        } //#17384
        $k[$j++] = $_.out; //#17386
    }; //#17386
    if ($_.ccc) { //#17395
        $_.barlen = $_.barcode.length; //#17390
        $_.datcws = $a((((~~($_.barlen / 6)) * 5) + ($_.barlen % 6)) + 2); //#17391
        $put($_.datcws, 0, 920); //#17392
        var _4C = (($_.barlen % 6) == 0) ? 924 : 901; //#17393
        $put($_.datcws, 1, _4C); //#17393
        $k[$j++] = $_.datcws; //#17394
        $k[$j++] = 2; //#17394
        $k[$j++] = Infinity; //#17394
        $forall($_.barcode); //#17394
        var _4F = $a(); //#17394
        $k[$j++] = _4F; //#17394
        $_.encb(); //#17394
        var _4G = $k[--$j]; //#17394
        var _4H = $k[--$j]; //#17394
        $puti($k[--$j], _4H, _4G); //#17394
    } //#17394
    if ((!$_.raw) && (!$_.ccc)) { //#17746
        var _4N = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true]
        ]); //#17403
        $_.fncvals = _4N; //#17405
        $k[$j++] = 'msg'; //#17406
        $k[$j++] = $_.barcode; //#17406
        $k[$j++] = $_.fncvals; //#17406
        bwipp_parseinput(); //#17406
        var _4Q = $k[--$j]; //#17406
        $_[$k[--$j]] = _4Q; //#17406
        $_.msglen = $_.msg.length; //#17407
        $k[$j++] = Infinity; //#17410
        for (var _4U = 0, _4V = $_.msglen; _4U < _4V; _4U++) { //#17410
            $k[$j++] = 0; //#17410
        } //#17410
        $k[$j++] = 0; //#17410
        $_.numdigits = $a(); //#17410
        $k[$j++] = Infinity; //#17411
        for (var _4Y = 0, _4Z = $_.msglen; _4Y < _4Z; _4Y++) { //#17411
            $k[$j++] = 0; //#17411
        } //#17411
        $k[$j++] = 0; //#17411
        $_.numtext = $a(); //#17411
        $k[$j++] = Infinity; //#17412
        for (var _4c = 0, _4d = $_.msglen; _4c < _4d; _4c++) { //#17412
            $k[$j++] = 0; //#17412
        } //#17412
        $k[$j++] = 0; //#17412
        $_.numbytes = $a(); //#17412
        $k[$j++] = Infinity; //#17413
        for (var _4g = 0, _4h = $_.msglen; _4g < _4h; _4g++) { //#17413
            $k[$j++] = 0; //#17413
        } //#17413
        $k[$j++] = 0; //#17413
        $_.iseci = $a(); //#17413
        for (var _4k = $_.msglen - 1; _4k >= 0; _4k -= 1) { //#17426
            $_.i = _4k; //#17415
            var _4n = $get($_.msg, $_.i); //#17416
            if ((_4n >= 48) && (_4n <= 57)) { //#17418
                $put($_.numdigits, $_.i, $get($_.numdigits, $_.i + 1) + 1); //#17417
            } //#17417
            var _4x = $get($_.alltext, $get($_.msg, $_.i)) !== undefined; //#17419
            if (_4x && ($get($_.numdigits, $_.i) < 13)) { //#17421
                $put($_.numtext, $_.i, $get($_.numtext, $_.i + 1) + 1); //#17420
            } //#17420
            if ((($get($_.msg, $_.i) >= 0) && ($get($_.numtext, $_.i) < 5)) && ($get($_.numdigits, $_.i) < 13)) { //#17424
                $put($_.numbytes, $_.i, $get($_.numbytes, $_.i + 1) + 1); //#17423
            } //#17423
            $put($_.iseci, $_.i, $get($_.msg, $_.i) <= -1000000); //#17425
        } //#17425
        $_.numdigits = $geti($_.numdigits, 0, $_.msglen); //#17427
        $_.numtext = $geti($_.numtext, 0, $_.msglen); //#17428
        $_.numbytes = $geti($_.numbytes, 0, $_.msglen); //#17429
        $_.seq = $a([]); //#17431
        $_.seqlen = 0; //#17431
        $_.state = $_.T; //#17431
        $_.p = 0; //#17431
        for (;;) { //#17485
            if ($_.p == $_.msglen) { //#17432
                break; //#17432
            } //#17432
            if ($get($_.iseci, $_.p)) { //#17483
                $_.eci = $get($_.msg, $_.p); //#17434
                $k[$j++] = Infinity; //#17435
                $aload($_.seq); //#17436
                $k[$j++] = $a([$_.eci]); //#17437
                $_.seq = $a(); //#17437
                $_.p = $_.p + 1; //#17439
                $k[$j++] = 'seqlen'; //#17440
                $k[$j++] = $_.seqlen; //#17440
                if ($_.eci <= -1810900) { //#17440
                    $k[$j++] = 2; //#17440
                } else { //#17440
                    var _5q = ($_.eci <= -1000900) ? 3 : 2; //#17440
                    $k[$j++] = _5q; //#17440
                } //#17440
                var _5r = $k[--$j]; //#17440
                var _5s = $k[--$j]; //#17440
                $_[$k[--$j]] = $f(_5s + _5r); //#17440
            } else { //#17483
                $_.n = $get($_.numdigits, $_.p); //#17442
                if (($_.n >= 13) || (($_.n == $_.msglen) && ($_.n >= 8))) { //#17483
                    $k[$j++] = Infinity; //#17444
                    $aload($_.seq); //#17445
                    $k[$j++] = $_.nl; //#17447
                    $k[$j++] = Infinity; //#17447
                    $aload($geti($_.msg, $_.p, $_.n)); //#17447
                    var _67 = $a(); //#17447
                    $k[$j++] = _67; //#17447
                    $_.seq = $a(); //#17447
                    $_.state = $_.N; //#17449
                    $_.p = $f($_.p + $_.n); //#17450
                    $_.seqlen = $f(($_.seqlen + 1) + $_.n); //#17451
                } else { //#17483
                    $_.t = $get($_.numtext, $_.p); //#17453
                    if ($_.t >= 5) { //#17483
                        $k[$j++] = Infinity; //#17455
                        $aload($_.seq); //#17456
                        if ($_.state != $_.T) { //#17459
                            $k[$j++] = $_.tl; //#17458
                        } //#17458
                        $k[$j++] = Infinity; //#17460
                        $aload($geti($_.msg, $_.p, $_.t)); //#17460
                        var _6Q = $a(); //#17460
                        $k[$j++] = _6Q; //#17460
                        $_.seq = $a(); //#17460
                        $_.state = $_.T; //#17462
                        $_.p = $f($_.p + $_.t); //#17463
                        $_.seqlen = $f(($_.seqlen + 1) + $_.t); //#17464
                    } else { //#17483
                        $_.b = $get($_.numbytes, $_.p); //#17466
                        if (($_.b == 1) && ($_.state == $_.T)) { //#17483
                            $k[$j++] = Infinity; //#17468
                            $aload($_.seq); //#17469
                            $k[$j++] = $_.bs; //#17471
                            $k[$j++] = $a([$get($_.msg, $_.p)]); //#17471
                            $_.seq = $a(); //#17471
                            $_.p = $f($_.p + $_.b); //#17473
                            $_.seqlen = $_.seqlen + 2; //#17474
                        } else { //#17483
                            $k[$j++] = Infinity; //#17476
                            $aload($_.seq); //#17477
                            var _6p = (($_.b % 6) != 0) ? $_.bl : $_.bl6; //#17478
                            $k[$j++] = _6p; //#17479
                            $k[$j++] = Infinity; //#17479
                            $aload($geti($_.msg, $_.p, $_.b)); //#17479
                            var _6u = $a(); //#17479
                            $k[$j++] = _6u; //#17479
                            $_.seq = $a(); //#17479
                            $_.state = $_.B; //#17481
                            $_.p = $f($_.p + $_.b); //#17482
                            $_.seqlen = $f(($_.seqlen + 1) + $_.b); //#17483
                        } //#17483
                    } //#17483
                } //#17483
            } //#17483
        } //#17483
        $_.enca = function() {
            var _75 = $get($get($_.charvals, $_.A), $k[--$j]); //#17488
            $k[$j++] = _75; //#17488
        }; //#17488
        $_.encl = function() {
            var _7A = $get($get($_.charvals, $_.L), $k[--$j]); //#17489
            $k[$j++] = _7A; //#17489
        }; //#17489
        $_.encm = function() {
            var _7F = $get($get($_.charvals, $_.M), $k[--$j]); //#17490
            $k[$j++] = _7F; //#17490
        }; //#17490
        $_.encp = function() {
            var _7K = $get($get($_.charvals, $_.P), $k[--$j]); //#17491
            $k[$j++] = _7K; //#17491
        }; //#17491
        $_.textencfuncs = $a(['enca', 'encl', 'encm', 'encp']); //#17492
        $_.addtotext = function() {
            $put($_.text, $_.l, $k[--$j]); //#17495
            $_.l = $_.l + 1; //#17496
        }; //#17496
        $_.enct = function() {
            $_.in = $k[--$j]; //#17500
            $_.curlen = $a([$_.e, $_.e, $_.e, $_.e]); //#17502
            $put($_.curlen, $_.submode, 0); //#17503
            $_.curseq = $a([$a([]), $a([]), $a([]), $a([])]); //#17504
            $forall($_.in, function() { //#17574
                $_.char = $k[--$j]; //#17509
                for (;;) { //#17530
                    $_.imp = false; //#17513
                    var _7j = $a([$_.A, $_.L, $_.M, $_.P]); //#17514
                    for (var _7k = 0, _7l = _7j.length; _7k < _7l; _7k++) { //#17528
                        $_.x = $get(_7j, _7k); //#17515
                        var _7r = $a([$_.A, $_.L, $_.M, $_.P]); //#17516
                        for (var _7s = 0, _7t = _7r.length; _7s < _7t; _7s++) { //#17527
                            $_.y = $get(_7r, _7s); //#17517
                            $_.cost = $f($get($_.curlen, $_.x) + $get($get($_.latlen, $_.x), $_.y)); //#17518
                            if ($_.cost < $get($_.curlen, $_.y)) { //#17526
                                $put($_.curlen, $_.y, $_.cost); //#17520
                                $k[$j++] = $_.curseq; //#17523
                                $k[$j++] = $_.y; //#17523
                                $k[$j++] = Infinity; //#17521
                                $aload($get($_.curseq, $_.x)); //#17522
                                $aload($get($get($_.latseq, $_.x), $_.y)); //#17523
                                var _8K = $a(); //#17523
                                var _8L = $k[--$j]; //#17524
                                $put($k[--$j], _8L, _8K); //#17524
                                $_.imp = true; //#17525
                            } //#17525
                        } //#17525
                    } //#17525
                    if (!$_.imp) { //#17529
                        break; //#17529
                    } //#17529
                } //#17529
                $_.nxtlen = $a([$_.e, $_.e, $_.e, $_.e]); //#17533
                $_.nxtseq = $a(4); //#17534
                var _8Y = $a([$_.A, $_.L, $_.M, $_.P]); //#17536
                for (var _8Z = 0, _8a = _8Y.length; _8Z < _8a; _8Z++) { //#17569
                    $_.x = $get(_8Y, _8Z); //#17537
                    for (;;) { //#17567
                        var _8g = $get($get($_.charvals, $_.x), $_.char) !== undefined; //#17541
                        if (!_8g) { //#17541
                            break; //#17541
                        } //#17541
                        $_.cost = $get($_.curlen, $_.x) + 1; //#17544
                        if ($_.cost < $get($_.nxtlen, $_.x)) { //#17548
                            $put($_.nxtlen, $_.x, $_.cost); //#17546
                            $k[$j++] = $_.nxtseq; //#17547
                            $k[$j++] = $_.x; //#17547
                            $k[$j++] = Infinity; //#17547
                            $aload($get($_.curseq, $_.x)); //#17547
                            $k[$j++] = $_.char; //#17547
                            var _8x = $a(); //#17547
                            var _8y = $k[--$j]; //#17547
                            $put($k[--$j], _8y, _8x); //#17547
                        } //#17547
                        var _94 = $a([$_.A, $_.L, $_.M, $_.P]); //#17551
                        for (var _95 = 0, _96 = _94.length; _95 < _96; _95++) { //#17564
                            $_.y = $get(_94, _95); //#17552
                            if ($ne($_.x, $_.y)) { //#17563
                                $_.cost = $f($get($_.curlen, $_.y) + $get($get($_.shftlen, $_.y), $_.x)) + 1; //#17554
                                if ($_.cost < $get($_.nxtlen, $_.y)) { //#17562
                                    $put($_.nxtlen, $_.y, $_.cost); //#17556
                                    $k[$j++] = $_.nxtseq; //#17560
                                    $k[$j++] = $_.y; //#17560
                                    $k[$j++] = Infinity; //#17557
                                    $aload($get($_.curseq, $_.y)); //#17558
                                    var _9W = ($_.x == $_.A) ? $_.as : $_.ps; //#17559
                                    $k[$j++] = _9W; //#17560
                                    $k[$j++] = $_.char; //#17560
                                    var _9Y = $a(); //#17560
                                    var _9Z = $k[--$j]; //#17561
                                    $put($k[--$j], _9Z, _9Y); //#17561
                                } //#17561
                            } //#17561
                        } //#17561
                        break; //#17566
                    } //#17566
                } //#17566
                $_.curlen = $_.nxtlen; //#17571
                $_.curseq = $_.nxtseq; //#17572
            }); //#17572
            $_.minseq = $_.e; //#17577
            var _9i = $a([$_.A, $_.L, $_.M, $_.P]); //#17578
            for (var _9j = 0, _9k = _9i.length; _9j < _9k; _9j++) { //#17584
                $_.k = $get(_9i, _9j); //#17579
                if ($get($_.curlen, $_.k) < $_.minseq) { //#17583
                    $_.minseq = $get($_.curlen, $_.k); //#17581
                    $_.txtseq = $get($_.curseq, $_.k); //#17582
                } //#17582
            } //#17582
            $_.text = $a($_.minseq); //#17587
            $_.k = 0; //#17588
            $_.l = 0; //#17588
            for (;;) { //#17608
                if ($_.k >= $_.txtseq.length) { //#17589
                    break; //#17589
                } //#17589
                $_.char = $get($_.txtseq, $_.k); //#17591
                $k[$j++] = $_.char; //#17594
                if ($_[$get($_.textencfuncs, $_.submode)]() === true) {
                    break;
                } //#17594
                $_.addtotext(); //#17594
                $_.k = $_.k + 1; //#17595
                if (($_.char == $_.as) || ($_.char == $_.ps)) { //#17601
                    $k[$j++] = $get($_.txtseq, $_.k); //#17599
                    if ($_.char == $_.as) { //#17599
                        $_.enca(); //#17599
                    } else { //#17599
                        $_.encp(); //#17599
                    } //#17599
                    $_.addtotext(); //#17599
                    $_.k = $_.k + 1; //#17600
                } //#17600
                if ($_.char == $_.al) { //#17604
                    $_.submode = $_.A; //#17604
                } //#17604
                if ($_.char == $_.ll) { //#17605
                    $_.submode = $_.L; //#17605
                } //#17605
                if ($_.char == $_.ml) { //#17606
                    $_.submode = $_.M; //#17606
                } //#17606
                if ($_.char == $_.pl) { //#17607
                    $_.submode = $_.P; //#17607
                } //#17607
            } //#17607
            if (($_.text.length % 2) == 1) { //#17655
                if ($_.submode == $_.P) { //#17651
                    $k[$j++] = 'pad'; //#17612
                    $k[$j++] = $_.al; //#17612
                    $_.encp(); //#17612
                    var _AZ = $k[--$j]; //#17612
                    $_[$k[--$j]] = _AZ; //#17612
                    $_.submode = $_.A; //#17613
                } else { //#17651
                    $_.nextecitext = false; //#17616
                    for (var _Af = $_.i + 1, _Ae = $_.seq.length - 1; _Af <= _Ae; _Af += 1) { //#17623
                        $_.ti = _Af; //#17619
                        if ($ne($type($get($_.seq, $_.ti)), 'arraytype')) { //#17620
                            $_.nextecitext = false; //#17620
                            break; //#17620
                        } //#17620
                        if ($get($get($_.seq, $_.ti), 0) > -1000000) { //#17621
                            break; //#17621
                        } //#17621
                        $_.nextecitext = true; //#17622
                    } //#17622
                    if ($_.nextecitext) { //#17651
                        if ($_.submode == $_.A) { //#17648
                            var _Ay = $get($get($_.charvals, $_.L), $get($get($_.seq, $_.ti), 0)) !== undefined; //#17626
                            if (_Ay) { //#17631
                                $k[$j++] = 'pad'; //#17627
                                $k[$j++] = $_.ll; //#17627
                                $_.enca(); //#17627
                                var _B0 = $k[--$j]; //#17627
                                $_[$k[--$j]] = _B0; //#17627
                                $_.submode = $_.L; //#17628
                            } else { //#17631
                                $k[$j++] = 'pad'; //#17630
                                $k[$j++] = $_.ml; //#17630
                                $_.enca(); //#17630
                                var _B4 = $k[--$j]; //#17630
                                $_[$k[--$j]] = _B4; //#17630
                                $_.submode = $_.M; //#17631
                            } //#17631
                        } else { //#17648
                            if ($_.submode == $_.M) { //#17648
                                var _BG = $get($get($_.charvals, $_.L), $get($get($_.seq, $_.ti), 0)) !== undefined; //#17635
                                if (_BG) { //#17644
                                    $k[$j++] = 'pad'; //#17636
                                    $k[$j++] = $_.ll; //#17636
                                    $_.encm(); //#17636
                                    var _BI = $k[--$j]; //#17636
                                    $_[$k[--$j]] = _BI; //#17636
                                    $_.submode = $_.L; //#17637
                                } else { //#17644
                                    var _BS = $get($get($_.charvals, $_.P), $get($get($_.seq, $_.ti), 0)) !== undefined; //#17639
                                    if (_BS) { //#17644
                                        $k[$j++] = 'pad'; //#17640
                                        $k[$j++] = $_.pl; //#17640
                                        $_.encm(); //#17640
                                        var _BU = $k[--$j]; //#17640
                                        $_[$k[--$j]] = _BU; //#17640
                                        $_.submode = $_.P; //#17641
                                    } else { //#17644
                                        $k[$j++] = 'pad'; //#17643
                                        $k[$j++] = $_.al; //#17643
                                        $_.encm(); //#17643
                                        var _BY = $k[--$j]; //#17643
                                        $_[$k[--$j]] = _BY; //#17643
                                        $_.submode = $_.A; //#17644
                                    } //#17644
                                } //#17644
                            } else { //#17648
                                $k[$j++] = 'pad'; //#17647
                                $k[$j++] = $_.ml; //#17647
                                $_.encl(); //#17647
                                var _Bc = $k[--$j]; //#17647
                                $_[$k[--$j]] = _Bc; //#17647
                                $_.submode = $_.M; //#17648
                            } //#17648
                        } //#17648
                    } else { //#17651
                        $k[$j++] = 'pad'; //#17651
                        $k[$j++] = $_.ps; //#17651
                        if ($_[$get($_.textencfuncs, $_.submode)]() === true) {
                            return true;
                        } //#17651
                        var _Bk = $k[--$j]; //#17651
                        $_[$k[--$j]] = _Bk; //#17651
                    } //#17651
                } //#17651
                $k[$j++] = Infinity; //#17654
                $aload($_.text); //#17654
                $k[$j++] = $_.pad; //#17654
                $_.text = $a(); //#17654
            } //#17654
            $_.out = $a(~~($_.text.length / 2)); //#17657
            for (var _Bt = 0, _Bs = $_.out.length - 1; _Bt <= _Bs; _Bt += 1) { //#17661
                $_.k = _Bt; //#17659
                $put($_.out, $_.k, $f(($get($_.text, $_.k * 2) * 30) + $get($_.text, ($_.k * 2) + 1))); //#17660
            } //#17660
            $k[$j++] = $_.out; //#17663
        }; //#17663
        $_.encn = function() {
            $_.in = $k[--$j]; //#17668
            $_.out = $a([]); //#17669
            for (var _C7 = 0, _C6 = $_.in.length - 1; _C7 <= _C6; _C7 += 44) { //#17697
                $_.k = _C7; //#17671
                $k[$j++] = Infinity; //#17672
                var _CC = $_.in.length - $_.k; //#17673
                $k[$j++] = 1; //#17673
                $k[$j++] = $_.in; //#17673
                $k[$j++] = $_.k; //#17673
                $k[$j++] = _CC; //#17673
                if (_CC > 44) { //#17673
                    $k[$j - 1] = 44; //#17673
                } //#17673
                var _CD = $k[--$j]; //#17673
                var _CE = $k[--$j]; //#17673
                var _CG = $geti($k[--$j], _CE, _CD); //#17673
                for (var _CH = 0, _CI = _CG.length; _CH < _CI; _CH++) { //#17674
                    $k[$j++] = $get(_CG, _CH) - 48; //#17674
                } //#17674
                $_.gmod = $a(); //#17674
                $_.cwn = $a([]); //#17676
                for (;;) { //#17695
                    $_.dv = 900; //#17677
                    $_.gmul = $a([]); //#17678
                    $_.val = 0; //#17678
                    for (;;) { //#17690
                        if ($_.gmod.length == 0) { //#17679
                            break; //#17679
                        } //#17679
                        $_.val = $f(($_.val * 10) + $get($_.gmod, 0)); //#17680
                        $_.gmod = $geti($_.gmod, 1, $_.gmod.length - 1); //#17681
                        if ($_.val < $_.dv) { //#17687
                            if ($_.gmul.length != 0) { //#17685
                                $k[$j++] = Infinity; //#17684
                                $aload($_.gmul); //#17684
                                $k[$j++] = 0; //#17684
                                $_.gmul = $a(); //#17684
                            } //#17684
                        } else { //#17687
                            $k[$j++] = Infinity; //#17687
                            $aload($_.gmul); //#17687
                            $k[$j++] = ~~($_.val / $_.dv); //#17687
                            $_.gmul = $a(); //#17687
                        } //#17687
                        $_.val = $_.val % $_.dv; //#17689
                    } //#17689
                    $_.dv = $_.val; //#17691
                    $k[$j++] = Infinity; //#17692
                    $k[$j++] = $_.dv; //#17692
                    $aload($_.cwn); //#17692
                    $_.cwn = $a(); //#17692
                    $_.gmod = $_.gmul; //#17693
                    if ($_.gmul.length == 0) { //#17694
                        break; //#17694
                    } //#17694
                } //#17694
                $k[$j++] = Infinity; //#17696
                $aload($_.out); //#17696
                $aload($_.cwn); //#17696
                $_.out = $a(); //#17696
            } //#17696
            $k[$j++] = $_.out; //#17698
        }; //#17698
        $_.ence = function() {
            var _Cr = (-$get($k[--$j], 0)) - 1000000; //#17703
            $k[$j++] = _Cr; //#17711
            if (_Cr <= 899) { //#17710
                var _Cs = $k[--$j]; //#17704
                $k[$j++] = 927; //#17704
                $k[$j++] = _Cs; //#17704
                $astore($a(2)); //#17704
            } else { //#17710
                var _Cu = $k[$j - 1]; //#17705
                if (_Cu <= 810899) { //#17710
                    var _Cv = $k[--$j]; //#17706
                    $k[$j++] = 926; //#17706
                    $k[$j++] = (~~(_Cv / 900)) - 1; //#17706
                    $k[$j++] = _Cv % 900; //#17706
                    $astore($a(3)); //#17706
                } else { //#17710
                    var _Cx = $k[$j - 1]; //#17707
                    if (_Cx <= 811799) { //#17710
                        var _Cy = $k[--$j]; //#17708
                        $k[$j++] = 925; //#17708
                        $k[$j++] = _Cy - 810900; //#17708
                        $astore($a(2)); //#17708
                    } else { //#17710
                        $k[$j++] = 'bwipp.pdf417badECI#17710'; //#17710
                        $k[$j++] = "PDF417 supports ECIs 000000 to 811799"; //#17710
                        bwipp_raiseerror(); //#17710
                    } //#17710
                } //#17710
            } //#17710
        }; //#17710
        $_.encfuncs = $a(['enct', 'encn', 'encb']); //#17714
        $_.addtocws = function() {
            var _D1 = $k[--$j]; //#17717
            $puti($_.datcws, $_.j, _D1); //#17717
            $_.j = _D1.length + $_.j; //#17718
        }; //#17718
        $_.state = $_.T; //#17722
        $_.submode = $_.A; //#17722
        $_.datcws = $a($_.seqlen); //#17723
        $_.i = 0; //#17724
        $_.j = 0; //#17724
        for (;;) { //#17744
            if ($_.i >= $_.seq.length) { //#17725
                break; //#17725
            } //#17725
            $_.chars = $get($_.seq, $_.i); //#17726
            if ($eq($type($_.chars), 'arraytype')) { //#17740
                if ($get($_.chars, 0) <= -1000000) { //#17731
                    $k[$j++] = $_.chars; //#17729
                    $_.ence(); //#17729
                    $_.addtocws(); //#17729
                } else { //#17731
                    $k[$j++] = $_.chars; //#17731
                    if ($_[$get($_.encfuncs, $_.state)]() === true) {
                        break;
                    } //#17731
                    $_.addtocws(); //#17731
                } //#17731
            } else { //#17740
                $k[$j++] = $a([$get($_.latchcws, $_.chars)]); //#17734
                $_.addtocws(); //#17734
                if ($_.chars == $_.tl) { //#17735
                    $_.state = $_.T; //#17735
                    $_.submode = $_.A; //#17735
                } //#17735
                if ($_.chars == $_.nl) { //#17736
                    $_.state = $_.N; //#17736
                } //#17736
                if (($_.chars == $_.bl) || ($_.chars == $_.bl6)) { //#17737
                    $_.state = $_.B; //#17737
                } //#17737
                if ($_.chars == $_.bs) { //#17741
                    $_.i = $_.i + 1; //#17739
                    $k[$j++] = $get($_.seq, $_.i); //#17740
                    $_.encb(); //#17740
                    $_.addtocws(); //#17740
                } //#17740
            } //#17740
            $_.i = $_.i + 1; //#17743
        } //#17743
        $_.datcws = $geti($_.datcws, 0, $_.j); //#17745
    } //#17745
    $_.m = $_.datcws.length; //#17747
    if ($_.m > 926) { //#17751
        $k[$j++] = 'bwipp.pdf417dataTooLong#17750'; //#17750
        $k[$j++] = "The data is too long"; //#17750
        bwipp_raiseerror(); //#17750
    } //#17750
    if ($_.eclevel == -1) { //#17759
        if ($_.m <= 40) { //#17755
            $_.eclevel = 2; //#17755
        } //#17755
        if (($_.m >= 41) && ($_.m <= 160)) { //#17756
            $_.eclevel = 3; //#17756
        } //#17756
        if (($_.m >= 161) && ($_.m <= 320)) { //#17757
            $_.eclevel = 4; //#17757
        } //#17757
        if ($_.m >= 321) { //#17758
            $_.eclevel = 5; //#17758
        } //#17758
    } //#17758
    if (!$_.fixedeclevel) { //#17765
        $_.maxeclevel = (~~(($log((928 - 1) - $_.m)) / $log(2))) - 1; //#17763
        if ($_.eclevel > $_.maxeclevel) { //#17764
            $_.eclevel = $_.maxeclevel; //#17764
        } //#17764
    } //#17764
    $_.k = ~~$pow(2, $_.eclevel + 1); //#17768
    if ($_.columns == 0) { //#17769
        $_.columns = ~~($round($sqrt(($_.m + $_.k) / 3))); //#17769
    } //#17769
    $k[$j++] = 'c'; //#17770
    if ($_.columns >= 1) { //#17770
        $k[$j++] = $_.columns; //#17770
    } else { //#17770
        $k[$j++] = 1; //#17770
    } //#17770
    var _E8 = $k[--$j]; //#17770
    $_[$k[--$j]] = _E8; //#17770
    $_.r = ~~($ceil((($_.m + $_.k) + 1) / $_.columns)); //#17773
    if (($_.r < $_.rows) && ($_.rows <= 90)) { //#17774
        $_.r = $_.rows; //#17774
    } //#17774
    if ($_.r < 3) { //#17775
        $_.r = 3; //#17775
    } //#17775
    if ($_.r > 90) { //#17780
        $k[$j++] = 'bwipp.pdf417insufficientCapacity#17779'; //#17779
        $k[$j++] = "Insufficient capacity in the symbol"; //#17779
        bwipp_raiseerror(); //#17779
    } //#17779
    if (!$_.fixedeclevel) { //#17789
        var _EK = $_.c; //#17784
        var _EL = $_.r; //#17784
        var _EM = $_.m; //#17784
        var _EN = 8; //#17784
        var _EO = (~~(($log($f(((_EK * _EL) - 1) - _EM))) / $log(2))) - 1; //#17784
        if (((~~(($log($f(((_EK * _EL) - 1) - _EM))) / $log(2))) - 1) > 8) { //#17784
            var _ = _EN; //#17784
            _EN = _EO; //#17784
            _EO = _; //#17784
        } //#17784
        $_.maxeclevel = _EO; //#17784
        if ($_.maxeclevel > $_.eclevel) { //#17788
            $_.eclevel = $_.maxeclevel; //#17786
            $_.k = ~~$pow(2, $_.eclevel + 1); //#17787
        } //#17787
    } //#17787
    $_.n = $f(($_.c * $_.r) - $_.k); //#17792
    $_.cws = $a(($_.c * $_.r) + 1); //#17793
    $put($_.cws, 0, $_.n); //#17794
    $puti($_.cws, 1, $_.datcws); //#17795
    $k[$j++] = $_.cws; //#17796
    $k[$j++] = $_.m + 1; //#17796
    $k[$j++] = Infinity; //#17796
    for (var _Eh = 0, _Ei = $f($_.n - $_.m) - 1; _Eh < _Ei; _Eh++) { //#17796
        $k[$j++] = 900; //#17796
    } //#17796
    var _Ej = $a(); //#17796
    var _Ek = $k[--$j]; //#17796
    $puti($k[--$j], _Ek, _Ej); //#17796
    $k[$j++] = $_.cws; //#17797
    $k[$j++] = $_.n; //#17797
    $k[$j++] = Infinity; //#17797
    for (var _Ep = 0, _Eq = $_.k; _Ep < _Eq; _Ep++) { //#17797
        $k[$j++] = 0; //#17797
    } //#17797
    $k[$j++] = 0; //#17797
    var _Er = $a(); //#17797
    var _Es = $k[--$j]; //#17797
    $puti($k[--$j], _Es, _Er); //#17797
    $k[$j++] = Infinity; //#17801
    $k[$j++] = 1; //#17801
    for (var _Eu = 0; _Eu < 928; _Eu++) { //#17801
        var _Ev = $k[$j - 1]; //#17801
        $k[$j++] = (_Ev * 3) % 929; //#17801
    } //#17801
    $_.rsalog = $a(); //#17801
    $_.rslog = $a(929); //#17802
    for (var _Ey = 1; _Ey <= 928; _Ey += 1) { //#17803
        $put($_.rslog, $get($_.rsalog, _Ey), _Ey); //#17803
    } //#17803
    $_.rsprod = function() {
        var _F3 = $k[$j - 1]; //#17808
        var _F4 = $k[$j - 2]; //#17808
        if ((_F3 != 0) && (_F4 != 0)) { //#17811
            var _F7 = $get($_.rslog, $k[--$j]); //#17809
            var _FC = $get($_.rsalog, $f(_F7 + $get($_.rslog, $k[--$j])) % 928); //#17809
            $k[$j++] = _FC; //#17809
        } else { //#17811
            $j -= 2; //#17811
            $k[$j++] = 0; //#17811
        } //#17811
    }; //#17811
    $k[$j++] = Infinity; //#17816
    $k[$j++] = 1; //#17816
    for (var _FE = 0, _FF = $_.k; _FE < _FF; _FE++) { //#17816
        $k[$j++] = 0; //#17816
    } //#17816
    $_.coeffs = $a(); //#17816
    for (var _FJ = 1, _FI = $_.k; _FJ <= _FI; _FJ += 1) { //#17825
        $_.i = _FJ; //#17818
        $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#17819
        for (var _FQ = $_.i - 1; _FQ >= 1; _FQ -= 1) { //#17823
            $_.j = _FQ; //#17821
            $k[$j++] = $_.coeffs; //#17822
            $k[$j++] = $_.j; //#17822
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#17822
            $k[$j++] = $get($_.coeffs, $_.j); //#17822
            $k[$j++] = $get($_.rsalog, $_.i); //#17822
            $_.rsprod(); //#17822
            var _Fc = $k[--$j]; //#17822
            var _Fd = $k[--$j]; //#17822
            var _Fe = $k[--$j]; //#17822
            $put($k[--$j], _Fe, $f(_Fd + _Fc) % 929); //#17822
        } //#17822
        $k[$j++] = $_.coeffs; //#17824
        $k[$j++] = 0; //#17824
        $k[$j++] = $get($_.coeffs, 0); //#17824
        $k[$j++] = $get($_.rsalog, $_.i); //#17824
        $_.rsprod(); //#17824
        var _Fm = $k[--$j]; //#17824
        var _Fn = $k[--$j]; //#17824
        $put($k[--$j], _Fn, _Fm); //#17824
    } //#17824
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#17826
    for (var _Ft = $_.coeffs.length - 1; _Ft >= 0; _Ft -= 2) { //#17827
        var _Fu = $_.coeffs; //#17827
        $put(_Fu, _Ft, 929 - $get(_Fu, _Ft)); //#17827
    } //#17827
    for (var _Fy = 0, _Fx = $_.n - 1; _Fy <= _Fx; _Fy += 1) { //#17836
        $_.t = $f($get($_.cws, _Fy) + $get($_.cws, $_.n)) % 929; //#17831
        for (var _G6 = 0, _G5 = $_.k - 1; _G6 <= _G5; _G6 += 1) { //#17835
            $_.j = _G6; //#17833
            $put($_.cws, $f($_.n + $_.j), $f($get($_.cws, $f($_.n + $_.j) + 1) + (929 - $_.t * $get($_.coeffs, $_.k - $_.j - 1) % 929)) % 929); //#17834
        } //#17834
    } //#17834
    for (var _GN = $_.n, _GM = $f($_.n + $_.k); _GN <= _GM; _GN += 1) { //#17837
        $put($_.cws, _GN, (929 - $get($_.cws, _GN)) % 929); //#17837
    } //#17837
    $_.cws = $geti($_.cws, 0, $_.cws.length - 1); //#17840
    var _GV = $get($_.options, 'debugcws') !== undefined; //#17842
    if (_GV) { //#17842
        $k[$j++] = 'bwipp.debugcws#17842'; //#17842
        $k[$j++] = $_.cws; //#17842
        bwipp_raiseerror(); //#17842
    } //#17842
    $_.clusters = $a([$a([120256, 125680, 128380, 120032, 125560, 128318, 108736, 119920, 108640, 86080, 108592, 86048, 110016, 120560, 125820, 109792, 120440, 125758, 88256, 109680, 88160, 89536, 110320, 120700, 89312, 110200, 120638, 89200, 110140, 89840, 110460, 89720, 110398, 89980, 128506, 119520, 125304, 128190, 107712, 119408, 125244, 107616, 119352, 84032, 107568, 119324, 84000, 107544, 83984, 108256, 119672, 125374, 85184, 108144, 119612, 85088, 108088, 119582, 85040, 108060, 85728, 108408, 119742, 85616, 108348, 85560, 108318, 85880, 108478, 85820, 85790, 107200, 119152, 125116, 107104, 119096, 125086, 83008, 107056, 119068, 82976, 107032, 82960, 82952, 83648, 107376, 119228, 83552, 107320, 119198, 83504, 107292, 83480, 83468, 83824, 107452, 83768, 107422, 83740, 83900, 106848, 118968, 125022, 82496, 106800, 118940, 82464, 106776, 118926, 82448, 106764, 82440, 106758, 82784, 106936, 119006, 82736, 106908, 82712, 106894, 82700, 82694, 106974, 82830, 82240, 106672, 118876, 82208, 106648, 118862, 82192, 106636, 82184, 106630, 82180, 82352, 82328, 82316, 82080, 118830, 106572, 106566, 82050, 117472, 124280, 127678, 103616, 117360, 124220, 103520, 117304, 124190, 75840, 103472, 75808, 104160, 117624, 124350, 76992, 104048, 117564, 76896, 103992, 76848, 76824, 77536, 104312, 117694, 77424, 104252, 77368, 77340, 77688, 104382, 77628, 77758, 121536, 126320, 128700, 121440, 126264, 128670, 111680, 121392, 126236, 111648, 121368, 126222, 111632, 121356, 103104, 117104, 124092, 112320, 103008, 117048, 124062, 112224, 121656, 126366, 93248, 74784, 102936, 117006, 93216, 112152, 93200, 75456, 103280, 117180, 93888, 75360, 103224, 117150, 93792, 112440, 121758, 93744, 75288, 93720, 75632, 103356, 94064, 75576, 103326, 94008, 112542, 93980, 75708, 94140, 75678, 94110, 121184, 126136, 128606, 111168, 121136, 126108, 111136, 121112, 126094, 111120, 121100, 111112, 111108, 102752, 116920, 123998, 111456, 102704, 116892, 91712, 74272, 121244, 116878, 91680, 74256, 102668, 91664, 111372, 102662, 74244, 74592, 102840, 116958, 92000, 74544, 102812, 91952, 111516, 102798, 91928, 74508, 74502, 74680, 102878, 92088, 74652, 92060, 74638, 92046, 92126, 110912, 121008, 126044, 110880, 120984, 126030, 110864, 120972, 110856, 120966, 110852, 110850, 74048, 102576, 116828, 90944, 74016, 102552, 116814, 90912, 111000, 121038, 90896, 73992, 102534, 90888, 110982, 90884, 74160, 102620, 91056, 74136, 102606, 91032, 111054, 91020, 74118, 91014, 91100, 91086, 110752, 120920, 125998, 110736, 120908, 110728, 120902, 110724, 110722, 73888, 102488, 116782, 90528, 73872, 102476, 90512, 110796, 102470, 90504, 73860, 90500, 73858, 73944, 90584, 90572, 90566, 120876, 120870, 110658, 102444, 73800, 90312, 90308, 90306, 101056, 116080, 123580, 100960, 116024, 70720, 100912, 115996, 70688, 100888, 70672, 70664, 71360, 101232, 116156, 71264, 101176, 116126, 71216, 101148, 71192, 71180, 71536, 101308, 71480, 101278, 71452, 71612, 71582, 118112, 124600, 127838, 105024, 118064, 124572, 104992, 118040, 124558, 104976, 118028, 104968, 118022, 100704, 115896, 123486, 105312, 100656, 115868, 79424, 70176, 118172, 115854, 79392, 105240, 100620, 79376, 70152, 79368, 70496, 100792, 115934, 79712, 70448, 118238, 79664, 105372, 100750, 79640, 70412, 79628, 70584, 100830, 79800, 70556, 79772, 70542, 70622, 79838, 122176, 126640, 128860, 122144, 126616, 128846, 122128, 126604, 122120, 126598, 122116, 104768, 117936, 124508, 113472, 104736, 126684, 124494, 113440, 122264, 126670, 113424, 104712, 117894, 113416, 122246, 104706, 69952, 100528, 115804, 78656, 69920, 100504, 115790, 96064, 78624, 104856, 117966, 96032, 113560, 122318, 100486, 96016, 78600, 104838, 96008, 69890, 70064, 100572, 78768, 70040, 100558, 96176, 78744, 104910, 96152, 113614, 70022, 78726, 70108, 78812, 70094, 96220, 78798, 122016, 126552, 128814, 122000, 126540, 121992, 126534, 121988, 121986, 104608, 117848, 124462, 113056, 104592, 126574, 113040, 122060, 117830, 113032, 104580, 113028, 104578, 113026, 69792, 100440, 115758, 78240, 69776, 100428, 95136, 78224, 104652, 100422, 95120, 113100, 69764, 95112, 78212, 69762, 78210, 69848, 100462, 78296, 69836, 95192, 78284, 69830, 95180, 78278, 69870, 95214, 121936, 126508, 121928, 126502, 121924, 121922, 104528, 117804, 112848, 104520, 117798, 112840, 121958, 112836, 104514, 112834, 69712, 100396, 78032, 69704, 100390, 94672, 78024, 104550, 94664, 112870, 69698, 94660, 78018, 94658, 78060, 94700, 94694, 126486, 121890, 117782, 104484, 104482, 69672, 77928, 94440, 69666, 77922, 99680, 68160, 99632, 68128, 99608, 115342, 68112, 99596, 68104, 99590, 68448, 99768, 115422, 68400, 99740, 68376, 99726, 68364, 68358, 68536, 99806, 68508, 68494, 68574, 101696, 116400, 123740, 101664, 116376, 101648, 116364, 101640, 116358, 101636, 67904, 99504, 115292, 72512, 67872, 116444, 115278, 72480, 101784, 116430, 72464, 67848, 99462, 72456, 101766, 67842, 68016, 99548, 72624, 67992, 99534, 72600, 101838, 72588, 67974, 68060, 72668, 68046, 72654, 118432, 124760, 127918, 118416, 124748, 118408, 124742, 118404, 118402, 101536, 116312, 105888, 101520, 116300, 105872, 118476, 116294, 105864, 101508, 105860, 101506, 105858, 67744, 99416, 72096, 67728, 116334, 80800, 72080, 101580, 99398, 80784, 105932, 67716, 80776, 72068, 67714, 72066, 67800, 99438, 72152, 67788, 80856, 72140, 67782, 80844, 72134, 67822, 72174, 80878, 126800, 128940, 126792, 128934, 126788, 126786, 118352, 124716, 122576, 126828, 124710, 122568, 126822, 122564, 118338, 122562, 101456, 116268, 105680, 101448, 116262, 114128, 105672, 118374, 114120, 122598, 101442, 114116, 105666, 114114, 67664, 99372, 71888, 67656, 99366, 80336, 71880, 101478, 97232, 80328, 105702, 67650, 97224, 114150, 71874, 97220, 67692, 71916, 67686, 80364, 71910, 97260, 80358, 97254, 126760, 128918, 126756, 126754, 118312, 124694, 122472, 126774, 122468, 118306, 122466, 101416, 116246, 105576, 101412, 113896, 105572, 101410, 113892, 105570, 113890, 67624, 99350, 71784, 101430, 80104, 71780, 67618, 96744, 80100, 71778, 96740, 80098, 96738, 71798, 96758, 126738, 122420, 122418, 105524, 113780, 113778, 71732, 79988, 96500, 96498, 66880, 66848, 98968, 66832, 66824, 66820, 66992, 66968, 66956, 66950, 67036, 67022, 100000, 99984, 115532, 99976, 115526, 99972, 99970, 66720, 98904, 69024, 100056, 98892, 69008, 100044, 69000, 100038, 68996, 66690, 68994, 66776, 98926, 69080, 100078, 69068, 66758, 69062, 66798, 69102, 116560, 116552, 116548, 116546, 99920, 102096, 116588, 115494, 102088, 116582, 102084, 99906, 102082, 66640, 68816, 66632, 98854, 73168, 68808, 66628, 73160, 68804, 66626, 73156, 68802, 66668, 68844, 66662, 73196, 68838, 73190, 124840, 124836, 124834, 116520, 118632, 124854, 118628, 116514, 118626, 99880, 115478, 101992, 116534, 106216, 101988, 99874, 106212, 101986, 106210, 66600, 98838, 68712, 99894, 72936, 68708, 66594, 81384, 72932, 68706, 81380, 72930, 66614, 68726, 72950, 81398, 128980, 128978, 124820, 126900, 124818, 126898, 116500, 118580, 116498, 122740, 118578, 122738, 99860, 101940, 99858, 106100, 101938, 114420]), $a([128352, 129720, 125504, 128304, 129692, 125472, 128280, 129678, 125456, 128268, 125448, 128262, 125444, 125792, 128440, 129758, 120384, 125744, 128412, 120352, 125720, 128398, 120336, 125708, 120328, 125702, 120324, 120672, 125880, 128478, 110144, 120624, 125852, 110112, 120600, 125838, 110096, 120588, 110088, 120582, 110084, 110432, 120760, 125918, 89664, 110384, 120732, 89632, 110360, 120718, 89616, 110348, 89608, 110342, 89952, 110520, 120798, 89904, 110492, 89880, 110478, 89868, 90040, 110558, 90012, 89998, 125248, 128176, 129628, 125216, 128152, 129614, 125200, 128140, 125192, 128134, 125188, 125186, 119616, 125360, 128220, 119584, 125336, 128206, 119568, 125324, 119560, 125318, 119556, 119554, 108352, 119728, 125404, 108320, 119704, 125390, 108304, 119692, 108296, 119686, 108292, 108290, 85824, 108464, 119772, 85792, 108440, 119758, 85776, 108428, 85768, 108422, 85764, 85936, 108508, 85912, 108494, 85900, 85894, 85980, 85966, 125088, 128088, 129582, 125072, 128076, 125064, 128070, 125060, 125058, 119200, 125144, 128110, 119184, 125132, 119176, 125126, 119172, 119170, 107424, 119256, 125166, 107408, 119244, 107400, 119238, 107396, 107394, 83872, 107480, 119278, 83856, 107468, 83848, 107462, 83844, 83842, 83928, 107502, 83916, 83910, 83950, 125008, 128044, 125000, 128038, 124996, 124994, 118992, 125036, 118984, 125030, 118980, 118978, 106960, 119020, 106952, 119014, 106948, 106946, 82896, 106988, 82888, 106982, 82884, 82882, 82924, 82918, 124968, 128022, 124964, 124962, 118888, 124982, 118884, 118882, 106728, 118902, 106724, 106722, 82408, 106742, 82404, 82402, 124948, 124946, 118836, 118834, 106612, 106610, 124224, 127664, 129372, 124192, 127640, 129358, 124176, 127628, 124168, 127622, 124164, 124162, 117568, 124336, 127708, 117536, 124312, 127694, 117520, 124300, 117512, 124294, 117508, 117506, 104256, 117680, 124380, 104224, 117656, 124366, 104208, 117644, 104200, 117638, 104196, 104194, 77632, 104368, 117724, 77600, 104344, 117710, 77584, 104332, 77576, 104326, 77572, 77744, 104412, 77720, 104398, 77708, 77702, 77788, 77774, 128672, 129880, 93168, 128656, 129868, 92664, 128648, 129862, 92412, 128644, 128642, 124064, 127576, 129326, 126368, 124048, 129902, 126352, 128716, 127558, 126344, 124036, 126340, 124034, 126338, 117152, 124120, 127598, 121760, 117136, 124108, 121744, 126412, 124102, 121736, 117124, 121732, 117122, 121730, 103328, 117208, 124142, 112544, 103312, 117196, 112528, 121804, 117190, 112520, 103300, 112516, 103298, 112514, 75680, 103384, 117230, 94112, 75664, 103372, 94096, 112588, 103366, 94088, 75652, 94084, 75650, 75736, 103406, 94168, 75724, 94156, 75718, 94150, 75758, 128592, 129836, 91640, 128584, 129830, 91388, 128580, 91262, 128578, 123984, 127532, 126160, 123976, 127526, 126152, 128614, 126148, 123970, 126146, 116944, 124012, 121296, 116936, 124006, 121288, 126182, 121284, 116930, 121282, 102864, 116972, 111568, 102856, 116966, 111560, 121318, 111556, 102850, 111554, 74704, 102892, 92112, 74696, 102886, 92104, 111590, 92100, 74690, 92098, 74732, 92140, 74726, 92134, 128552, 129814, 90876, 128548, 90750, 128546, 123944, 127510, 126056, 128566, 126052, 123938, 126050, 116840, 123958, 121064, 116836, 121060, 116834, 121058, 102632, 116854, 111080, 121078, 111076, 102626, 111074, 74216, 102646, 91112, 74212, 91108, 74210, 91106, 74230, 91126, 128532, 90494, 128530, 123924, 126004, 123922, 126002, 116788, 120948, 116786, 120946, 102516, 110836, 102514, 110834, 73972, 90612, 73970, 90610, 128522, 123914, 125978, 116762, 120890, 102458, 110714, 123552, 127320, 129198, 123536, 127308, 123528, 127302, 123524, 123522, 116128, 123608, 127342, 116112, 123596, 116104, 123590, 116100, 116098, 101280, 116184, 123630, 101264, 116172, 101256, 116166, 101252, 101250, 71584, 101336, 116206, 71568, 101324, 71560, 101318, 71556, 71554, 71640, 101358, 71628, 71622, 71662, 127824, 129452, 79352, 127816, 129446, 79100, 127812, 78974, 127810, 123472, 127276, 124624, 123464, 127270, 124616, 127846, 124612, 123458, 124610, 115920, 123500, 118224, 115912, 123494, 118216, 124646, 118212, 115906, 118210, 100816, 115948, 105424, 100808, 115942, 105416, 118246, 105412, 100802, 105410, 70608, 100844, 79824, 70600, 100838, 79816, 105446, 79812, 70594, 79810, 70636, 79852, 70630, 79846, 129960, 95728, 113404, 129956, 95480, 113278, 129954, 95356, 95294, 127784, 129430, 78588, 128872, 129974, 95996, 78462, 128868, 127778, 95870, 128866, 123432, 127254, 124520, 123428, 126696, 128886, 123426, 126692, 124514, 126690, 115816, 123446, 117992, 115812, 122344, 117988, 115810, 122340, 117986, 122338, 100584, 115830, 104936, 100580, 113640, 104932, 100578, 113636, 104930, 113634, 70120, 100598, 78824, 70116, 96232, 78820, 70114, 96228, 78818, 96226, 70134, 78838, 129940, 94968, 113022, 129938, 94844, 94782, 127764, 78206, 128820, 127762, 95102, 128818, 123412, 124468, 123410, 126580, 124466, 126578, 115764, 117876, 115762, 122100, 117874, 122098, 100468, 104692, 100466, 113140, 104690, 113138, 69876, 78324, 69874, 95220, 78322, 95218, 129930, 94588, 94526, 127754, 128794, 123402, 124442, 126522, 115738, 117818, 121978, 100410, 104570, 112890, 69754, 78074, 94714, 94398, 123216, 127148, 123208, 127142, 123204, 123202, 115408, 123244, 115400, 123238, 115396, 115394, 99792, 115436, 99784, 115430, 99780, 99778, 68560, 99820, 68552, 99814, 68548, 68546, 68588, 68582, 127400, 129238, 72444, 127396, 72318, 127394, 123176, 127126, 123752, 123172, 123748, 123170, 123746, 115304, 123190, 116456, 115300, 116452, 115298, 116450, 99560, 115318, 101864, 99556, 101860, 99554, 101858, 68072, 99574, 72680, 68068, 72676, 68066, 72674, 68086, 72694, 129492, 80632, 105854, 129490, 80508, 80446, 127380, 72062, 127924, 127378, 80766, 127922, 123156, 123700, 123154, 124788, 123698, 124786, 115252, 116340, 115250, 118516, 116338, 118514, 99444, 101620, 99442, 105972, 101618, 105970, 67828, 72180, 67826, 80884, 72178, 80882, 97008, 114044, 96888, 113982, 96828, 96798, 129482, 80252, 130010, 97148, 80190, 97086, 127370, 127898, 128954, 123146, 123674, 124730, 126842, 115226, 116282, 118394, 122618, 99386, 101498, 105722, 114170, 67706, 71930, 80378, 96632, 113854, 96572, 96542, 80062, 96702, 96444, 96414, 96350, 123048, 123044, 123042, 115048, 123062, 115044, 115042, 99048, 115062, 99044, 99042, 67048, 99062, 67044, 67042, 67062, 127188, 68990, 127186, 123028, 123316, 123026, 123314, 114996, 115572, 114994, 115570, 98932, 100084, 98930, 100082, 66804, 69108, 66802, 69106, 129258, 73084, 73022, 127178, 127450, 123018, 123290, 123834, 114970, 115514, 116602, 98874, 99962, 102138, 66682, 68858, 73210, 81272, 106174, 81212, 81182, 72894, 81342, 97648, 114364, 97592, 114334, 97564, 97550, 81084, 97724, 81054, 97694, 97464, 114270, 97436, 97422, 80990, 97502, 97372, 97358, 97326, 114868, 114866, 98676, 98674, 66292, 66290, 123098, 114842, 115130, 98618, 99194, 66170, 67322, 69310, 73404, 73374, 81592, 106334, 81564, 81550, 73310, 81630, 97968, 114524, 97944, 114510, 97932, 97926, 81500, 98012, 81486, 97998, 97880, 114478, 97868, 97862, 81454, 97902, 97836, 97830, 69470, 73564, 73550, 81752, 106414, 81740, 81734, 73518, 81774, 81708, 81702]), $a([109536, 120312, 86976, 109040, 120060, 86496, 108792, 119934, 86256, 108668, 86136, 129744, 89056, 110072, 129736, 88560, 109820, 129732, 88312, 109694, 129730, 88188, 128464, 129772, 89592, 128456, 129766, 89340, 128452, 89214, 128450, 125904, 128492, 125896, 128486, 125892, 125890, 120784, 125932, 120776, 125926, 120772, 120770, 110544, 120812, 110536, 120806, 110532, 84928, 108016, 119548, 84448, 107768, 119422, 84208, 107644, 84088, 107582, 84028, 129640, 85488, 108284, 129636, 85240, 108158, 129634, 85116, 85054, 128232, 129654, 85756, 128228, 85630, 128226, 125416, 128246, 125412, 125410, 119784, 125430, 119780, 119778, 108520, 119798, 108516, 108514, 83424, 107256, 119166, 83184, 107132, 83064, 107070, 83004, 82974, 129588, 83704, 107390, 129586, 83580, 83518, 128116, 83838, 128114, 125172, 125170, 119284, 119282, 107508, 107506, 82672, 106876, 82552, 106814, 82492, 82462, 129562, 82812, 82750, 128058, 125050, 119034, 82296, 106686, 82236, 82206, 82366, 82108, 82078, 76736, 103920, 117500, 76256, 103672, 117374, 76016, 103548, 75896, 103486, 75836, 129384, 77296, 104188, 129380, 77048, 104062, 129378, 76924, 76862, 127720, 129398, 77564, 127716, 77438, 127714, 124392, 127734, 124388, 124386, 117736, 124406, 117732, 117730, 104424, 117750, 104420, 104418, 112096, 121592, 126334, 92608, 111856, 121468, 92384, 111736, 121406, 92272, 111676, 92216, 111646, 92188, 75232, 103160, 117118, 93664, 74992, 103036, 93424, 112252, 102974, 93304, 74812, 93244, 74782, 93214, 129332, 75512, 103294, 129908, 129330, 93944, 75388, 129906, 93820, 75326, 93758, 127604, 75646, 128756, 127602, 94078, 128754, 124148, 126452, 124146, 126450, 117236, 121844, 117234, 121842, 103412, 103410, 91584, 111344, 121212, 91360, 111224, 121150, 91248, 111164, 91192, 111134, 91164, 91150, 74480, 102780, 91888, 74360, 102718, 91768, 111422, 91708, 74270, 91678, 129306, 74620, 129850, 92028, 74558, 91966, 127546, 128634, 124026, 126202, 116986, 121338, 102906, 90848, 110968, 121022, 90736, 110908, 90680, 110878, 90652, 90638, 74104, 102590, 91000, 74044, 90940, 74014, 90910, 74174, 91070, 90480, 110780, 90424, 110750, 90396, 90382, 73916, 90556, 73886, 90526, 90296, 110686, 90268, 90254, 73822, 90334, 90204, 90190, 71136, 101112, 116094, 70896, 100988, 70776, 100926, 70716, 70686, 129204, 71416, 101246, 129202, 71292, 71230, 127348, 71550, 127346, 123636, 123634, 116212, 116210, 101364, 101362, 79296, 105200, 118140, 79072, 105080, 118078, 78960, 105020, 78904, 104990, 78876, 78862, 70384, 100732, 79600, 70264, 100670, 79480, 105278, 79420, 70174, 79390, 129178, 70524, 129466, 79740, 70462, 79678, 127290, 127866, 123514, 124666, 115962, 118266, 100858, 113376, 122232, 126654, 95424, 113264, 122172, 95328, 113208, 122142, 95280, 113180, 95256, 113166, 95244, 78560, 104824, 117950, 95968, 78448, 104764, 95856, 113468, 104734, 95800, 78364, 95772, 78350, 95758, 70008, 100542, 78712, 69948, 96120, 78652, 69918, 96060, 78622, 96030, 70078, 78782, 96190, 94912, 113008, 122044, 94816, 112952, 122014, 94768, 112924, 94744, 112910, 94732, 94726, 78192, 104636, 95088, 78136, 104606, 95032, 113054, 95004, 78094, 94990, 69820, 78268, 69790, 95164, 78238, 95134, 94560, 112824, 121950, 94512, 112796, 94488, 112782, 94476, 94470, 78008, 104542, 94648, 77980, 94620, 77966, 94606, 69726, 78046, 94686, 94384, 112732, 94360, 112718, 94348, 94342, 77916, 94428, 77902, 94414, 94296, 112686, 94284, 94278, 77870, 94318, 94252, 94246, 68336, 99708, 68216, 99646, 68156, 68126, 68476, 68414, 127162, 123258, 115450, 99834, 72416, 101752, 116414, 72304, 101692, 72248, 101662, 72220, 72206, 67960, 99518, 72568, 67900, 72508, 67870, 72478, 68030, 72638, 80576, 105840, 118460, 80480, 105784, 118430, 80432, 105756, 80408, 105742, 80396, 80390, 72048, 101564, 80752, 71992, 101534, 80696, 71964, 80668, 71950, 80654, 67772, 72124, 67742, 80828, 72094, 80798, 114016, 122552, 126814, 96832, 113968, 122524, 96800, 113944, 122510, 96784, 113932, 96776, 113926, 96772, 80224, 105656, 118366, 97120, 80176, 105628, 97072, 114076, 105614, 97048, 80140, 97036, 80134, 97030, 71864, 101470, 80312, 71836, 97208, 80284, 71822, 97180, 80270, 97166, 67678, 71902, 80350, 97246, 96576, 113840, 122460, 96544, 113816, 122446, 96528, 113804, 96520, 113798, 96516, 96514, 80048, 105564, 96688, 80024, 105550, 96664, 113870, 96652, 80006, 96646, 71772, 80092, 71758, 96732, 80078, 96718, 96416, 113752, 122414, 96400, 113740, 96392, 113734, 96388, 96386, 79960, 105518, 96472, 79948, 96460, 79942, 96454, 71726, 79982, 96494, 96336, 113708, 96328, 113702, 96324, 96322, 79916, 96364, 79910, 96358, 96296, 113686, 96292, 96290, 79894, 96310, 66936, 99006, 66876, 66846, 67006, 68976, 100028, 68920, 99998, 68892, 68878, 66748, 69052, 66718, 69022, 73056, 102072, 116574, 73008, 102044, 72984, 102030, 72972, 72966, 68792, 99934, 73144, 68764, 73116, 68750, 73102, 66654, 68830, 73182, 81216, 106160, 118620, 81184, 106136, 118606, 81168, 106124, 81160, 106118, 81156, 81154, 72880, 101980, 81328, 72856, 101966, 81304, 106190, 81292, 72838, 81286, 68700, 72924, 68686, 81372, 72910, 81358, 114336, 122712, 126894, 114320, 122700, 114312, 122694, 114308, 114306, 81056, 106072, 118574, 97696, 81040, 106060, 97680, 114380, 106054, 97672, 81028, 97668, 81026, 97666, 72792, 101934, 81112, 72780, 97752, 81100, 72774, 97740, 81094, 97734, 68654, 72814, 81134, 97774, 114256, 122668, 114248, 122662, 114244, 114242, 80976, 106028, 97488, 80968, 106022, 97480, 114278, 97476, 80962, 97474, 72748, 81004, 72742, 97516, 80998, 97510, 114216, 122646, 114212, 114210, 80936, 106006, 97384, 80932, 97380, 80930, 97378, 72726, 80950, 97398, 114196, 114194, 80916, 97332, 80914, 97330, 66236, 66206, 67256, 99166, 67228, 67214, 66142, 67294, 69296, 100188, 69272, 100174, 69260, 69254, 67164, 69340, 67150, 69326, 73376, 102232, 116654, 73360, 102220, 73352, 102214, 73348, 73346, 69208, 100142, 73432, 102254, 73420, 69190, 73414, 67118, 69230, 73454, 106320, 118700, 106312, 118694, 106308, 106306, 73296, 102188, 81616, 106348, 102182, 81608, 73284, 81604, 73282, 81602, 69164, 73324, 69158, 81644, 73318, 81638, 122792, 126934, 122788, 122786, 106280, 118678, 114536, 106276, 114532, 106274, 114530, 73256, 102166, 81512, 73252, 98024, 81508, 73250, 98020, 81506, 98018, 69142, 73270, 81526, 98038, 122772, 122770, 106260, 114484, 106258, 114482, 73236, 81460, 73234, 97908, 81458, 97906, 122762, 106250, 114458, 73226, 81434, 97850, 66396, 66382, 67416, 99246, 67404, 67398, 66350, 67438, 69456, 100268, 69448, 100262, 69444, 69442, 67372, 69484, 67366, 69478, 102312, 116694, 102308, 102306, 69416, 100246, 73576, 102326, 73572, 69410, 73570, 67350, 69430, 73590, 118740, 118738, 102292, 106420, 102290, 106418, 69396, 73524, 69394, 81780, 73522, 81778, 118730, 102282, 106394, 69386, 73498, 81722, 66476, 66470, 67496, 99286, 67492, 67490, 66454, 67510, 100308, 100306, 67476, 69556, 67474, 69554, 116714])]); //#18085
    $_.cwtobits = function() {
        var _Ge = $get($_.clusters, $k[--$j]); //#18090
        $_.v = $get(_Ge, $k[--$j]); //#18090
        $k[$j++] = Infinity; //#18091
        for (var _Gh = 0; _Gh < 17; _Gh++) { //#18091
            $k[$j++] = 0; //#18091
        } //#18091
        var _Gk = $cvrs($s(17), $_.v, 2); //#18091
        for (var _Gl = 0, _Gm = _Gk.length; _Gl < _Gm; _Gl++) { //#18091
            $k[$j++] = $get(_Gk, _Gl) - 48; //#18091
        } //#18091
        var _Go = $a(); //#18091
        $k[$j++] = $geti(_Go, _Go.length - 17, 17); //#18092
    }; //#18092
    if ($_.compact) { //#18099
        $_.rwid = (((17 * $_.c) + 17) + 17) + 1; //#18097
    } else { //#18099
        $_.rwid = ((((17 * $_.c) + 17) + 17) + 17) + 18; //#18099
    } //#18099
    $_.pixs = $a(($_.rwid * $_.r) * $_.rowmult); //#18101
    for (var _Gz = 0, _Gy = $_.r - 1; _Gz <= _Gy; _Gz += 1) { //#18134
        $_.i = _Gz; //#18104
        if (($_.i % 3) == 0) { //#18109
            $_.lcw = ((~~($_.i / 3)) * 30) + (~~(($_.r - 1) / 3)); //#18107
            $_.rcw = ($f(((~~($_.i / 3)) * 30) + $_.c)) - 1; //#18108
        } //#18108
        if (($_.i % 3) == 1) { //#18113
            $_.lcw = (((~~($_.i / 3)) * 30) + ($_.eclevel * 3)) + (($_.r - 1) % 3); //#18111
            $_.rcw = ((~~($_.i / 3)) * 30) + (~~(($_.r - 1) / 3)); //#18112
        } //#18112
        if (($_.i % 3) == 2) { //#18117
            $_.lcw = ($f(((~~($_.i / 3)) * 30) + $_.c)) - 1; //#18115
            $_.rcw = (((~~($_.i / 3)) * 30) + ($_.eclevel * 3)) + (($_.r - 1) % 3); //#18116
        } //#18116
        $k[$j++] = Infinity; //#18119
        $k[$j++] = 1; //#18121
        $k[$j++] = 1; //#18121
        $k[$j++] = 1; //#18121
        $k[$j++] = 1; //#18121
        $k[$j++] = 1; //#18121
        $k[$j++] = 1; //#18121
        $k[$j++] = 1; //#18121
        $k[$j++] = 1; //#18121
        $k[$j++] = 0; //#18121
        $k[$j++] = 1; //#18121
        $k[$j++] = 0; //#18121
        $k[$j++] = 1; //#18121
        $k[$j++] = 0; //#18121
        $k[$j++] = 1; //#18121
        $k[$j++] = 0; //#18121
        $k[$j++] = 0; //#18121
        $k[$j++] = 0; //#18121
        $k[$j++] = $_.lcw; //#18121
        $k[$j++] = $_.i % 3; //#18121
        $_.cwtobits(); //#18121
        $aload($k[--$j]); //#18121
        var _HO = $geti($_.cws, $_.c * $_.i, $_.c); //#18122
        for (var _HP = 0, _HQ = _HO.length; _HP < _HQ; _HP++) { //#18122
            $k[$j++] = $get(_HO, _HP); //#18122
            $k[$j++] = $_.i % 3; //#18122
            $_.cwtobits(); //#18122
            $aload($k[--$j]); //#18122
        } //#18122
        if ($_.compact) { //#18127
            $k[$j++] = 1; //#18124
        } else { //#18127
            $k[$j++] = $_.rcw; //#18126
            $k[$j++] = $_.i % 3; //#18126
            $_.cwtobits(); //#18126
            $aload($k[--$j]); //#18126
            $k[$j++] = 1; //#18127
            $k[$j++] = 1; //#18127
            $k[$j++] = 1; //#18127
            $k[$j++] = 1; //#18127
            $k[$j++] = 1; //#18127
            $k[$j++] = 1; //#18127
            $k[$j++] = 1; //#18127
            $k[$j++] = 0; //#18127
            $k[$j++] = 1; //#18127
            $k[$j++] = 0; //#18127
            $k[$j++] = 0; //#18127
            $k[$j++] = 0; //#18127
            $k[$j++] = 1; //#18127
            $k[$j++] = 0; //#18127
            $k[$j++] = 1; //#18127
            $k[$j++] = 0; //#18127
            $k[$j++] = 0; //#18127
            $k[$j++] = 1; //#18127
        } //#18127
        var _HY = $a(); //#18127
        $k[$j++] = _HY; //#18132
        for (var _Hb = 0, _Ha = $_.rowmult - 1; _Hb <= _Ha; _Hb += 1) { //#18132
            var _Hg = $k[$j - 1]; //#18131
            $puti($_.pixs, (_Hb + ($_.i * $_.rowmult)) * $_.rwid, _Hg); //#18131
        } //#18131
        $j--; //#18133
    } //#18133
    var _Hp = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.rwid],
        ["pixy", $_.r * $_.rowmult],
        ["height", ($_.r * $_.rowmult) / 72],
        ["width", $_.rwid / 72],
        ["borderleft", 2],
        ["borderright", 2],
        ["bordertop", 2],
        ["borderbottom", 2],
        ["opt", $_.options]
    ]); //#18148
    $k[$j++] = _Hp; //#18151
    if (!$_.dontdraw) { //#18151
        bwipp_renmatrix(); //#18151
    } //#18151
    $_ = $__; //#18155
} //bwipp_pdf417
function bwipp_pdf417compact() {
    var $__ = $_; //#18184
    $_ = Object.assign({}, $_); //#18184
    $_.dontdraw = false; //#18187
    $k[$j++] = $_; //#18189
    bwipp_processoptions(); //#18189
    $_.options = $k[--$j]; //#18189
    $_.barcode = $k[--$j]; //#18190
    $put($_.options, "dontdraw", true); //#18193
    $put($_.options, "compact", true); //#18194
    $k[$j++] = 'args'; //#18196
    $k[$j++] = $_.barcode; //#18196
    $k[$j++] = $_.options; //#18196
    bwipp_pdf417(); //#18196
    var _6 = $k[--$j]; //#18196
    $_[$k[--$j]] = _6; //#18196
    $put($_.args, "opt", $_.options); //#18198
    $k[$j++] = $_.args; //#18201
    if (!$_.dontdraw) { //#18201
        bwipp_renmatrix(); //#18201
    } //#18201
    $_ = $__; //#18203
} //bwipp_pdf417compact
function bwipp_micropdf417() {
    var $__ = $_; //#18234
    $_ = Object.assign({}, $_); //#18234
    $_.dontdraw = false; //#18237
    $_.version = "unset"; //#18238
    $_.columns = 0; //#18239
    $_.rows = 0; //#18240
    $_.rowmult = 2; //#18241
    $_.cca = false; //#18242
    $_.ccb = false; //#18243
    $_.raw = false; //#18244
    $_.parse = false; //#18245
    $_.parsefnc = false; //#18246
    $k[$j++] = $_; //#18248
    bwipp_processoptions(); //#18248
    $_.options = $k[--$j]; //#18248
    $_.barcode = $k[--$j]; //#18249
    if ($_.barcode.length == 0) { //#18253
        $k[$j++] = 'bwipp.micropdf417emptyData#18252'; //#18252
        $k[$j++] = "The data must not be empty"; //#18252
        bwipp_raiseerror(); //#18252
    } //#18252
    if ($_.rowmult <= 0) { //#18257
        $k[$j++] = 'bwipp.micropdf417badRowMult#18256'; //#18256
        $k[$j++] = "The row multiplier must be greater than zero"; //#18256
        bwipp_raiseerror(); //#18256
    } //#18256
    if (($_.cca && $_.ccb) || (($_.cca && $_.raw) || ($_.ccb && $_.raw))) { //#18261
        $k[$j++] = 'bwipp.micropdf417ccaAndCcb#18260'; //#18260
        $k[$j++] = "Cannot combine cca, ccb and raw"; //#18260
        bwipp_raiseerror(); //#18260
    } //#18260
    if ($ne($_.version, "unset")) { //#18282
        $search($_.version, "x"); //#18265
        if ($k[--$j]) { //#18280
            var _D = $k[--$j]; //#18266
            $k[$j - 1] = _D; //#18266
            var _F = $k[$j - 1]; //#18267
            var _G = $k[$j - 2]; //#18267
            $k[$j++] = _G; //#18267
            $k[$j++] = _F; //#18267
            $astore($a(2)); //#18267
            $forall($k[--$j], function() { //#18276
                var _J = $k[$j - 1]; //#18269
                $k[$j++] = true; //#18269
                if (_J.length == 0) { //#18269
                    $k[$j - 1] = false; //#18269
                } //#18269
                var _K = $k[--$j]; //#18270
                var _L = $k[--$j]; //#18270
                $k[$j++] = _K; //#18272
                $forall(_L, function() { //#18272
                    var _M = $k[--$j]; //#18271
                    if ((_M < 48) || (_M > 57)) { //#18271
                        $k[$j - 1] = false; //#18271
                    } //#18271
                }); //#18271
                if (!$k[--$j]) { //#18275
                    $k[$j++] = 'bwipp.micropdf417BadVersionBadRowOrColumn#18274'; //#18274
                    $k[$j++] = "version must be formatted as RxC"; //#18274
                    bwipp_raiseerror(); //#18274
                } //#18274
            }); //#18274
            $_.rows = $cvi($k[--$j]); //#18277
            $_.columns = $cvi($k[--$j]); //#18278
        } else { //#18280
            $j--; //#18280
            $k[$j++] = 'bwipp.micropdf417badVersionFormat#18280'; //#18280
            $k[$j++] = "version must be formatted as RxC"; //#18280
            bwipp_raiseerror(); //#18280
        } //#18280
    } //#18280
    $_.T = 0; //#18288
    $_.N = 1; //#18288
    $_.B = 2; //#18288
    $_.A = 0; //#18289
    $_.L = 1; //#18289
    $_.M = 2; //#18289
    $_.P = 3; //#18289
    $_.tl = -1; //#18292
    $_.nl = -2; //#18292
    $_.bl = -3; //#18292
    $_.bl6 = -4; //#18292
    $_.bs = -5; //#18292
    $_.al = -6; //#18295
    $_.ll = -7; //#18295
    $_.ml = -8; //#18295
    $_.pl = -9; //#18295
    $_.as = -10; //#18295
    $_.ps = -11; //#18295
    $_.m05 = -12; //#18298
    $_.m06 = -13; //#18298
    $_.charmaps = $a([$a(["A", "a", "0", ";"]), $a(["B", "b", "1", "<"]), $a(["C", "c", "2", ">"]), $a(["D", "d", "3", "@"]), $a(["E", "e", "4", "["]), $a(["F", "f", "5", 92]), $a(["G", "g", "6", "]"]), $a(["H", "h", "7", "_"]), $a(["I", "i", "8", "`"]), $a(["J", "j", "9", "~"]), $a(["K", "k", "&", "!"]), $a(["L", "l", 13, 13]), $a(["M", "m", 9, 9]), $a(["N", "n", ",", ","]), $a(["O", "o", ":", ":"]), $a(["P", "p", "#", 10]), $a(["Q", "q", "-", "-"]), $a(["R", "r", ".", "."]), $a(["S", "s", "$", "$"]), $a(["T", "t", "/", "/"]), $a(["U", "u", "+", "\""]), $a(["V", "v", "%", "|"]), $a(["W", "w", "*", "*"]), $a(["X", "x", "=", 40]), $a(["Y", "y", "^", 41]), $a(["Z", "z", $_.pl, "?"]), $a([" ", " ", " ", "{"]), $a([$_.ll, $_.as, $_.ll, "}"]), $a([$_.ml, $_.ml, $_.al, "'"]), $a([$_.ps, $_.ps, $_.ps, $_.al])]); //#18333
    $_.charvals = $a([new Map, new Map, new Map, new Map]); //#18336
    $_.alltext = new Map; //#18337
    for (var _19 = 0, _18 = $_.charmaps.length - 1; _19 <= _18; _19 += 1) { //#18347
        $_.i = _19; //#18339
        $_.encs = $get($_.charmaps, $_.i); //#18340
        for (var _1D = 0; _1D <= 3; _1D += 1) { //#18346
            $_.j = _1D; //#18342
            var _1G = $get($_.encs, $_.j); //#18343
            $k[$j++] = _1G; //#18343
            if ($eq($type(_1G), 'stringtype')) { //#18343
                var _1J = $get($k[--$j], 0); //#18343
                $k[$j++] = _1J; //#18343
            } //#18343
            var _1K = $k[--$j]; //#18344
            $put($get($_.charvals, $_.j), _1K, $_.i); //#18344
            $put($_.alltext, _1K, -1); //#18345
        } //#18345
    } //#18345
    $_.e = 10000; //#18349
    $_.latlen = $a([$a([0, 1, 1, 2]), $a([2, 0, 1, 2]), $a([1, 1, 0, 1]), $a([1, 2, 2, 0])]); //#18357
    $_.latseq = $a([$a([$a([]), $a([$_.ll]), $a([$_.ml]), $a([$_.ml, $_.pl])]), $a([$a([$_.ml, $_.al]), $a([]), $a([$_.ml]), $a([$_.ml, $_.pl])]), $a([$a([$_.al]), $a([$_.ll]), $a([]), $a([$_.pl])]), $a([$a([$_.al]), $a([$_.al, $_.ll]), $a([$_.al, $_.ml]), $a([])])]); //#18365
    $_.shftlen = $a([$a([$_.e, $_.e, $_.e, 1]), $a([1, $_.e, $_.e, 1]), $a([$_.e, $_.e, $_.e, 1]), $a([$_.e, $_.e, $_.e, $_.e])]); //#18373
    if ($_.raw || $_.cca) { //#18395
        $_.datcws = $a($_.barcode.length); //#18378
        $_.i = 0; //#18379
        $_.j = 0; //#18379
        for (;;) { //#18390
            if ($_.i >= ($_.barcode.length - 3)) { //#18381
                break; //#18381
            } //#18381
            if ($get($_.barcode, $_.i) != 94) { //#18382
                break; //#18382
            } //#18382
            var _2a = $geti($_.barcode, $_.i + 1, 3); //#18383
            $k[$j++] = _2a; //#18385
            $k[$j++] = false; //#18385
            for (var _2b = 0, _2c = _2a.length; _2b < _2c; _2b++) { //#18385
                var _2d = $get(_2a, _2b); //#18385
                if ((_2d < 48) || (_2d > 57)) { //#18384
                    $k[$j - 1] = true; //#18384
                } //#18384
            } //#18384
            if ($k[--$j]) { //#18385
                $j--; //#18385
                break; //#18385
            } //#18385
            $_.cw = $cvi($k[--$j]); //#18386
            $put($_.datcws, $_.j, $_.cw); //#18387
            $_.i = $_.i + 4; //#18388
            $_.j = $_.j + 1; //#18389
        } //#18389
        if ($_.i != $_.barcode.length) { //#18393
            $k[$j++] = 'bwipp.micropdf417badCcaRawFormat#18392'; //#18392
            $k[$j++] = "cca and raw data must be formatted as ^NNN"; //#18392
            bwipp_raiseerror(); //#18392
        } //#18392
        $_.datcws = $geti($_.datcws, 0, $_.j); //#18394
    } //#18394
    $_.encb = function() {
        $_.in = $k[--$j]; //#18398
        $_.inlen = $_.in.length; //#18399
        $_.out = $a(((~~($_.inlen / 6)) * 5) + ($_.inlen % 6)); //#18400
        for (var _2x = 0, _2w = (~~($_.inlen / 6)) - 1; _2x <= _2w; _2x += 1) { //#18423
            $_.k = _2x; //#18402
            $k[$j++] = Infinity; //#18403
            $aload($geti($_.in, $_.k * 6, 3)); //#18403
            $_.msbs = $a(); //#18403
            $k[$j++] = Infinity; //#18404
            $aload($_.msbs); //#18405
            var _33 = $k[--$j]; //#18405
            var _34 = $k[--$j]; //#18405
            var _35 = $k[--$j]; //#18405
            $k[$j++] = $f(_33 + _34 * 256 + _35 * 65536); //#18406
            for (var _36 = 0; _36 < 3; _36++) { //#18406
                var _37 = $k[--$j]; //#18406
                $k[$j++] = _37 % 900; //#18406
                $k[$j++] = ~~(_37 / 900); //#18406
            } //#18406
            $_.mscs = $a(); //#18406
            $k[$j++] = Infinity; //#18408
            $aload($geti($_.in, ($_.k * 6) + 3, 3)); //#18408
            $_.lsbs = $a(); //#18408
            $k[$j++] = Infinity; //#18409
            $aload($_.lsbs); //#18410
            var _3E = $k[--$j]; //#18410
            var _3F = $k[--$j]; //#18410
            var _3G = $k[--$j]; //#18410
            $k[$j++] = $f(_3E + _3F * 256 + _3G * 65536); //#18411
            for (var _3H = 0; _3H < 3; _3H++) { //#18411
                var _3I = $k[--$j]; //#18411
                $k[$j++] = _3I % 900; //#18411
                $k[$j++] = ~~(_3I / 900); //#18411
            } //#18411
            $_.lscs = $a(); //#18411
            var _3L = $get($_.lscs, 0); //#18413
            var _3N = $get($_.mscs, 0); //#18413
            $put($_.out, ($_.k * 5) + 4, ($f(_3L + (_3N * 316))) % 900); //#18414
            var _3R = $get($_.lscs, 1); //#18415
            var _3T = $get($_.mscs, 0); //#18415
            var _3V = $get($_.mscs, 1); //#18415
            $put($_.out, $_.k * 5 + 3, $f(~~((_3L + _3N * 316) / 900) + _3R + _3T * 641 + _3V * 316) % 900); //#18416
            var _3Z = $get($_.lscs, 2); //#18417
            var _3b = $get($_.mscs, 0); //#18417
            var _3d = $get($_.mscs, 1); //#18417
            var _3f = $get($_.mscs, 2); //#18417
            $put($_.out, $_.k * 5 + 2, $f(~~((~~((_3L + _3N * 316) / 900) + _3R + _3T * 641 + _3V * 316) / 900) + _3Z + _3b * 20 + _3d * 641 + _3f * 316) % 900); //#18418
            var _3j = $get($_.lscs, 3); //#18419
            var _3l = $get($_.mscs, 1); //#18419
            var _3n = $get($_.mscs, 2); //#18419
            $put($_.out, $_.k * 5 + 1, $f(~~((~~((~~((_3L + _3N * 316) / 900) + _3R + _3T * 641 + _3V * 316) / 900) + _3Z + _3b * 20 + _3d * 641 + _3f * 316) / 900) + _3j + _3l * 20 + _3n * 641) % 900); //#18420
            $put($_.out, $_.k * 5, $f(~~((~~((~~((~~((_3L + _3N * 316) / 900) + _3R + _3T * 641 + _3V * 316) / 900) + _3Z + _3b * 20 + _3d * 641 + _3f * 316) / 900) + _3j + _3l * 20 + _3n * 641) / 900) + $get($_.mscs, 2) * 20) % 900); //#18422
        } //#18422
        $_.rem = $_.inlen % 6; //#18424
        if ($_.rem != 0) { //#18429
            $k[$j++] = $_.out; //#18427
            $k[$j++] = $_.out.length - $_.rem; //#18427
            $k[$j++] = Infinity; //#18427
            $aload($geti($_.in, $_.inlen - $_.rem, $_.rem)); //#18427
            var _44 = $a(); //#18427
            var _45 = $k[--$j]; //#18428
            $puti($k[--$j], _45, _44); //#18428
        } //#18428
        $k[$j++] = $_.out; //#18430
    }; //#18430
    if ($_.ccb) { //#18439
        $_.barlen = $_.barcode.length; //#18434
        $_.datcws = $a((((~~($_.barlen / 6)) * 5) + ($_.barlen % 6)) + 2); //#18435
        $put($_.datcws, 0, 920); //#18436
        var _4G = (($_.barlen % 6) == 0) ? 924 : 901; //#18437
        $put($_.datcws, 1, _4G); //#18437
        $k[$j++] = $_.datcws; //#18438
        $k[$j++] = 2; //#18438
        $k[$j++] = Infinity; //#18438
        $forall($_.barcode); //#18438
        var _4J = $a(); //#18438
        $k[$j++] = _4J; //#18438
        $_.encb(); //#18438
        var _4K = $k[--$j]; //#18438
        var _4L = $k[--$j]; //#18438
        $puti($k[--$j], _4L, _4K); //#18438
    } //#18438
    if (((!$_.raw) && (!$_.cca)) && (!$_.ccb)) { //#18840
        var _4S = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true]
        ]); //#18450
        $_.fncvals = _4S; //#18451
        $k[$j++] = 'msg'; //#18452
        $k[$j++] = $_.barcode; //#18452
        $k[$j++] = $_.fncvals; //#18452
        bwipp_parseinput(); //#18452
        var _4V = $k[--$j]; //#18452
        $_[$k[--$j]] = _4V; //#18452
        $_.msglen = $_.msg.length; //#18453
        if ($_.msglen >= 9) { //#18471
            $aload($geti($_.msg, 0, 7)); //#18457
            var _4b = $k[--$j]; //#18458
            $k[$j - 1] = _4b == 29; //#18458
            var _4d = $k[--$j]; //#18458
            var _4e = $k[--$j]; //#18458
            var _4f = $k[--$j]; //#18458
            var _4g = $k[--$j]; //#18459
            var _4h = $k[--$j]; //#18459
            var _4i = $k[--$j]; //#18459
            if (((((_4d && (_4e == 48)) && (_4f == 30)) && (_4g == 62)) && (_4h == 41)) && (_4i == 91)) { //#18470
                $aload($geti($_.msg, $_.msglen - 2, 2)); //#18460
                var _4m = $k[--$j]; //#18461
                var _4n = $k[--$j]; //#18461
                if ((_4m == 4) && (_4n == 30)) { //#18469
                    if ($get($_.msg, 5) == 53) { //#18466
                        $k[$j++] = Infinity; //#18463
                        $k[$j++] = $_.m05; //#18463
                        $aload($geti($_.msg, 7, $_.msg.length - 9)); //#18463
                        $_.msg = $a(); //#18463
                    } else { //#18466
                        if ($get($_.msg, 5) == 54) { //#18467
                            $k[$j++] = Infinity; //#18466
                            $k[$j++] = $_.m06; //#18466
                            $aload($geti($_.msg, 7, $_.msg.length - 9)); //#18466
                            $_.msg = $a(); //#18466
                        } //#18466
                    } //#18466
                } //#18466
            } //#18466
        } //#18466
        $_.msglen = $_.msg.length; //#18472
        $k[$j++] = Infinity; //#18475
        for (var _54 = 0, _55 = $_.msglen; _54 < _55; _54++) { //#18475
            $k[$j++] = 0; //#18475
        } //#18475
        $k[$j++] = 0; //#18475
        $_.numdigits = $a(); //#18475
        $k[$j++] = Infinity; //#18476
        for (var _58 = 0, _59 = $_.msglen; _58 < _59; _58++) { //#18476
            $k[$j++] = 0; //#18476
        } //#18476
        $k[$j++] = 0; //#18476
        $_.numtext = $a(); //#18476
        $k[$j++] = Infinity; //#18477
        for (var _5C = 0, _5D = $_.msglen; _5C < _5D; _5C++) { //#18477
            $k[$j++] = 0; //#18477
        } //#18477
        $k[$j++] = 0; //#18477
        $_.numbytes = $a(); //#18477
        $k[$j++] = Infinity; //#18478
        for (var _5G = 0, _5H = $_.msglen; _5G < _5H; _5G++) { //#18478
            $k[$j++] = 0; //#18478
        } //#18478
        $_.iseci = $a(); //#18478
        for (var _5K = $_.msglen - 1; _5K >= 0; _5K -= 1) { //#18491
            $_.i = _5K; //#18480
            var _5N = $get($_.msg, $_.i); //#18481
            if ((_5N >= 48) && (_5N <= 57)) { //#18483
                $put($_.numdigits, $_.i, $get($_.numdigits, $_.i + 1) + 1); //#18482
            } //#18482
            var _5X = $get($_.alltext, $get($_.msg, $_.i)) !== undefined; //#18484
            if (_5X && ($get($_.numdigits, $_.i) < 13)) { //#18486
                $put($_.numtext, $_.i, $get($_.numtext, $_.i + 1) + 1); //#18485
            } //#18485
            if ((($get($_.msg, $_.i) >= 0) && ($get($_.numtext, $_.i) < 5)) && ($get($_.numdigits, $_.i) < 13)) { //#18489
                $put($_.numbytes, $_.i, $get($_.numbytes, $_.i + 1) + 1); //#18488
            } //#18488
            $put($_.iseci, $_.i, $get($_.msg, $_.i) <= -1000000); //#18490
        } //#18490
        $_.numdigits = $geti($_.numdigits, 0, $_.msglen); //#18492
        $_.numtext = $geti($_.numtext, 0, $_.msglen); //#18493
        $_.numbytes = $geti($_.numbytes, 0, $_.msglen); //#18494
        $_.seq = $a([]); //#18496
        $_.seqlen = 0; //#18496
        $_.state = $_.B; //#18496
        $_.p = 0; //#18496
        for (;;) { //#18558
            if ($_.p == $_.msglen) { //#18497
                break; //#18497
            } //#18497
            var _6F = $get($_.msg, $_.p); //#18498
            if (($_.p == 0) && ((_6F == $_.m05) || (_6F == $_.m06))) { //#18556
                $k[$j++] = Infinity; //#18499
                $aload($_.seq); //#18500
                var _6N = ($get($_.msg, $_.p) == $_.m05) ? $_.m05 : $_.m06; //#18501
                $k[$j++] = _6N; //#18501
                $_.seq = $a(); //#18501
                $_.p = $_.p + 1; //#18503
                $_.seqlen = $_.seqlen + 1; //#18504
            } else { //#18556
                if ($get($_.iseci, $_.p)) { //#18556
                    $_.eci = $get($_.msg, $_.p); //#18507
                    $k[$j++] = Infinity; //#18508
                    $aload($_.seq); //#18509
                    $k[$j++] = $a([$_.eci]); //#18510
                    $_.seq = $a(); //#18510
                    $_.p = $_.p + 1; //#18512
                    $k[$j++] = 'seqlen'; //#18513
                    $k[$j++] = $_.seqlen; //#18513
                    if ($_.eci <= -1810900) { //#18513
                        $k[$j++] = 2; //#18513
                    } else { //#18513
                        var _6f = ($_.eci <= -1000900) ? 3 : 2; //#18513
                        $k[$j++] = _6f; //#18513
                    } //#18513
                    var _6g = $k[--$j]; //#18513
                    var _6h = $k[--$j]; //#18513
                    $_[$k[--$j]] = $f(_6h + _6g); //#18513
                } else { //#18556
                    $_.n = $get($_.numdigits, $_.p); //#18515
                    if (($_.n >= 13) || (($_.n == $_.msglen) && ($_.n >= 8))) { //#18556
                        $k[$j++] = Infinity; //#18517
                        $aload($_.seq); //#18518
                        $k[$j++] = $_.nl; //#18520
                        $k[$j++] = Infinity; //#18520
                        $aload($geti($_.msg, $_.p, $_.n)); //#18520
                        var _6w = $a(); //#18520
                        $k[$j++] = _6w; //#18520
                        $_.seq = $a(); //#18520
                        $_.state = $_.N; //#18522
                        $_.p = $f($_.p + $_.n); //#18523
                        $_.seqlen = $f(($_.seqlen + 1) + $_.n); //#18524
                    } else { //#18556
                        $_.t = $get($_.numtext, $_.p); //#18526
                        if ($_.t >= 5) { //#18556
                            $k[$j++] = Infinity; //#18528
                            $aload($_.seq); //#18529
                            if ($_.state != $_.T) { //#18532
                                $k[$j++] = $_.tl; //#18531
                            } //#18531
                            $k[$j++] = Infinity; //#18533
                            $aload($geti($_.msg, $_.p, $_.t)); //#18533
                            var _7F = $a(); //#18533
                            $k[$j++] = _7F; //#18533
                            $_.seq = $a(); //#18533
                            $_.state = $_.T; //#18535
                            $_.p = $f($_.p + $_.t); //#18536
                            $_.seqlen = $f(($_.seqlen + 1) + $_.t); //#18537
                        } else { //#18556
                            $_.b = $get($_.numbytes, $_.p); //#18539
                            if (($_.b == 1) && ($_.state == $_.T)) { //#18556
                                $k[$j++] = Infinity; //#18541
                                $aload($_.seq); //#18542
                                $k[$j++] = $_.bs; //#18544
                                $k[$j++] = $a([$get($_.msg, $_.p)]); //#18544
                                $_.seq = $a(); //#18544
                                $_.p = $f($_.p + $_.b); //#18546
                                $_.seqlen = $_.seqlen + 2; //#18547
                            } else { //#18556
                                $k[$j++] = Infinity; //#18549
                                $aload($_.seq); //#18550
                                var _7e = (($_.b % 6) != 0) ? $_.bl : $_.bl6; //#18551
                                $k[$j++] = _7e; //#18552
                                $k[$j++] = Infinity; //#18552
                                $aload($geti($_.msg, $_.p, $_.b)); //#18552
                                var _7j = $a(); //#18552
                                $k[$j++] = _7j; //#18552
                                $_.seq = $a(); //#18552
                                $_.state = $_.B; //#18554
                                $_.p = $f($_.p + $_.b); //#18555
                                $_.seqlen = $f(($_.seqlen + 1) + $_.b); //#18556
                            } //#18556
                        } //#18556
                    } //#18556
                } //#18556
            } //#18556
        } //#18556
        $k[$j++] = Infinity; //#18560
        $k[$j++] = $_.tl; //#18561
        $k[$j++] = 900; //#18561
        $k[$j++] = $_.bl; //#18561
        $k[$j++] = 901; //#18561
        $k[$j++] = $_.bl6; //#18561
        $k[$j++] = 924; //#18561
        $k[$j++] = $_.nl; //#18561
        $k[$j++] = 902; //#18561
        $k[$j++] = $_.bs; //#18561
        $k[$j++] = 913; //#18561
        $k[$j++] = $_.m05; //#18561
        $k[$j++] = 916; //#18561
        $k[$j++] = $_.m06; //#18561
        $k[$j++] = 917; //#18561
        $_.latchcws = $d(); //#18562
        $_.enca = function() {
            var _82 = $get($get($_.charvals, $_.A), $k[--$j]); //#18565
            $k[$j++] = _82; //#18565
        }; //#18565
        $_.encl = function() {
            var _87 = $get($get($_.charvals, $_.L), $k[--$j]); //#18566
            $k[$j++] = _87; //#18566
        }; //#18566
        $_.encm = function() {
            var _8C = $get($get($_.charvals, $_.M), $k[--$j]); //#18567
            $k[$j++] = _8C; //#18567
        }; //#18567
        $_.encp = function() {
            var _8H = $get($get($_.charvals, $_.P), $k[--$j]); //#18568
            $k[$j++] = _8H; //#18568
        }; //#18568
        $_.textencfuncs = $a(['enca', 'encl', 'encm', 'encp']); //#18569
        $_.addtotext = function() {
            $put($_.text, $_.l, $k[--$j]); //#18572
            $_.l = $_.l + 1; //#18573
        }; //#18573
        $_.enct = function() {
            $_.in = $k[--$j]; //#18578
            $_.curlen = $a([$_.e, $_.e, $_.e, $_.e]); //#18580
            $put($_.curlen, $_.submode, 0); //#18581
            $_.curseq = $a([$a([]), $a([]), $a([]), $a([])]); //#18582
            $forall($_.in, function() { //#18652
                $_.char = $k[--$j]; //#18587
                for (;;) { //#18608
                    $_.imp = false; //#18591
                    var _8g = $a([$_.A, $_.L, $_.M, $_.P]); //#18592
                    for (var _8h = 0, _8i = _8g.length; _8h < _8i; _8h++) { //#18606
                        $_.x = $get(_8g, _8h); //#18593
                        var _8o = $a([$_.A, $_.L, $_.M, $_.P]); //#18594
                        for (var _8p = 0, _8q = _8o.length; _8p < _8q; _8p++) { //#18605
                            $_.y = $get(_8o, _8p); //#18595
                            $_.cost = $f($get($_.curlen, $_.x) + $get($get($_.latlen, $_.x), $_.y)); //#18596
                            if ($_.cost < $get($_.curlen, $_.y)) { //#18604
                                $put($_.curlen, $_.y, $_.cost); //#18598
                                $k[$j++] = $_.curseq; //#18601
                                $k[$j++] = $_.y; //#18601
                                $k[$j++] = Infinity; //#18599
                                $aload($get($_.curseq, $_.x)); //#18600
                                $aload($get($get($_.latseq, $_.x), $_.y)); //#18601
                                var _9H = $a(); //#18601
                                var _9I = $k[--$j]; //#18602
                                $put($k[--$j], _9I, _9H); //#18602
                                $_.imp = true; //#18603
                            } //#18603
                        } //#18603
                    } //#18603
                    if (!$_.imp) { //#18607
                        break; //#18607
                    } //#18607
                } //#18607
                $_.nxtlen = $a([$_.e, $_.e, $_.e, $_.e]); //#18611
                $_.nxtseq = $a(4); //#18612
                var _9V = $a([$_.A, $_.L, $_.M, $_.P]); //#18614
                for (var _9W = 0, _9X = _9V.length; _9W < _9X; _9W++) { //#18647
                    $_.x = $get(_9V, _9W); //#18615
                    for (;;) { //#18645
                        var _9d = $get($get($_.charvals, $_.x), $_.char) !== undefined; //#18619
                        if (!_9d) { //#18619
                            break; //#18619
                        } //#18619
                        $_.cost = $get($_.curlen, $_.x) + 1; //#18622
                        if ($_.cost < $get($_.nxtlen, $_.x)) { //#18626
                            $put($_.nxtlen, $_.x, $_.cost); //#18624
                            $k[$j++] = $_.nxtseq; //#18625
                            $k[$j++] = $_.x; //#18625
                            $k[$j++] = Infinity; //#18625
                            $aload($get($_.curseq, $_.x)); //#18625
                            $k[$j++] = $_.char; //#18625
                            var _9u = $a(); //#18625
                            var _9v = $k[--$j]; //#18625
                            $put($k[--$j], _9v, _9u); //#18625
                        } //#18625
                        var _A1 = $a([$_.A, $_.L, $_.M, $_.P]); //#18629
                        for (var _A2 = 0, _A3 = _A1.length; _A2 < _A3; _A2++) { //#18642
                            $_.y = $get(_A1, _A2); //#18630
                            if ($ne($_.x, $_.y)) { //#18641
                                $_.cost = $f($get($_.curlen, $_.y) + $get($get($_.shftlen, $_.y), $_.x)) + 1; //#18632
                                if ($_.cost < $get($_.nxtlen, $_.y)) { //#18640
                                    $put($_.nxtlen, $_.y, $_.cost); //#18634
                                    $k[$j++] = $_.nxtseq; //#18638
                                    $k[$j++] = $_.y; //#18638
                                    $k[$j++] = Infinity; //#18635
                                    $aload($get($_.curseq, $_.y)); //#18636
                                    var _AT = ($_.x == $_.A) ? $_.as : $_.ps; //#18637
                                    $k[$j++] = _AT; //#18638
                                    $k[$j++] = $_.char; //#18638
                                    var _AV = $a(); //#18638
                                    var _AW = $k[--$j]; //#18639
                                    $put($k[--$j], _AW, _AV); //#18639
                                } //#18639
                            } //#18639
                        } //#18639
                        break; //#18644
                    } //#18644
                } //#18644
                $_.curlen = $_.nxtlen; //#18649
                $_.curseq = $_.nxtseq; //#18650
            }); //#18650
            $_.minseq = $_.e; //#18655
            var _Af = $a([$_.A, $_.L, $_.M, $_.P]); //#18656
            for (var _Ag = 0, _Ah = _Af.length; _Ag < _Ah; _Ag++) { //#18662
                $_.k = $get(_Af, _Ag); //#18657
                if ($get($_.curlen, $_.k) < $_.minseq) { //#18661
                    $_.minseq = $get($_.curlen, $_.k); //#18659
                    $_.txtseq = $get($_.curseq, $_.k); //#18660
                } //#18660
            } //#18660
            $_.text = $a($_.minseq); //#18665
            $_.k = 0; //#18666
            $_.l = 0; //#18666
            for (;;) { //#18686
                if ($_.k >= $_.txtseq.length) { //#18667
                    break; //#18667
                } //#18667
                $_.char = $get($_.txtseq, $_.k); //#18669
                $k[$j++] = $_.char; //#18672
                if ($_[$get($_.textencfuncs, $_.submode)]() === true) {
                    break;
                } //#18672
                $_.addtotext(); //#18672
                $_.k = $_.k + 1; //#18673
                if (($_.char == $_.as) || ($_.char == $_.ps)) { //#18679
                    $k[$j++] = $get($_.txtseq, $_.k); //#18677
                    if ($_.char == $_.as) { //#18677
                        $_.enca(); //#18677
                    } else { //#18677
                        $_.encp(); //#18677
                    } //#18677
                    $_.addtotext(); //#18677
                    $_.k = $_.k + 1; //#18678
                } //#18678
                if ($_.char == $_.al) { //#18682
                    $_.submode = $_.A; //#18682
                } //#18682
                if ($_.char == $_.ll) { //#18683
                    $_.submode = $_.L; //#18683
                } //#18683
                if ($_.char == $_.ml) { //#18684
                    $_.submode = $_.M; //#18684
                } //#18684
                if ($_.char == $_.pl) { //#18685
                    $_.submode = $_.P; //#18685
                } //#18685
            } //#18685
            if (($_.text.length % 2) == 1) { //#18733
                if ($_.submode == $_.P) { //#18729
                    $k[$j++] = 'pad'; //#18690
                    $k[$j++] = $_.al; //#18690
                    $_.encp(); //#18690
                    var _BW = $k[--$j]; //#18690
                    $_[$k[--$j]] = _BW; //#18690
                    $_.submode = $_.A; //#18691
                } else { //#18729
                    $_.nextecitext = false; //#18694
                    for (var _Bc = $_.i + 1, _Bb = $_.seq.length - 1; _Bc <= _Bb; _Bc += 1) { //#18701
                        $_.ti = _Bc; //#18697
                        if ($ne($type($get($_.seq, $_.ti)), 'arraytype')) { //#18698
                            $_.nextecitext = false; //#18698
                            break; //#18698
                        } //#18698
                        if ($get($get($_.seq, $_.ti), 0) > -1000000) { //#18699
                            break; //#18699
                        } //#18699
                        $_.nextecitext = true; //#18700
                    } //#18700
                    if ($_.nextecitext) { //#18729
                        if ($_.submode == $_.A) { //#18726
                            var _Bv = $get($get($_.charvals, $_.L), $get($get($_.seq, $_.ti), 0)) !== undefined; //#18704
                            if (_Bv) { //#18709
                                $k[$j++] = 'pad'; //#18705
                                $k[$j++] = $_.ll; //#18705
                                $_.enca(); //#18705
                                var _Bx = $k[--$j]; //#18705
                                $_[$k[--$j]] = _Bx; //#18705
                                $_.submode = $_.L; //#18706
                            } else { //#18709
                                $k[$j++] = 'pad'; //#18708
                                $k[$j++] = $_.ml; //#18708
                                $_.enca(); //#18708
                                var _C1 = $k[--$j]; //#18708
                                $_[$k[--$j]] = _C1; //#18708
                                $_.submode = $_.M; //#18709
                            } //#18709
                        } else { //#18726
                            if ($_.submode == $_.M) { //#18726
                                var _CD = $get($get($_.charvals, $_.L), $get($get($_.seq, $_.ti), 0)) !== undefined; //#18713
                                if (_CD) { //#18722
                                    $k[$j++] = 'pad'; //#18714
                                    $k[$j++] = $_.ll; //#18714
                                    $_.encm(); //#18714
                                    var _CF = $k[--$j]; //#18714
                                    $_[$k[--$j]] = _CF; //#18714
                                    $_.submode = $_.L; //#18715
                                } else { //#18722
                                    var _CP = $get($get($_.charvals, $_.P), $get($get($_.seq, $_.ti), 0)) !== undefined; //#18717
                                    if (_CP) { //#18722
                                        $k[$j++] = 'pad'; //#18718
                                        $k[$j++] = $_.pl; //#18718
                                        $_.encm(); //#18718
                                        var _CR = $k[--$j]; //#18718
                                        $_[$k[--$j]] = _CR; //#18718
                                        $_.submode = $_.P; //#18719
                                    } else { //#18722
                                        $k[$j++] = 'pad'; //#18721
                                        $k[$j++] = $_.al; //#18721
                                        $_.encm(); //#18721
                                        var _CV = $k[--$j]; //#18721
                                        $_[$k[--$j]] = _CV; //#18721
                                        $_.submode = $_.A; //#18722
                                    } //#18722
                                } //#18722
                            } else { //#18726
                                $k[$j++] = 'pad'; //#18725
                                $k[$j++] = $_.ml; //#18725
                                $_.encl(); //#18725
                                var _CZ = $k[--$j]; //#18725
                                $_[$k[--$j]] = _CZ; //#18725
                                $_.submode = $_.M; //#18726
                            } //#18726
                        } //#18726
                    } else { //#18729
                        $k[$j++] = 'pad'; //#18729
                        $k[$j++] = $_.ps; //#18729
                        if ($_[$get($_.textencfuncs, $_.submode)]() === true) {
                            return true;
                        } //#18729
                        var _Ch = $k[--$j]; //#18729
                        $_[$k[--$j]] = _Ch; //#18729
                    } //#18729
                } //#18729
                $k[$j++] = Infinity; //#18732
                $aload($_.text); //#18732
                $k[$j++] = $_.pad; //#18732
                $_.text = $a(); //#18732
            } //#18732
            $_.out = $a(~~($_.text.length / 2)); //#18735
            for (var _Cq = 0, _Cp = $_.out.length - 1; _Cq <= _Cp; _Cq += 1) { //#18739
                $_.k = _Cq; //#18737
                $put($_.out, $_.k, $f(($get($_.text, $_.k * 2) * 30) + $get($_.text, ($_.k * 2) + 1))); //#18738
            } //#18738
            $k[$j++] = $_.out; //#18741
        }; //#18741
        $_.encn = function() {
            $_.in = $k[--$j]; //#18746
            $_.out = $a([]); //#18747
            for (var _D4 = 0, _D3 = $_.in.length - 1; _D4 <= _D3; _D4 += 44) { //#18775
                $_.k = _D4; //#18749
                $k[$j++] = Infinity; //#18750
                var _D9 = $_.in.length - $_.k; //#18751
                $k[$j++] = 1; //#18751
                $k[$j++] = $_.in; //#18751
                $k[$j++] = $_.k; //#18751
                $k[$j++] = _D9; //#18751
                if (_D9 > 44) { //#18751
                    $k[$j - 1] = 44; //#18751
                } //#18751
                var _DA = $k[--$j]; //#18751
                var _DB = $k[--$j]; //#18751
                var _DD = $geti($k[--$j], _DB, _DA); //#18751
                for (var _DE = 0, _DF = _DD.length; _DE < _DF; _DE++) { //#18752
                    $k[$j++] = $get(_DD, _DE) - 48; //#18752
                } //#18752
                $_.gmod = $a(); //#18752
                $_.cwn = $a([]); //#18754
                for (;;) { //#18773
                    $_.dv = 900; //#18755
                    $_.gmul = $a([]); //#18756
                    $_.val = 0; //#18756
                    for (;;) { //#18768
                        if ($_.gmod.length == 0) { //#18757
                            break; //#18757
                        } //#18757
                        $_.val = $f(($_.val * 10) + $get($_.gmod, 0)); //#18758
                        $_.gmod = $geti($_.gmod, 1, $_.gmod.length - 1); //#18759
                        if ($_.val < $_.dv) { //#18765
                            if ($_.gmul.length != 0) { //#18763
                                $k[$j++] = Infinity; //#18762
                                $aload($_.gmul); //#18762
                                $k[$j++] = 0; //#18762
                                $_.gmul = $a(); //#18762
                            } //#18762
                        } else { //#18765
                            $k[$j++] = Infinity; //#18765
                            $aload($_.gmul); //#18765
                            $k[$j++] = ~~($_.val / $_.dv); //#18765
                            $_.gmul = $a(); //#18765
                        } //#18765
                        $_.val = $_.val % $_.dv; //#18767
                    } //#18767
                    $_.dv = $_.val; //#18769
                    $k[$j++] = Infinity; //#18770
                    $k[$j++] = $_.dv; //#18770
                    $aload($_.cwn); //#18770
                    $_.cwn = $a(); //#18770
                    $_.gmod = $_.gmul; //#18771
                    if ($_.gmul.length == 0) { //#18772
                        break; //#18772
                    } //#18772
                } //#18772
                $k[$j++] = Infinity; //#18774
                $aload($_.out); //#18774
                $aload($_.cwn); //#18774
                $_.out = $a(); //#18774
            } //#18774
            $k[$j++] = $_.out; //#18776
        }; //#18776
        $_.ence = function() {
            var _Do = (-$get($k[--$j], 0)) - 1000000; //#18781
            $k[$j++] = _Do; //#18789
            if (_Do <= 899) { //#18788
                var _Dp = $k[--$j]; //#18782
                $k[$j++] = 927; //#18782
                $k[$j++] = _Dp; //#18782
                $astore($a(2)); //#18782
            } else { //#18788
                var _Dr = $k[$j - 1]; //#18783
                if (_Dr <= 810899) { //#18788
                    var _Ds = $k[--$j]; //#18784
                    $k[$j++] = 926; //#18784
                    $k[$j++] = (~~(_Ds / 900)) - 1; //#18784
                    $k[$j++] = _Ds % 900; //#18784
                    $astore($a(3)); //#18784
                } else { //#18788
                    var _Du = $k[$j - 1]; //#18785
                    if (_Du <= 811799) { //#18788
                        var _Dv = $k[--$j]; //#18786
                        $k[$j++] = 925; //#18786
                        $k[$j++] = _Dv - 810900; //#18786
                        $astore($a(2)); //#18786
                    } else { //#18788
                        $k[$j++] = 'bwipp.pdf417badECI#18788'; //#18788
                        $k[$j++] = "PDF417 supports ECIs 000000 to 811799"; //#18788
                        bwipp_raiseerror(); //#18788
                    } //#18788
                } //#18788
            } //#18788
        }; //#18788
        $_.encfuncs = $a(['enct', 'encn', 'encb']); //#18792
        $_.addtocws = function() {
            var _Dy = $k[--$j]; //#18795
            $puti($_.datcws, $_.j, _Dy); //#18795
            $_.j = _Dy.length + $_.j; //#18796
        }; //#18796
        $_.datcws = $a($_.seqlen); //#18801
        $_.i = 0; //#18802
        $_.j = 0; //#18802
        for (;;) { //#18838
            if ($_.i >= $_.seq.length) { //#18803
                break; //#18803
            } //#18803
            $_.chars = $get($_.seq, $_.i); //#18804
            if ($eq($type($_.chars), 'arraytype')) { //#18834
                if ($get($_.chars, 0) <= -1000000) { //#18809
                    $k[$j++] = $_.chars; //#18807
                    $_.ence(); //#18807
                    $_.addtocws(); //#18807
                } else { //#18809
                    $k[$j++] = $_.chars; //#18809
                    if ($_[$get($_.encfuncs, $_.state)]() === true) {
                        break;
                    } //#18809
                    $_.addtocws(); //#18809
                } //#18809
            } else { //#18834
                $k[$j++] = $a([$get($_.latchcws, $_.chars)]); //#18812
                $_.addtocws(); //#18812
                if ($_.chars == $_.tl) { //#18813
                    $_.state = $_.T; //#18813
                    $_.submode = $_.A; //#18813
                } //#18813
                if ($_.chars == $_.nl) { //#18814
                    $_.state = $_.N; //#18814
                } //#18814
                if (($_.chars == $_.bl) || ($_.chars == $_.bl6)) { //#18815
                    $_.state = $_.B; //#18815
                } //#18815
                if ($_.chars == $_.bs) { //#18819
                    $_.i = $_.i + 1; //#18817
                    $k[$j++] = $get($_.seq, $_.i); //#18818
                    $_.encb(); //#18818
                    $_.addtocws(); //#18818
                } //#18818
                if ($_.chars == $_.m05) { //#18827
                    if (($_.i + 1) < $_.seq.length) { //#18825
                        if ($get($_.seq, $_.i + 1) == $_.nl) { //#18824
                            $_.i = $_.i + 1; //#18823
                        } //#18823
                    } //#18823
                    $_.state = $_.N; //#18826
                } //#18826
                if ($_.chars == $_.m06) { //#18835
                    if (($_.i + 1) < $_.seq.length) { //#18833
                        if ($get($_.seq, $_.i + 1) == $_.tl) { //#18832
                            $_.i = $_.i + 1; //#18831
                        } //#18831
                    } //#18831
                    $_.state = $_.T; //#18834
                    $_.submode = $_.M; //#18834
                } //#18834
            } //#18834
            $_.i = $_.i + 1; //#18837
        } //#18837
        $_.datcws = $geti($_.datcws, 0, $_.j); //#18839
    } //#18839
    $_.ccametrics = $a([$a([2, 5, 4, 39, 0, 19]), $a([2, 6, 4, 1, 0, 33]), $a([2, 7, 5, 32, 0, 12]), $a([2, 8, 5, 8, 0, 40]), $a([2, 9, 6, 14, 0, 46]), $a([2, 10, 6, 43, 0, 23]), $a([2, 12, 7, 20, 0, 52]), $a([3, 4, 4, 11, 43, 23]), $a([3, 5, 5, 1, 33, 13]), $a([3, 6, 6, 5, 37, 17]), $a([3, 7, 7, 15, 47, 27]), $a([3, 8, 7, 21, 1, 33]), $a([4, 3, 4, 40, 20, 52]), $a([4, 4, 5, 43, 23, 3]), $a([4, 5, 6, 46, 26, 6]), $a([4, 6, 7, 34, 14, 46]), $a([4, 7, 8, 29, 9, 41])]); //#18863
    $_.nonccametrics = $a([$a([1, 11, 7, 1, 0, 9]), $a([1, 14, 7, 8, 0, 8]), $a([1, 17, 7, 36, 0, 36]), $a([1, 20, 8, 19, 0, 19]), $a([1, 24, 8, 9, 0, 17]), $a([1, 28, 8, 25, 0, 33]), $a([2, 8, 8, 1, 0, 1]), $a([2, 11, 9, 1, 0, 9]), $a([2, 14, 9, 8, 0, 8]), $a([2, 17, 10, 36, 0, 36]), $a([2, 20, 11, 19, 0, 19]), $a([2, 23, 13, 9, 0, 17]), $a([2, 26, 15, 27, 0, 35]), $a([3, 6, 12, 1, 1, 1]), $a([3, 8, 14, 7, 7, 7]), $a([3, 10, 16, 15, 15, 15]), $a([3, 12, 18, 25, 25, 25]), $a([3, 15, 21, 37, 37, 37]), $a([3, 20, 26, 1, 17, 33]), $a([3, 26, 32, 1, 9, 17]), $a([3, 32, 38, 21, 29, 37]), $a([3, 38, 44, 15, 31, 47]), $a([3, 44, 50, 1, 25, 49]), $a([4, 4, 8, 47, 19, 43]), $a([4, 6, 12, 1, 1, 1]), $a([4, 8, 14, 7, 7, 7]), $a([4, 10, 16, 15, 15, 15]), $a([4, 12, 18, 25, 25, 25]), $a([4, 15, 21, 37, 37, 37]), $a([4, 20, 26, 1, 17, 33]), $a([4, 26, 32, 1, 9, 17]), $a([4, 32, 38, 21, 29, 37]), $a([4, 38, 44, 15, 31, 47]), $a([4, 44, 50, 1, 25, 49])]); //#18902
    $k[$j++] = 'metrics'; //#18905
    if ($_.cca) { //#18905
        $k[$j++] = $_.ccametrics; //#18905
    } else { //#18905
        $k[$j++] = $_.nonccametrics; //#18905
    } //#18905
    var _Fz = $k[--$j]; //#18905
    $_[$k[--$j]] = _Fz; //#18905
    $_.urows = $_.rows; //#18908
    $_.ucols = $_.columns; //#18909
    $forall($_.metrics, function() { //#18924
        $_.m = $k[--$j]; //#18911
        $_.c = $get($_.m, 0); //#18912
        $_.r = $get($_.m, 1); //#18913
        $_.k = $get($_.m, 2); //#18914
        $_.rapl = $get($_.m, 3); //#18915
        $_.rapc = $get($_.m, 4); //#18916
        $_.rapr = $get($_.m, 5); //#18917
        $_.ncws = $f(($_.r * $_.c) - $_.k); //#18918
        $_.okay = true; //#18919
        if ($_.datcws.length > $_.ncws) { //#18920
            $_.okay = false; //#18920
        } //#18920
        if (($_.urows != 0) && ($_.urows != $_.r)) { //#18921
            $_.okay = false; //#18921
        } //#18921
        if (($_.ucols != 0) && ($_.ucols != $_.c)) { //#18922
            $_.okay = false; //#18922
        } //#18922
        if ($_.okay) { //#18923
            return true; //#18923
        } //#18923
    }); //#18923
    if (!$_.okay) { //#18928
        $k[$j++] = 'bwipp.micropdf417noValidSymbol#18927'; //#18927
        $k[$j++] = "Maximum length exceeded or invalid size"; //#18927
        bwipp_raiseerror(); //#18927
    } //#18927
    $_.m = $_.datcws.length; //#18931
    $_.n = $f(($_.c * $_.r) - $_.k); //#18932
    $_.cws = $a(($_.c * $_.r) + 1); //#18933
    $puti($_.cws, 0, $_.datcws); //#18934
    $k[$j++] = $_.cws; //#18935
    $k[$j++] = $_.m; //#18935
    $k[$j++] = Infinity; //#18935
    for (var _Gh = 0, _Gi = $f($_.n - $_.m); _Gh < _Gi; _Gh++) { //#18935
        $k[$j++] = 900; //#18935
    } //#18935
    var _Gj = $a(); //#18935
    var _Gk = $k[--$j]; //#18935
    $puti($k[--$j], _Gk, _Gj); //#18935
    $k[$j++] = $_.cws; //#18936
    $k[$j++] = $_.n; //#18936
    $k[$j++] = Infinity; //#18936
    for (var _Gp = 0, _Gq = $_.k; _Gp < _Gq; _Gp++) { //#18936
        $k[$j++] = 0; //#18936
    } //#18936
    $k[$j++] = 0; //#18936
    var _Gr = $a(); //#18936
    var _Gs = $k[--$j]; //#18936
    $puti($k[--$j], _Gs, _Gr); //#18936
    $k[$j++] = Infinity; //#18940
    $k[$j++] = 1; //#18940
    for (var _Gu = 0; _Gu < 928; _Gu++) { //#18940
        var _Gv = $k[$j - 1]; //#18940
        $k[$j++] = (_Gv * 3) % 929; //#18940
    } //#18940
    $_.rsalog = $a(); //#18940
    $_.rslog = $a(929); //#18941
    for (var _Gy = 1; _Gy <= 928; _Gy += 1) { //#18942
        $put($_.rslog, $get($_.rsalog, _Gy), _Gy); //#18942
    } //#18942
    $_.rsprod = function() {
        var _H3 = $k[$j - 1]; //#18947
        var _H4 = $k[$j - 2]; //#18947
        if ((_H3 != 0) && (_H4 != 0)) { //#18950
            var _H7 = $get($_.rslog, $k[--$j]); //#18948
            var _HC = $get($_.rsalog, $f(_H7 + $get($_.rslog, $k[--$j])) % 928); //#18948
            $k[$j++] = _HC; //#18948
        } else { //#18950
            $j -= 2; //#18950
            $k[$j++] = 0; //#18950
        } //#18950
    }; //#18950
    $k[$j++] = Infinity; //#18955
    $k[$j++] = 1; //#18955
    for (var _HE = 0, _HF = $_.k; _HE < _HF; _HE++) { //#18955
        $k[$j++] = 0; //#18955
    } //#18955
    $_.coeffs = $a(); //#18955
    for (var _HJ = 1, _HI = $_.k; _HJ <= _HI; _HJ += 1) { //#18964
        $_.i = _HJ; //#18957
        $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#18958
        for (var _HQ = $_.i - 1; _HQ >= 1; _HQ -= 1) { //#18962
            $_.j = _HQ; //#18960
            $k[$j++] = $_.coeffs; //#18961
            $k[$j++] = $_.j; //#18961
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#18961
            $k[$j++] = $get($_.coeffs, $_.j); //#18961
            $k[$j++] = $get($_.rsalog, $_.i); //#18961
            $_.rsprod(); //#18961
            var _Hc = $k[--$j]; //#18961
            var _Hd = $k[--$j]; //#18961
            var _He = $k[--$j]; //#18961
            $put($k[--$j], _He, $f(_Hd + _Hc) % 929); //#18961
        } //#18961
        $k[$j++] = $_.coeffs; //#18963
        $k[$j++] = 0; //#18963
        $k[$j++] = $get($_.coeffs, 0); //#18963
        $k[$j++] = $get($_.rsalog, $_.i); //#18963
        $_.rsprod(); //#18963
        var _Hm = $k[--$j]; //#18963
        var _Hn = $k[--$j]; //#18963
        $put($k[--$j], _Hn, _Hm); //#18963
    } //#18963
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#18965
    for (var _Ht = $_.coeffs.length - 1; _Ht >= 0; _Ht -= 2) { //#18966
        var _Hu = $_.coeffs; //#18966
        $put(_Hu, _Ht, 929 - $get(_Hu, _Ht)); //#18966
    } //#18966
    for (var _Hy = 0, _Hx = $_.n - 1; _Hy <= _Hx; _Hy += 1) { //#18975
        $_.t = $f($get($_.cws, _Hy) + $get($_.cws, $_.n)) % 929; //#18970
        for (var _I6 = 0, _I5 = $_.k - 1; _I6 <= _I5; _I6 += 1) { //#18974
            $_.j = _I6; //#18972
            $put($_.cws, $f($_.n + $_.j), $f($get($_.cws, $f($_.n + $_.j) + 1) + (929 - $_.t * $get($_.coeffs, $f($_.k - $_.j) - 1) % 929)) % 929); //#18973
        } //#18973
    } //#18973
    for (var _IN = $_.n, _IM = $f($_.n + $_.k); _IN <= _IM; _IN += 1) { //#18976
        $put($_.cws, _IN, (929 - $get($_.cws, _IN)) % 929); //#18976
    } //#18976
    $_.cws = $geti($_.cws, 0, $_.cws.length - 1); //#18979
    var _IV = $get($_.options, 'debugcws') !== undefined; //#18981
    if (_IV) { //#18981
        $k[$j++] = 'bwipp.debugcws#18981'; //#18981
        $k[$j++] = $_.cws; //#18981
        bwipp_raiseerror(); //#18981
    } //#18981
    $_.clusters = $a([$a([120256, 125680, 128380, 120032, 125560, 128318, 108736, 119920, 108640, 86080, 108592, 86048, 110016, 120560, 125820, 109792, 120440, 125758, 88256, 109680, 88160, 89536, 110320, 120700, 89312, 110200, 120638, 89200, 110140, 89840, 110460, 89720, 110398, 89980, 128506, 119520, 125304, 128190, 107712, 119408, 125244, 107616, 119352, 84032, 107568, 119324, 84000, 107544, 83984, 108256, 119672, 125374, 85184, 108144, 119612, 85088, 108088, 119582, 85040, 108060, 85728, 108408, 119742, 85616, 108348, 85560, 108318, 85880, 108478, 85820, 85790, 107200, 119152, 125116, 107104, 119096, 125086, 83008, 107056, 119068, 82976, 107032, 82960, 82952, 83648, 107376, 119228, 83552, 107320, 119198, 83504, 107292, 83480, 83468, 83824, 107452, 83768, 107422, 83740, 83900, 106848, 118968, 125022, 82496, 106800, 118940, 82464, 106776, 118926, 82448, 106764, 82440, 106758, 82784, 106936, 119006, 82736, 106908, 82712, 106894, 82700, 82694, 106974, 82830, 82240, 106672, 118876, 82208, 106648, 118862, 82192, 106636, 82184, 106630, 82180, 82352, 82328, 82316, 82080, 118830, 106572, 106566, 82050, 117472, 124280, 127678, 103616, 117360, 124220, 103520, 117304, 124190, 75840, 103472, 75808, 104160, 117624, 124350, 76992, 104048, 117564, 76896, 103992, 76848, 76824, 77536, 104312, 117694, 77424, 104252, 77368, 77340, 77688, 104382, 77628, 77758, 121536, 126320, 128700, 121440, 126264, 128670, 111680, 121392, 126236, 111648, 121368, 126222, 111632, 121356, 103104, 117104, 124092, 112320, 103008, 117048, 124062, 112224, 121656, 126366, 93248, 74784, 102936, 117006, 93216, 112152, 93200, 75456, 103280, 117180, 93888, 75360, 103224, 117150, 93792, 112440, 121758, 93744, 75288, 93720, 75632, 103356, 94064, 75576, 103326, 94008, 112542, 93980, 75708, 94140, 75678, 94110, 121184, 126136, 128606, 111168, 121136, 126108, 111136, 121112, 126094, 111120, 121100, 111112, 111108, 102752, 116920, 123998, 111456, 102704, 116892, 91712, 74272, 121244, 116878, 91680, 74256, 102668, 91664, 111372, 102662, 74244, 74592, 102840, 116958, 92000, 74544, 102812, 91952, 111516, 102798, 91928, 74508, 74502, 74680, 102878, 92088, 74652, 92060, 74638, 92046, 92126, 110912, 121008, 126044, 110880, 120984, 126030, 110864, 120972, 110856, 120966, 110852, 110850, 74048, 102576, 116828, 90944, 74016, 102552, 116814, 90912, 111000, 121038, 90896, 73992, 102534, 90888, 110982, 90884, 74160, 102620, 91056, 74136, 102606, 91032, 111054, 91020, 74118, 91014, 91100, 91086, 110752, 120920, 125998, 110736, 120908, 110728, 120902, 110724, 110722, 73888, 102488, 116782, 90528, 73872, 102476, 90512, 110796, 102470, 90504, 73860, 90500, 73858, 73944, 90584, 90572, 90566, 120876, 120870, 110658, 102444, 73800, 90312, 90308, 90306, 101056, 116080, 123580, 100960, 116024, 70720, 100912, 115996, 70688, 100888, 70672, 70664, 71360, 101232, 116156, 71264, 101176, 116126, 71216, 101148, 71192, 71180, 71536, 101308, 71480, 101278, 71452, 71612, 71582, 118112, 124600, 127838, 105024, 118064, 124572, 104992, 118040, 124558, 104976, 118028, 104968, 118022, 100704, 115896, 123486, 105312, 100656, 115868, 79424, 70176, 118172, 115854, 79392, 105240, 100620, 79376, 70152, 79368, 70496, 100792, 115934, 79712, 70448, 118238, 79664, 105372, 100750, 79640, 70412, 79628, 70584, 100830, 79800, 70556, 79772, 70542, 70622, 79838, 122176, 126640, 128860, 122144, 126616, 128846, 122128, 126604, 122120, 126598, 122116, 104768, 117936, 124508, 113472, 104736, 126684, 124494, 113440, 122264, 126670, 113424, 104712, 117894, 113416, 122246, 104706, 69952, 100528, 115804, 78656, 69920, 100504, 115790, 96064, 78624, 104856, 117966, 96032, 113560, 122318, 100486, 96016, 78600, 104838, 96008, 69890, 70064, 100572, 78768, 70040, 100558, 96176, 78744, 104910, 96152, 113614, 70022, 78726, 70108, 78812, 70094, 96220, 78798, 122016, 126552, 128814, 122000, 126540, 121992, 126534, 121988, 121986, 104608, 117848, 124462, 113056, 104592, 126574, 113040, 122060, 117830, 113032, 104580, 113028, 104578, 113026, 69792, 100440, 115758, 78240, 69776, 100428, 95136, 78224, 104652, 100422, 95120, 113100, 69764, 95112, 78212, 69762, 78210, 69848, 100462, 78296, 69836, 95192, 78284, 69830, 95180, 78278, 69870, 95214, 121936, 126508, 121928, 126502, 121924, 121922, 104528, 117804, 112848, 104520, 117798, 112840, 121958, 112836, 104514, 112834, 69712, 100396, 78032, 69704, 100390, 94672, 78024, 104550, 94664, 112870, 69698, 94660, 78018, 94658, 78060, 94700, 94694, 126486, 121890, 117782, 104484, 104482, 69672, 77928, 94440, 69666, 77922, 99680, 68160, 99632, 68128, 99608, 115342, 68112, 99596, 68104, 99590, 68448, 99768, 115422, 68400, 99740, 68376, 99726, 68364, 68358, 68536, 99806, 68508, 68494, 68574, 101696, 116400, 123740, 101664, 116376, 101648, 116364, 101640, 116358, 101636, 67904, 99504, 115292, 72512, 67872, 116444, 115278, 72480, 101784, 116430, 72464, 67848, 99462, 72456, 101766, 67842, 68016, 99548, 72624, 67992, 99534, 72600, 101838, 72588, 67974, 68060, 72668, 68046, 72654, 118432, 124760, 127918, 118416, 124748, 118408, 124742, 118404, 118402, 101536, 116312, 105888, 101520, 116300, 105872, 118476, 116294, 105864, 101508, 105860, 101506, 105858, 67744, 99416, 72096, 67728, 116334, 80800, 72080, 101580, 99398, 80784, 105932, 67716, 80776, 72068, 67714, 72066, 67800, 99438, 72152, 67788, 80856, 72140, 67782, 80844, 72134, 67822, 72174, 80878, 126800, 128940, 126792, 128934, 126788, 126786, 118352, 124716, 122576, 126828, 124710, 122568, 126822, 122564, 118338, 122562, 101456, 116268, 105680, 101448, 116262, 114128, 105672, 118374, 114120, 122598, 101442, 114116, 105666, 114114, 67664, 99372, 71888, 67656, 99366, 80336, 71880, 101478, 97232, 80328, 105702, 67650, 97224, 114150, 71874, 97220, 67692, 71916, 67686, 80364, 71910, 97260, 80358, 97254, 126760, 128918, 126756, 126754, 118312, 124694, 122472, 126774, 122468, 118306, 122466, 101416, 116246, 105576, 101412, 113896, 105572, 101410, 113892, 105570, 113890, 67624, 99350, 71784, 101430, 80104, 71780, 67618, 96744, 80100, 71778, 96740, 80098, 96738, 71798, 96758, 126738, 122420, 122418, 105524, 113780, 113778, 71732, 79988, 96500, 96498, 66880, 66848, 98968, 66832, 66824, 66820, 66992, 66968, 66956, 66950, 67036, 67022, 100000, 99984, 115532, 99976, 115526, 99972, 99970, 66720, 98904, 69024, 100056, 98892, 69008, 100044, 69000, 100038, 68996, 66690, 68994, 66776, 98926, 69080, 100078, 69068, 66758, 69062, 66798, 69102, 116560, 116552, 116548, 116546, 99920, 102096, 116588, 115494, 102088, 116582, 102084, 99906, 102082, 66640, 68816, 66632, 98854, 73168, 68808, 66628, 73160, 68804, 66626, 73156, 68802, 66668, 68844, 66662, 73196, 68838, 73190, 124840, 124836, 124834, 116520, 118632, 124854, 118628, 116514, 118626, 99880, 115478, 101992, 116534, 106216, 101988, 99874, 106212, 101986, 106210, 66600, 98838, 68712, 99894, 72936, 68708, 66594, 81384, 72932, 68706, 81380, 72930, 66614, 68726, 72950, 81398, 128980, 128978, 124820, 126900, 124818, 126898, 116500, 118580, 116498, 122740, 118578, 122738, 99860, 101940, 99858, 106100, 101938, 114420]), $a([128352, 129720, 125504, 128304, 129692, 125472, 128280, 129678, 125456, 128268, 125448, 128262, 125444, 125792, 128440, 129758, 120384, 125744, 128412, 120352, 125720, 128398, 120336, 125708, 120328, 125702, 120324, 120672, 125880, 128478, 110144, 120624, 125852, 110112, 120600, 125838, 110096, 120588, 110088, 120582, 110084, 110432, 120760, 125918, 89664, 110384, 120732, 89632, 110360, 120718, 89616, 110348, 89608, 110342, 89952, 110520, 120798, 89904, 110492, 89880, 110478, 89868, 90040, 110558, 90012, 89998, 125248, 128176, 129628, 125216, 128152, 129614, 125200, 128140, 125192, 128134, 125188, 125186, 119616, 125360, 128220, 119584, 125336, 128206, 119568, 125324, 119560, 125318, 119556, 119554, 108352, 119728, 125404, 108320, 119704, 125390, 108304, 119692, 108296, 119686, 108292, 108290, 85824, 108464, 119772, 85792, 108440, 119758, 85776, 108428, 85768, 108422, 85764, 85936, 108508, 85912, 108494, 85900, 85894, 85980, 85966, 125088, 128088, 129582, 125072, 128076, 125064, 128070, 125060, 125058, 119200, 125144, 128110, 119184, 125132, 119176, 125126, 119172, 119170, 107424, 119256, 125166, 107408, 119244, 107400, 119238, 107396, 107394, 83872, 107480, 119278, 83856, 107468, 83848, 107462, 83844, 83842, 83928, 107502, 83916, 83910, 83950, 125008, 128044, 125000, 128038, 124996, 124994, 118992, 125036, 118984, 125030, 118980, 118978, 106960, 119020, 106952, 119014, 106948, 106946, 82896, 106988, 82888, 106982, 82884, 82882, 82924, 82918, 124968, 128022, 124964, 124962, 118888, 124982, 118884, 118882, 106728, 118902, 106724, 106722, 82408, 106742, 82404, 82402, 124948, 124946, 118836, 118834, 106612, 106610, 124224, 127664, 129372, 124192, 127640, 129358, 124176, 127628, 124168, 127622, 124164, 124162, 117568, 124336, 127708, 117536, 124312, 127694, 117520, 124300, 117512, 124294, 117508, 117506, 104256, 117680, 124380, 104224, 117656, 124366, 104208, 117644, 104200, 117638, 104196, 104194, 77632, 104368, 117724, 77600, 104344, 117710, 77584, 104332, 77576, 104326, 77572, 77744, 104412, 77720, 104398, 77708, 77702, 77788, 77774, 128672, 129880, 93168, 128656, 129868, 92664, 128648, 129862, 92412, 128644, 128642, 124064, 127576, 129326, 126368, 124048, 129902, 126352, 128716, 127558, 126344, 124036, 126340, 124034, 126338, 117152, 124120, 127598, 121760, 117136, 124108, 121744, 126412, 124102, 121736, 117124, 121732, 117122, 121730, 103328, 117208, 124142, 112544, 103312, 117196, 112528, 121804, 117190, 112520, 103300, 112516, 103298, 112514, 75680, 103384, 117230, 94112, 75664, 103372, 94096, 112588, 103366, 94088, 75652, 94084, 75650, 75736, 103406, 94168, 75724, 94156, 75718, 94150, 75758, 128592, 129836, 91640, 128584, 129830, 91388, 128580, 91262, 128578, 123984, 127532, 126160, 123976, 127526, 126152, 128614, 126148, 123970, 126146, 116944, 124012, 121296, 116936, 124006, 121288, 126182, 121284, 116930, 121282, 102864, 116972, 111568, 102856, 116966, 111560, 121318, 111556, 102850, 111554, 74704, 102892, 92112, 74696, 102886, 92104, 111590, 92100, 74690, 92098, 74732, 92140, 74726, 92134, 128552, 129814, 90876, 128548, 90750, 128546, 123944, 127510, 126056, 128566, 126052, 123938, 126050, 116840, 123958, 121064, 116836, 121060, 116834, 121058, 102632, 116854, 111080, 121078, 111076, 102626, 111074, 74216, 102646, 91112, 74212, 91108, 74210, 91106, 74230, 91126, 128532, 90494, 128530, 123924, 126004, 123922, 126002, 116788, 120948, 116786, 120946, 102516, 110836, 102514, 110834, 73972, 90612, 73970, 90610, 128522, 123914, 125978, 116762, 120890, 102458, 110714, 123552, 127320, 129198, 123536, 127308, 123528, 127302, 123524, 123522, 116128, 123608, 127342, 116112, 123596, 116104, 123590, 116100, 116098, 101280, 116184, 123630, 101264, 116172, 101256, 116166, 101252, 101250, 71584, 101336, 116206, 71568, 101324, 71560, 101318, 71556, 71554, 71640, 101358, 71628, 71622, 71662, 127824, 129452, 79352, 127816, 129446, 79100, 127812, 78974, 127810, 123472, 127276, 124624, 123464, 127270, 124616, 127846, 124612, 123458, 124610, 115920, 123500, 118224, 115912, 123494, 118216, 124646, 118212, 115906, 118210, 100816, 115948, 105424, 100808, 115942, 105416, 118246, 105412, 100802, 105410, 70608, 100844, 79824, 70600, 100838, 79816, 105446, 79812, 70594, 79810, 70636, 79852, 70630, 79846, 129960, 95728, 113404, 129956, 95480, 113278, 129954, 95356, 95294, 127784, 129430, 78588, 128872, 129974, 95996, 78462, 128868, 127778, 95870, 128866, 123432, 127254, 124520, 123428, 126696, 128886, 123426, 126692, 124514, 126690, 115816, 123446, 117992, 115812, 122344, 117988, 115810, 122340, 117986, 122338, 100584, 115830, 104936, 100580, 113640, 104932, 100578, 113636, 104930, 113634, 70120, 100598, 78824, 70116, 96232, 78820, 70114, 96228, 78818, 96226, 70134, 78838, 129940, 94968, 113022, 129938, 94844, 94782, 127764, 78206, 128820, 127762, 95102, 128818, 123412, 124468, 123410, 126580, 124466, 126578, 115764, 117876, 115762, 122100, 117874, 122098, 100468, 104692, 100466, 113140, 104690, 113138, 69876, 78324, 69874, 95220, 78322, 95218, 129930, 94588, 94526, 127754, 128794, 123402, 124442, 126522, 115738, 117818, 121978, 100410, 104570, 112890, 69754, 78074, 94714, 94398, 123216, 127148, 123208, 127142, 123204, 123202, 115408, 123244, 115400, 123238, 115396, 115394, 99792, 115436, 99784, 115430, 99780, 99778, 68560, 99820, 68552, 99814, 68548, 68546, 68588, 68582, 127400, 129238, 72444, 127396, 72318, 127394, 123176, 127126, 123752, 123172, 123748, 123170, 123746, 115304, 123190, 116456, 115300, 116452, 115298, 116450, 99560, 115318, 101864, 99556, 101860, 99554, 101858, 68072, 99574, 72680, 68068, 72676, 68066, 72674, 68086, 72694, 129492, 80632, 105854, 129490, 80508, 80446, 127380, 72062, 127924, 127378, 80766, 127922, 123156, 123700, 123154, 124788, 123698, 124786, 115252, 116340, 115250, 118516, 116338, 118514, 99444, 101620, 99442, 105972, 101618, 105970, 67828, 72180, 67826, 80884, 72178, 80882, 97008, 114044, 96888, 113982, 96828, 96798, 129482, 80252, 130010, 97148, 80190, 97086, 127370, 127898, 128954, 123146, 123674, 124730, 126842, 115226, 116282, 118394, 122618, 99386, 101498, 105722, 114170, 67706, 71930, 80378, 96632, 113854, 96572, 96542, 80062, 96702, 96444, 96414, 96350, 123048, 123044, 123042, 115048, 123062, 115044, 115042, 99048, 115062, 99044, 99042, 67048, 99062, 67044, 67042, 67062, 127188, 68990, 127186, 123028, 123316, 123026, 123314, 114996, 115572, 114994, 115570, 98932, 100084, 98930, 100082, 66804, 69108, 66802, 69106, 129258, 73084, 73022, 127178, 127450, 123018, 123290, 123834, 114970, 115514, 116602, 98874, 99962, 102138, 66682, 68858, 73210, 81272, 106174, 81212, 81182, 72894, 81342, 97648, 114364, 97592, 114334, 97564, 97550, 81084, 97724, 81054, 97694, 97464, 114270, 97436, 97422, 80990, 97502, 97372, 97358, 97326, 114868, 114866, 98676, 98674, 66292, 66290, 123098, 114842, 115130, 98618, 99194, 66170, 67322, 69310, 73404, 73374, 81592, 106334, 81564, 81550, 73310, 81630, 97968, 114524, 97944, 114510, 97932, 97926, 81500, 98012, 81486, 97998, 97880, 114478, 97868, 97862, 81454, 97902, 97836, 97830, 69470, 73564, 73550, 81752, 106414, 81740, 81734, 73518, 81774, 81708, 81702]), $a([109536, 120312, 86976, 109040, 120060, 86496, 108792, 119934, 86256, 108668, 86136, 129744, 89056, 110072, 129736, 88560, 109820, 129732, 88312, 109694, 129730, 88188, 128464, 129772, 89592, 128456, 129766, 89340, 128452, 89214, 128450, 125904, 128492, 125896, 128486, 125892, 125890, 120784, 125932, 120776, 125926, 120772, 120770, 110544, 120812, 110536, 120806, 110532, 84928, 108016, 119548, 84448, 107768, 119422, 84208, 107644, 84088, 107582, 84028, 129640, 85488, 108284, 129636, 85240, 108158, 129634, 85116, 85054, 128232, 129654, 85756, 128228, 85630, 128226, 125416, 128246, 125412, 125410, 119784, 125430, 119780, 119778, 108520, 119798, 108516, 108514, 83424, 107256, 119166, 83184, 107132, 83064, 107070, 83004, 82974, 129588, 83704, 107390, 129586, 83580, 83518, 128116, 83838, 128114, 125172, 125170, 119284, 119282, 107508, 107506, 82672, 106876, 82552, 106814, 82492, 82462, 129562, 82812, 82750, 128058, 125050, 119034, 82296, 106686, 82236, 82206, 82366, 82108, 82078, 76736, 103920, 117500, 76256, 103672, 117374, 76016, 103548, 75896, 103486, 75836, 129384, 77296, 104188, 129380, 77048, 104062, 129378, 76924, 76862, 127720, 129398, 77564, 127716, 77438, 127714, 124392, 127734, 124388, 124386, 117736, 124406, 117732, 117730, 104424, 117750, 104420, 104418, 112096, 121592, 126334, 92608, 111856, 121468, 92384, 111736, 121406, 92272, 111676, 92216, 111646, 92188, 75232, 103160, 117118, 93664, 74992, 103036, 93424, 112252, 102974, 93304, 74812, 93244, 74782, 93214, 129332, 75512, 103294, 129908, 129330, 93944, 75388, 129906, 93820, 75326, 93758, 127604, 75646, 128756, 127602, 94078, 128754, 124148, 126452, 124146, 126450, 117236, 121844, 117234, 121842, 103412, 103410, 91584, 111344, 121212, 91360, 111224, 121150, 91248, 111164, 91192, 111134, 91164, 91150, 74480, 102780, 91888, 74360, 102718, 91768, 111422, 91708, 74270, 91678, 129306, 74620, 129850, 92028, 74558, 91966, 127546, 128634, 124026, 126202, 116986, 121338, 102906, 90848, 110968, 121022, 90736, 110908, 90680, 110878, 90652, 90638, 74104, 102590, 91000, 74044, 90940, 74014, 90910, 74174, 91070, 90480, 110780, 90424, 110750, 90396, 90382, 73916, 90556, 73886, 90526, 90296, 110686, 90268, 90254, 73822, 90334, 90204, 90190, 71136, 101112, 116094, 70896, 100988, 70776, 100926, 70716, 70686, 129204, 71416, 101246, 129202, 71292, 71230, 127348, 71550, 127346, 123636, 123634, 116212, 116210, 101364, 101362, 79296, 105200, 118140, 79072, 105080, 118078, 78960, 105020, 78904, 104990, 78876, 78862, 70384, 100732, 79600, 70264, 100670, 79480, 105278, 79420, 70174, 79390, 129178, 70524, 129466, 79740, 70462, 79678, 127290, 127866, 123514, 124666, 115962, 118266, 100858, 113376, 122232, 126654, 95424, 113264, 122172, 95328, 113208, 122142, 95280, 113180, 95256, 113166, 95244, 78560, 104824, 117950, 95968, 78448, 104764, 95856, 113468, 104734, 95800, 78364, 95772, 78350, 95758, 70008, 100542, 78712, 69948, 96120, 78652, 69918, 96060, 78622, 96030, 70078, 78782, 96190, 94912, 113008, 122044, 94816, 112952, 122014, 94768, 112924, 94744, 112910, 94732, 94726, 78192, 104636, 95088, 78136, 104606, 95032, 113054, 95004, 78094, 94990, 69820, 78268, 69790, 95164, 78238, 95134, 94560, 112824, 121950, 94512, 112796, 94488, 112782, 94476, 94470, 78008, 104542, 94648, 77980, 94620, 77966, 94606, 69726, 78046, 94686, 94384, 112732, 94360, 112718, 94348, 94342, 77916, 94428, 77902, 94414, 94296, 112686, 94284, 94278, 77870, 94318, 94252, 94246, 68336, 99708, 68216, 99646, 68156, 68126, 68476, 68414, 127162, 123258, 115450, 99834, 72416, 101752, 116414, 72304, 101692, 72248, 101662, 72220, 72206, 67960, 99518, 72568, 67900, 72508, 67870, 72478, 68030, 72638, 80576, 105840, 118460, 80480, 105784, 118430, 80432, 105756, 80408, 105742, 80396, 80390, 72048, 101564, 80752, 71992, 101534, 80696, 71964, 80668, 71950, 80654, 67772, 72124, 67742, 80828, 72094, 80798, 114016, 122552, 126814, 96832, 113968, 122524, 96800, 113944, 122510, 96784, 113932, 96776, 113926, 96772, 80224, 105656, 118366, 97120, 80176, 105628, 97072, 114076, 105614, 97048, 80140, 97036, 80134, 97030, 71864, 101470, 80312, 71836, 97208, 80284, 71822, 97180, 80270, 97166, 67678, 71902, 80350, 97246, 96576, 113840, 122460, 96544, 113816, 122446, 96528, 113804, 96520, 113798, 96516, 96514, 80048, 105564, 96688, 80024, 105550, 96664, 113870, 96652, 80006, 96646, 71772, 80092, 71758, 96732, 80078, 96718, 96416, 113752, 122414, 96400, 113740, 96392, 113734, 96388, 96386, 79960, 105518, 96472, 79948, 96460, 79942, 96454, 71726, 79982, 96494, 96336, 113708, 96328, 113702, 96324, 96322, 79916, 96364, 79910, 96358, 96296, 113686, 96292, 96290, 79894, 96310, 66936, 99006, 66876, 66846, 67006, 68976, 100028, 68920, 99998, 68892, 68878, 66748, 69052, 66718, 69022, 73056, 102072, 116574, 73008, 102044, 72984, 102030, 72972, 72966, 68792, 99934, 73144, 68764, 73116, 68750, 73102, 66654, 68830, 73182, 81216, 106160, 118620, 81184, 106136, 118606, 81168, 106124, 81160, 106118, 81156, 81154, 72880, 101980, 81328, 72856, 101966, 81304, 106190, 81292, 72838, 81286, 68700, 72924, 68686, 81372, 72910, 81358, 114336, 122712, 126894, 114320, 122700, 114312, 122694, 114308, 114306, 81056, 106072, 118574, 97696, 81040, 106060, 97680, 114380, 106054, 97672, 81028, 97668, 81026, 97666, 72792, 101934, 81112, 72780, 97752, 81100, 72774, 97740, 81094, 97734, 68654, 72814, 81134, 97774, 114256, 122668, 114248, 122662, 114244, 114242, 80976, 106028, 97488, 80968, 106022, 97480, 114278, 97476, 80962, 97474, 72748, 81004, 72742, 97516, 80998, 97510, 114216, 122646, 114212, 114210, 80936, 106006, 97384, 80932, 97380, 80930, 97378, 72726, 80950, 97398, 114196, 114194, 80916, 97332, 80914, 97330, 66236, 66206, 67256, 99166, 67228, 67214, 66142, 67294, 69296, 100188, 69272, 100174, 69260, 69254, 67164, 69340, 67150, 69326, 73376, 102232, 116654, 73360, 102220, 73352, 102214, 73348, 73346, 69208, 100142, 73432, 102254, 73420, 69190, 73414, 67118, 69230, 73454, 106320, 118700, 106312, 118694, 106308, 106306, 73296, 102188, 81616, 106348, 102182, 81608, 73284, 81604, 73282, 81602, 69164, 73324, 69158, 81644, 73318, 81638, 122792, 126934, 122788, 122786, 106280, 118678, 114536, 106276, 114532, 106274, 114530, 73256, 102166, 81512, 73252, 98024, 81508, 73250, 98020, 81506, 98018, 69142, 73270, 81526, 98038, 122772, 122770, 106260, 114484, 106258, 114482, 73236, 81460, 73234, 97908, 81458, 97906, 122762, 106250, 114458, 73226, 81434, 97850, 66396, 66382, 67416, 99246, 67404, 67398, 66350, 67438, 69456, 100268, 69448, 100262, 69444, 69442, 67372, 69484, 67366, 69478, 102312, 116694, 102308, 102306, 69416, 100246, 73576, 102326, 73572, 69410, 73570, 67350, 69430, 73590, 118740, 118738, 102292, 106420, 102290, 106418, 69396, 73524, 69394, 81780, 73522, 81778, 118730, 102282, 106394, 69386, 73498, 81722, 66476, 66470, 67496, 99286, 67492, 67490, 66454, 67510, 100308, 100306, 67476, 69556, 67474, 69554, 116714])]); //#19224
    $_.raps = $a([$a([802, 930, 946, 818, 882, 890, 826, 954, 922, 986, 970, 906, 778, 794, 786, 914, 978, 982, 980, 916, 948, 932, 934, 942, 940, 936, 808, 812, 814, 806, 822, 950, 918, 790, 788, 820, 884, 868, 870, 878, 876, 872, 840, 856, 860, 862, 846, 844, 836, 838, 834, 866]), $a([718, 590, 622, 558, 550, 566, 534, 530, 538, 570, 562, 546, 610, 626, 634, 762, 754, 758, 630, 628, 612, 614, 582, 578, 706, 738, 742, 740, 748, 620, 556, 552, 616, 744, 712, 716, 708, 710, 646, 654, 652, 668, 664, 696, 688, 656, 720, 592, 600, 604, 732, 734])]); //#19239
    $_.cwtobits = function() {
        var _Ih = $get($_.clusters, $k[--$j]); //#19244
        $_.v = $get(_Ih, $k[--$j]); //#19244
        $k[$j++] = Infinity; //#19245
        for (var _Ik = 0; _Ik < 17; _Ik++) { //#19245
            $k[$j++] = 0; //#19245
        } //#19245
        var _In = $cvrs($s(17), $_.v, 2); //#19245
        for (var _Io = 0, _Ip = _In.length; _Io < _Ip; _Io++) { //#19245
            $k[$j++] = $get(_In, _Io) - 48; //#19245
        } //#19245
        var _Ir = $a(); //#19245
        $k[$j++] = $geti(_Ir, _Ir.length - 17, 17); //#19246
    }; //#19246
    $_.raptobits = function() {
        var _Iv = $get($_.raps, $k[--$j]); //#19251
        $_.v = $get(_Iv, $k[--$j]); //#19251
        $k[$j++] = Infinity; //#19252
        for (var _Iy = 0; _Iy < 10; _Iy++) { //#19252
            $k[$j++] = 0; //#19252
        } //#19252
        var _J1 = $cvrs($s(10), $_.v, 2); //#19252
        for (var _J2 = 0, _J3 = _J1.length; _J2 < _J3; _J2++) { //#19252
            $k[$j++] = $get(_J1, _J2) - 48; //#19252
        } //#19252
        var _J5 = $a(); //#19252
        $k[$j++] = $geti(_J5, _J5.length - 10, 10); //#19253
    }; //#19253
    $_.rwid = $get($a([38, 55, 82, 99]), $_.c - 1); //#19257
    if (($_.c == 3) && $_.cca) { //#19258
        $_.rwid = 72; //#19258
    } //#19258
    $_.pixs = $a(($_.rwid * $_.r) * $_.rowmult); //#19259
    for (var _JI = 0, _JH = $_.r - 1; _JI <= _JH; _JI += 1) { //#19301
        $_.i = _JI; //#19262
        $_.clst = ($f($_.i + $_.rapl) - 1) % 3; //#19263
        $k[$j++] = Infinity; //#19264
        if ($_.c == 1) { //#19269
            $k[$j++] = ($f($_.i + $_.rapl) - 1) % 52; //#19266
            $k[$j++] = 0; //#19266
            $_.raptobits(); //#19266
            $aload($k[--$j]); //#19266
            $k[$j++] = $get($_.cws, $_.i); //#19267
            $k[$j++] = $_.clst; //#19267
            $_.cwtobits(); //#19267
            $aload($k[--$j]); //#19267
            $k[$j++] = ($f($_.i + $_.rapr) - 1) % 52; //#19268
            $k[$j++] = 0; //#19268
            $_.raptobits(); //#19268
            $aload($k[--$j]); //#19268
        } //#19268
        if ($_.c == 2) { //#19275
            $k[$j++] = ($f($_.i + $_.rapl) - 1) % 52; //#19271
            $k[$j++] = 0; //#19271
            $_.raptobits(); //#19271
            $aload($k[--$j]); //#19271
            $k[$j++] = $get($_.cws, $_.i * 2); //#19272
            $k[$j++] = $_.clst; //#19272
            $_.cwtobits(); //#19272
            $aload($k[--$j]); //#19272
            $k[$j++] = $get($_.cws, ($_.i * 2) + 1); //#19273
            $k[$j++] = $_.clst; //#19273
            $_.cwtobits(); //#19273
            $aload($k[--$j]); //#19273
            $k[$j++] = ($f($_.i + $_.rapr) - 1) % 52; //#19274
            $k[$j++] = 0; //#19274
            $_.raptobits(); //#19274
            $aload($k[--$j]); //#19274
        } //#19274
        if ($_.c == 3) { //#19285
            if (!$_.cca) { //#19279
                $k[$j++] = ($f($_.i + $_.rapl) - 1) % 52; //#19278
                $k[$j++] = 0; //#19278
                $_.raptobits(); //#19278
                $aload($k[--$j]); //#19278
            } //#19278
            $k[$j++] = $get($_.cws, $_.i * 3); //#19280
            $k[$j++] = $_.clst; //#19280
            $_.cwtobits(); //#19280
            $aload($k[--$j]); //#19280
            $k[$j++] = ($f($_.i + $_.rapc) - 1) % 52; //#19281
            $k[$j++] = 1; //#19281
            $_.raptobits(); //#19281
            $aload($k[--$j]); //#19281
            $k[$j++] = $get($_.cws, ($_.i * 3) + 1); //#19282
            $k[$j++] = $_.clst; //#19282
            $_.cwtobits(); //#19282
            $aload($k[--$j]); //#19282
            $k[$j++] = $get($_.cws, ($_.i * 3) + 2); //#19283
            $k[$j++] = $_.clst; //#19283
            $_.cwtobits(); //#19283
            $aload($k[--$j]); //#19283
            $k[$j++] = ($f($_.i + $_.rapr) - 1) % 52; //#19284
            $k[$j++] = 0; //#19284
            $_.raptobits(); //#19284
            $aload($k[--$j]); //#19284
        } //#19284
        if ($_.c == 4) { //#19294
            $k[$j++] = ($f($_.i + $_.rapl) - 1) % 52; //#19287
            $k[$j++] = 0; //#19287
            $_.raptobits(); //#19287
            $aload($k[--$j]); //#19287
            $k[$j++] = $get($_.cws, $_.i * 4); //#19288
            $k[$j++] = $_.clst; //#19288
            $_.cwtobits(); //#19288
            $aload($k[--$j]); //#19288
            $k[$j++] = $get($_.cws, ($_.i * 4) + 1); //#19289
            $k[$j++] = $_.clst; //#19289
            $_.cwtobits(); //#19289
            $aload($k[--$j]); //#19289
            $k[$j++] = ($f($_.i + $_.rapc) - 1) % 52; //#19290
            $k[$j++] = 1; //#19290
            $_.raptobits(); //#19290
            $aload($k[--$j]); //#19290
            $k[$j++] = $get($_.cws, ($_.i * 4) + 2); //#19291
            $k[$j++] = $_.clst; //#19291
            $_.cwtobits(); //#19291
            $aload($k[--$j]); //#19291
            $k[$j++] = $get($_.cws, ($_.i * 4) + 3); //#19292
            $k[$j++] = $_.clst; //#19292
            $_.cwtobits(); //#19292
            $aload($k[--$j]); //#19292
            $k[$j++] = ($f($_.i + $_.rapr) - 1) % 52; //#19293
            $k[$j++] = 0; //#19293
            $_.raptobits(); //#19293
            $aload($k[--$j]); //#19293
        } //#19293
        $k[$j++] = 1; //#19295
        var _Ki = $a(); //#19295
        $k[$j++] = _Ki; //#19299
        for (var _Kl = 0, _Kk = $_.rowmult - 1; _Kl <= _Kk; _Kl += 1) { //#19299
            var _Kq = $k[$j - 1]; //#19298
            $puti($_.pixs, (_Kl + ($_.i * $_.rowmult)) * $_.rwid, _Kq); //#19298
        } //#19298
        $j--; //#19300
    } //#19300
    var _Kz = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.rwid],
        ["pixy", $_.r * $_.rowmult],
        ["height", ($_.r * $_.rowmult) / 72],
        ["width", $_.rwid / 72],
        ["borderleft", 1],
        ["borderright", 1],
        ["bordertop", 1],
        ["borderbottom", 1],
        ["opt", $_.options]
    ]); //#19315
    $k[$j++] = _Kz; //#19318
    if (!$_.dontdraw) { //#19318
        bwipp_renmatrix(); //#19318
    } //#19318
    $_ = $__; //#19322
} //bwipp_micropdf417
function bwipp_datamatrix() {
    var $__ = $_; //#19353
    $_ = Object.assign({}, $_); //#19353
    $_.dontdraw = false; //#19356
    $_.columns = 0; //#19357
    $_.rows = 0; //#19358
    $_.format = "unset"; //#19359
    $_.version = "unset"; //#19360
    $_.parse = false; //#19361
    $_.parsefnc = false; //#19362
    $_.c40headerlength = -1; //#19363
    $_.raw = false; //#19364
    $_.dmre = false; //#19365
    $k[$j++] = $_; //#19367
    bwipp_processoptions(); //#19367
    $_.options = $k[--$j]; //#19367
    $_.barcode = $k[--$j]; //#19368
    if ($_.barcode.length == 0) { //#19372
        $k[$j++] = 'bwipp.datamatrixEmptyData#19371'; //#19371
        $k[$j++] = "The data must not be empty"; //#19371
        bwipp_raiseerror(); //#19371
    } //#19371
    if ($ne($_.version, "unset") && (($_.rows != 0) || ($_.columns != 0))) { //#19376
        $k[$j++] = 'bwipp.datamatrixVersionRowsCols#19375'; //#19375
        $k[$j++] = "rows and columns must not be given if version is specified"; //#19375
        bwipp_raiseerror(); //#19375
    } //#19375
    if ($ne($_.version, "unset")) { //#19400
        $search($_.version, "x"); //#19380
        if ($k[--$j]) { //#19396
            var _9 = $k[--$j]; //#19381
            $k[$j - 1] = _9; //#19381
            var _B = $k[$j - 1]; //#19382
            var _C = $k[$j - 2]; //#19382
            $k[$j++] = _C; //#19382
            $k[$j++] = _B; //#19382
            $astore($a(2)); //#19382
            $forall($k[--$j], function() { //#19391
                var _F = $k[$j - 1]; //#19384
                $k[$j++] = true; //#19384
                if (_F.length == 0) { //#19384
                    $k[$j - 1] = false; //#19384
                } //#19384
                var _G = $k[--$j]; //#19385
                var _H = $k[--$j]; //#19385
                $k[$j++] = _G; //#19387
                $forall(_H, function() { //#19387
                    var _I = $k[--$j]; //#19386
                    if ((_I < 48) || (_I > 57)) { //#19386
                        $k[$j - 1] = false; //#19386
                    } //#19386
                }); //#19386
                if (!$k[--$j]) { //#19390
                    $k[$j++] = 'bwipp.datamatrixVersionBadRowOrColumn#19389'; //#19389
                    $k[$j++] = "version must be formatted as RxC"; //#19389
                    bwipp_raiseerror(); //#19389
                } //#19389
            }); //#19389
            $_.rows = $cvi($k[--$j]); //#19392
            $_.columns = $cvi($k[--$j]); //#19393
            $k[$j++] = 'format'; //#19394
            if ($_.rows == $_.columns) { //#19394
                $k[$j++] = "square"; //#19394
            } else { //#19394
                $k[$j++] = "rectangle"; //#19394
            } //#19394
            var _O = $k[--$j]; //#19394
            $_[$k[--$j]] = _O; //#19394
        } else { //#19396
            $j--; //#19396
            $k[$j++] = 'bwipp.datamatrixVersionFormat#19396'; //#19396
            $k[$j++] = "version must be formatted as RxC"; //#19396
            bwipp_raiseerror(); //#19396
        } //#19396
    } else { //#19400
        if ($eq($_.format, "unset")) { //#19401
            $k[$j++] = 'format'; //#19400
            if ($_.dmre) { //#19400
                $k[$j++] = "rectangle"; //#19400
            } else { //#19400
                $k[$j++] = "square"; //#19400
            } //#19400
            var _S = $k[--$j]; //#19400
            $_[$k[--$j]] = _S; //#19400
        } //#19400
    } //#19400
    if ($ne($_.format, "square") && $ne($_.format, "rectangle")) { //#19406
        $k[$j++] = 'bwipp.datamatrixInvalidFormat#19405'; //#19405
        $k[$j++] = "The format must be either square or rectangle"; //#19405
        bwipp_raiseerror(); //#19405
    } //#19405
    $_.metrics = $a([$a([10, 10, 1, 1, 5, 1, 0]), $a([12, 12, 1, 1, 7, 1, 0]), $a([14, 14, 1, 1, 10, 1, 0]), $a([16, 16, 1, 1, 12, 1, 0]), $a([18, 18, 1, 1, 14, 1, 0]), $a([20, 20, 1, 1, 18, 1, 0]), $a([22, 22, 1, 1, 20, 1, 0]), $a([24, 24, 1, 1, 24, 1, 0]), $a([26, 26, 1, 1, 28, 1, 0]), $a([32, 32, 2, 2, 36, 1, 0]), $a([36, 36, 2, 2, 42, 1, 0]), $a([40, 40, 2, 2, 48, 1, 0]), $a([44, 44, 2, 2, 56, 1, 0]), $a([48, 48, 2, 2, 68, 1, 0]), $a([52, 52, 2, 2, 84, 2, 0]), $a([64, 64, 4, 4, 112, 2, 0]), $a([72, 72, 4, 4, 144, 4, 0]), $a([80, 80, 4, 4, 192, 4, 0]), $a([88, 88, 4, 4, 224, 4, 0]), $a([96, 96, 4, 4, 272, 4, 0]), $a([104, 104, 4, 4, 336, 6, 0]), $a([120, 120, 6, 6, 408, 6, 0]), $a([132, 132, 6, 6, 496, 8, 0]), $a([144, 144, 6, 6, 620, 10, 0]), $a([8, 18, 1, 1, 7, 1, 0]), $a([8, 32, 1, 2, 11, 1, 0]), $a([8, 48, 1, 2, 15, 1, 1]), $a([8, 64, 1, 4, 18, 1, 1]), $a([8, 80, 1, 4, 22, 1, 1]), $a([8, 96, 1, 4, 28, 1, 1]), $a([8, 120, 1, 6, 32, 1, 1]), $a([8, 144, 1, 6, 36, 1, 1]), $a([12, 26, 1, 1, 14, 1, 0]), $a([12, 36, 1, 2, 18, 1, 0]), $a([12, 64, 1, 4, 27, 1, 1]), $a([12, 88, 1, 4, 36, 1, 1]), $a([16, 36, 1, 2, 24, 1, 0]), $a([16, 48, 1, 2, 28, 1, 0]), $a([16, 64, 1, 4, 36, 1, 1]), $a([20, 36, 1, 2, 28, 1, 1]), $a([20, 44, 1, 2, 34, 1, 1]), $a([20, 64, 1, 4, 42, 1, 1]), $a([22, 48, 1, 2, 38, 1, 1]), $a([24, 48, 1, 2, 41, 1, 1]), $a([24, 64, 1, 4, 46, 1, 1]), $a([26, 40, 1, 2, 38, 1, 1]), $a([26, 48, 1, 2, 42, 1, 1]), $a([26, 64, 1, 4, 50, 1, 1])]); //#19464
    $_.urows = $_.rows; //#19468
    $_.ucols = $_.columns; //#19469
    $_.fullcws = $a([]); //#19470
    var _1N = $_.metrics; //#19471
    for (var _1O = 0, _1P = _1N.length; _1O < _1P; _1O++) { //#19490
        $_.m = $get(_1N, _1O); //#19472
        $_.rows = $get($_.m, 0); //#19473
        $_.cols = $get($_.m, 1); //#19474
        $_.regh = $get($_.m, 2); //#19475
        $_.regv = $get($_.m, 3); //#19476
        $_.rscw = $get($_.m, 4); //#19477
        $_.rsbl = $get($_.m, 5); //#19478
        $_.doly = $get($_.m, 6); //#19479
        $_.mrows = $f($_.rows - (2 * $_.regh)); //#19480
        $_.mcols = $f($_.cols - (2 * $_.regv)); //#19481
        $_.ncws = $f((~~(($_.mrows * $_.mcols) / 8)) - $_.rscw); //#19482
        $_.okay = true; //#19483
        if (($_.urows != 0) && ($_.urows != $_.rows)) { //#19484
            $_.okay = false; //#19484
        } //#19484
        if (($_.ucols != 0) && ($_.ucols != $_.cols)) { //#19485
            $_.okay = false; //#19485
        } //#19485
        if ($eq($_.format, "square") && $ne($_.rows, $_.cols)) { //#19486
            $_.okay = false; //#19486
        } //#19486
        if ($eq($_.format, "rectangle") && $eq($_.rows, $_.cols)) { //#19487
            $_.okay = false; //#19487
        } //#19487
        if ((!$_.dmre) && ($_.doly == 1)) { //#19488
            $_.okay = false; //#19488
        } //#19488
        if ($_.okay) { //#19489
            $k[$j++] = Infinity; //#19489
            $aload($_.fullcws); //#19489
            $k[$j++] = $_.ncws; //#19489
            $_.fullcws = $a(); //#19489
        } //#19489
    } //#19489
    $k[$j++] = Infinity; //#19491
    for (var _24 = 0; _24 < 1558; _24++) { //#19491
        $k[$j++] = 10000; //#19491
    } //#19491
    $_.numremcws = $a(); //#19491
    var _26 = $_.fullcws; //#19492
    for (var _27 = 0, _28 = _26.length; _27 < _28; _27++) { //#19492
        $put($_.numremcws, $get(_26, _27) - 1, 1); //#19492
    } //#19492
    for (var _2B = 1556; _2B >= 0; _2B -= 1) { //#19498
        $_.i = _2B; //#19494
        if ($get($_.numremcws, $_.i) != 1) { //#19497
            $put($_.numremcws, $_.i, $get($_.numremcws, $_.i + 1) + 1); //#19496
        } //#19496
    } //#19496
    $_.fnc1 = -1; //#19502
    $_.prog = -2; //#19502
    $_.m05 = -3; //#19502
    $_.m06 = -4; //#19502
    $_.lC = -5; //#19503
    $_.lB = -6; //#19503
    $_.lX = -7; //#19503
    $_.lT = -8; //#19503
    $_.lE = -9; //#19503
    $_.unl = -10; //#19503
    $_.sapp = -11; //#19504
    $_.usft = -12; //#19504
    $_.sft1 = -13; //#19504
    $_.sft2 = -14; //#19504
    $_.sft3 = -15; //#19504
    $_.eci = -16; //#19504
    $_.pad = -17; //#19504
    $_.unlcw = 254; //#19505
    $k[$j++] = Infinity; //#19507
    for (var _2K = 0; _2K <= 128; _2K += 1) { //#19508
        $k[$j++] = _2K; //#19508
        $k[$j++] = _2K + 1; //#19508
    } //#19508
    $k[$j++] = $_.pad; //#19513
    $k[$j++] = 129; //#19513
    for (var _2M = 0; _2M <= 99; _2M += 1) { //#19513
        var _2O = $cvrs($s(2), _2M, 10); //#19511
        var _2Q = $strcpy($s(2), "00"); //#19511
        $puti(_2Q, 2 - _2O.length, _2O); //#19511
        $k[$j++] = _2Q; //#19512
        $k[$j++] = _2M + 130; //#19512
    } //#19512
    var _2d = $a([$_.lC, $_.lB, $_.fnc1, $_.sapp, $_.prog, $_.usft, $_.m05, $_.m06, $_.lX, $_.lT, $_.lE, $_.eci]); //#19514
    $k[$j++] = 229; //#19514
    for (var _2e = 0, _2f = _2d.length; _2e < _2f; _2e++) { //#19514
        var _2i = $k[--$j] + 1; //#19514
        $k[$j++] = $get(_2d, _2e); //#19514
        $k[$j++] = _2i; //#19514
        $k[$j++] = _2i; //#19514
    } //#19514
    $j--; //#19514
    $_.Avals = $d(); //#19515
    $k[$j++] = Infinity; //#19516
    var _2k = $_.Avals; //#19517
    for (var _2p = _2k.size, _2o = _2k.keys(), _2n = 0; _2n < _2p; _2n++) { //#19517
        var _2l = _2o.next().value; //#19517
        $k[$j++] = _2l; //#19517
        var _2q = Infinity; //#19517
        var _2r = _2k.get(_2l); //#19517
        $k[$j++] = _2q; //#19517
        $k[$j++] = _2r; //#19517
        var _2s = $a(); //#19517
        $k[$j++] = _2s; //#19517
    } //#19517
    $_.Avals = $d(); //#19518
    $k[$j++] = Infinity; //#19520
    $k[$j++] = $_.sft1; //#19525
    $k[$j++] = 0; //#19525
    $k[$j++] = $_.sft2; //#19525
    $k[$j++] = 1; //#19525
    $k[$j++] = $_.sft3; //#19525
    $k[$j++] = 2; //#19525
    $k[$j++] = 32; //#19525
    $k[$j++] = 3; //#19525
    for (var _2x = 48; _2x <= 57; _2x += 1) { //#19525
        $k[$j++] = _2x; //#19525
        $k[$j++] = _2x - 44; //#19525
    } //#19525
    for (var _2y = 65; _2y <= 90; _2y += 1) { //#19526
        $k[$j++] = _2y; //#19526
        $k[$j++] = _2y - 51; //#19526
    } //#19526
    $_.CNvals = $d(); //#19527
    $k[$j++] = Infinity; //#19528
    for (var _30 = 0; _30 <= 31; _30 += 1) { //#19528
        $k[$j++] = _30; //#19528
        $k[$j++] = _30; //#19528
    } //#19528
    $_.C1vals = $d(); //#19528
    $k[$j++] = Infinity; //#19529
    for (var _32 = 33; _32 <= 47; _32 += 1) { //#19530
        $k[$j++] = _32; //#19530
        $k[$j++] = _32 - 33; //#19530
    } //#19530
    for (var _33 = 58; _33 <= 64; _33 += 1) { //#19531
        $k[$j++] = _33; //#19531
        $k[$j++] = _33 - 43; //#19531
    } //#19531
    for (var _34 = 91; _34 <= 95; _34 += 1) { //#19532
        $k[$j++] = _34; //#19532
        $k[$j++] = _34 - 69; //#19532
    } //#19532
    $k[$j++] = $_.fnc1; //#19534
    $k[$j++] = 27; //#19534
    $k[$j++] = $_.usft; //#19534
    $k[$j++] = 30; //#19534
    $_.C2vals = $d(); //#19535
    $k[$j++] = Infinity; //#19536
    for (var _38 = 96; _38 <= 127; _38 += 1) { //#19536
        $k[$j++] = _38; //#19536
        $k[$j++] = _38 - 96; //#19536
    } //#19536
    $_.C3vals = $d(); //#19536
    $k[$j++] = Infinity; //#19537
    var _3A = $_.CNvals; //#19538
    for (var _3F = _3A.size, _3E = _3A.keys(), _3D = 0; _3D < _3F; _3D++) { //#19538
        var _3B = _3E.next().value; //#19538
        $k[$j++] = _3B; //#19538
        var _3G = Infinity; //#19538
        var _3H = _3A.get(_3B); //#19538
        $k[$j++] = _3G; //#19538
        $k[$j++] = _3H; //#19538
        var _3I = $a(); //#19538
        $k[$j++] = _3I; //#19538
    } //#19538
    var _3J = $_.C1vals; //#19539
    for (var _3O = _3J.size, _3N = _3J.keys(), _3M = 0; _3M < _3O; _3M++) { //#19539
        var _3K = _3N.next().value; //#19539
        $k[$j++] = _3K; //#19539
        var _3P = Infinity; //#19539
        var _3Q = _3J.get(_3K); //#19539
        $k[$j++] = _3P; //#19539
        $k[$j++] = $get($_.CNvals, $_.sft1); //#19539
        $k[$j++] = _3Q; //#19539
        var _3U = $a(); //#19539
        $k[$j++] = _3U; //#19539
    } //#19539
    var _3V = $_.C2vals; //#19540
    for (var _3a = _3V.size, _3Z = _3V.keys(), _3Y = 0; _3Y < _3a; _3Y++) { //#19540
        var _3W = _3Z.next().value; //#19540
        $k[$j++] = _3W; //#19540
        var _3b = Infinity; //#19540
        var _3c = _3V.get(_3W); //#19540
        $k[$j++] = _3b; //#19540
        $k[$j++] = $get($_.CNvals, $_.sft2); //#19540
        $k[$j++] = _3c; //#19540
        var _3g = $a(); //#19540
        $k[$j++] = _3g; //#19540
    } //#19540
    var _3h = $_.C3vals; //#19541
    for (var _3m = _3h.size, _3l = _3h.keys(), _3k = 0; _3k < _3m; _3k++) { //#19541
        var _3i = _3l.next().value; //#19541
        $k[$j++] = _3i; //#19541
        var _3n = Infinity; //#19541
        var _3o = _3h.get(_3i); //#19541
        $k[$j++] = _3n; //#19541
        $k[$j++] = $get($_.CNvals, $_.sft3); //#19541
        $k[$j++] = _3o; //#19541
        var _3s = $a(); //#19541
        $k[$j++] = _3s; //#19541
    } //#19541
    $_.Cvals = $d(); //#19542
    $k[$j++] = Infinity; //#19544
    $k[$j++] = $_.sft1; //#19549
    $k[$j++] = 0; //#19549
    $k[$j++] = $_.sft2; //#19549
    $k[$j++] = 1; //#19549
    $k[$j++] = $_.sft3; //#19549
    $k[$j++] = 2; //#19549
    $k[$j++] = 32; //#19549
    $k[$j++] = 3; //#19549
    for (var _3x = 48; _3x <= 57; _3x += 1) { //#19549
        $k[$j++] = _3x; //#19549
        $k[$j++] = _3x - 44; //#19549
    } //#19549
    for (var _3y = 97; _3y <= 122; _3y += 1) { //#19550
        $k[$j++] = _3y; //#19550
        $k[$j++] = _3y - 83; //#19550
    } //#19550
    $_.TNvals = $d(); //#19551
    $k[$j++] = Infinity; //#19552
    for (var _40 = 0; _40 <= 31; _40 += 1) { //#19552
        $k[$j++] = _40; //#19552
        $k[$j++] = _40; //#19552
    } //#19552
    $_.T1vals = $d(); //#19552
    $k[$j++] = Infinity; //#19553
    for (var _42 = 33; _42 <= 47; _42 += 1) { //#19554
        $k[$j++] = _42; //#19554
        $k[$j++] = _42 - 33; //#19554
    } //#19554
    for (var _43 = 58; _43 <= 64; _43 += 1) { //#19555
        $k[$j++] = _43; //#19555
        $k[$j++] = _43 - 43; //#19555
    } //#19555
    for (var _44 = 91; _44 <= 95; _44 += 1) { //#19556
        $k[$j++] = _44; //#19556
        $k[$j++] = _44 - 69; //#19556
    } //#19556
    $k[$j++] = $_.fnc1; //#19558
    $k[$j++] = 27; //#19558
    $k[$j++] = $_.usft; //#19558
    $k[$j++] = 30; //#19558
    $_.T2vals = $d(); //#19559
    $k[$j++] = Infinity; //#19560
    $k[$j++] = 96; //#19562
    $k[$j++] = 0; //#19562
    for (var _48 = 65; _48 <= 90; _48 += 1) { //#19562
        $k[$j++] = _48; //#19562
        $k[$j++] = _48 - 64; //#19562
    } //#19562
    for (var _49 = 123; _49 <= 127; _49 += 1) { //#19563
        $k[$j++] = _49; //#19563
        $k[$j++] = _49 - 96; //#19563
    } //#19563
    $_.T3vals = $d(); //#19564
    $k[$j++] = Infinity; //#19565
    var _4B = $_.TNvals; //#19566
    for (var _4G = _4B.size, _4F = _4B.keys(), _4E = 0; _4E < _4G; _4E++) { //#19566
        var _4C = _4F.next().value; //#19566
        $k[$j++] = _4C; //#19566
        var _4H = Infinity; //#19566
        var _4I = _4B.get(_4C); //#19566
        $k[$j++] = _4H; //#19566
        $k[$j++] = _4I; //#19566
        var _4J = $a(); //#19566
        $k[$j++] = _4J; //#19566
    } //#19566
    var _4K = $_.T1vals; //#19567
    for (var _4P = _4K.size, _4O = _4K.keys(), _4N = 0; _4N < _4P; _4N++) { //#19567
        var _4L = _4O.next().value; //#19567
        $k[$j++] = _4L; //#19567
        var _4Q = Infinity; //#19567
        var _4R = _4K.get(_4L); //#19567
        $k[$j++] = _4Q; //#19567
        $k[$j++] = $get($_.TNvals, $_.sft1); //#19567
        $k[$j++] = _4R; //#19567
        var _4V = $a(); //#19567
        $k[$j++] = _4V; //#19567
    } //#19567
    var _4W = $_.T2vals; //#19568
    for (var _4b = _4W.size, _4a = _4W.keys(), _4Z = 0; _4Z < _4b; _4Z++) { //#19568
        var _4X = _4a.next().value; //#19568
        $k[$j++] = _4X; //#19568
        var _4c = Infinity; //#19568
        var _4d = _4W.get(_4X); //#19568
        $k[$j++] = _4c; //#19568
        $k[$j++] = $get($_.TNvals, $_.sft2); //#19568
        $k[$j++] = _4d; //#19568
        var _4h = $a(); //#19568
        $k[$j++] = _4h; //#19568
    } //#19568
    var _4i = $_.T3vals; //#19569
    for (var _4n = _4i.size, _4m = _4i.keys(), _4l = 0; _4l < _4n; _4l++) { //#19569
        var _4j = _4m.next().value; //#19569
        $k[$j++] = _4j; //#19569
        var _4o = Infinity; //#19569
        var _4p = _4i.get(_4j); //#19569
        $k[$j++] = _4o; //#19569
        $k[$j++] = $get($_.TNvals, $_.sft3); //#19569
        $k[$j++] = _4p; //#19569
        var _4t = $a(); //#19569
        $k[$j++] = _4t; //#19569
    } //#19569
    $_.Tvals = $d(); //#19570
    for (var _4v = 128; _4v <= 255; _4v += 1) { //#19578
        $_.i = _4v; //#19574
        $k[$j++] = $_.Avals; //#19575
        $k[$j++] = $_.i; //#19575
        $k[$j++] = Infinity; //#19575
        $aload($get($_.Avals, $_.usft)); //#19575
        $aload($get($_.Avals, $_.i - 128)); //#19575
        var _54 = $a(); //#19575
        var _55 = $k[--$j]; //#19575
        $put($k[--$j], _55, _54); //#19575
        $k[$j++] = $_.Cvals; //#19576
        $k[$j++] = $_.i; //#19576
        $k[$j++] = Infinity; //#19576
        $aload($get($_.Cvals, $_.usft)); //#19576
        $aload($get($_.Cvals, $_.i - 128)); //#19576
        var _5F = $a(); //#19576
        var _5G = $k[--$j]; //#19576
        $put($k[--$j], _5G, _5F); //#19576
        $k[$j++] = $_.Tvals; //#19577
        $k[$j++] = $_.i; //#19577
        $k[$j++] = Infinity; //#19577
        $aload($get($_.Tvals, $_.usft)); //#19577
        $aload($get($_.Tvals, $_.i - 128)); //#19577
        var _5Q = $a(); //#19577
        var _5R = $k[--$j]; //#19577
        $put($k[--$j], _5R, _5Q); //#19577
    } //#19577
    $k[$j++] = Infinity; //#19580
    $k[$j++] = 13; //#19585
    $k[$j++] = 0; //#19585
    $k[$j++] = 42; //#19585
    $k[$j++] = 1; //#19585
    $k[$j++] = 62; //#19585
    $k[$j++] = 2; //#19585
    $k[$j++] = 32; //#19585
    $k[$j++] = 3; //#19585
    for (var _5T = 48; _5T <= 57; _5T += 1) { //#19585
        $k[$j++] = _5T; //#19585
        $k[$j++] = _5T - 44; //#19585
    } //#19585
    for (var _5U = 65; _5U <= 90; _5U += 1) { //#19586
        $k[$j++] = _5U; //#19586
        $k[$j++] = _5U - 51; //#19586
    } //#19586
    $_.Xvals = $d(); //#19587
    $k[$j++] = Infinity; //#19588
    var _5W = $_.Xvals; //#19589
    for (var _5b = _5W.size, _5a = _5W.keys(), _5Z = 0; _5Z < _5b; _5Z++) { //#19589
        var _5X = _5a.next().value; //#19589
        $k[$j++] = _5X; //#19589
        var _5c = Infinity; //#19589
        var _5d = _5W.get(_5X); //#19589
        $k[$j++] = _5c; //#19589
        $k[$j++] = _5d; //#19589
        var _5e = $a(); //#19589
        $k[$j++] = _5e; //#19589
    } //#19589
    $_.Xvals = $d(); //#19590
    $k[$j++] = Infinity; //#19592
    for (var _5g = 64; _5g <= 94; _5g += 1) { //#19593
        $k[$j++] = _5g; //#19593
        $k[$j++] = _5g - 64; //#19593
    } //#19593
    $k[$j++] = $_.unl; //#19595
    $k[$j++] = 31; //#19595
    for (var _5i = 32; _5i <= 63; _5i += 1) { //#19595
        $k[$j++] = _5i; //#19595
        $k[$j++] = _5i; //#19595
    } //#19595
    $_.Evals = $d(); //#19596
    $k[$j++] = Infinity; //#19597
    var _5k = $_.Evals; //#19598
    for (var _5p = _5k.size, _5o = _5k.keys(), _5n = 0; _5n < _5p; _5n++) { //#19598
        var _5l = _5o.next().value; //#19598
        $k[$j++] = _5l; //#19598
        var _5q = Infinity; //#19598
        var _5r = _5k.get(_5l); //#19598
        $k[$j++] = _5q; //#19598
        $k[$j++] = _5r; //#19598
        var _5s = $a(); //#19598
        $k[$j++] = _5s; //#19598
    } //#19598
    $_.Evals = $d(); //#19599
    $k[$j++] = Infinity; //#19601
    for (var _5u = 0; _5u <= 255; _5u += 1) { //#19602
        $k[$j++] = _5u; //#19602
        $k[$j++] = _5u; //#19602
    } //#19602
    $_.Bvals = $d(); //#19603
    $k[$j++] = Infinity; //#19604
    var _5w = $_.Bvals; //#19605
    for (var _61 = _5w.size, _60 = _5w.keys(), _5z = 0; _5z < _61; _5z++) { //#19605
        var _5x = _60.next().value; //#19605
        $k[$j++] = _5x; //#19605
        var _62 = Infinity; //#19605
        var _63 = _5w.get(_5x); //#19605
        $k[$j++] = _62; //#19605
        $k[$j++] = _63; //#19605
        var _64 = $a(); //#19605
        $k[$j++] = _64; //#19605
    } //#19605
    $_.Bvals = $d(); //#19606
    $_.encvals = $a([$_.Avals, $_.Cvals, $_.Tvals, $_.Xvals, $_.Evals, $_.Bvals]); //#19608
    $_.A = 0; //#19610
    $_.C = 1; //#19610
    $_.T = 2; //#19610
    $_.X = 3; //#19610
    $_.E = 4; //#19610
    $_.B = 5; //#19610
    if ($_.raw) { //#20015
        $_.cws = $a($_.barcode.length); //#19615
        $_.i = 0; //#19616
        $_.j = 0; //#19616
        for (;;) { //#19623
            if ($_.i == $_.barcode.length) { //#19618
                break; //#19618
            } //#19618
            $_.cw = $cvi($geti($_.barcode, $_.i + 1, 3)); //#19619
            $put($_.cws, $_.j, $_.cw); //#19620
            $_.i = $_.i + 4; //#19621
            $_.j = $_.j + 1; //#19622
        } //#19622
        $_.cws = $geti($_.cws, 0, $_.j); //#19624
    } else { //#20015
        var _6Y = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true],
            ["FNC1", $_.fnc1],
            ["PROG", $_.prog]
        ]); //#19634
        $_.fncvals = _6Y; //#19637
        $k[$j++] = 'msg'; //#19638
        $k[$j++] = $_.barcode; //#19638
        $k[$j++] = $_.fncvals; //#19638
        bwipp_parseinput(); //#19638
        var _6b = $k[--$j]; //#19638
        $_[$k[--$j]] = _6b; //#19638
        $_.msglen = $_.msg.length; //#19639
        if ($_.msglen >= 9) { //#19657
            $aload($geti($_.msg, 0, 7)); //#19643
            var _6h = $k[--$j]; //#19644
            $k[$j - 1] = _6h == 29; //#19644
            var _6j = $k[--$j]; //#19644
            var _6k = $k[--$j]; //#19644
            var _6l = $k[--$j]; //#19644
            var _6m = $k[--$j]; //#19645
            var _6n = $k[--$j]; //#19645
            var _6o = $k[--$j]; //#19645
            if (((((_6j && (_6k == 48)) && (_6l == 30)) && (_6m == 62)) && (_6n == 41)) && (_6o == 91)) { //#19656
                $aload($geti($_.msg, $_.msglen - 2, 2)); //#19646
                var _6s = $k[--$j]; //#19647
                var _6t = $k[--$j]; //#19647
                if ((_6s == 4) && (_6t == 30)) { //#19655
                    if ($get($_.msg, 5) == 53) { //#19652
                        $k[$j++] = Infinity; //#19649
                        $k[$j++] = $_.m05; //#19649
                        $aload($geti($_.msg, 7, $_.msg.length - 9)); //#19649
                        $_.msg = $a(); //#19649
                    } else { //#19652
                        if ($get($_.msg, 5) == 54) { //#19653
                            $k[$j++] = Infinity; //#19652
                            $k[$j++] = $_.m06; //#19652
                            $aload($geti($_.msg, 7, $_.msg.length - 9)); //#19652
                            $_.msg = $a(); //#19652
                        } //#19652
                    } //#19652
                } //#19652
            } //#19652
        } //#19652
        $_.msglen = $_.msg.length; //#19658
        $k[$j++] = Infinity; //#19660
        for (var _7A = 0, _7B = $_.msglen; _7A < _7B; _7A++) { //#19660
            $k[$j++] = 0; //#19660
        } //#19660
        $k[$j++] = 0; //#19660
        $_.numD = $a(); //#19660
        $k[$j++] = Infinity; //#19661
        for (var _7E = 0, _7F = $_.msglen; _7E < _7F; _7E++) { //#19661
            $k[$j++] = 0; //#19661
        } //#19661
        $k[$j++] = 9999; //#19661
        $_.nextXterm = $a(); //#19661
        $k[$j++] = Infinity; //#19662
        for (var _7I = 0, _7J = $_.msglen; _7I < _7J; _7I++) { //#19662
            $k[$j++] = 0; //#19662
        } //#19662
        $k[$j++] = 9999; //#19662
        $_.nextNonX = $a(); //#19662
        $k[$j++] = Infinity; //#19663
        for (var _7M = 0, _7N = $_.msglen; _7M < _7N; _7M++) { //#19663
            $k[$j++] = false; //#19663
        } //#19663
        $k[$j++] = false; //#19663
        $_.isECI = $a(); //#19663
        for (var _7Q = $_.msglen - 1; _7Q >= 0; _7Q -= 1) { //#19681
            $_.i = _7Q; //#19665
            $_.barchar = $get($_.msg, $_.i); //#19666
            if (($_.barchar >= 48) && ($_.barchar <= 57)) { //#19669
                $put($_.numD, $_.i, $get($_.numD, $_.i + 1) + 1); //#19668
            } //#19668
            if ((($_.barchar == 13) || ($_.barchar == 42)) || ($_.barchar == 62)) { //#19673
                $put($_.nextXterm, $_.i, 0); //#19671
            } else { //#19673
                $put($_.nextXterm, $_.i, $get($_.nextXterm, $_.i + 1) + 1); //#19673
            } //#19673
            var _7n = $get($_.Xvals, $_.barchar) !== undefined; //#19675
            if (!_7n) { //#19678
                $put($_.nextNonX, $_.i, 0); //#19676
            } else { //#19678
                $put($_.nextNonX, $_.i, $get($_.nextNonX, $_.i + 1) + 1); //#19678
            } //#19678
            $put($_.isECI, $_.i, $_.barchar <= -1000000); //#19680
        } //#19680
        $k[$j++] = Infinity; //#19682
        var _7y = $_.nextXterm; //#19682
        for (var _7z = 0, _80 = _7y.length; _7z < _80; _7z++) { //#19682
            var _81 = $get(_7y, _7z); //#19682
            $k[$j++] = _81; //#19682
            if (_81 > 10000) { //#19682
                $k[$j - 1] = 10000; //#19682
            } //#19682
        } //#19682
        $_.nextXterm = $a(); //#19682
        $k[$j++] = Infinity; //#19683
        var _83 = $_.nextNonX; //#19683
        for (var _84 = 0, _85 = _83.length; _84 < _85; _84++) { //#19683
            var _86 = $get(_83, _84); //#19683
            $k[$j++] = _86; //#19683
            if (_86 > 10000) { //#19683
                $k[$j - 1] = 10000; //#19683
            } //#19683
        } //#19683
        $_.nextNonX = $a(); //#19683
        $_.isD = function() {
            $k[$j++] = ($_.char >= 48) && ($_.char <= 57); //#19685
        }; //#19685
        $_.isC = function() {
            var _8C = $get($_.CNvals, $_.char) !== undefined; //#19686
            $k[$j++] = _8C; //#19686
        }; //#19686
        $_.isT = function() {
            var _8F = $get($_.TNvals, $_.char) !== undefined; //#19687
            $k[$j++] = _8F; //#19687
        }; //#19687
        $_.isX = function() {
            var _8I = $get($_.Xvals, $_.char) !== undefined; //#19688
            $k[$j++] = _8I; //#19688
        }; //#19688
        $_.isE = function() {
            var _8L = $get($_.Evals, $_.char) !== undefined; //#19689
            $k[$j++] = _8L; //#19689
        }; //#19689
        $_.isEA = function() {
            $k[$j++] = $_.char > 127; //#19690
        }; //#19690
        $_.isFN = function() {
            $k[$j++] = $_.char < 0; //#19691
        }; //#19691
        $_.XtermFirst = function() {
            var _8O = $k[--$j]; //#19692
            $k[$j++] = $lt($get($_.nextXterm, _8O), $get($_.nextNonX, _8O)); //#19692
        }; //#19692
        $_.lookup = function() {
            $_.ac = 1; //#19696
            $_.cc = 2; //#19696
            $_.tc = 2; //#19696
            $_.xc = 2; //#19696
            $_.ec = 2; //#19696
            $_.bc = 2.25; //#19696
            if ($_.mode == $_.A) { //#19697
                $_.ac = 0; //#19697
                $_.cc = 1; //#19697
                $_.tc = 1; //#19697
                $_.xc = 1; //#19697
                $_.ec = 1; //#19697
                $_.bc = 1.25; //#19697
            } //#19697
            if ($_.mode == $_.C) { //#19698
                $_.cc = 0; //#19698
            } //#19698
            if ($_.mode == $_.T) { //#19699
                $_.tc = 0; //#19699
            } //#19699
            if ($_.mode == $_.X) { //#19700
                $_.xc = 0; //#19700
            } //#19700
            if ($_.mode == $_.E) { //#19701
                $_.ec = 0; //#19701
            } //#19701
            if ($_.mode == $_.B) { //#19702
                $_.bc = 0; //#19702
            } //#19702
            for (var _8f = 0; _8f < 1; _8f++) { //#19737
                if ($get($_.isECI, $_.i)) { //#19704
                    $k[$j++] = $_.A; //#19704
                    break; //#19704
                } //#19704
                if (($_.c40headerlength != -1) && ($_.i < $_.c40headerlength)) { //#19705
                    $k[$j++] = $_.C; //#19705
                    break; //#19705
                } //#19705
                $_.k = 0; //#19706
                for (;;) { //#19736
                    if (($_.i + $_.k) == $_.msglen) { //#19715
                        var _8r = $a(['ac', 'cc', 'tc', 'xc', 'ec', 'bc']); //#19708
                        for (var _8s = 0, _8t = _8r.length; _8s < _8t; _8s++) { //#19708
                            var _8u = $get(_8r, _8s); //#19708
                            $_[_8u] = $ceil($_[_8u]); //#19708
                        } //#19708
                        var _91 = $a([$_.cc, $_.tc, $_.xc, $_.ec, $_.bc]); //#19709
                        $k[$j++] = true; //#19709
                        for (var _92 = 0, _93 = _91.length; _92 < _93; _92++) { //#19709
                            var _96 = $k[--$j]; //#19709
                            $k[$j++] = _96 && ($_.ac <= $get(_91, _92)); //#19709
                        } //#19709
                        if ($k[--$j]) { //#19709
                            $k[$j++] = $_.A; //#19709
                            break; //#19709
                        } //#19709
                        var _9E = $a([$_.ac, $_.cc, $_.tc, $_.xc, $_.ec]); //#19710
                        $k[$j++] = true; //#19710
                        for (var _9F = 0, _9G = _9E.length; _9F < _9G; _9F++) { //#19710
                            var _9J = $k[--$j]; //#19710
                            $k[$j++] = _9J && ($_.bc < $get(_9E, _9F)); //#19710
                        } //#19710
                        if ($k[--$j]) { //#19710
                            $k[$j++] = $_.B; //#19710
                            break; //#19710
                        } //#19710
                        var _9R = $a([$_.ac, $_.cc, $_.tc, $_.xc, $_.bc]); //#19711
                        $k[$j++] = true; //#19711
                        for (var _9S = 0, _9T = _9R.length; _9S < _9T; _9S++) { //#19711
                            var _9W = $k[--$j]; //#19711
                            $k[$j++] = _9W && ($_.ec < $get(_9R, _9S)); //#19711
                        } //#19711
                        if ($k[--$j]) { //#19711
                            $k[$j++] = $_.E; //#19711
                            break; //#19711
                        } //#19711
                        var _9e = $a([$_.ac, $_.cc, $_.xc, $_.ec, $_.bc]); //#19712
                        $k[$j++] = true; //#19712
                        for (var _9f = 0, _9g = _9e.length; _9f < _9g; _9f++) { //#19712
                            var _9j = $k[--$j]; //#19712
                            $k[$j++] = _9j && ($_.tc < $get(_9e, _9f)); //#19712
                        } //#19712
                        if ($k[--$j]) { //#19712
                            $k[$j++] = $_.T; //#19712
                            break; //#19712
                        } //#19712
                        var _9r = $a([$_.ac, $_.cc, $_.tc, $_.ec, $_.bc]); //#19713
                        $k[$j++] = true; //#19713
                        for (var _9s = 0, _9t = _9r.length; _9s < _9t; _9s++) { //#19713
                            var _9w = $k[--$j]; //#19713
                            $k[$j++] = _9w && ($_.xc < $get(_9r, _9s)); //#19713
                        } //#19713
                        if ($k[--$j]) { //#19713
                            $k[$j++] = $_.X; //#19713
                            break; //#19713
                        } //#19713
                        $k[$j++] = $_.C; //#19714
                        break; //#19714
                    } //#19714
                    $_.char = $get($_.msg, $_.i + $_.k); //#19716
                    $k[$j++] = 'ac'; //#19717
                    $k[$j++] = $_.ac; //#19717
                    $_.isD(); //#19717
                    if ($k[--$j]) { //#19717
                        var _A6 = $k[--$j]; //#19717
                        $k[$j++] = $f(_A6 + (1 / 2)); //#19717
                    } else { //#19717
                        $_.isEA(); //#19717
                        if ($k[--$j]) { //#19717
                            var _A8 = $k[--$j]; //#19717
                            $k[$j++] = $ceil(_A8) + 2; //#19717
                        } else { //#19717
                            var _A9 = $k[--$j]; //#19717
                            $k[$j++] = $ceil(_A9) + 1; //#19717
                        } //#19717
                    } //#19717
                    var _AA = $k[--$j]; //#19717
                    $_[$k[--$j]] = _AA; //#19717
                    $k[$j++] = 'cc'; //#19718
                    $k[$j++] = $_.cc; //#19718
                    $_.isC(); //#19718
                    if ($k[--$j]) { //#19718
                        var _AE = $k[--$j]; //#19718
                        $k[$j++] = $f(_AE + 0.6666667); //#19718
                    } else { //#19718
                        $_.isEA(); //#19718
                        if ($k[--$j]) { //#19718
                            var _AG = $k[--$j]; //#19718
                            $k[$j++] = $f(_AG + 2.6666667); //#19718
                        } else { //#19718
                            var _AH = $k[--$j]; //#19718
                            $k[$j++] = $f(_AH + 1.3333334); //#19718
                        } //#19718
                    } //#19718
                    var _AI = $k[--$j]; //#19718
                    $_[$k[--$j]] = _AI; //#19718
                    $k[$j++] = 'tc'; //#19719
                    $k[$j++] = $_.tc; //#19719
                    $_.isT(); //#19719
                    if ($k[--$j]) { //#19719
                        var _AM = $k[--$j]; //#19719
                        $k[$j++] = $f(_AM + 0.6666667); //#19719
                    } else { //#19719
                        $_.isEA(); //#19719
                        if ($k[--$j]) { //#19719
                            var _AO = $k[--$j]; //#19719
                            $k[$j++] = $f(_AO + 2.6666667); //#19719
                        } else { //#19719
                            var _AP = $k[--$j]; //#19719
                            $k[$j++] = $f(_AP + 1.3333334); //#19719
                        } //#19719
                    } //#19719
                    var _AQ = $k[--$j]; //#19719
                    $_[$k[--$j]] = _AQ; //#19719
                    $k[$j++] = 'xc'; //#19720
                    $k[$j++] = $_.xc; //#19720
                    $_.isX(); //#19720
                    if ($k[--$j]) { //#19720
                        var _AU = $k[--$j]; //#19720
                        $k[$j++] = $f(_AU + 0.6666667); //#19720
                    } else { //#19720
                        $_.isEA(); //#19720
                        if ($k[--$j]) { //#19720
                            var _AW = $k[--$j]; //#19720
                            $k[$j++] = $f(_AW + 4.3333334); //#19720
                        } else { //#19720
                            var _AX = $k[--$j]; //#19720
                            $k[$j++] = $f(_AX + 3.3333334); //#19720
                        } //#19720
                    } //#19720
                    var _AY = $k[--$j]; //#19720
                    $_[$k[--$j]] = _AY; //#19720
                    $k[$j++] = 'ec'; //#19721
                    $k[$j++] = $_.ec; //#19721
                    $_.isE(); //#19721
                    if ($k[--$j]) { //#19721
                        var _Ac = $k[--$j]; //#19721
                        $k[$j++] = $f(_Ac + (3 / 4)); //#19721
                    } else { //#19721
                        $_.isEA(); //#19721
                        if ($k[--$j]) { //#19721
                            var _Ae = $k[--$j]; //#19721
                            $k[$j++] = $f(_Ae + (17 / 4)); //#19721
                        } else { //#19721
                            var _Af = $k[--$j]; //#19721
                            $k[$j++] = $f(_Af + (13 / 4)); //#19721
                        } //#19721
                    } //#19721
                    var _Ag = $k[--$j]; //#19721
                    $_[$k[--$j]] = _Ag; //#19721
                    $k[$j++] = 'bc'; //#19722
                    $k[$j++] = $_.bc; //#19722
                    $_.isFN(); //#19722
                    if ($k[--$j]) { //#19722
                        var _Ak = $k[--$j]; //#19722
                        $k[$j++] = _Ak + 4; //#19722
                    } else { //#19722
                        var _Al = $k[--$j]; //#19722
                        $k[$j++] = _Al + 1; //#19722
                    } //#19722
                    var _Am = $k[--$j]; //#19722
                    $_[$k[--$j]] = _Am; //#19722
                    if ($_.k >= 4) { //#19734
                        var _Au = $a([$_.cc, $_.tc, $_.xc, $_.ec, $_.bc]); //#19724
                        $k[$j++] = true; //#19724
                        for (var _Av = 0, _Aw = _Au.length; _Av < _Aw; _Av++) { //#19724
                            var _Az = $k[--$j]; //#19724
                            $k[$j++] = _Az && (($_.ac + 1) <= $get(_Au, _Av)); //#19724
                        } //#19724
                        if ($k[--$j]) { //#19724
                            $k[$j++] = $_.A; //#19724
                            break; //#19724
                        } //#19724
                        if (($_.bc + 1) <= $_.ac) { //#19725
                            $k[$j++] = $_.B; //#19725
                            break; //#19725
                        } //#19725
                        var _B9 = $a([$_.cc, $_.tc, $_.xc, $_.ec]); //#19726
                        $k[$j++] = true; //#19726
                        for (var _BA = 0, _BB = _B9.length; _BA < _BB; _BA++) { //#19726
                            var _BE = $k[--$j]; //#19726
                            $k[$j++] = _BE && (($_.bc + 1) < $get(_B9, _BA)); //#19726
                        } //#19726
                        if ($k[--$j]) { //#19726
                            $k[$j++] = $_.B; //#19726
                            break; //#19726
                        } //#19726
                        var _BM = $a([$_.ac, $_.cc, $_.tc, $_.xc, $_.bc]); //#19727
                        $k[$j++] = true; //#19727
                        for (var _BN = 0, _BO = _BM.length; _BN < _BO; _BN++) { //#19727
                            var _BR = $k[--$j]; //#19727
                            $k[$j++] = _BR && (($_.ec + 1) < $get(_BM, _BN)); //#19727
                        } //#19727
                        if ($k[--$j]) { //#19727
                            $k[$j++] = $_.E; //#19727
                            break; //#19727
                        } //#19727
                        var _BZ = $a([$_.ac, $_.cc, $_.xc, $_.ec, $_.bc]); //#19728
                        $k[$j++] = true; //#19728
                        for (var _Ba = 0, _Bb = _BZ.length; _Ba < _Bb; _Ba++) { //#19728
                            var _Be = $k[--$j]; //#19728
                            $k[$j++] = _Be && (($_.tc + 1) < $get(_BZ, _Ba)); //#19728
                        } //#19728
                        if ($k[--$j]) { //#19728
                            $k[$j++] = $_.T; //#19728
                            break; //#19728
                        } //#19728
                        var _Bm = $a([$_.ac, $_.cc, $_.tc, $_.ec, $_.bc]); //#19729
                        $k[$j++] = true; //#19729
                        for (var _Bn = 0, _Bo = _Bm.length; _Bn < _Bo; _Bn++) { //#19729
                            var _Br = $k[--$j]; //#19729
                            $k[$j++] = _Br && (($_.xc + 1) < $get(_Bm, _Bn)); //#19729
                        } //#19729
                        if ($k[--$j]) { //#19729
                            $k[$j++] = $_.X; //#19729
                            break; //#19729
                        } //#19729
                        var _By = $a([$_.ac, $_.tc, $_.ec, $_.bc]); //#19730
                        $k[$j++] = true; //#19730
                        for (var _Bz = 0, _C0 = _By.length; _Bz < _C0; _Bz++) { //#19730
                            var _C3 = $k[--$j]; //#19730
                            $k[$j++] = _C3 && (($_.cc + 1) < $get(_By, _Bz)); //#19730
                        } //#19730
                        if ($k[--$j]) { //#19733
                            if ($_.cc < $_.xc) { //#19731
                                $k[$j++] = $_.C; //#19731
                                break; //#19731
                            } //#19731
                            if ($_.cc == $_.xc) { //#19732
                                $k[$j++] = ($_.i + $_.k) + 1; //#19732
                                $_.XtermFirst(); //#19732
                                if ($k[--$j]) { //#19732
                                    $k[$j++] = $_.X; //#19732
                                    break; //#19732
                                } else { //#19732
                                    $k[$j++] = $_.C; //#19732
                                    break; //#19732
                                } //#19732
                            } //#19732
                        } //#19732
                    } //#19732
                    $_.k = $_.k + 1; //#19735
                } //#19735
            } //#19735
        }; //#19735
        $_.addtocws = function() {
            var _CG = $k[--$j]; //#19741
            $puti($_.cws, $_.j, _CG); //#19741
            $_.j = _CG.length + $_.j; //#19742
        }; //#19742
        $_.ECItocws = function() {
            var _CL = (-$k[--$j]) - 1000000; //#19747
            $k[$j++] = _CL; //#19761
            if (_CL <= 126) { //#19760
                var _CM = $k[--$j]; //#19748
                $k[$j++] = _CM + 1; //#19749
                $astore($a(1)); //#19749
            } else { //#19760
                var _CO = $k[$j - 1]; //#19750
                if (_CO <= 16382) { //#19760
                    var _CQ = $k[--$j] - 127; //#19752
                    $k[$j++] = (~~(_CQ / 254)) + 128; //#19754
                    $k[$j++] = (_CQ % 254) + 1; //#19754
                    $astore($a(2)); //#19754
                } else { //#19760
                    var _CT = $k[--$j] - 16383; //#19757
                    $k[$j++] = (~~(_CT / 64516)) + 192; //#19760
                    $k[$j++] = ((~~(_CT / 254)) % 254) + 1; //#19760
                    $k[$j++] = (_CT % 254) + 1; //#19760
                    $astore($a(3)); //#19760
                } //#19760
            } //#19760
        }; //#19760
        $_.encA = function() {
            for (var _CV = 0; _CV < 1; _CV++) { //#19786
                if ($get($_.isECI, $_.i)) { //#19771
                    $k[$j++] = $get($_.Avals, $_.eci); //#19767
                    $_.addtocws(); //#19767
                    $k[$j++] = $get($_.msg, $_.i); //#19768
                    $_.ECItocws(); //#19768
                    $_.addtocws(); //#19768
                    $_.i = $_.i + 1; //#19769
                    break; //#19770
                } //#19770
                if ($get($_.numD, $_.i) >= 2) { //#19776
                    var _Cj = $s(2); //#19773
                    $put(_Cj, 0, $get($_.msg, $_.i)); //#19773
                    $put(_Cj, 1, $get($_.msg, $_.i + 1)); //#19773
                    $k[$j++] = $get($_.Avals, _Cj); //#19773
                    $_.addtocws(); //#19773
                    $_.i = $_.i + 2; //#19774
                    break; //#19775
                } //#19775
                $k[$j++] = 'newmode'; //#19777
                $_.lookup(); //#19777
                var _Ct = $k[--$j]; //#19777
                $_[$k[--$j]] = _Ct; //#19777
                if ($_.newmode != $_.mode) { //#19782
                    $k[$j++] = $get($_.Avals, $get($a([-1, $_.lC, $_.lT, $_.lX, $_.lE, $_.lB]), $_.newmode)); //#19779
                    $_.addtocws(); //#19779
                    $_.mode = $_.newmode; //#19780
                    break; //#19781
                } //#19781
                $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#19783
                $_.addtocws(); //#19783
                $_.i = $_.i + 1; //#19784
                break; //#19785
            } //#19785
        }; //#19785
        $_.CTXvalstocws = function() {
            $_.in = $k[--$j]; //#19790
            $k[$j++] = Infinity; //#19791
            for (var _DH = 0, _DG = $_.in.length - 1; _DH <= _DG; _DH += 3) { //#19795
                var _DJ = $geti($_.in, _DH, 3); //#19793
                $k[$j++] = 0; //#19793
                for (var _DK = 0, _DL = _DJ.length; _DK < _DL; _DK++) { //#19793
                    var _DN = $k[--$j]; //#19793
                    $k[$j++] = $f(_DN + $get(_DJ, _DK)) * 40; //#19793
                } //#19793
                var _DP = (~~($k[--$j] / 40)) + 1; //#19794
                $k[$j++] = ~~(_DP / 256); //#19794
                $k[$j++] = _DP % 256; //#19794
            } //#19794
            $astore($a($counttomark())); //#19796
            var _DS = $k[--$j]; //#19796
            $k[$j - 1] = _DS; //#19796
        }; //#19796
        $_.encCTX = function() {
            $_.p = 0; //#19800
            $_.ctxvals = $a(2500); //#19801
            $_.done = false; //#19802
            for (;;) { //#19881
                if ($_.i == $_.msglen) { //#19806
                    break; //#19806
                } //#19806
                var _Dd = $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)) !== undefined; //#19807
                if (!_Dd) { //#19807
                    break; //#19807
                } //#19807
                if (($_.p % 3) == 0) { //#19876
                    if ($_.p > 0) { //#19821
                        $k[$j++] = 'newmode'; //#19810
                        $_.lookup(); //#19810
                        var _Dg = $k[--$j]; //#19810
                        $_[$k[--$j]] = _Dg; //#19810
                        if ($ne($_.newmode, $_.mode)) { //#19820
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#19812
                            $_.CTXvalstocws(); //#19812
                            $_.addtocws(); //#19812
                            $k[$j++] = $a([$_.unlcw]); //#19813
                            $_.addtocws(); //#19813
                            if ($_.newmode != $_.A) { //#19816
                                $k[$j++] = $get($_.Avals, $get($a([-1, $_.lC, $_.lT, $_.lX, $_.lE, $_.lB]), $_.newmode)); //#19815
                                $_.addtocws(); //#19815
                            } //#19815
                            $_.mode = $_.newmode; //#19817
                            $_.done = true; //#19818
                            break; //#19819
                        } //#19819
                    } //#19819
                    if (($_.msglen - $_.i) <= 3) { //#19875
                        $_.remcws = $get($_.numremcws, $_.j + ((~~($_.p / 3)) * 2)); //#19823
                        $k[$j++] = Infinity; //#19824
                        var _EC = $geti($_.msg, $_.i, $_.msglen - $_.i); //#19825
                        for (var _ED = 0, _EE = _EC.length; _ED < _EE; _ED++) { //#19831
                            var _EF = $get(_EC, _ED); //#19831
                            var _EJ = $get($get($_.encvals, $_.mode), _EF) !== undefined; //#19826
                            $k[$j++] = _EF; //#19830
                            if (_EJ) { //#19829
                                $aload($get($get($_.encvals, $_.mode), $k[--$j])); //#19827
                            } else { //#19829
                                $k[$j - 1] = -1; //#19829
                                $k[$j++] = -1; //#19829
                                $k[$j++] = -1; //#19829
                                $k[$j++] = -1; //#19829
                            } //#19829
                        } //#19829
                        $_.remvals = $a(); //#19829
                        if (($_.remcws == 2) && ($_.remvals.length == 3)) { //#19843
                            $k[$j++] = Infinity; //#19835
                            $aload($geti($_.ctxvals, 0, $_.p)); //#19836
                            $aload($_.remvals); //#19837
                            var _EW = $a(); //#19837
                            $k[$j++] = _EW; //#19838
                            $_.CTXvalstocws(); //#19838
                            $_.addtocws(); //#19838
                            $_.mode = $_.A; //#19839
                            $_.i = $_.msglen; //#19840
                            $_.done = true; //#19841
                            break; //#19842
                        } //#19842
                        if ((($_.remcws == 2) && ($_.remvals.length == 2)) && ($_.mode != $_.X)) { //#19855
                            $k[$j++] = Infinity; //#19846
                            $aload($geti($_.ctxvals, 0, $_.p)); //#19847
                            $aload($_.remvals); //#19848
                            $aload($get($get($_.encvals, $_.mode), $_.sft1)); //#19849
                            var _Em = $a(); //#19849
                            $k[$j++] = _Em; //#19850
                            $_.CTXvalstocws(); //#19850
                            $_.addtocws(); //#19850
                            $_.mode = $_.A; //#19851
                            $_.i = $_.msglen; //#19852
                            $_.done = true; //#19853
                            break; //#19854
                        } //#19854
                        if (($_.remcws == 2) && ($_.remvals.length == 1)) { //#19865
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#19858
                            $_.CTXvalstocws(); //#19858
                            $_.addtocws(); //#19858
                            $k[$j++] = $a([$_.unlcw]); //#19859
                            $_.addtocws(); //#19859
                            $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#19860
                            $_.addtocws(); //#19860
                            $_.mode = $_.A; //#19861
                            $_.i = $_.msglen; //#19862
                            $_.done = true; //#19863
                            break; //#19864
                        } //#19864
                        if (($_.remcws == 1) && ($_.remvals.length == 1)) { //#19874
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#19868
                            $_.CTXvalstocws(); //#19868
                            $_.addtocws(); //#19868
                            $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#19869
                            $_.addtocws(); //#19869
                            $_.mode = $_.A; //#19870
                            $_.i = $_.msglen; //#19871
                            $_.done = true; //#19872
                            break; //#19873
                        } //#19873
                    } //#19873
                } //#19873
                var _FL = $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)); //#19877
                $puti($_.ctxvals, $_.p, _FL); //#19878
                $_.p = _FL.length + $_.p; //#19879
                $_.i = $_.i + 1; //#19880
            } //#19880
            if (!$_.done) { //#19905
                for (;;) { //#19889
                    if (($_.p % 3) == 0) { //#19886
                        break; //#19886
                    } //#19886
                    $_.i = $_.i - 1; //#19887
                    $_.p = $_.p - $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)).length; //#19888
                } //#19888
                $k[$j++] = Infinity; //#19890
                $aload($geti($_.ctxvals, 0, $_.p)); //#19891
                var _Fe = $a(); //#19891
                $k[$j++] = _Fe; //#19892
                $_.CTXvalstocws(); //#19892
                $_.addtocws(); //#19892
                $k[$j++] = $a([$_.unlcw]); //#19893
                $_.addtocws(); //#19893
                $_.mode = $_.A; //#19894
                if ($_.i != $_.msglen && !$get($_.isECI, $_.i)) { //#19904
                    if ($get($_.numD, $_.i) >= 2) { //#19902
                        var _Fq = $s(2); //#19898
                        $put(_Fq, 0, $get($_.msg, $_.i)); //#19898
                        $put(_Fq, 1, $get($_.msg, $_.i + 1)); //#19898
                        $k[$j++] = $get($_.Avals, _Fq); //#19898
                        $_.addtocws(); //#19898
                        $_.i = $_.i + 2; //#19899
                    } else { //#19902
                        $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#19901
                        $_.addtocws(); //#19901
                        $_.i = $_.i + 1; //#19902
                    } //#19902
                } //#19902
            } //#19902
        }; //#19902
        $_.Evalstocws = function() {
            $_.in = $k[--$j]; //#19910
            $_.inlen = $_.in.length; //#19911
            $_.outlen = ~~($ceil(($_.in.length / 4) * 3)); //#19912
            $k[$j++] = Infinity; //#19913
            $aload($_.in); //#19913
            $k[$j++] = 0; //#19913
            $k[$j++] = 0; //#19913
            $k[$j++] = 0; //#19913
            $_.in = $a(); //#19913
            $k[$j++] = Infinity; //#19914
            for (var _GD = 0, _GC = $_.inlen - 1; _GD <= _GC; _GD += 4) { //#19920
                var _GF = $geti($_.in, _GD, 4); //#19916
                $k[$j++] = 0; //#19916
                for (var _GG = 0, _GH = _GF.length; _GG < _GH; _GG++) { //#19916
                    var _GJ = $k[--$j]; //#19916
                    $k[$j++] = $or(_GJ, $get(_GF, _GG)) << 6; //#19916
                } //#19916
                var _GL = $k[--$j] >>> 6; //#19917
                $k[$j++] = (_GL >>> 16) & 255; //#19919
                $k[$j++] = (_GL >>> 8) & 255; //#19919
                $k[$j++] = _GL & 255; //#19919
            } //#19919
            $astore($a($counttomark())); //#19921
            var _GO = $k[--$j]; //#19921
            $k[$j - 1] = _GO; //#19921
            var _GS = $geti($k[--$j], 0, $_.outlen); //#19922
            $k[$j++] = _GS; //#19922
        }; //#19922
        $_.encE = function() {
            $_.p = 0; //#19926
            $_.edifactvals = $a(2100); //#19927
            for (;;) { //#19956
                if ($_.i == $_.msglen) { //#19931
                    break; //#19931
                } //#19931
                var _Ga = $get($_.Evals, $get($_.msg, $_.i)) !== undefined; //#19932
                if (!_Ga) { //#19932
                    break; //#19932
                } //#19932
                if (($_.p % 4) == 0) { //#19951
                    if (($_.msglen - $_.i) <= 2) { //#19949
                        $_.remcws = $get($_.numremcws, $_.j + ((~~($_.p / 4)) * 3)); //#19935
                        $k[$j++] = Infinity; //#19936
                        var _Gm = $geti($_.msg, $_.i, $_.msglen - $_.i); //#19937
                        for (var _Gn = 0, _Go = _Gm.length; _Gn < _Go; _Gn++) { //#19939
                            $aload($get($_.Avals, $get(_Gm, _Gn))); //#19938
                        } //#19938
                        $_.remvals = $a(); //#19938
                        if ((($_.remcws == 1) || ($_.remcws == 2)) && ($_.remvals.length <= $_.remcws)) { //#19948
                            $k[$j++] = $geti($_.edifactvals, 0, $_.p); //#19943
                            $_.Evalstocws(); //#19943
                            $_.addtocws(); //#19943
                            $k[$j++] = $_.remvals; //#19944
                            $_.addtocws(); //#19944
                            $_.mode = $_.A; //#19945
                            $_.i = $_.msglen; //#19946
                            break; //#19947
                        } //#19947
                    } //#19947
                    $_.lookup(); //#19950
                    if ($k[--$j] != $_.mode) { //#19950
                        break; //#19950
                    } //#19950
                } //#19950
                var _H9 = $get($_.Evals, $get($_.msg, $_.i)); //#19952
                $puti($_.edifactvals, $_.p, _H9); //#19953
                $_.p = _H9.length + $_.p; //#19954
                $_.i = $_.i + 1; //#19955
            } //#19955
            if ($_.mode != $_.A) { //#19978
                $_.remcws = $get($_.numremcws, ($_.j + ((~~($_.p / 4)) * 3)) - 1) - 1; //#19960
                if (((($_.p % 4) != 0) || ($_.i != $_.msglen)) || ($_.remcws >= 3)) { //#19965
                    var _HQ = $get($_.Evals, $_.unl); //#19962
                    $puti($_.edifactvals, $_.p, _HQ); //#19963
                    $_.p = _HQ.length + $_.p; //#19964
                } //#19964
                $k[$j++] = $geti($_.edifactvals, 0, $_.p); //#19966
                $_.Evalstocws(); //#19966
                $_.addtocws(); //#19966
                $_.mode = $_.A; //#19967
                if ($_.i != $_.msglen && !$get($_.isECI, $_.i)) { //#19977
                    if ($get($_.numD, $_.i) >= 2) { //#19975
                        var _Hg = $s(2); //#19971
                        $put(_Hg, 0, $get($_.msg, $_.i)); //#19971
                        $put(_Hg, 1, $get($_.msg, $_.i + 1)); //#19971
                        $k[$j++] = $get($_.Avals, _Hg); //#19971
                        $_.addtocws(); //#19971
                        $_.i = $_.i + 2; //#19972
                    } else { //#19975
                        $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#19974
                        $_.addtocws(); //#19974
                        $_.i = $_.i + 1; //#19975
                    } //#19975
                } //#19975
            } //#19975
        }; //#19975
        $_.encB = function() {
            $_.p = 0; //#19983
            $_.bvals = $a(1558); //#19983
            for (;;) { //#19989
                if ($_.i == $_.msglen) { //#19984
                    break; //#19984
                } //#19984
                $_.lookup(); //#19985
                if ($k[--$j] != $_.mode) { //#19985
                    break; //#19985
                } //#19985
                $put($_.bvals, $_.p, $get($_.msg, $_.i)); //#19986
                $_.p = $_.p + 1; //#19987
                $_.i = $_.i + 1; //#19988
            } //#19988
            $_.remcws = $get($_.numremcws, $_.j + $_.p) - 1; //#19990
            $k[$j++] = Infinity; //#19991
            if (($_.remcws == 0) && ($_.i == $_.msglen)) { //#19995
                $k[$j++] = 0; //#19993
            } else { //#19995
                if ($_.p < 250) { //#19995
                    $k[$j++] = $_.p; //#19995
                } else { //#19995
                    $k[$j++] = (~~($_.p / 250)) + 249; //#19995
                    $k[$j++] = $_.p % 250; //#19995
                } //#19995
            } //#19995
            $aload($geti($_.bvals, 0, $_.p)); //#19997
            $_.bvals = $a(); //#19997
            for (var _IP = 0, _IO = $_.bvals.length - 1; _IP <= _IO; _IP += 1) { //#20004
                $_.p = _IP; //#20000
                var _IV = $f(((((($_.j + $_.p) + 1) * 149) % 255) + 1) + $get($_.bvals, $_.p)); //#20002
                $k[$j++] = _IV; //#20002
                if (_IV >= 256) { //#20002
                    var _IW = $k[--$j]; //#20002
                    $k[$j++] = _IW - 256; //#20002
                } //#20002
                $put($_.bvals, $_.p, $k[--$j]); //#20003
            } //#20003
            $k[$j++] = $_.bvals; //#20005
            $_.addtocws(); //#20005
            $_.mode = $_.A; //#20006
        }; //#20006
        $_.cws = $a(1558); //#20010
        $_.mode = $_.A; //#20011
        $_.i = 0; //#20011
        $_.j = 0; //#20011
        for (;;) { //#20014
            if ($_.i >= $_.msglen) { //#20012
                break; //#20012
            } //#20012
            if ($_[$get($a(['encA', 'encCTX', 'encCTX', 'encCTX', 'encE', 'encB']), $_.mode)]() === true) {
                break;
            } //#20013
        } //#20013
        $_.cws = $geti($_.cws, 0, $_.j); //#20015
    } //#20015
    $_.datlen = $_.cws.length; //#20020
    $_.remcws = $get($_.numremcws, $_.j - 1) - 1; //#20021
    if ($_.remcws > 0) { //#20030
        $k[$j++] = Infinity; //#20023
        $aload($_.cws); //#20023
        for (var _Iu = 0, _Iv = $_.remcws; _Iu < _Iv; _Iu++) { //#20023
            $k[$j++] = 129; //#20023
        } //#20023
        $_.cws = $a(); //#20023
        for (var _J1 = $_.datlen + 1, _J0 = $f($_.datlen + $_.remcws) - 1; _J1 <= _J0; _J1 += 1) { //#20029
            $_.i = _J1; //#20025
            var _J3 = (((($_.i + 1) * 149) % 253) + 1) + 129; //#20027
            $k[$j++] = _J3; //#20027
            if (_J3 > 254) { //#20027
                var _J4 = $k[--$j]; //#20027
                $k[$j++] = _J4 - 254; //#20027
            } //#20027
            $put($_.cws, $_.i, $k[--$j]); //#20028
        } //#20028
    } //#20028
    var _J9 = $get($_.options, 'debugcws') !== undefined; //#20032
    if (_J9) { //#20032
        $k[$j++] = 'bwipp.debugcws#20032'; //#20032
        $k[$j++] = $_.cws; //#20032
        bwipp_raiseerror(); //#20032
    } //#20032
    var _JB = $_.metrics; //#20035
    for (var _JC = 0, _JD = _JB.length; _JC < _JD; _JC++) { //#20057
        $_.m = $get(_JB, _JC); //#20036
        $_.rows = $get($_.m, 0); //#20037
        $_.cols = $get($_.m, 1); //#20038
        $_.regh = $get($_.m, 2); //#20039
        $_.regv = $get($_.m, 3); //#20040
        $_.rscw = $get($_.m, 4); //#20041
        $_.rsbl = $get($_.m, 5); //#20042
        $_.doly = $get($_.m, 6); //#20043
        $_.mrows = $f($_.rows - (2 * $_.regh)); //#20044
        $_.mcols = $f($_.cols - (2 * $_.regv)); //#20045
        $_.rrows = ~~($_.mrows / $_.regh); //#20046
        $_.rcols = ~~($_.mcols / $_.regv); //#20047
        $_.ncws = $f((~~(($_.mrows * $_.mcols) / 8)) - $_.rscw); //#20048
        $_.okay = true; //#20049
        if ($_.cws.length != $_.ncws) { //#20050
            $_.okay = false; //#20050
        } //#20050
        if (($_.urows != 0) && ($_.urows != $_.rows)) { //#20051
            $_.okay = false; //#20051
        } //#20051
        if (($_.ucols != 0) && ($_.ucols != $_.cols)) { //#20052
            $_.okay = false; //#20052
        } //#20052
        if ($eq($_.format, "square") && $ne($_.rows, $_.cols)) { //#20053
            $_.okay = false; //#20053
        } //#20053
        if ($eq($_.format, "rectangle") && $eq($_.rows, $_.cols)) { //#20054
            $_.okay = false; //#20054
        } //#20054
        if ((!$_.dmre) && ($_.doly == 1)) { //#20055
            $_.okay = false; //#20055
        } //#20055
        if ($_.okay) { //#20056
            break; //#20056
        } //#20056
    } //#20056
    if (!$_.okay) { //#20061
        $k[$j++] = 'bwipp.datamatrixNoValidSymbol#20060'; //#20060
        $k[$j++] = "Maximum length exceeded or invalid size"; //#20060
        bwipp_raiseerror(); //#20060
    } //#20060
    $_.cwbs = $a($_.rsbl); //#20064
    $_.ecbs = $a($_.rsbl); //#20065
    for (var _K2 = 0, _K1 = $_.rsbl - 1; _K2 <= _K1; _K2 += 1) { //#20080
        $_.i = _K2; //#20067
        if ($_.cws.length != 1558) { //#20071
            $_.cwbsize = ~~($_.cws.length / $_.rsbl); //#20069
        } else { //#20071
            if ($_.i <= 7) { //#20071
                $_.cwbsize = 156; //#20071
            } else { //#20071
                $_.cwbsize = 155; //#20071
            } //#20071
        } //#20071
        $_.cwb = $a($_.cwbsize); //#20073
        for (var _KB = 0, _KA = $_.cwbsize - 1; _KB <= _KA; _KB += 1) { //#20077
            $_.j = _KB; //#20075
            $put($_.cwb, $_.j, $get($_.cws, $f(($_.j * $_.rsbl) + $_.i))); //#20076
        } //#20076
        $put($_.cwbs, $_.i, $_.cwb); //#20078
        $k[$j++] = $_.ecbs; //#20079
        $k[$j++] = $_.i; //#20079
        $k[$j++] = Infinity; //#20079
        for (var _KQ = 0, _KR = ~~($_.rscw / $_.rsbl); _KQ < _KR; _KQ++) { //#20079
            $k[$j++] = 0; //#20079
        } //#20079
        var _KS = $a(); //#20079
        var _KT = $k[--$j]; //#20079
        $put($k[--$j], _KT, _KS); //#20079
    } //#20079
    $k[$j++] = Infinity; //#20084
    $k[$j++] = 1; //#20084
    for (var _KV = 0; _KV < 255; _KV++) { //#20084
        var _KW = $k[$j - 1]; //#20084
        var _KX = _KW * 2; //#20084
        $k[$j++] = _KX; //#20084
        if (_KX >= 256) { //#20084
            var _KY = $k[--$j]; //#20084
            $k[$j++] = _KY ^ 301; //#20084
        } //#20084
    } //#20084
    $_.rsalog = $a(); //#20084
    $_.rslog = $a(256); //#20085
    for (var _Kb = 1; _Kb <= 255; _Kb += 1) { //#20086
        $put($_.rslog, $get($_.rsalog, _Kb), _Kb); //#20086
    } //#20086
    $_.rsprod = function() {
        var _Kg = $k[$j - 1]; //#20091
        var _Kh = $k[$j - 2]; //#20091
        if ((_Kg != 0) && (_Kh != 0)) { //#20094
            var _Kk = $get($_.rslog, $k[--$j]); //#20092
            var _Kp = $get($_.rsalog, $f(_Kk + $get($_.rslog, $k[--$j])) % 255); //#20092
            $k[$j++] = _Kp; //#20092
        } else { //#20094
            $j -= 2; //#20094
            $k[$j++] = 0; //#20094
        } //#20094
    }; //#20094
    $k[$j++] = Infinity; //#20099
    $k[$j++] = 1; //#20099
    for (var _Ks = 0, _Kt = ~~($_.rscw / $_.rsbl); _Ks < _Kt; _Ks++) { //#20099
        $k[$j++] = 0; //#20099
    } //#20099
    $_.coeffs = $a(); //#20099
    for (var _Ky = 1, _Kx = ~~($_.rscw / $_.rsbl); _Ky <= _Kx; _Ky += 1) { //#20108
        $_.i = _Ky; //#20101
        $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#20102
        for (var _L5 = $_.i - 1; _L5 >= 1; _L5 -= 1) { //#20106
            $_.j = _L5; //#20104
            $k[$j++] = $_.coeffs; //#20105
            $k[$j++] = $_.j; //#20105
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#20105
            $k[$j++] = $get($_.coeffs, $_.j); //#20105
            $k[$j++] = $get($_.rsalog, $_.i); //#20105
            $_.rsprod(); //#20105
            var _LH = $k[--$j]; //#20105
            var _LI = $k[--$j]; //#20105
            var _LJ = $k[--$j]; //#20105
            $put($k[--$j], _LJ, $xo(_LI, _LH)); //#20105
        } //#20105
        $k[$j++] = $_.coeffs; //#20107
        $k[$j++] = 0; //#20107
        $k[$j++] = $get($_.coeffs, 0); //#20107
        $k[$j++] = $get($_.rsalog, $_.i); //#20107
        $_.rsprod(); //#20107
        var _LR = $k[--$j]; //#20107
        var _LS = $k[--$j]; //#20107
        $put($k[--$j], _LS, _LR); //#20107
    } //#20107
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#20109
    for (var _LZ = 0, _LY = $_.cwbs.length - 1; _LZ <= _LY; _LZ += 1) { //#20125
        $_.i = _LZ; //#20113
        $_.cwb = $get($_.cwbs, $_.i); //#20114
        $_.ecb = $get($_.ecbs, $_.i); //#20115
        for (var _Li = 0, _Lh = $_.cwb.length - 1; _Li <= _Lh; _Li += 1) { //#20124
            $_.t = $xo($get($_.cwb, _Li), $get($_.ecb, 0)); //#20117
            for (var _Lo = $_.ecb.length - 1; _Lo >= 0; _Lo -= 1) { //#20123
                $_.j = _Lo; //#20119
                $_.p = ($_.ecb.length - $_.j) - 1; //#20120
                $k[$j++] = $_.ecb; //#20121
                $k[$j++] = $_.p; //#20121
                $k[$j++] = $_.t; //#20121
                $k[$j++] = $get($_.coeffs, $_.j); //#20121
                $_.rsprod(); //#20121
                var _Lx = $k[--$j]; //#20121
                var _Ly = $k[--$j]; //#20121
                $put($k[--$j], _Ly, _Lx); //#20121
                if ($_.j > 0) { //#20122
                    $put($_.ecb, $_.p, $xo($get($_.ecb, $_.p + 1), $get($_.ecb, $_.p))); //#20122
                } //#20122
            } //#20122
        } //#20122
    } //#20122
    if ($_.ncws == 1558) { //#20133
        $k[$j++] = Infinity; //#20129
        $aload($geti($_.ecbs, 8, 2)); //#20130
        $aload($geti($_.ecbs, 0, 8)); //#20131
        $_.ecbs = $a(); //#20131
    } //#20132
    $k[$j++] = Infinity; //#20136
    $aload($_.cws); //#20136
    for (var _MH = 0, _MI = $_.rscw; _MH < _MI; _MH++) { //#20136
        $k[$j++] = 0; //#20136
    } //#20136
    $_.cws = $a(); //#20136
    for (var _MM = 0, _ML = $_.rscw - 1; _MM <= _ML; _MM += 1) { //#20140
        $_.i = _MM; //#20138
        $put($_.cws, $f($_.ncws + $_.i), $get($get($_.ecbs, $_.i % $_.rsbl), ~~($_.i / $_.rsbl))); //#20139
    } //#20139
    $_.module = function() {
        $r(4, -1); //#20145
        var _MY = $strcpy($s(8), "00000000"); //#20146
        $k[$j++] = _MY; //#20146
        $k[$j++] = _MY; //#20146
        var _Mb = $cvrs($s(8), $k[$j - 3], 2); //#20146
        $puti($k[$j - 1], 8 - _Mb.length, _Mb); //#20147
        $k[$j - 3] = $k[$j - 2]; //#20146
        $j -= 2; //#20146
        for (var _Md = 7; _Md >= 0; _Md -= 1) { //#20148
            var _Me = $k[--$j]; //#20148
            $k[$j++] = $get(_Me, _Md) - 48; //#20148
            $k[$j++] = _Me; //#20148
        } //#20148
        $j--; //#20148
        $r(11, -3); //#20149
        $forall($k[--$j], function() { //#20166
            if ($k[--$j]() === true) {
                return true;
            } //#20152
            var _Mj = $k[$j - 2]; //#20153
            if (_Mj < 0) { //#20156
                var _Mk = $k[--$j]; //#20154
                var _Ml = $k[--$j]; //#20154
                $k[$j++] = $f(_Ml + $_.mrows); //#20155
                $k[$j++] = $f(_Mk + (4 - (($_.mrows + 4) % 8))); //#20155
            } //#20155
            var _Mo = $k[$j - 1]; //#20157
            if (_Mo < 0) { //#20160
                var _Mq = $k[--$j]; //#20158
                var _Mr = $k[--$j]; //#20158
                $k[$j++] = $f(_Mr + (4 - (($_.mcols + 4) % 8))); //#20159
                $k[$j++] = $f(_Mq + $_.mcols); //#20159
            } //#20159
            var _Mu = $k[$j - 2]; //#20161
            if (_Mu >= $_.mrows) { //#20163
                var _Mw = $k[--$j]; //#20162
                var _Mx = $k[--$j]; //#20162
                $k[$j++] = $f(_Mx - $_.mrows); //#20162
                $k[$j++] = _Mw; //#20162
            } //#20162
            var _Mz = $k[--$j]; //#20164
            var _N0 = $k[--$j]; //#20164
            $k[$j++] = $_.mmat; //#20165
            $k[$j++] = $f(_Mz + (_N0 * $_.mcols)); //#20165
            $r(5, -1); //#20165
            var _N3 = $k[--$j]; //#20165
            var _N4 = $k[--$j]; //#20165
            $put($k[--$j], _N4, _N3); //#20165
        }); //#20165
    }; //#20165
    var _NM = $a([function() {
        var _N6 = $k[$j - 1]; //#20171
        var _N7 = $k[$j - 2]; //#20171
        $k[$j++] = _N7 - 2; //#20171
        $k[$j++] = _N6 - 2; //#20171
    }, function() {
        var _N8 = $k[$j - 1]; //#20171
        var _N9 = $k[$j - 2]; //#20171
        $k[$j++] = _N9 - 2; //#20171
        $k[$j++] = _N8 - 1; //#20171
    }, function() {
        var _NA = $k[$j - 1]; //#20172
        var _NB = $k[$j - 2]; //#20172
        $k[$j++] = _NB - 1; //#20172
        $k[$j++] = _NA - 2; //#20172
    }, function() {
        var _NC = $k[$j - 1]; //#20172
        var _ND = $k[$j - 2]; //#20172
        $k[$j++] = _ND - 1; //#20172
        $k[$j++] = _NC - 1; //#20172
    }, function() {
        var _NE = $k[$j - 1]; //#20173
        var _NF = $k[$j - 2]; //#20173
        $k[$j++] = _NF - 1; //#20173
        $k[$j++] = _NE; //#20173
    }, function() {
        var _NG = $k[$j - 1]; //#20173
        var _NH = $k[$j - 2]; //#20173
        $k[$j++] = _NH; //#20173
        $k[$j++] = _NG - 2; //#20173
    }, function() {
        var _NI = $k[$j - 1]; //#20174
        var _NJ = $k[$j - 2]; //#20174
        $k[$j++] = _NJ; //#20174
        $k[$j++] = _NI - 1; //#20174
    }, function() {
        var _NK = $k[$j - 1]; //#20174
        var _NL = $k[$j - 2]; //#20174
        $k[$j++] = _NL; //#20174
        $k[$j++] = _NK; //#20174
    }]); //#20174
    $_.dmn = _NM; //#20175
    var _NV = $a([function() {
        $k[$j++] = $_.mrows - 1; //#20178
        $k[$j++] = 0; //#20178
    }, function() {
        $k[$j++] = $_.mrows - 1; //#20178
        $k[$j++] = 1; //#20178
    }, function() {
        $k[$j++] = $_.mrows - 1; //#20179
        $k[$j++] = 2; //#20179
    }, function() {
        $k[$j++] = 0; //#20179
        $k[$j++] = $_.mcols - 2; //#20179
    }, function() {
        $k[$j++] = 0; //#20180
        $k[$j++] = $_.mcols - 1; //#20180
    }, function() {
        $k[$j++] = 1; //#20180
        $k[$j++] = $_.mcols - 1; //#20180
    }, function() {
        $k[$j++] = 2; //#20181
        $k[$j++] = $_.mcols - 1; //#20181
    }, function() {
        $k[$j++] = 3; //#20181
        $k[$j++] = $_.mcols - 1; //#20181
    }]); //#20181
    $_.dmc1 = _NV; //#20182
    var _Ne = $a([function() {
        $k[$j++] = $_.mrows - 3; //#20185
        $k[$j++] = 0; //#20185
    }, function() {
        $k[$j++] = $_.mrows - 2; //#20185
        $k[$j++] = 0; //#20185
    }, function() {
        $k[$j++] = $_.mrows - 1; //#20186
        $k[$j++] = 0; //#20186
    }, function() {
        $k[$j++] = 0; //#20186
        $k[$j++] = $_.mcols - 4; //#20186
    }, function() {
        $k[$j++] = 0; //#20187
        $k[$j++] = $_.mcols - 3; //#20187
    }, function() {
        $k[$j++] = 0; //#20187
        $k[$j++] = $_.mcols - 2; //#20187
    }, function() {
        $k[$j++] = 0; //#20188
        $k[$j++] = $_.mcols - 1; //#20188
    }, function() {
        $k[$j++] = 1; //#20188
        $k[$j++] = $_.mcols - 1; //#20188
    }]); //#20188
    $_.dmc2 = _Ne; //#20189
    var _Nn = $a([function() {
        $k[$j++] = $_.mrows - 3; //#20192
        $k[$j++] = 0; //#20192
    }, function() {
        $k[$j++] = $_.mrows - 2; //#20192
        $k[$j++] = 0; //#20192
    }, function() {
        $k[$j++] = $_.mrows - 1; //#20193
        $k[$j++] = 0; //#20193
    }, function() {
        $k[$j++] = 0; //#20193
        $k[$j++] = $_.mcols - 2; //#20193
    }, function() {
        $k[$j++] = 0; //#20194
        $k[$j++] = $_.mcols - 1; //#20194
    }, function() {
        $k[$j++] = 1; //#20194
        $k[$j++] = $_.mcols - 1; //#20194
    }, function() {
        $k[$j++] = 2; //#20195
        $k[$j++] = $_.mcols - 1; //#20195
    }, function() {
        $k[$j++] = 3; //#20195
        $k[$j++] = $_.mcols - 1; //#20195
    }]); //#20195
    $_.dmc3 = _Nn; //#20196
    var _Nx = $a([function() {
        $k[$j++] = $_.mrows - 1; //#20199
        $k[$j++] = 0; //#20199
    }, function() {
        $k[$j++] = $_.mrows - 1; //#20199
        $k[$j++] = $_.mcols - 1; //#20199
    }, function() {
        $k[$j++] = 0; //#20200
        $k[$j++] = $_.mcols - 3; //#20200
    }, function() {
        $k[$j++] = 0; //#20200
        $k[$j++] = $_.mcols - 2; //#20200
    }, function() {
        $k[$j++] = 0; //#20201
        $k[$j++] = $_.mcols - 1; //#20201
    }, function() {
        $k[$j++] = 1; //#20201
        $k[$j++] = $_.mcols - 3; //#20201
    }, function() {
        $k[$j++] = 1; //#20202
        $k[$j++] = $_.mcols - 2; //#20202
    }, function() {
        $k[$j++] = 1; //#20202
        $k[$j++] = $_.mcols - 1; //#20202
    }]); //#20202
    $_.dmc4 = _Nx; //#20203
    $k[$j++] = Infinity; //#20205
    for (var _O0 = 0, _O1 = $_.mrows * $_.mcols; _O0 < _O1; _O0++) { //#20205
        $k[$j++] = -1; //#20205
    } //#20205
    $_.mmat = $a(); //#20205
    for (var _O4 = $_.cws.length - 1; _O4 >= 0; _O4 -= 1) { //#20206
        $k[$j++] = $get($_.cws, _O4); //#20206
    } //#20206
    $k[$j++] = 4; //#20246
    $k[$j++] = 0; //#20246
    for (;;) { //#20246
        var _O7 = $k[$j - 1]; //#20209
        var _O8 = $k[$j - 2]; //#20209
        if ((_O7 == 0) && (_O8 == $_.mrows)) { //#20211
            $k[$j++] = $_.dmc1; //#20210
            $_.module(); //#20210
        } //#20210
        var _OB = $k[$j - 1]; //#20212
        var _OC = $k[$j - 2]; //#20212
        if (((_OB == 0) && (_OC == ($_.mrows - 2))) && (($_.mcols % 4) != 0)) { //#20214
            $k[$j++] = $_.dmc2; //#20213
            $_.module(); //#20213
        } //#20213
        var _OG = $k[$j - 1]; //#20215
        var _OH = $k[$j - 2]; //#20215
        if (((_OG == 0) && (_OH == ($_.mrows - 2))) && (($_.mcols % 8) == 4)) { //#20217
            $k[$j++] = $_.dmc3; //#20216
            $_.module(); //#20216
        } //#20216
        var _OL = $k[$j - 1]; //#20218
        var _OM = $k[$j - 2]; //#20218
        if (((_OL == 2) && (_OM == ($_.mrows + 4))) && (($_.mcols % 8) == 0)) { //#20220
            $k[$j++] = $_.dmc4; //#20219
            $_.module(); //#20219
        } //#20219
        for (;;) { //#20230
            var _OQ = $k[$j - 1]; //#20223
            var _OR = $k[$j - 2]; //#20223
            if ((_OQ >= 0) && (_OR < $_.mrows)) { //#20227
                var _OT = $k[$j - 1]; //#20224
                var _OU = $k[$j - 2]; //#20224
                if ($get($_.mmat, $f(_OT + (_OU * $_.mcols))) == -1) { //#20226
                    $k[$j++] = $_.dmn; //#20225
                    $_.module(); //#20225
                } //#20225
            } //#20225
            var _OZ = $k[--$j]; //#20228
            var _Oa = $k[--$j]; //#20228
            $k[$j++] = _Oa - 2; //#20229
            $k[$j++] = _OZ + 2; //#20229
            if (!(((_OZ + 2) < $_.mcols) && ((_Oa - 2) >= 0))) { //#20229
                break; //#20229
            } //#20229
        } //#20229
        var _Oc = $k[--$j]; //#20231
        var _Od = $k[--$j]; //#20231
        $k[$j++] = _Od + 1; //#20241
        $k[$j++] = _Oc + 3; //#20241
        for (;;) { //#20241
            var _Oe = $k[$j - 1]; //#20234
            var _Of = $k[$j - 2]; //#20234
            if ((_Oe < $_.mcols) && (_Of >= 0)) { //#20238
                var _Oh = $k[$j - 1]; //#20235
                var _Oi = $k[$j - 2]; //#20235
                if ($get($_.mmat, $f(_Oh + (_Oi * $_.mcols))) == -1) { //#20237
                    $k[$j++] = $_.dmn; //#20236
                    $_.module(); //#20236
                } //#20236
            } //#20236
            var _On = $k[--$j]; //#20239
            var _Oo = $k[--$j]; //#20239
            $k[$j++] = _Oo + 2; //#20240
            $k[$j++] = _On - 2; //#20240
            if (!(((_On - 2) >= 0) && ((_Oo + 2) < $_.mrows))) { //#20240
                break; //#20240
            } //#20240
        } //#20240
        var _Oq = $k[--$j]; //#20242
        var _Or = $k[--$j]; //#20242
        $k[$j++] = _Or + 3; //#20244
        $k[$j++] = _Oq + 1; //#20244
        if (!(((_Oq + 1) < $_.mcols) || ((_Or + 3) < $_.mrows))) { //#20244
            $j -= 2; //#20244
            break; //#20244
        } //#20244
    } //#20244
    if ($get($_.mmat, ($_.mrows * $_.mcols) - 1) == -1) { //#20252
        $puti($_.mmat, ($_.mrows * ($_.mcols - 1)) - 2, $a([1, 0])); //#20250
        $puti($_.mmat, ($_.mrows * $_.mcols) - 2, $a([0, 1])); //#20251
    } //#20251
    $_.pixs = $a($_.rows * $_.cols); //#20255
    $_.cwpos = 0; //#20256
    for (var _PB = 0, _PA = $_.rows - 1; _PB <= _PA; _PB += 1) { //#20272
        $_.i = _PB; //#20258
        if (($_.i % ($_.rrows + 2)) == 0) { //#20259
            $k[$j++] = $_.pixs; //#20259
            $k[$j++] = $_.i * $_.cols; //#20259
            $k[$j++] = Infinity; //#20259
            for (var _PI = 0, _PJ = ~~($_.cols / 2); _PI < _PJ; _PI++) { //#20259
                $k[$j++] = 1; //#20259
                $k[$j++] = 0; //#20259
            } //#20259
            var _PK = $a(); //#20259
            var _PL = $k[--$j]; //#20259
            $puti($k[--$j], _PL, _PK); //#20259
        } //#20259
        if (($_.i % ($_.rrows + 2)) == ($_.rrows + 1)) { //#20260
            $k[$j++] = $_.pixs; //#20260
            $k[$j++] = $_.i * $_.cols; //#20260
            $k[$j++] = Infinity; //#20260
            for (var _PU = 0, _PV = $_.cols; _PU < _PV; _PU++) { //#20260
                $k[$j++] = 1; //#20260
            } //#20260
            var _PW = $a(); //#20260
            var _PX = $k[--$j]; //#20260
            $puti($k[--$j], _PX, _PW); //#20260
        } //#20260
        if ((($_.i % ($_.rrows + 2)) != 0) && (($_.i % ($_.rrows + 2)) != ($_.rrows + 1))) { //#20271
            for (var _Pg = 0, _Pf = $_.cols - 1; _Pg <= _Pf; _Pg += 1) { //#20270
                $_.j = _Pg; //#20263
                if (($_.j % ($_.rcols + 2)) == 0) { //#20264
                    $put($_.pixs, $f(($_.i * $_.cols) + $_.j), 1); //#20264
                } //#20264
                if (($_.j % ($_.rcols + 2)) == ($_.rcols + 1)) { //#20265
                    $put($_.pixs, $f(($_.i * $_.cols) + $_.j), $_.i % 2); //#20265
                } //#20265
                if ((($_.j % ($_.rcols + 2)) != 0) && (($_.j % ($_.rcols + 2)) != ($_.rcols + 1))) { //#20269
                    $put($_.pixs, $f(($_.i * $_.cols) + $_.j), $get($_.mmat, $_.cwpos)); //#20267
                    $_.cwpos = $_.cwpos + 1; //#20268
                } //#20268
            } //#20268
        } //#20268
    } //#20268
    var _QE = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.cols],
        ["pixy", $_.rows],
        ["height", ($_.rows * 2) / 72],
        ["width", ($_.cols * 2) / 72],
        ["borderleft", 1],
        ["borderright", 1],
        ["bordertop", 1],
        ["borderbottom", 1],
        ["opt", $_.options]
    ]); //#20286
    $k[$j++] = _QE; //#20289
    if (!$_.dontdraw) { //#20289
        bwipp_renmatrix(); //#20289
    } //#20289
    $_ = $__; //#20293
} //bwipp_datamatrix
function bwipp_datamatrixrectangular() {
    var $__ = $_; //#20322
    $_ = Object.assign({}, $_); //#20322
    $_.dontdraw = false; //#20325
    $k[$j++] = $_; //#20327
    bwipp_processoptions(); //#20327
    $_.options = $k[--$j]; //#20327
    $_.barcode = $k[--$j]; //#20328
    $put($_.options, "dontdraw", true); //#20331
    $put($_.options, "format", "rectangle"); //#20332
    $k[$j++] = 'args'; //#20334
    $k[$j++] = $_.barcode; //#20334
    $k[$j++] = $_.options; //#20334
    bwipp_datamatrix(); //#20334
    var _6 = $k[--$j]; //#20334
    $_[$k[--$j]] = _6; //#20334
    $put($_.args, "opt", $_.options); //#20336
    $k[$j++] = $_.args; //#20339
    if (!$_.dontdraw) { //#20339
        bwipp_renmatrix(); //#20339
    } //#20339
    $_ = $__; //#20341
} //bwipp_datamatrixrectangular
function bwipp_datamatrixrectangularextension() {
    var $__ = $_; //#20370
    $_ = Object.assign({}, $_); //#20370
    $_.dontdraw = false; //#20373
    $k[$j++] = $_; //#20375
    bwipp_processoptions(); //#20375
    $_.options = $k[--$j]; //#20375
    $_.barcode = $k[--$j]; //#20376
    $put($_.options, "dontdraw", true); //#20379
    $put($_.options, "dmre", true); //#20380
    $k[$j++] = 'args'; //#20382
    $k[$j++] = $_.barcode; //#20382
    $k[$j++] = $_.options; //#20382
    bwipp_datamatrix(); //#20382
    var _6 = $k[--$j]; //#20382
    $_[$k[--$j]] = _6; //#20382
    $put($_.args, "opt", $_.options); //#20384
    $k[$j++] = $_.args; //#20387
    if (!$_.dontdraw) { //#20387
        bwipp_renmatrix(); //#20387
    } //#20387
    $_ = $__; //#20389
} //bwipp_datamatrixrectangularextension
function bwipp_mailmark() {
    var $__ = $_; //#20419
    $_ = Object.assign({}, $_); //#20419
    $_.type = "unset"; //#20422
    $_.parse = false; //#20423
    $_.dontdraw = false; //#20424
    $k[$j++] = $_; //#20426
    bwipp_processoptions(); //#20426
    $_.options = $k[--$j]; //#20426
    $_.barcode = $k[--$j]; //#20427
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#20433
    $_.fncvals = _3; //#20434
    $k[$j++] = 'barcode'; //#20435
    $k[$j++] = $_.barcode; //#20435
    $k[$j++] = $_.fncvals; //#20435
    bwipp_parseinput(); //#20435
    var _6 = $k[--$j]; //#20435
    $_[$k[--$j]] = _6; //#20435
    $_.barlen = $_.barcode.length; //#20436
    delete $_.options["parse"]; //#20437
    var _A = $_['type']; //#20440
    if ($ne(_A, "7") && ($ne(_A, "9") && $ne(_A, "29"))) { //#20442
        $k[$j++] = 'bwipp.mailmarkBadType#20441'; //#20441
        $k[$j++] = "Royal Mail Mailmark type must be 7, 9 or 29"; //#20441
        bwipp_raiseerror(); //#20441
    } //#20441
    var _B = new Map([
        ["7", "24x24"],
        ["9", "32x32"],
        ["29", "16x48"]
    ]); //#20446
    $_.version = $get(_B, $_['type']); //#20447
    var _E = new Map([
        ["7", "square"],
        ["9", "square"],
        ["29", "rectangle"]
    ]); //#20452
    $_.format = $get(_E, $_['type']); //#20453
    if ($_.barcode.length < 45) { //#20458
        $k[$j++] = 'bwipp.mailmarkBadLength#20457'; //#20457
        $k[$j++] = "Royal Mail Mailmark must contain at least 45 characters of Mailmark formatted data, including any required space padding"; //#20457
        bwipp_raiseerror(); //#20457
    } //#20457
    if ($ne($geti($_.barcode, 0, 4), "JGB ")) { //#20461
        $k[$j++] = 'bwipp.mailmarkBadIndicator#20460'; //#20460
        $k[$j++] = "Royal Mail Mailmark must begin with JGB<space> identifier"; //#20460
        bwipp_raiseerror(); //#20460
    } //#20460
    $put($_.options, "dontdraw", true); //#20464
    $put($_.options, "version", $_.version); //#20465
    $put($_.options, "format", $_.format); //#20466
    $put($_.options, "c40headerlength", 45); //#20467
    $k[$j++] = 'args'; //#20468
    $k[$j++] = $_.barcode; //#20468
    $k[$j++] = $_.options; //#20468
    bwipp_datamatrix(); //#20468
    var _S = $k[--$j]; //#20468
    $_[$k[--$j]] = _S; //#20468
    $put($_.args, "opt", $_.options); //#20470
    $k[$j++] = $_.args; //#20473
    if (!$_.dontdraw) { //#20473
        bwipp_renmatrix(); //#20473
    } //#20473
    $_ = $__; //#20475
} //bwipp_mailmark
function bwipp_qrcode() {
    var $__ = $_; //#20506
    $_ = Object.assign({}, $_); //#20506
    $_.dontdraw = false; //#20509
    $_.format = "unset"; //#20510
    $_.version = "unset"; //#20511
    $_.eclevel = "unset"; //#20512
    $_.fixedeclevel = false; //#20513
    $_.parse = false; //#20514
    $_.parsefnc = false; //#20515
    $_.mask = -1; //#20516
    $_.suppresskanjimode = true; //#20517
    $k[$j++] = $_; //#20519
    bwipp_processoptions(); //#20519
    $_.options = $k[--$j]; //#20519
    $_.barcode = $k[--$j]; //#20520
    if ($_.barcode.length == 0) { //#20526
        $k[$j++] = 'bwipp.qrcodeEmptyData#20525'; //#20525
        $k[$j++] = "The data must not be empty"; //#20525
        bwipp_raiseerror(); //#20525
    } //#20525
    if ($ne($_.version, "unset")) { //#20537
        if ($eq($_.format, "unset")) { //#20535
            $k[$j++] = "full"; //#20532
            if ($eq($geti($_.version, 0, 1), "M")) { //#20532
                $k[$j - 1] = "micro"; //#20532
            } //#20532
            if ($eq($geti($_.version, 0, 1), "R")) { //#20533
                $k[$j - 1] = "rmqr"; //#20533
            } //#20533
            $_.format = $k[--$j]; //#20534
        } //#20534
    } else { //#20537
        if ($eq($_.format, "unset")) { //#20537
            $_.format = "full"; //#20537
        } //#20537
    } //#20537
    if ($ne($_.format, "full") && ($ne($_.format, "micro") && $ne($_.format, "rmqr"))) { //#20542
        $k[$j++] = 'bwipp.qrcodeInvalidFormat#20541'; //#20541
        $k[$j++] = "The format must be either full, micro or rmqr"; //#20541
        bwipp_raiseerror(); //#20541
    } //#20541
    if ($eq($_.format, "rmqr") && $eq($_.version, "unset")) { //#20546
        $k[$j++] = 'bwipp.qrcodeRMQRwithoutVersion#20545'; //#20545
        $k[$j++] = "A version must be provided for RMQR"; //#20545
        bwipp_raiseerror(); //#20545
    } //#20545
    if ($eq($_.eclevel, "unset")) { //#20549
        $k[$j++] = 'eclevel'; //#20549
        if ($ne($_.format, "micro")) { //#20549
            $k[$j++] = "M"; //#20549
        } else { //#20549
            $k[$j++] = "L"; //#20549
        } //#20549
        var _I = $k[--$j]; //#20549
        $_[$k[--$j]] = _I; //#20549
    } //#20549
    if ($ne($_.eclevel, "L") && ($ne($_.eclevel, "M") && ($ne($_.eclevel, "Q") && $ne($_.eclevel, "H")))) { //#20553
        $k[$j++] = 'bwipp.qrcodeInvalidEClevel#20552'; //#20552
        $k[$j++] = "Error correction level must be either L, M, Q, or H"; //#20552
        bwipp_raiseerror(); //#20552
    } //#20552
    if (($_.mask != -1) && $eq($_.format, "rmqr")) { //#20557
        $k[$j++] = 'bwipp.qrcodeRMQRmask#20556'; //#20556
        $k[$j++] = "A mask cannot be supplied for RMQR"; //#20556
        bwipp_raiseerror(); //#20556
    } //#20556
    if ($_.mask != -1) { //#20563
        var _U = $eq($_.format, "full") ? 8 : 4; //#20560
        if (($_.mask < 1) || ($_.mask > _U)) { //#20562
            $k[$j++] = 'bwipp.qrcodeBadMask#20561'; //#20561
            $k[$j++] = "An invalid mask was supplied"; //#20561
            bwipp_raiseerror(); //#20561
        } //#20561
    } //#20561
    $_.fn1 = -1; //#20566
    var _Y = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["eci", true],
        ["FNC1", $_.fn1]
    ]); //#20571
    $_.fncvals = _Y; //#20572
    $k[$j++] = 'msg'; //#20573
    $k[$j++] = $_.barcode; //#20573
    $k[$j++] = $_.fncvals; //#20573
    bwipp_parseinput(); //#20573
    var _b = $k[--$j]; //#20573
    $_[$k[--$j]] = _b; //#20573
    $_.msglen = $_.msg.length; //#20574
    $_.fnc1first = false; //#20577
    if ($_.msglen > 0) { //#20584
        if ($get($_.msg, 0) == $_.fn1) { //#20583
            $_.fnc1first = true; //#20580
            $k[$j++] = Infinity; //#20581
            var _k = $geti($_.msg, 1, $_.msglen - 1); //#20581
            for (var _l = 0, _m = _k.length; _l < _m; _l++) { //#20581
                var _n = $get(_k, _l); //#20581
                $k[$j++] = _n; //#20581
                if (_n == 37) { //#20581
                    var _o = $k[$j - 1]; //#20581
                    $k[$j++] = _o; //#20581
                } //#20581
            } //#20581
            $_.msg = $a(); //#20581
            $_.msglen = $_.msg.length; //#20582
        } //#20582
    } //#20582
    var _r = $a(['v1to9', 'v10to26', 'v27to40', 'vM1', 'vM2', 'vM3', 'vM4', 'vR7x43', 'vR7x59', 'vR7x77', 'vR7x99', 'vR7x139', 'vR9x43', 'vR9x59', 'vR9x77', 'vR9x99', 'vR9x139', 'vR11x27', 'vR11x43', 'vR11x59', 'vR11x77', 'vR11x99', 'vR11x139', 'vR13x27', 'vR13x43', 'vR13x59', 'vR13x77', 'vR13x99', 'vR13x139', 'vR15x43', 'vR15x59', 'vR15x77', 'vR15x99', 'vR15x139', 'vR17x43', 'vR17x59', 'vR17x77', 'vR17x99', 'vR17x139']); //#20597
    $k[$j++] = 0; //#20598
    for (var _s = 0, _t = _r.length; _s < _t; _s++) { //#20598
        var _v = $k[--$j]; //#20598
        $_[$get(_r, _s)] = _v; //#20598
        $k[$j++] = _v + 1; //#20598
    } //#20598
    $j--; //#20598
    $_.N = 0; //#20604
    $_.A = 1; //#20604
    $_.B = 2; //#20604
    $_.K = 3; //#20604
    $_.E = 4; //#20604
    $k[$j++] = Infinity; //#20606
    $k[$j++] = Infinity; //#20607
    for (var _w = 48; _w <= 57; _w += 1) { //#20608
        $k[$j++] = _w; //#20608
    } //#20608
    var _x = $a(); //#20608
    for (var _y = 0, _z = _x.length; _y < _z; _y++) { //#20609
        $k[$j++] = $get(_x, _y); //#20609
        $k[$j++] = -1; //#20609
    } //#20609
    $_.Nexcl = $d(); //#20610
    $k[$j++] = Infinity; //#20612
    $k[$j++] = Infinity; //#20613
    $k[$j++] = 32; //#20615
    $k[$j++] = 36; //#20615
    $k[$j++] = 37; //#20615
    $k[$j++] = 42; //#20615
    $k[$j++] = 43; //#20615
    $k[$j++] = 45; //#20615
    $k[$j++] = 46; //#20615
    $k[$j++] = 47; //#20615
    $k[$j++] = 58; //#20615
    for (var _12 = 65; _12 <= 90; _12 += 1) { //#20615
        $k[$j++] = _12; //#20615
    } //#20615
    $k[$j++] = $_.fn1; //#20616
    var _14 = $a(); //#20616
    for (var _15 = 0, _16 = _14.length; _15 < _16; _15++) { //#20617
        $k[$j++] = $get(_14, _15); //#20617
        $k[$j++] = -1; //#20617
    } //#20617
    $_.Aexcl = $d(); //#20618
    $k[$j++] = Infinity; //#20622
    $k[$j++] = Infinity; //#20623
    for (var _19 = 129; _19 <= 159; _19 += 1) { //#20624
        $k[$j++] = _19; //#20624
    } //#20624
    for (var _1A = 224; _1A <= 235; _1A += 1) { //#20625
        $k[$j++] = _1A; //#20625
    } //#20625
    var _1B = $a(); //#20625
    for (var _1C = 0, _1D = _1B.length; _1C < _1D; _1C++) { //#20626
        $k[$j++] = $get(_1B, _1C); //#20626
        $k[$j++] = -1; //#20626
    } //#20626
    $_.Kexcl = $d(); //#20627
    $k[$j++] = Infinity; //#20629
    $k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); //#20640
    $k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); //#20640
    $k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); //#20640
    $k[$j++] = $a(["", -1, -1, -1, -1]); //#20640
    $k[$j++] = $a(["0", "1", -1, -1, -1]); //#20640
    $k[$j++] = $a(["00", "01", "10", "11", -1]); //#20640
    $k[$j++] = $a(["000", "001", "010", "011", -1]); //#20640
    for (var _1N = 0; _1N < 32; _1N++) { //#20640
        $k[$j++] = $a(["001", "010", "011", "100", "111"]); //#20639
    } //#20639
    $_.mids = $a(); //#20639
    $_.cclens = $a([$a([10, 9, 8, 8]), $a([12, 11, 16, 10]), $a([14, 13, 16, 12]), $a([3, -1, -1, -1]), $a([4, 3, -1, -1]), $a([5, 4, 4, 3]), $a([6, 5, 5, 4]), $a([4, 3, 3, 2]), $a([5, 5, 4, 3]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([5, 5, 4, 3]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([4, 4, 3, 2]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([8, 7, 7, 6]), $a([5, 5, 4, 3]), $a([6, 6, 5, 5]), $a([7, 6, 6, 5]), $a([7, 7, 6, 6]), $a([8, 7, 7, 6]), $a([8, 8, 7, 7]), $a([7, 6, 6, 5]), $a([7, 7, 6, 5]), $a([8, 7, 7, 6]), $a([8, 7, 7, 6]), $a([9, 8, 7, 7]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([8, 7, 7, 6]), $a([8, 8, 7, 6]), $a([9, 8, 8, 7])]); //#20683
    $k[$j++] = Infinity; //#20685
    for (var _24 = 0; _24 < 3; _24++) { //#20688
        $k[$j++] = 4; //#20687
    } //#20687
    $k[$j++] = 3; //#20695
    $k[$j++] = 5; //#20695
    $k[$j++] = 7; //#20695
    $k[$j++] = 9; //#20695
    for (var _25 = 0; _25 < 32; _25++) { //#20695
        $k[$j++] = 3; //#20694
    } //#20694
    $_.termlens = $a(); //#20694
    $_.padstrs = $a(["11101100", "00010001"]); //#20698
    $_.charmap = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:"; //#20701
    $_.charvals = new Map; //#20702
    for (var _28 = 0; _28 <= 44; _28 += 1) { //#20703
        $put($_.charvals, $get($_.charmap, _28), _28); //#20703
    } //#20703
    $_.tobin = function() {
        var _2E = $s($k[--$j]); //#20709
        $k[$j++] = _2E; //#20709
        for (var _2G = 0, _2F = _2E.length - 1; _2G <= _2F; _2G += 1) { //#20709
            var _2H = $k[$j - 1]; //#20709
            $put(_2H, _2G, 48); //#20709
        } //#20709
        var _2I = $k[$j - 1]; //#20710
        $k[$j++] = _2I; //#20710
        var _2J = $k[$j - 3]; //#20710
        var _2K = $k[$j - 1]; //#20710
        $k[$j - 3] = $k[$j - 2]; //#20710
        $j -= 2; //#20710
        var _2M = $cvrs($s(_2K.length), _2J, 2); //#20710
        $puti(_2K, _2K.length - _2M.length, _2M); //#20710
    }; //#20710
    $_.encA = function() {
        $_.in = $k[--$j]; //#20714
        if ($_.fnc1first) { //#20717
            $k[$j++] = Infinity; //#20716
            $forall($_.in, function() { //#20716
                var _2Q = $k[$j - 1]; //#20716
                if (_2Q == $_.fn1) { //#20716
                    $k[$j - 1] = 37; //#20716
                } //#20716
            }); //#20716
            $_.in = $a(); //#20716
        } //#20716
        $_.out = $s((~~(($_.in.length * 11) / 2)) + 1); //#20718
        $_.k = 0; //#20719
        $_.m = 0; //#20719
        for (;;) { //#20730
            if ($_.k == $_.in.length) { //#20720
                break; //#20720
            } //#20720
            if ($_.k < ($_.in.length - 1)) { //#20726
                $k[$j++] = $f(($get($_.charvals, $get($_.in, $_.k)) * 45) + $get($_.charvals, $get($_.in, $_.k + 1))); //#20722
                $k[$j++] = 11; //#20722
                $_.tobin(); //#20722
                $_.k = $_.k + 2; //#20723
            } else { //#20726
                $k[$j++] = $get($_.charvals, $get($_.in, $_.k)); //#20725
                $k[$j++] = 6; //#20725
                $_.tobin(); //#20725
                $_.k = $_.k + 1; //#20726
            } //#20726
            var _2q = $k[--$j]; //#20728
            $puti($_.out, $_.m, _2q); //#20728
            $_.m = _2q.length + $_.m; //#20729
        } //#20729
        $k[$j++] = $geti($_.out, 0, $_.m); //#20731
    }; //#20731
    $_.encN = function() {
        $_.in = $k[--$j]; //#20735
        $_.out = $s((~~(($_.in.length * 10) / 3)) + 1); //#20736
        $_.k = 0; //#20737
        $_.m = 0; //#20737
        for (;;) { //#20753
            if ($_.k == $_.in.length) { //#20738
                break; //#20738
            } //#20738
            if ($_.k < ($_.in.length - 2)) { //#20748
                var _36 = $geti($_.in, $_.k, 3); //#20740
                $k[$j++] = 0; //#20740
                for (var _37 = 0, _38 = _36.length; _37 < _38; _37++) { //#20740
                    var _3A = $k[--$j]; //#20740
                    $k[$j++] = $f($get(_36, _37) + ((_3A * 10) - 48)); //#20740
                } //#20740
                $k[$j++] = 10; //#20740
                $_.tobin(); //#20740
                $_.k = $_.k + 3; //#20741
            } else { //#20748
                if ($_.k == ($_.in.length - 2)) { //#20748
                    var _3G = $geti($_.in, $_.k, 2); //#20744
                    $k[$j++] = 0; //#20744
                    for (var _3H = 0, _3I = _3G.length; _3H < _3I; _3H++) { //#20744
                        var _3K = $k[--$j]; //#20744
                        $k[$j++] = $f($get(_3G, _3H) + ((_3K * 10) - 48)); //#20744
                    } //#20744
                    $k[$j++] = 7; //#20744
                    $_.tobin(); //#20744
                    $_.k = $_.k + 2; //#20745
                } else { //#20748
                    var _3O = $geti($_.in, $_.k, 1); //#20747
                    $k[$j++] = 0; //#20747
                    for (var _3P = 0, _3Q = _3O.length; _3P < _3Q; _3P++) { //#20747
                        var _3S = $k[--$j]; //#20747
                        $k[$j++] = $f($get(_3O, _3P) + ((_3S * 10) - 48)); //#20747
                    } //#20747
                    $k[$j++] = 4; //#20747
                    $_.tobin(); //#20747
                    $_.k = $_.k + 1; //#20748
                } //#20748
            } //#20748
            var _3U = $k[--$j]; //#20751
            $puti($_.out, $_.m, _3U); //#20751
            $_.m = _3U.length + $_.m; //#20752
        } //#20752
        $k[$j++] = $geti($_.out, 0, $_.m); //#20754
    }; //#20754
    $_.encB = function() {
        $_.in = $k[--$j]; //#20758
        if ($_.fnc1first) { //#20761
            $k[$j++] = Infinity; //#20760
            $forall($_.in, function() { //#20760
                var _3e = $k[$j - 1]; //#20760
                if (_3e == $_.fn1) { //#20760
                    $k[$j - 1] = 29; //#20760
                } //#20760
            }); //#20760
            $_.in = $a(); //#20760
        } //#20760
        $_.out = $s($_.in.length * 8); //#20762
        for (var _3l = 0, _3k = $_.in.length - 1; _3l <= _3k; _3l += 1) { //#20767
            $_.k = _3l; //#20764
            $k[$j++] = $cvi($get($_.in, $_.k)); //#20765
            $k[$j++] = 8; //#20765
            $_.tobin(); //#20765
            $k[$j++] = $_.out; //#20766
            $k[$j++] = $_.k * 8; //#20766
            var _3r = $k[$j - 3]; //#20766
            var _3s = $k[$j - 1]; //#20766
            $puti($k[$j - 2], _3s, _3r); //#20766
            $j -= 3; //#20766
        } //#20766
        $k[$j++] = $_.out; //#20768
    }; //#20768
    $_.encK = function() {
        $_.in = $k[--$j]; //#20772
        $_.out = $s((~~($_.in.length / 2)) * 13); //#20773
        $_.k = 0; //#20774
        $_.m = 0; //#20774
        for (;;) { //#20782
            if ($_.k == $_.in.length) { //#20775
                break; //#20775
            } //#20775
            var _46 = $f(($get($_.in, $_.k) * 256) + $get($_.in, $_.k + 1)); //#20777
            $k[$j++] = _46; //#20777
            if (_46 < 57408) { //#20777
                $k[$j++] = 33088; //#20777
            } else { //#20777
                $k[$j++] = 49472; //#20777
            } //#20777
            var _47 = $k[--$j]; //#20777
            var _49 = $f($k[--$j] - _47); //#20778
            $k[$j++] = $f(((_49 >>> 8) * 192) + (_49 & 255)); //#20779
            $k[$j++] = 13; //#20779
            $_.tobin(); //#20779
            var _4A = $k[--$j]; //#20779
            $puti($_.out, $_.m, _4A); //#20779
            $_.m = _4A.length + $_.m; //#20780
            $_.k = $_.k + 2; //#20781
        } //#20781
        $k[$j++] = $_.out; //#20783
    }; //#20783
    $_.encE = function() {
        var _4I = (-$get($k[--$j], 0)) - 1000000; //#20788
        $k[$j++] = _4I; //#20794
        if (_4I <= 127) { //#20793
            $k[$j++] = 8; //#20789
            $_.tobin(); //#20789
        } else { //#20793
            var _4J = $k[$j - 1]; //#20790
            if (_4J <= 16383) { //#20793
                var _4K = $k[--$j]; //#20791
                $k[$j++] = _4K + 32768; //#20791
                $k[$j++] = 16; //#20791
                $_.tobin(); //#20791
            } else { //#20793
                var _4L = $k[--$j]; //#20793
                $k[$j++] = _4L + 12582912; //#20793
                $k[$j++] = 24; //#20793
                $_.tobin(); //#20793
            } //#20793
        } //#20793
    }; //#20793
    $_.encfuncs = $a(['encN', 'encA', 'encB', 'encK', 'encE']); //#20797
    $_.addtobits = function() {
        var _4N = $k[--$j]; //#20800
        $puti($_.bits, $_.j, _4N); //#20800
        $_.j = _4N.length + $_.j; //#20801
    }; //#20801
    $k[$j++] = Infinity; //#20804
    for (var _4S = 0, _4T = $_.msglen; _4S < _4T; _4S++) { //#20804
        $k[$j++] = 0; //#20804
    } //#20804
    $k[$j++] = 0; //#20804
    $_.numNs = $a(); //#20804
    $k[$j++] = Infinity; //#20805
    for (var _4W = 0, _4X = $_.msglen; _4W < _4X; _4W++) { //#20805
        $k[$j++] = 0; //#20805
    } //#20805
    $k[$j++] = 0; //#20805
    $_.numAs = $a(); //#20805
    $k[$j++] = Infinity; //#20806
    for (var _4a = 0, _4b = $_.msglen; _4a < _4b; _4a++) { //#20806
        $k[$j++] = 0; //#20806
    } //#20806
    $k[$j++] = 0; //#20806
    $_.numAorNs = $a(); //#20806
    $k[$j++] = Infinity; //#20807
    for (var _4e = 0, _4f = $_.msglen; _4e < _4f; _4e++) { //#20807
        $k[$j++] = 0; //#20807
    } //#20807
    $k[$j++] = 0; //#20807
    $_.numBs = $a(); //#20807
    $k[$j++] = Infinity; //#20808
    for (var _4i = 0, _4j = $_.msglen; _4i < _4j; _4i++) { //#20808
        $k[$j++] = 0; //#20808
    } //#20808
    $k[$j++] = 0; //#20808
    $_.numKs = $a(); //#20808
    $k[$j++] = Infinity; //#20809
    for (var _4m = 0, _4n = $_.msglen; _4m < _4n; _4m++) { //#20809
        $k[$j++] = 0; //#20809
    } //#20809
    $k[$j++] = 9999; //#20809
    $_.nextNs = $a(); //#20809
    $k[$j++] = Infinity; //#20810
    for (var _4q = 0, _4r = $_.msglen; _4q < _4r; _4q++) { //#20810
        $k[$j++] = 0; //#20810
    } //#20810
    $k[$j++] = 9999; //#20810
    $_.nextBs = $a(); //#20810
    $k[$j++] = Infinity; //#20811
    for (var _4u = 0, _4v = $_.msglen; _4u < _4v; _4u++) { //#20811
        $k[$j++] = 0; //#20811
    } //#20811
    $k[$j++] = 9999; //#20811
    $_.nextAs = $a(); //#20811
    $k[$j++] = Infinity; //#20812
    for (var _4y = 0, _4z = $_.msglen; _4y < _4z; _4y++) { //#20812
        $k[$j++] = 0; //#20812
    } //#20812
    $k[$j++] = 9999; //#20812
    $_.nextKs = $a(); //#20812
    $_.isECI = $a($_.msglen); //#20813
    for (var _54 = $_.msglen - 1; _54 >= 0; _54 -= 1) { //#20848
        $_.i = _54; //#20815
        $_.barchar = $get($_.msg, $_.i); //#20816
        var _5A = $get($_.Kexcl, $_.barchar) !== undefined; //#20817
        if (_5A && (!$_.suppresskanjimode)) { //#20831
            if (($_.i + 1) < $_.msglen) { //#20818
                $k[$j++] = $f(($_.barchar * 256) + $get($_.msg, $_.i + 1)); //#20818
            } else { //#20818
                $k[$j++] = 0; //#20818
            } //#20818
            var _5I = $k[--$j]; //#20819
            var _5J = _5I & 255; //#20823
            if ((((_5I >= 33088) && (_5I <= 40956)) || ((_5I >= 57408) && (_5I <= 60351))) && (((_5J >= 64) && (_5J <= 252)) && (_5J != 127))) { //#20828
                $put($_.nextKs, $_.i, 0); //#20825
                $put($_.numKs, $_.i, $get($_.numKs, $_.i + 2) + 1); //#20826
            } else { //#20828
                $put($_.nextKs, $_.i, $get($_.nextKs, $_.i + 1) + 1); //#20828
            } //#20828
        } else { //#20831
            $put($_.nextKs, $_.i, $get($_.nextKs, $_.i + 1) + 1); //#20831
        } //#20831
        var _5d = $get($_.Nexcl, $_.barchar) !== undefined; //#20833
        if (_5d) { //#20838
            $put($_.nextNs, $_.i, 0); //#20834
            $put($_.numNs, $_.i, $get($_.numNs, $_.i + 1) + 1); //#20835
            $put($_.numAorNs, $_.i, $get($_.numAorNs, $_.i + 1) + 1); //#20836
        } else { //#20838
            $put($_.nextNs, $_.i, $get($_.nextNs, $_.i + 1) + 1); //#20838
        } //#20838
        var _5x = $get($_.Aexcl, $_.barchar) !== undefined; //#20840
        if (_5x) { //#20845
            $put($_.nextAs, $_.i, 0); //#20841
            $put($_.numAs, $_.i, $get($_.numAs, $_.i + 1) + 1); //#20842
            $put($_.numAorNs, $_.i, $get($_.numAorNs, $_.i + 1) + 1); //#20843
        } else { //#20845
            $put($_.nextAs, $_.i, $get($_.nextAs, $_.i + 1) + 1); //#20845
        } //#20845
        $put($_.isECI, $_.i, $_.barchar <= -1000000); //#20847
    } //#20847
    for (var _6K = 0, _6J = $_.msglen - 1; _6K <= _6J; _6K += 1) { //#20855
        $_.i = _6K; //#20850
        if ($get($_.numKs, $_.i) > 0) { //#20854
            $put($_.numKs, $_.i + 1, 0); //#20852
            $put($_.nextKs, $_.i + 1, $get($_.nextKs, $_.i + 1) + 1); //#20853
        } //#20853
    } //#20853
    for (var _6W = $_.msglen - 1; _6W >= 0; _6W -= 1) { //#20864
        $_.i = _6W; //#20857
        if ($f($get($_.numNs, $_.i) + ($get($_.numAs, $_.i) + $get($_.numKs, $_.i))) == 0 && !$get($_.isECI, $_.i)) { //#20862
            $put($_.nextBs, $_.i, 0); //#20859
            $put($_.numBs, $_.i, $get($_.numBs, $_.i + 1) + 1); //#20860
        } else { //#20862
            $put($_.nextBs, $_.i, $get($_.nextBs, $_.i + 1) + 1); //#20862
        } //#20862
    } //#20862
    $_.KbeforeB = function() {
        var _6y = $get($k[--$j], $_.ver); //#20866
        $k[$j++] = $ge($_.numK, _6y) && ($get($_.nextBs, $f(($_.numK * 2) + $_.i)) == 0); //#20866
    }; //#20866
    $_.KbeforeA = function() {
        var _76 = $get($k[--$j], $_.ver); //#20867
        $k[$j++] = $ge($_.numK, _76) && ($get($_.nextAs, $f(($_.numK * 2) + $_.i)) == 0); //#20867
    }; //#20867
    $_.KbeforeN = function() {
        var _7E = $get($k[--$j], $_.ver); //#20868
        $k[$j++] = $ge($_.numK, _7E) && ($get($_.nextNs, $f(($_.numK * 2) + $_.i)) == 0); //#20868
    }; //#20868
    $_.KbeforeE = function() {
        var _7M = $get($k[--$j], $_.ver); //#20869
        $k[$j++] = $ge($_.numK, _7M) && (($f(($_.numK * 2) + $_.i)) == $_.msglen); //#20869
    }; //#20869
    $_.AbeforeK = function() {
        var _7T = $get($k[--$j], $_.ver); //#20870
        $k[$j++] = $ge($_.numA, _7T) && ($get($_.nextKs, $f($_.numA + $_.i)) == 0); //#20870
    }; //#20870
    $_.AbeforeB = function() {
        var _7b = $get($k[--$j], $_.ver); //#20871
        $k[$j++] = $ge($_.numA, _7b) && ($get($_.nextBs, $f($_.numA + $_.i)) == 0); //#20871
    }; //#20871
    $_.AbeforeN = function() {
        var _7j = $get($k[--$j], $_.ver); //#20872
        $k[$j++] = $ge($_.numA, _7j) && ($get($_.nextNs, $f($_.numA + $_.i)) == 0); //#20872
    }; //#20872
    $_.AbeforeE = function() {
        var _7r = $get($k[--$j], $_.ver); //#20873
        $k[$j++] = $ge($_.numA, _7r) && ($f($_.numA + $_.i) == $_.msglen); //#20873
    }; //#20873
    $_.NbeforeK = function() {
        var _7y = $get($k[--$j], $_.ver); //#20874
        $k[$j++] = $ge($_.numN, _7y) && ($get($_.nextKs, $f($_.numN + $_.i)) == 0); //#20874
    }; //#20874
    $_.NbeforeB = function() {
        var _86 = $get($k[--$j], $_.ver); //#20875
        $k[$j++] = $ge($_.numN, _86) && ($get($_.nextBs, $f($_.numN + $_.i)) == 0); //#20875
    }; //#20875
    $_.NbeforeA = function() {
        var _8E = $get($k[--$j], $_.ver); //#20876
        $k[$j++] = $ge($_.numN, _8E) && ($get($_.nextAs, $f($_.numN + $_.i)) == 0); //#20876
    }; //#20876
    $_.NbeforeE = function() {
        var _8M = $get($k[--$j], $_.ver); //#20877
        $k[$j++] = $ge($_.numN, _8M) && ($f($_.numN + $_.i) == $_.msglen); //#20877
    }; //#20877
    $_.AorNbeforeB = function() {
        var _8T = $get($k[--$j], $_.ver); //#20878
        $k[$j++] = $ge($_.numAorN, _8T) && ($get($_.nextBs, $f($_.numAorN + $_.i)) == 0); //#20878
    }; //#20878
    $_.AorNbeforeE = function() {
        var _8b = $get($k[--$j], $_.ver); //#20879
        $k[$j++] = $ge($_.numAorN, _8b) && ($f($_.numAorN + $_.i) == $_.msglen); //#20879
    }; //#20879
    $_.nextNslt = function() {
        if ($get($_.nextNs, $_.i) >= $_.msglen) { //#20881
            $k[$j - 1] = true; //#20881
        } else { //#20881
            var _8r = $get($k[--$j], $_.ver); //#20881
            $k[$j++] = $lt($get($_.numNs, $f($get($_.nextNs, $_.i) + $_.i)), _8r); //#20881
        } //#20881
    }; //#20881
    $k[$j++] = Infinity; //#20891
    $k[$j++] = "full"; //#20895
    $k[$j++] = Infinity; //#20892
    for (var _8s = 0; _8s <= 9; _8s += 1) { //#20893
        $k[$j++] = $cvrs($s(2), _8s, 10); //#20893
        $k[$j++] = $_.v1to9; //#20893
    } //#20893
    for (var _8w = 10; _8w <= 26; _8w += 1) { //#20894
        $k[$j++] = $cvrs($s(2), _8w, 10); //#20894
        $k[$j++] = $_.v10to26; //#20894
    } //#20894
    for (var _90 = 27; _90 <= 40; _90 += 1) { //#20895
        $k[$j++] = $cvrs($s(2), _90, 10); //#20895
        $k[$j++] = $_.v27to40; //#20895
    } //#20895
    var _94 = $d(); //#20895
    var _99 = new Map([
        ["M1", $_.vM1],
        ["M2", $_.vM2],
        ["M3", $_.vM3],
        ["M4", $_.vM4]
    ]); //#20898
    var _9g = new Map([
        ["R7x43", $_.vR7x43],
        ["R7x59", $_.vR7x59],
        ["R7x77", $_.vR7x77],
        ["R7x99", $_.vR7x99],
        ["R7x139", $_.vR7x139],
        ["R9x43", $_.vR9x43],
        ["R9x59", $_.vR9x59],
        ["R9x77", $_.vR9x77],
        ["R9x99", $_.vR9x99],
        ["R9x139", $_.vR9x139],
        ["R11x27", $_.vR11x27],
        ["R11x43", $_.vR11x43],
        ["R11x59", $_.vR11x59],
        ["R11x77", $_.vR11x77],
        ["R11x99", $_.vR11x99],
        ["R11x139", $_.vR11x139],
        ["R13x27", $_.vR13x27],
        ["R13x43", $_.vR13x43],
        ["R13x59", $_.vR13x59],
        ["R13x77", $_.vR13x77],
        ["R13x99", $_.vR13x99],
        ["R13x139", $_.vR13x139],
        ["R15x43", $_.vR15x43],
        ["R15x59", $_.vR15x59],
        ["R15x77", $_.vR15x77],
        ["R15x99", $_.vR15x99],
        ["R15x139", $_.vR15x139],
        ["R17x43", $_.vR17x43],
        ["R17x59", $_.vR17x59],
        ["R17x77", $_.vR17x77],
        ["R17x99", $_.vR17x99],
        ["R17x139", $_.vR17x139]
    ]); //#20906
    $k[$j++] = _94; //#20906
    $k[$j++] = "micro"; //#20906
    $k[$j++] = _99; //#20906
    $k[$j++] = "rmqr"; //#20906
    $k[$j++] = _9g; //#20906
    $_.versetmap = $d(); //#20908
    $_.versetfull = $a([$_.v1to9, $_.v10to26, $_.v27to40]); //#20909
    $_.versetmicro = $a([$_.vM1, $_.vM2, $_.vM3, $_.vM4]); //#20910
    if ($ne($_.version, "unset")) { //#20929
        var _9v = $get($_.versetmap, $_.format); //#20914
        var _9w = $_.version; //#20914
        var _9x = $get(_9v, _9w) !== undefined; //#20914
        $k[$j++] = _9v; //#20924
        $k[$j++] = _9w; //#20924
        if (!_9x) { //#20924
            $j -= 2; //#20915
            if ($eq($_.format, "full")) { //#20922
                $k[$j++] = 'bwipp.qrcodeInvalidFullVersion#20917'; //#20917
                $k[$j++] = "Valid versions for QR Code symbols are 1 to 40"; //#20917
                bwipp_raiseerror(); //#20917
            } else { //#20922
                if ($eq($_.format, "micro")) { //#20922
                    $k[$j++] = 'bwipp.qrcodeInvalidMicroVersion#20920'; //#20920
                    $k[$j++] = "Valid versions for Micro QR Code symbols are M1 to M4"; //#20920
                    bwipp_raiseerror(); //#20920
                } else { //#20922
                    $k[$j++] = 'bwipp.qrcodeInvalidRMQRversion#20922'; //#20922
                    $k[$j++] = "Invalid version for an RMQR symbol"; //#20922
                    bwipp_raiseerror(); //#20922
                } //#20922
            } //#20922
        } //#20922
        var _A0 = $k[--$j]; //#20925
        var _A2 = $get($k[--$j], _A0); //#20925
        var _A3 = Infinity; //#20925
        var _A4 = _A2; //#20925
        $k[$j++] = _A3; //#20925
        $k[$j++] = _A4; //#20925
        $_.verset = $a(); //#20925
    } else { //#20929
        if ($eq($_.format, "full")) { //#20928
            $_.verset = $_.versetfull; //#20928
        } //#20928
        if ($eq($_.format, "micro")) { //#20929
            $_.verset = $_.versetmicro; //#20929
        } //#20929
    } //#20929
    $k[$j++] = Infinity; //#20934
    for (var _AA = 0; _AA < 39; _AA++) { //#20934
        $k[$j++] = -1; //#20934
    } //#20934
    $_.msgbits = $a(); //#20934
    $_.e = 10000; //#20935
    $_.mode0forceKB = $a([1, 1, 1, $_.e, $_.e, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); //#20941
    $_.mode0forceA = $a([1, 1, 1, $_.e, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); //#20942
    $_.mode0forceN = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); //#20943
    $_.mode0NbeforeB = $a([4, 4, 5, $_.e, $_.e, 2, 3, 2, 2, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]); //#20945
    $_.modeBKbeforeB = $a([9, 12, 13, $_.e, $_.e, 4, 6, 4, 5, 6, 6, 6, 5, 6, 6, 6, 7, 4, 6, 6, 6, 7, 7, 5, 6, 6, 7, 7, 7, 6, 6, 7, 7, 7, 6, 7, 7, 7, 8]); //#20947
    $_.modeBKbeforeA = $a([8, 10, 11, $_.e, $_.e, 4, 5, 4, 5, 5, 6, 6, 5, 5, 6, 6, 6, 4, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 7, 7]); //#20948
    $_.modeBKbeforeN = $a([8, 9, 11, $_.e, $_.e, 3, 5, 3, 4, 5, 5, 5, 4, 5, 5, 5, 6, 3, 5, 5, 5, 6, 6, 4, 5, 5, 6, 6, 6, 5, 5, 6, 6, 7, 5, 6, 6, 6, 7]); //#20949
    $_.modeBKbeforeE = $a([5, 5, 6, $_.e, $_.e, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 2, 3, 3, 3, 4, 4, 3, 3, 3, 4, 4, 4, 3, 3, 4, 4, 4, 3, 4, 4, 4, 4]); //#20950
    $_.modeBAbeforeK = $a([11, 12, 14, $_.e, $_.e, 5, 7, 5, 6, 7, 8, 8, 6, 7, 8, 8, 8, 6, 7, 8, 8, 8, 8, 6, 8, 8, 8, 8, 9, 8, 8, 8, 8, 9, 8, 8, 8, 9, 9]); //#20952
    $_.modeBAbeforeB = $a([11, 15, 16, $_.e, $_.e, 6, 7, 6, 7, 7, 8, 8, 7, 7, 8, 8, 8, 6, 7, 8, 8, 8, 9, 7, 8, 8, 8, 9, 9, 8, 8, 9, 9, 9, 8, 8, 9, 9, 10]); //#20953
    $_.modeBAbeforeN = $a([12, 13, 15, $_.e, $_.e, 6, 8, 6, 7, 8, 8, 8, 7, 8, 8, 8, 9, 6, 8, 8, 8, 9, 9, 7, 8, 8, 9, 9, 10, 8, 9, 9, 9, 10, 8, 9, 9, 10, 10]); //#20954
    $_.modeBAbeforeE = $a([6, 7, 8, $_.e, $_.e, 3, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 5, 4, 5, 5, 5, 5, 4, 5, 5, 5, 5]); //#20955
    $_.modeBNbeforeK = $a([6, 7, 8, $_.e, $_.e, 3, 4, 3, 4, 4, 5, 5, 4, 4, 5, 5, 5, 3, 4, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]); //#20957
    $_.modeBNbeforeB = $a([6, 8, 9, $_.e, $_.e, 3, 4, 3, 4, 4, 5, 5, 4, 4, 5, 5, 5, 3, 4, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6]); //#20958
    $_.modeBNbeforeA = $a([6, 7, 8, $_.e, $_.e, 3, 4, 3, 4, 4, 5, 5, 4, 4, 5, 5, 5, 4, 4, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6]); //#20959
    $_.modeBNbeforeE = $a([3, 4, 4, $_.e, $_.e, 2, 3, 2, 2, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]); //#20960
    $_.modeANbeforeA = $a([13, 15, 17, $_.e, 5, 7, 9, 7, 8, 9, 9, 9, 8, 9, 9, 9, 11, 7, 9, 9, 9, 11, 11, 8, 9, 9, 10, 11, 11, 9, 10, 11, 11, 11, 9, 11, 11, 11, 11]); //#20962
    $_.modeANbeforeB = $a([13, 17, 18, $_.e, $_.e, 7, 9, 7, 8, 9, 9, 9, 8, 9, 9, 9, 10, 7, 9, 9, 9, 10, 11, 8, 9, 9, 9, 11, 11, 9, 9, 11, 11, 11, 9, 10, 11, 11, 11]); //#20963
    $_.modeANbeforeE = $a([7, 8, 9, $_.e, 3, 4, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6]); //#20964
    var _B3 = $_.verset; //#20967
    for (var _B4 = 0, _B5 = _B3.length; _B4 < _B5; _B4++) { //#21100
        $_.ver = $get(_B3, _B4); //#20968
        $_.mode = -1; //#20971
        $_.seq = $a([]); //#20971
        $_.i = 0; //#20971
        for (;;) { //#21069
            if ($_.i >= $_.msglen) { //#20972
                break; //#20972
            } //#20972
            $_.numK = $get($_.numKs, $_.i); //#20973
            $_.numB = $get($_.numBs, $_.i); //#20974
            $_.numA = $get($_.numAs, $_.i); //#20975
            $_.numN = $get($_.numNs, $_.i); //#20976
            $_.numAorN = $get($_.numAorNs, $_.i); //#20977
            $_.eci = $get($_.isECI, $_.i); //#20978
            if ($eq($_.ver, $_.vM1) && ($_.numA >= 1)) { //#20979
                $_.seq = -1; //#20979
                break; //#20979
            } //#20979
            if ($eq($_.ver, $_.vM1) && ($_.numB >= 1)) { //#20980
                $_.seq = -1; //#20980
                break; //#20980
            } //#20980
            if ($eq($_.ver, $_.vM1) && ($_.numK >= 1)) { //#20981
                $_.seq = -1; //#20981
                break; //#20981
            } //#20981
            if ($eq($_.ver, $_.vM1) && $_.eci) { //#20982
                $_.seq = -1; //#20982
                break; //#20982
            } //#20982
            if ($eq($_.ver, $_.vM2) && ($_.numB >= 1)) { //#20983
                $_.seq = -1; //#20983
                break; //#20983
            } //#20983
            if ($eq($_.ver, $_.vM2) && ($_.numK >= 1)) { //#20984
                $_.seq = -1; //#20984
                break; //#20984
            } //#20984
            if ($eq($_.ver, $_.vM2) && $_.eci) { //#20985
                $_.seq = -1; //#20985
                break; //#20985
            } //#20985
            if ($eq($_.ver, $_.vM3) && $_.eci) { //#20986
                $_.seq = -1; //#20986
                break; //#20986
            } //#20986
            if ($eq($_.ver, $_.vM4) && $_.eci) { //#20987
                $_.seq = -1; //#20987
                break; //#20987
            } //#20987
            for (;;) { //#21049
                if ($_.eci) { //#20991
                    $k[$j++] = $_.E; //#20990
                    break; //#20990
                } //#20990
                if ($_.mode == -1) { //#21007
                    $k[$j++] = $_.mode0forceKB; //#20993
                    $_.KbeforeA(); //#20993
                    if ($k[--$j]) { //#20993
                        $k[$j++] = $_.K; //#20993
                        break; //#20993
                    } //#20993
                    $k[$j++] = $_.mode0forceKB; //#20994
                    $_.KbeforeN(); //#20994
                    if ($k[--$j]) { //#20994
                        $k[$j++] = $_.K; //#20994
                        break; //#20994
                    } //#20994
                    $k[$j++] = $_.modeBKbeforeE; //#20995
                    $_.KbeforeB(); //#20995
                    if ($k[--$j]) { //#20995
                        $k[$j++] = $_.K; //#20995
                        break; //#20995
                    } //#20995
                    $k[$j++] = $_.mode0forceKB; //#20996
                    $_.KbeforeE(); //#20996
                    if ($k[--$j]) { //#20996
                        $k[$j++] = $_.K; //#20996
                        break; //#20996
                    } //#20996
                    if ($_.numK >= 1) { //#20997
                        $k[$j++] = $_.B; //#20997
                        break; //#20997
                    } //#20997
                    $k[$j++] = $_.mode0NbeforeB; //#20998
                    $_.NbeforeK(); //#20998
                    if ($k[--$j]) { //#20998
                        $k[$j++] = $_.N; //#20998
                        break; //#20998
                    } //#20998
                    $k[$j++] = $_.mode0NbeforeB; //#20999
                    $_.NbeforeB(); //#20999
                    if ($k[--$j]) { //#20999
                        $k[$j++] = $_.N; //#20999
                        break; //#20999
                    } //#20999
                    $k[$j++] = $_.mode0forceKB; //#21000
                    $_.NbeforeB(); //#21000
                    if ($k[--$j]) { //#21000
                        $k[$j++] = $_.B; //#21000
                        break; //#21000
                    } //#21000
                    $k[$j++] = $_.modeANbeforeE; //#21001
                    $_.NbeforeA(); //#21001
                    if ($k[--$j]) { //#21001
                        $k[$j++] = $_.N; //#21001
                        break; //#21001
                    } //#21001
                    $k[$j++] = $_.mode0forceN; //#21002
                    $_.NbeforeE(); //#21002
                    if ($k[--$j]) { //#21002
                        $k[$j++] = $_.N; //#21002
                        break; //#21002
                    } //#21002
                    $k[$j++] = $_.modeBAbeforeE; //#21003
                    $_.AbeforeK(); //#21003
                    if ($k[--$j]) { //#21003
                        $k[$j++] = $_.A; //#21003
                        break; //#21003
                    } //#21003
                    $k[$j++] = $_.modeBAbeforeE; //#21004
                    $_.AorNbeforeB(); //#21004
                    if ($k[--$j]) { //#21004
                        $k[$j++] = $_.A; //#21004
                        break; //#21004
                    } //#21004
                    $k[$j++] = $_.mode0forceA; //#21005
                    $_.AorNbeforeE(); //#21005
                    if ($k[--$j]) { //#21005
                        $k[$j++] = $_.A; //#21005
                        break; //#21005
                    } //#21005
                    $k[$j++] = $_.B; //#21006
                    break; //#21006
                } //#21006
                if ($_.mode == $_.B) { //#21025
                    $k[$j++] = $_.modeBKbeforeB; //#21009
                    $_.KbeforeB(); //#21009
                    if ($k[--$j]) { //#21009
                        $k[$j++] = $_.K; //#21009
                        break; //#21009
                    } //#21009
                    $k[$j++] = $_.modeBKbeforeA; //#21010
                    $_.KbeforeA(); //#21010
                    if ($k[--$j]) { //#21010
                        $k[$j++] = $_.K; //#21010
                        break; //#21010
                    } //#21010
                    $k[$j++] = $_.modeBKbeforeN; //#21011
                    $_.KbeforeN(); //#21011
                    if ($k[--$j]) { //#21011
                        $k[$j++] = $_.K; //#21011
                        break; //#21011
                    } //#21011
                    $k[$j++] = $_.modeBKbeforeE; //#21012
                    $_.KbeforeE(); //#21012
                    if ($k[--$j]) { //#21012
                        $k[$j++] = $_.K; //#21012
                        break; //#21012
                    } //#21012
                    $k[$j++] = $_.modeBAbeforeK; //#21013
                    $_.AbeforeK(); //#21013
                    if ($k[--$j]) { //#21013
                        $k[$j++] = $_.A; //#21013
                        break; //#21013
                    } //#21013
                    $k[$j++] = $_.modeBAbeforeB; //#21014
                    $_.AbeforeB(); //#21014
                    if ($k[--$j]) { //#21014
                        $k[$j++] = $_.A; //#21014
                        break; //#21014
                    } //#21014
                    $k[$j++] = $_.modeBAbeforeN; //#21015
                    $_.AbeforeN(); //#21015
                    if ($k[--$j]) { //#21015
                        $k[$j++] = $_.A; //#21015
                        break; //#21015
                    } //#21015
                    $k[$j++] = $_.modeBAbeforeE; //#21016
                    $_.AbeforeE(); //#21016
                    if ($k[--$j]) { //#21016
                        $k[$j++] = $_.A; //#21016
                        break; //#21016
                    } //#21016
                    $k[$j++] = $_.modeBNbeforeK; //#21017
                    $_.NbeforeK(); //#21017
                    if ($k[--$j]) { //#21017
                        $k[$j++] = $_.N; //#21017
                        break; //#21017
                    } //#21017
                    $k[$j++] = $_.modeBNbeforeB; //#21018
                    $_.NbeforeB(); //#21018
                    if ($k[--$j]) { //#21018
                        $k[$j++] = $_.N; //#21018
                        break; //#21018
                    } //#21018
                    $k[$j++] = $_.modeBNbeforeA; //#21019
                    $_.NbeforeA(); //#21019
                    if ($k[--$j]) { //#21019
                        $k[$j++] = $_.N; //#21019
                        break; //#21019
                    } //#21019
                    $k[$j++] = $_.modeBNbeforeE; //#21020
                    $_.NbeforeE(); //#21020
                    if ($k[--$j]) { //#21020
                        $k[$j++] = $_.N; //#21020
                        break; //#21020
                    } //#21020
                    $k[$j++] = $_.modeBAbeforeE; //#21021
                    $_.AorNbeforeE(); //#21021
                    var _DG = $k[--$j]; //#21021
                    if (_DG && $le($_.numAorN, $get($_.modeBAbeforeN, $_.ver))) { //#21023
                        $k[$j++] = $_.modeBNbeforeA; //#21022
                        $_.nextNslt(); //#21022
                        if ($k[--$j]) { //#21022
                            $k[$j++] = $_.A; //#21022
                            break; //#21022
                        } //#21022
                    } //#21022
                    $k[$j++] = $_.B; //#21024
                    break; //#21024
                } //#21024
                if ($_.mode == $_.A) { //#21034
                    if ($_.numK >= 1) { //#21027
                        $k[$j++] = $_.K; //#21027
                        break; //#21027
                    } //#21027
                    if ($_.numB >= 1) { //#21028
                        $k[$j++] = $_.B; //#21028
                        break; //#21028
                    } //#21028
                    $k[$j++] = $_.modeANbeforeA; //#21029
                    $_.NbeforeA(); //#21029
                    if ($k[--$j]) { //#21029
                        $k[$j++] = $_.N; //#21029
                        break; //#21029
                    } //#21029
                    $k[$j++] = $_.modeANbeforeB; //#21030
                    $_.NbeforeB(); //#21030
                    if ($k[--$j]) { //#21030
                        $k[$j++] = $_.N; //#21030
                        break; //#21030
                    } //#21030
                    $k[$j++] = $_.modeANbeforeE; //#21031
                    $_.NbeforeE(); //#21031
                    if ($k[--$j]) { //#21031
                        $k[$j++] = $_.N; //#21031
                        break; //#21031
                    } //#21031
                    if (($_.numA >= 1) || ($_.numN >= 1)) { //#21032
                        $k[$j++] = $_.A; //#21032
                        break; //#21032
                    } //#21032
                    $k[$j++] = $_.B; //#21033
                    break; //#21033
                } //#21033
                if ($_.mode == $_.N) { //#21041
                    if ($_.numK >= 1) { //#21036
                        $k[$j++] = $_.K; //#21036
                        break; //#21036
                    } //#21036
                    if ($_.numB >= 1) { //#21037
                        $k[$j++] = $_.B; //#21037
                        break; //#21037
                    } //#21037
                    if ($_.numA >= 1) { //#21038
                        $k[$j++] = $_.A; //#21038
                        break; //#21038
                    } //#21038
                    if ($_.numN >= 1) { //#21039
                        $k[$j++] = $_.N; //#21039
                        break; //#21039
                    } //#21039
                    $k[$j++] = $_.B; //#21040
                    break; //#21040
                } //#21040
                if ($_.mode == $_.K) { //#21048
                    if ($_.numB >= 1) { //#21043
                        $k[$j++] = $_.B; //#21043
                        break; //#21043
                    } //#21043
                    if ($_.numA >= 1) { //#21044
                        $k[$j++] = $_.A; //#21044
                        break; //#21044
                    } //#21044
                    if ($_.numN >= 1) { //#21045
                        $k[$j++] = $_.N; //#21045
                        break; //#21045
                    } //#21045
                    if ($_.numK >= 1) { //#21046
                        $k[$j++] = $_.K; //#21046
                        break; //#21046
                    } //#21046
                    $k[$j++] = $_.B; //#21047
                    break; //#21047
                } //#21047
            } //#21047
            var _E0 = $k[$j - 1]; //#21050
            if ((_E0 == $_.K) && $_.fnc1first) { //#21050
                $k[$j - 1] = $_.B; //#21050
            } //#21050
            var _E4 = $k[$j - 1]; //#21051
            if (_E4 == $_.mode) { //#21066
                $j--; //#21052
                var _EA = ($_.mode == $_.K) ? 2 : 1; //#21053
                $_.dat = $geti($_.msg, $_.i, _EA); //#21053
                $k[$j++] = Infinity; //#21054
                $aload($_.seq); //#21055
                $k[$j++] = Infinity; //#21056
                var _ED = $k[--$j]; //#21056
                var _EE = $k[--$j]; //#21056
                $k[$j++] = _ED; //#21056
                $aload(_EE); //#21056
                $aload($_.dat); //#21056
                var _EG = $a(); //#21056
                $k[$j++] = _EG; //#21056
                $_.seq = $a(); //#21056
            } else { //#21066
                $_.mode = $k[--$j]; //#21059
                if ($_.mode == $_.K) { //#21060
                    $k[$j++] = $_.K; //#21060
                    $k[$j++] = $geti($_.msg, $_.i, $_.numK * 2); //#21060
                } //#21060
                if ($_.mode == $_.B) { //#21061
                    $k[$j++] = $_.B; //#21061
                    $k[$j++] = $geti($_.msg, $_.i, $_.numB); //#21061
                } //#21061
                if ($_.mode == $_.A) { //#21062
                    $k[$j++] = $_.A; //#21062
                    $k[$j++] = $geti($_.msg, $_.i, $_.numA); //#21062
                } //#21062
                if ($_.mode == $_.N) { //#21063
                    $k[$j++] = $_.N; //#21063
                    $k[$j++] = $geti($_.msg, $_.i, $_.numN); //#21063
                } //#21063
                if ($_.mode == $_.E) { //#21064
                    $_.mode = -1; //#21064
                    $k[$j++] = $_.E; //#21064
                    $k[$j++] = $geti($_.msg, $_.i, 1); //#21064
                } //#21064
                $_.dat = $k[--$j]; //#21065
                $_.sw = $k[--$j]; //#21065
                $k[$j++] = Infinity; //#21066
                $aload($_.seq); //#21066
                $k[$j++] = $_.sw; //#21066
                $k[$j++] = $_.dat; //#21066
                $_.seq = $a(); //#21066
            } //#21066
            $_.i = $_.i + $_.dat.length; //#21068
        } //#21068
        for (;;) { //#21099
            if ($_.seq == -1) { //#21073
                break; //#21073
            } //#21073
            $_.bits = $s(23648); //#21074
            $_.j = 0; //#21075
            if ($_.fnc1first) { //#21078
                if ($lt($_.ver, $_.vR7x43)) { //#21077
                    $k[$j++] = "0101"; //#21077
                } else { //#21077
                    $k[$j++] = "101"; //#21077
                } //#21077
                $_.addtobits(); //#21077
            } //#21077
            $_.abort = false; //#21079
            for (var _F6 = 0, _F5 = $_.seq.length - 1; _F6 <= _F5; _F6 += 2) { //#21094
                $_.i = _F6; //#21081
                $_.mode = $get($_.seq, $_.i); //#21082
                $k[$j++] = $get($get($_.mids, $_.ver), $_.mode); //#21083
                $_.addtobits(); //#21083
                $_.chars = $get($_.seq, $_.i + 1); //#21084
                $k[$j++] = 'charslen'; //#21085
                $k[$j++] = $_.chars.length; //#21085
                if ($_.mode == $_.K) { //#21085
                    var _FL = $k[--$j]; //#21085
                    $k[$j++] = ~~(_FL / 2); //#21085
                } //#21085
                var _FM = $k[--$j]; //#21085
                $_[$k[--$j]] = _FM; //#21085
                if ($_.mode != $_.E) { //#21092
                    $_.cclen = $get($get($_.cclens, $_.ver), $_.mode); //#21087
                    if ($_.charslen >= (~~$pow(2, $_.cclen))) { //#21090
                        $_.abort = true; //#21089
                        break; //#21089
                    } //#21089
                    $k[$j++] = $_.charslen; //#21091
                    $k[$j++] = $_.cclen; //#21091
                    $_.tobin(); //#21091
                    $_.addtobits(); //#21091
                } //#21091
                $k[$j++] = $_.chars; //#21093
                if ($_[$get($_.encfuncs, $_.mode)]() === true) {
                    break;
                } //#21093
                $_.addtobits(); //#21093
            } //#21093
            if ($_.abort) { //#21095
                break; //#21095
            } //#21095
            $_.bits = $geti($_.bits, 0, $_.j); //#21096
            $put($_.msgbits, $_.ver, $_.bits); //#21097
            break; //#21098
        } //#21098
    } //#21098
    $_.metrics = $a([$a(["micro", "M1", $_.vM1, 11, 11, 98, 99, 36, $a([2, 99, 99, 99]), $a([1, 0, -1, -1, -1, -1, -1, -1])]), $a(["micro", "M2", $_.vM2, 13, 13, 98, 99, 80, $a([5, 6, 99, 99]), $a([1, 0, 1, 0, -1, -1, -1, -1])]), $a(["micro", "M3", $_.vM3, 15, 15, 98, 99, 132, $a([6, 8, 99, 99]), $a([1, 0, 1, 0, -1, -1, -1, -1])]), $a(["micro", "M4", $_.vM4, 17, 17, 98, 99, 192, $a([8, 10, 14, 99]), $a([1, 0, 1, 0, 1, 0, -1, -1])]), $a(["full", "1", $_.v1to9, 21, 21, 98, 99, 208, $a([7, 10, 13, 17]), $a([1, 0, 1, 0, 1, 0, 1, 0])]), $a(["full", "2", $_.v1to9, 25, 25, 18, 99, 359, $a([10, 16, 22, 28]), $a([1, 0, 1, 0, 1, 0, 1, 0])]), $a(["full", "3", $_.v1to9, 29, 29, 22, 99, 567, $a([15, 26, 36, 44]), $a([1, 0, 1, 0, 2, 0, 2, 0])]), $a(["full", "4", $_.v1to9, 33, 33, 26, 99, 807, $a([20, 36, 52, 64]), $a([1, 0, 2, 0, 2, 0, 4, 0])]), $a(["full", "5", $_.v1to9, 37, 37, 30, 99, 1079, $a([26, 48, 72, 88]), $a([1, 0, 2, 0, 2, 2, 2, 2])]), $a(["full", "6", $_.v1to9, 41, 41, 34, 99, 1383, $a([36, 64, 96, 112]), $a([2, 0, 4, 0, 4, 0, 4, 0])]), $a(["full", "7", $_.v1to9, 45, 45, 22, 38, 1568, $a([40, 72, 108, 130]), $a([2, 0, 4, 0, 2, 4, 4, 1])]), $a(["full", "8", $_.v1to9, 49, 49, 24, 42, 1936, $a([48, 88, 132, 156]), $a([2, 0, 2, 2, 4, 2, 4, 2])]), $a(["full", "9", $_.v1to9, 53, 53, 26, 46, 2336, $a([60, 110, 160, 192]), $a([2, 0, 3, 2, 4, 4, 4, 4])]), $a(["full", "10", $_.v10to26, 57, 57, 28, 50, 2768, $a([72, 130, 192, 224]), $a([2, 2, 4, 1, 6, 2, 6, 2])]), $a(["full", "11", $_.v10to26, 61, 61, 30, 54, 3232, $a([80, 150, 224, 264]), $a([4, 0, 1, 4, 4, 4, 3, 8])]), $a(["full", "12", $_.v10to26, 65, 65, 32, 58, 3728, $a([96, 176, 260, 308]), $a([2, 2, 6, 2, 4, 6, 7, 4])]), $a(["full", "13", $_.v10to26, 69, 69, 34, 62, 4256, $a([104, 198, 288, 352]), $a([4, 0, 8, 1, 8, 4, 12, 4])]), $a(["full", "14", $_.v10to26, 73, 73, 26, 46, 4651, $a([120, 216, 320, 384]), $a([3, 1, 4, 5, 11, 5, 11, 5])]), $a(["full", "15", $_.v10to26, 77, 77, 26, 48, 5243, $a([132, 240, 360, 432]), $a([5, 1, 5, 5, 5, 7, 11, 7])]), $a(["full", "16", $_.v10to26, 81, 81, 26, 50, 5867, $a([144, 280, 408, 480]), $a([5, 1, 7, 3, 15, 2, 3, 13])]), $a(["full", "17", $_.v10to26, 85, 85, 30, 54, 6523, $a([168, 308, 448, 532]), $a([1, 5, 10, 1, 1, 15, 2, 17])]), $a(["full", "18", $_.v10to26, 89, 89, 30, 56, 7211, $a([180, 338, 504, 588]), $a([5, 1, 9, 4, 17, 1, 2, 19])]), $a(["full", "19", $_.v10to26, 93, 93, 30, 58, 7931, $a([196, 364, 546, 650]), $a([3, 4, 3, 11, 17, 4, 9, 16])]), $a(["full", "20", $_.v10to26, 97, 97, 34, 62, 8683, $a([224, 416, 600, 700]), $a([3, 5, 3, 13, 15, 5, 15, 10])]), $a(["full", "21", $_.v10to26, 101, 101, 28, 50, 9252, $a([224, 442, 644, 750]), $a([4, 4, 17, 0, 17, 6, 19, 6])]), $a(["full", "22", $_.v10to26, 105, 105, 26, 50, 10068, $a([252, 476, 690, 816]), $a([2, 7, 17, 0, 7, 16, 34, 0])]), $a(["full", "23", $_.v10to26, 109, 109, 30, 54, 10916, $a([270, 504, 750, 900]), $a([4, 5, 4, 14, 11, 14, 16, 14])]), $a(["full", "24", $_.v10to26, 113, 113, 28, 54, 11796, $a([300, 560, 810, 960]), $a([6, 4, 6, 14, 11, 16, 30, 2])]), $a(["full", "25", $_.v10to26, 117, 117, 32, 58, 12708, $a([312, 588, 870, 1050]), $a([8, 4, 8, 13, 7, 22, 22, 13])]), $a(["full", "26", $_.v10to26, 121, 121, 30, 58, 13652, $a([336, 644, 952, 1110]), $a([10, 2, 19, 4, 28, 6, 33, 4])]), $a(["full", "27", $_.v27to40, 125, 125, 34, 62, 14628, $a([360, 700, 1020, 1200]), $a([8, 4, 22, 3, 8, 26, 12, 28])]), $a(["full", "28", $_.v27to40, 129, 129, 26, 50, 15371, $a([390, 728, 1050, 1260]), $a([3, 10, 3, 23, 4, 31, 11, 31])]), $a(["full", "29", $_.v27to40, 133, 133, 30, 54, 16411, $a([420, 784, 1140, 1350]), $a([7, 7, 21, 7, 1, 37, 19, 26])]), $a(["full", "30", $_.v27to40, 137, 137, 26, 52, 17483, $a([450, 812, 1200, 1440]), $a([5, 10, 19, 10, 15, 25, 23, 25])]), $a(["full", "31", $_.v27to40, 141, 141, 30, 56, 18587, $a([480, 868, 1290, 1530]), $a([13, 3, 2, 29, 42, 1, 23, 28])]), $a(["full", "32", $_.v27to40, 145, 145, 34, 60, 19723, $a([510, 924, 1350, 1620]), $a([17, 0, 10, 23, 10, 35, 19, 35])]), $a(["full", "33", $_.v27to40, 149, 149, 30, 58, 20891, $a([540, 980, 1440, 1710]), $a([17, 1, 14, 21, 29, 19, 11, 46])]), $a(["full", "34", $_.v27to40, 153, 153, 34, 62, 22091, $a([570, 1036, 1530, 1800]), $a([13, 6, 14, 23, 44, 7, 59, 1])]), $a(["full", "35", $_.v27to40, 157, 157, 30, 54, 23008, $a([570, 1064, 1590, 1890]), $a([12, 7, 12, 26, 39, 14, 22, 41])]), $a(["full", "36", $_.v27to40, 161, 161, 24, 50, 24272, $a([600, 1120, 1680, 1980]), $a([6, 14, 6, 34, 46, 10, 2, 64])]), $a(["full", "37", $_.v27to40, 165, 165, 28, 54, 25568, $a([630, 1204, 1770, 2100]), $a([17, 4, 29, 14, 49, 10, 24, 46])]), $a(["full", "38", $_.v27to40, 169, 169, 32, 58, 26896, $a([660, 1260, 1860, 2220]), $a([4, 18, 13, 32, 48, 14, 42, 32])]), $a(["full", "39", $_.v27to40, 173, 173, 26, 54, 28256, $a([720, 1316, 1950, 2310]), $a([20, 4, 40, 7, 43, 22, 10, 67])]), $a(["full", "40", $_.v27to40, 177, 177, 30, 58, 29648, $a([750, 1372, 2040, 2430]), $a([19, 6, 18, 31, 34, 34, 20, 61])]), $a(["rmqr", "R7x43", $_.vR7x43, 7, 43, 22, 99, 104, $a([99, 7, 99, 10]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x59", $_.vR7x59, 7, 59, 20, 40, 171, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x77", $_.vR7x77, 7, 77, 26, 52, 261, $a([99, 12, 99, 22]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x99", $_.vR7x99, 7, 99, 24, 50, 358, $a([99, 16, 99, 30]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x139", $_.vR7x139, 7, 139, 28, 56, 545, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R9x43", $_.vR9x43, 9, 43, 22, 99, 170, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R9x59", $_.vR9x59, 9, 59, 20, 40, 267, $a([99, 12, 99, 22]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R9x77", $_.vR9x77, 9, 77, 26, 52, 393, $a([99, 18, 99, 32]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R9x99", $_.vR9x99, 9, 99, 24, 50, 532, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R9x139", $_.vR9x139, 9, 139, 28, 56, 797, $a([99, 36, 99, 66]), $a([-1, -1, 1, 1, -1, -1, 3, 0])]), $a(["rmqr", "R11x27", $_.vR11x27, 11, 27, 98, 99, 122, $a([99, 8, 99, 10]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R11x43", $_.vR11x43, 11, 43, 22, 99, 249, $a([99, 12, 99, 20]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R11x59", $_.vR11x59, 11, 59, 20, 40, 376, $a([99, 16, 99, 32]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R11x77", $_.vR11x77, 11, 77, 26, 52, 538, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R11x99", $_.vR11x99, 11, 99, 24, 50, 719, $a([99, 32, 99, 60]), $a([-1, -1, 1, 1, -1, -1, 1, 1])]), $a(["rmqr", "R11x139", $_.vR11x139, 11, 139, 28, 56, 1062, $a([99, 48, 99, 90]), $a([-1, -1, 2, 0, -1, -1, 3, 0])]), $a(["rmqr", "R13x27", $_.vR13x27, 13, 27, 98, 99, 172, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R13x43", $_.vR13x43, 13, 43, 22, 99, 329, $a([99, 14, 99, 28]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R13x59", $_.vR13x59, 13, 59, 20, 40, 486, $a([99, 22, 99, 40]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R13x77", $_.vR13x77, 13, 77, 26, 52, 684, $a([99, 32, 99, 56]), $a([-1, -1, 1, 1, -1, -1, 1, 1])]), $a(["rmqr", "R13x99", $_.vR13x99, 13, 99, 24, 50, 907, $a([99, 40, 99, 78]), $a([-1, -1, 1, 1, -1, -1, 1, 2])]), $a(["rmqr", "R13x139", $_.vR13x139, 13, 139, 28, 56, 1328, $a([99, 60, 99, 112]), $a([-1, -1, 2, 1, -1, -1, 2, 2])]), $a(["rmqr", "R15x43", $_.vR15x43, 15, 43, 22, 99, 409, $a([99, 18, 99, 36]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R15x59", $_.vR15x59, 15, 59, 20, 40, 596, $a([99, 26, 99, 48]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R15x77", $_.vR15x77, 15, 77, 26, 52, 830, $a([99, 36, 99, 72]), $a([-1, -1, 1, 1, -1, -1, 2, 1])]), $a(["rmqr", "R15x99", $_.vR15x99, 15, 99, 24, 50, 1095, $a([99, 48, 99, 88]), $a([-1, -1, 2, 0, -1, -1, 4, 0])]), $a(["rmqr", "R15x139", $_.vR15x139, 15, 139, 28, 56, 1594, $a([99, 72, 99, 130]), $a([-1, -1, 2, 1, -1, -1, 1, 4])]), $a(["rmqr", "R17x43", $_.vR17x43, 17, 43, 22, 99, 489, $a([99, 22, 99, 40]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R17x59", $_.vR17x59, 17, 59, 20, 40, 706, $a([99, 32, 99, 60]), $a([-1, -1, 2, 0, -1, -1, 2, 0])]), $a(["rmqr", "R17x77", $_.vR17x77, 17, 77, 26, 52, 976, $a([99, 44, 99, 84]), $a([-1, -1, 2, 0, -1, -1, 1, 2])]), $a(["rmqr", "R17x99", $_.vR17x99, 17, 99, 24, 50, 1283, $a([99, 60, 99, 104]), $a([-1, -1, 2, 1, -1, -1, 4, 0])]), $a(["rmqr", "R17x139", $_.vR17x139, 17, 139, 28, 56, 1860, $a([99, 80, 99, 156]), $a([-1, -1, 4, 0, -1, -1, 2, 4])])]); //#21183
    $k[$j++] = 'eclval'; //#21186
    $search("LMQH", $_.eclevel); //#21186
    $j--; //#21186
    var _Ki = $k[--$j]; //#21186
    $k[$j - 1] = _Ki.length; //#21186
    var _Kk = $k[--$j]; //#21186
    $k[$j - 1] = _Kk; //#21186
    var _Km = $k[--$j]; //#21186
    $_[$k[--$j]] = _Km; //#21186
    for (var _Kq = 0, _Kp = $_.metrics.length - 1; _Kq <= _Kp; _Kq += 1) { //#21225
        $_.i = _Kq; //#21188
        $_.m = $get($_.metrics, $_.i); //#21189
        $_.frmt = $get($_.m, 0); //#21190
        $_.vers = $get($_.m, 1); //#21191
        $_.vergrp = $get($_.m, 2); //#21192
        $_.verind = $_.i - 44; //#21193
        $_.rows = $get($_.m, 3); //#21194
        $_.cols = $get($_.m, 4); //#21195
        $_.asp2 = $get($_.m, 5); //#21196
        $_.asp3 = $get($_.m, 6); //#21197
        $_.nmod = $get($_.m, 7); //#21198
        $_.ncws = ~~($_.nmod / 8); //#21199
        $_.rbit = $_.nmod % 8; //#21200
        $_.lc4b = false; //#21201
        if ($eq($_.vers, "M1") || $eq($_.vers, "M3")) { //#21206
            $_.ncws = $_.ncws + 1; //#21203
            $_.rbit = 0; //#21204
            $_.lc4b = true; //#21205
        } //#21205
        $_.ecws = $get($get($_.m, 8), $_.eclval); //#21207
        $_.dcws = $f($_.ncws - $_.ecws); //#21208
        var _LO = $_.lc4b ? 4 : 0; //#21209
        $_.dmod = $f(($_.dcws * 8) - _LO); //#21209
        $_.ecb1 = $get($get($_.m, 9), $_.eclval * 2); //#21210
        $_.ecb2 = $get($get($_.m, 9), ($_.eclval * 2) + 1); //#21211
        $_.okay = true; //#21212
        if ($ne($_.format, $_.frmt)) { //#21213
            $_.okay = false; //#21213
        } //#21213
        if ($eq($_.frmt, "micro") && $_.fnc1first) { //#21214
            $_.okay = false; //#21214
        } //#21214
        if ($ne($_.version, "unset") && $ne($_.version, $_.vers)) { //#21215
            $_.okay = false; //#21215
        } //#21215
        if (($_.ecb1 == -1) || ($_.ecb2 == -1)) { //#21216
            $_.okay = false; //#21216
        } //#21216
        $_.verbits = $get($_.msgbits, $_.vergrp); //#21217
        if ($_.verbits == -1) { //#21221
            $_.okay = false; //#21219
        } else { //#21221
            if ($_.verbits.length > $_.dmod) { //#21221
                $_.okay = false; //#21221
            } //#21221
        } //#21221
        $_.term = $geti("000000000", 0, $get($_.termlens, $_.vergrp)); //#21223
        if ($_.okay) { //#21224
            break; //#21224
        } //#21224
    } //#21224
    if (!$_.okay) { //#21229
        $k[$j++] = 'bwipp.qrcodeNoValidSymbol#21228'; //#21228
        $k[$j++] = "Maximum length exceeded or invalid content"; //#21228
        bwipp_raiseerror(); //#21228
    } //#21228
    $_.format = $_.frmt; //#21231
    $_.version = $_.vers; //#21232
    $_.msgbits = $_.verbits; //#21233
    if (!$_.fixedeclevel) { //#21255
        for (var _Lx = $_.eclval + 1; _Lx <= 3; _Lx += 1) { //#21254
            $_.eclval_ = _Lx; //#21238
            $_.ecws_ = $get($get($_.m, 8), $_.eclval_); //#21239
            $_.dcws_ = $f($_.ncws - $_.ecws_); //#21240
            var _M6 = $_.lc4b ? 4 : 0; //#21241
            $_.dmod_ = $f(($_.dcws_ * 8) - _M6); //#21241
            $_.ecb1_ = $get($get($_.m, 9), $_.eclval_ * 2); //#21242
            $_.ecb2_ = $get($get($_.m, 9), ($_.eclval_ * 2) + 1); //#21243
            $_.okay = true; //#21244
            if (($_.ecb1_ == -1) || ($_.ecb2_ == -1)) { //#21245
                $_.okay = false; //#21245
            } //#21245
            if ($_.msgbits.length > $_.dmod_) { //#21246
                $_.okay = false; //#21246
            } //#21246
            if ($_.okay) { //#21253
                $_.eclval = $_.eclval_; //#21248
                $_.dcws = $_.dcws_; //#21249
                $_.dmod = $_.dmod_; //#21250
                $_.ecb1 = $_.ecb1_; //#21251
                $_.ecb2 = $_.ecb2_; //#21252
            } //#21252
        } //#21252
    } //#21252
    $_.dcpb = ~~($_.dcws / $f($_.ecb1 + $_.ecb2)); //#21257
    $_.ecpb = (~~($_.ncws / $f($_.ecb1 + $_.ecb2))) - $_.dcpb; //#21258
    var _MW = $_.term; //#21261
    var _MX = $_.dmod; //#21261
    var _MY = $_.msgbits; //#21261
    var _MZ = $_.term; //#21261
    var _Ma = _MZ.length; //#21261
    var _Mb = $f(_MX - _MY.length); //#21261
    if ($f(_MX - _MY.length) > _MZ.length) { //#21261
        var _ = _Ma; //#21261
        _Ma = _Mb; //#21261
        _Mb = _; //#21261
    } //#21261
    $_.term = $geti(_MW, 0, _Mb); //#21261
    var _Mf = $s($_.msgbits.length + $_.term.length); //#21262
    $puti(_Mf, 0, $_.msgbits); //#21263
    $puti(_Mf, $_.msgbits.length, $_.term); //#21264
    $_.msgbits = _Mf; //#21265
    $_.pad = $s($_.dmod); //#21268
    for (var _Mn = 0, _Mm = $_.pad.length - 1; _Mn <= _Mm; _Mn += 1) { //#21269
        $put($_.pad, _Mn, 48); //#21269
    } //#21269
    $puti($_.pad, 0, $_.msgbits); //#21270
    $_.padnum = 0; //#21271
    var _Mu = $_.lc4b ? 5 : 1; //#21272
    for (var _Mw = ~~($ceil($_.msgbits.length / 8) * 8), _Mv = $f($_.dmod - _Mu); _Mw <= _Mv; _Mw += 8) { //#21275
        $puti($_.pad, _Mw, $get($_.padstrs, $_.padnum)); //#21273
        $_.padnum = ($_.padnum + 1) % 2; //#21274
    } //#21274
    $_.cws = $a($_.dcws); //#21278
    for (var _N6 = 0, _N5 = $_.cws.length - 1; _N6 <= _N5; _N6 += 1) { //#21290
        $_.c = _N6; //#21280
        $_.bpcw = 8; //#21281
        if ($_.lc4b && ($_.c == ($_.cws.length - 1))) { //#21282
            $_.bpcw = 4; //#21282
        } //#21282
        $_.cwb = $geti($_.pad, $_.c * 8, $_.bpcw); //#21283
        $_.cw = 0; //#21284
        for (var _NG = 0, _NF = $_.bpcw - 1; _NG <= _NF; _NG += 1) { //#21288
            $_.i = _NG; //#21286
            $_.cw = $f($_.cw + ((~~($pow(2, ($_.bpcw - $_.i) - 1))) * ($get($_.cwb, $_.i) - 48))); //#21287
        } //#21287
        $put($_.cws, $_.c, $_.cw); //#21289
    } //#21289
    if ($_.lc4b) { //#21293
        var _NR = $_.cws; //#21293
        var _NS = $_.cws; //#21293
        $put(_NR, _NS.length - 1, $get(_NR, _NS.length - 1) << 4); //#21293
    } //#21293
    var _NV = $get($_.options, 'debugcws') !== undefined; //#21295
    if (_NV) { //#21295
        $k[$j++] = 'bwipp.debugcws#21295'; //#21295
        $k[$j++] = $_.cws; //#21295
        bwipp_raiseerror(); //#21295
    } //#21295
    $k[$j++] = Infinity; //#21299
    $k[$j++] = 1; //#21299
    for (var _NX = 0; _NX < 255; _NX++) { //#21299
        var _NY = $k[$j - 1]; //#21299
        var _NZ = _NY * 2; //#21299
        $k[$j++] = _NZ; //#21299
        if (_NZ >= 256) { //#21299
            var _Na = $k[--$j]; //#21299
            $k[$j++] = _Na ^ 285; //#21299
        } //#21299
    } //#21299
    $_.rsalog = $a(); //#21299
    $_.rslog = $a(256); //#21300
    for (var _Nd = 1; _Nd <= 255; _Nd += 1) { //#21301
        $put($_.rslog, $get($_.rsalog, _Nd), _Nd); //#21301
    } //#21301
    $_.rsprod = function() {
        var _Ni = $k[$j - 1]; //#21306
        var _Nj = $k[$j - 2]; //#21306
        if ((_Ni != 0) && (_Nj != 0)) { //#21309
            var _Nm = $get($_.rslog, $k[--$j]); //#21307
            var _Nr = $get($_.rsalog, $f(_Nm + $get($_.rslog, $k[--$j])) % 255); //#21307
            $k[$j++] = _Nr; //#21307
        } else { //#21309
            $j -= 2; //#21309
            $k[$j++] = 0; //#21309
        } //#21309
    }; //#21309
    $k[$j++] = Infinity; //#21314
    $k[$j++] = 1; //#21314
    for (var _Nt = 0, _Nu = $_.ecpb; _Nt < _Nu; _Nt++) { //#21314
        $k[$j++] = 0; //#21314
    } //#21314
    $_.coeffs = $a(); //#21314
    for (var _Ny = 0, _Nx = $_.ecpb - 1; _Ny <= _Nx; _Ny += 1) { //#21323
        $_.i = _Ny; //#21316
        $put($_.coeffs, $_.i + 1, $get($_.coeffs, $_.i)); //#21317
        for (var _O5 = $_.i; _O5 >= 1; _O5 -= 1) { //#21321
            $_.j = _O5; //#21319
            $k[$j++] = $_.coeffs; //#21320
            $k[$j++] = $_.j; //#21320
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#21320
            $k[$j++] = $get($_.coeffs, $_.j); //#21320
            $k[$j++] = $get($_.rsalog, $_.i); //#21320
            $_.rsprod(); //#21320
            var _OH = $k[--$j]; //#21320
            var _OI = $k[--$j]; //#21320
            var _OJ = $k[--$j]; //#21320
            $put($k[--$j], _OJ, $xo(_OI, _OH)); //#21320
        } //#21320
        $k[$j++] = $_.coeffs; //#21322
        $k[$j++] = 0; //#21322
        $k[$j++] = $get($_.coeffs, 0); //#21322
        $k[$j++] = $get($_.rsalog, $_.i); //#21322
        $_.rsprod(); //#21322
        var _OR = $k[--$j]; //#21322
        var _OS = $k[--$j]; //#21322
        $put($k[--$j], _OS, _OR); //#21322
    } //#21322
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#21324
    $_.rscodes = function() {
        $_.rscws = $k[--$j]; //#21328
        $_.rsnd = $_.rscws.length; //#21329
        $k[$j++] = Infinity; //#21330
        $aload($_.rscws); //#21330
        for (var _Ob = 0, _Oc = $_.ecpb; _Ob < _Oc; _Ob++) { //#21330
            $k[$j++] = 0; //#21330
        } //#21330
        $_.rscws = $a(); //#21330
        for (var _Og = 0, _Of = $_.rsnd - 1; _Og <= _Of; _Og += 1) { //#21338
            $_.m = _Og; //#21332
            $_.k = $get($_.rscws, $_.m); //#21333
            for (var _Om = 0, _Ol = $_.ecpb - 1; _Om <= _Ol; _Om += 1) { //#21337
                $_.j = _Om; //#21335
                $k[$j++] = $_.rscws; //#21336
                $k[$j++] = ($_.m + $_.j) + 1; //#21336
                $k[$j++] = $get($_.coeffs, ($_.ecpb - $_.j) - 1); //#21336
                $k[$j++] = $_.k; //#21336
                $_.rsprod(); //#21336
                var _Oz = $k[--$j]; //#21336
                var _P0 = $k[--$j]; //#21336
                $put($k[--$j], _P0, $xo(_Oz, $get($_.rscws, ($_.m + $_.j) + 1))); //#21336
            } //#21336
        } //#21336
        $k[$j++] = $geti($_.rscws, $_.rsnd, $_.ecpb); //#21339
    }; //#21339
    $_.dcwsb = $a($f($_.ecb1 + $_.ecb2)); //#21343
    $_.ecwsb = $a($f($_.ecb1 + $_.ecb2)); //#21344
    for (var _PE = 0, _PD = $_.ecb1 - 1; _PE <= _PD; _PE += 1) { //#21349
        $_.i = _PE; //#21346
        $put($_.dcwsb, $_.i, $geti($_.cws, $_.i * $_.dcpb, $_.dcpb)); //#21347
        $k[$j++] = $_.ecwsb; //#21348
        $k[$j++] = $_.i; //#21348
        $k[$j++] = $get($_.dcwsb, $_.i); //#21348
        $_.rscodes(); //#21348
        var _PR = $k[--$j]; //#21348
        var _PS = $k[--$j]; //#21348
        $put($k[--$j], _PS, _PR); //#21348
    } //#21348
    for (var _PW = 0, _PV = $_.ecb2 - 1; _PW <= _PV; _PW += 1) { //#21354
        $_.i = _PW; //#21351
        $put($_.dcwsb, $f($_.ecb1 + $_.i), $geti($_.cws, $f($_.ecb1 * $_.dcpb + $_.i * ($_.dcpb + 1)), $_.dcpb + 1)); //#21352
        $k[$j++] = $_.ecwsb; //#21353
        $k[$j++] = $f($_.ecb1 + $_.i); //#21353
        $k[$j++] = $get($_.dcwsb, $f($_.ecb1 + $_.i)); //#21353
        $_.rscodes(); //#21353
        var _Po = $k[--$j]; //#21353
        var _Pp = $k[--$j]; //#21353
        $put($k[--$j], _Pp, _Po); //#21353
    } //#21353
    $_.cws = $a($_.ncws); //#21357
    $_.cw = 0; //#21358
    for (var _Pv = 0, _Pu = $_.dcpb; _Pv <= _Pu; _Pv += 1) { //#21368
        $_.i = _Pv; //#21360
        for (var _Pz = 0, _Py = $f($_.ecb1 + $_.ecb2) - 1; _Pz <= _Py; _Pz += 1) { //#21367
            $_.j = _Pz; //#21362
            if ($_.i < $get($_.dcwsb, $_.j).length) { //#21366
                $put($_.cws, $_.cw, $get($get($_.dcwsb, $_.j), $_.i)); //#21364
                $_.cw = $_.cw + 1; //#21365
            } //#21365
        } //#21365
    } //#21365
    for (var _QE = 0, _QD = $_.ecpb - 1; _QE <= _QD; _QE += 1) { //#21376
        $_.i = _QE; //#21370
        for (var _QI = 0, _QH = $f($_.ecb1 + $_.ecb2) - 1; _QI <= _QH; _QI += 1) { //#21375
            $_.j = _QI; //#21372
            $put($_.cws, $_.cw, $get($get($_.ecwsb, $_.j), $_.i)); //#21373
            $_.cw = $_.cw + 1; //#21374
        } //#21374
    } //#21374
    if ($_.rbit > 0) { //#21384
        $_.pad = $a($_.cws.length + 1); //#21380
        $puti($_.pad, 0, $_.cws); //#21381
        $put($_.pad, $_.pad.length - 1, 0); //#21382
        $_.cws = $_.pad; //#21383
    } //#21383
    if ($_.lc4b) { //#21395
        var _Qa = $_.cws; //#21388
        var _Qb = $_.dcws; //#21388
        $put(_Qa, _Qb - 1, $get(_Qa, _Qb - 1) >>> 4); //#21388
        for (var _Qg = $_.dcws - 1, _Qf = $_.ncws - 2; _Qg <= _Qf; _Qg += 1) { //#21393
            $_.i = _Qg; //#21390
            $put($_.cws, $_.i, ($get($_.cws, $_.i) & 15) << 4); //#21391
            $put($_.cws, $_.i, (($get($_.cws, $_.i + 1) >>> 4) & 15) | $get($_.cws, $_.i)); //#21392
        } //#21392
        $put($_.cws, $_.ncws - 1, ($get($_.cws, $_.ncws - 1) & 15) << 4); //#21394
    } //#21394
    var _R0 = $get($_.options, 'debugecc') !== undefined; //#21397
    if (_R0) { //#21397
        $k[$j++] = 'bwipp.debugecc#21397'; //#21397
        $k[$j++] = $_.cws; //#21397
        bwipp_raiseerror(); //#21397
    } //#21397
    $k[$j++] = Infinity; //#21400
    for (var _R4 = 0, _R5 = $_.rows * $_.cols; _R4 < _R5; _R4++) { //#21400
        $k[$j++] = -1; //#21400
    } //#21400
    $_.pixs = $a(); //#21400
    $_.qmv = function() {
        var _R8 = $k[--$j]; //#21401
        var _R9 = $k[--$j]; //#21401
        $k[$j++] = $f(_R9 + (_R8 * $_.cols)); //#21401
    }; //#21401
    if ($eq($_.format, "full")) { //#21410
        for (var _RD = 8, _RC = $_.cols - 9; _RD <= _RC; _RD += 1) { //#21409
            $_.i = _RD; //#21406
            $k[$j++] = $_.pixs; //#21407
            $k[$j++] = $_.i; //#21407
            $k[$j++] = 6; //#21407
            $_.qmv(); //#21407
            var _RH = $k[--$j]; //#21407
            $put($k[--$j], _RH, ($_.i + 1) % 2); //#21407
            $k[$j++] = $_.pixs; //#21408
            $k[$j++] = 6; //#21408
            $k[$j++] = $_.i; //#21408
            $_.qmv(); //#21408
            var _RM = $k[--$j]; //#21408
            $put($k[--$j], _RM, ($_.i + 1) % 2); //#21408
        } //#21408
    } //#21408
    if ($eq($_.format, "micro")) { //#21417
        for (var _RR = 8, _RQ = $_.cols - 1; _RR <= _RQ; _RR += 1) { //#21416
            $_.i = _RR; //#21413
            $k[$j++] = $_.pixs; //#21414
            $k[$j++] = $_.i; //#21414
            $k[$j++] = 0; //#21414
            $_.qmv(); //#21414
            var _RV = $k[--$j]; //#21414
            $put($k[--$j], _RV, ($_.i + 1) % 2); //#21414
            $k[$j++] = $_.pixs; //#21415
            $k[$j++] = 0; //#21415
            $k[$j++] = $_.i; //#21415
            $_.qmv(); //#21415
            var _Ra = $k[--$j]; //#21415
            $put($k[--$j], _Ra, ($_.i + 1) % 2); //#21415
        } //#21415
    } //#21415
    if ($eq($_.format, "rmqr")) { //#21436
        for (var _Rf = 3, _Re = $_.cols - 4; _Rf <= _Re; _Rf += 1) { //#21423
            $_.i = _Rf; //#21420
            $k[$j++] = $_.pixs; //#21421
            $k[$j++] = $_.i; //#21421
            $k[$j++] = 0; //#21421
            $_.qmv(); //#21421
            var _Rj = $k[--$j]; //#21421
            $put($k[--$j], _Rj, ($_.i + 1) % 2); //#21421
            $k[$j++] = $_.pixs; //#21422
            $k[$j++] = $_.i; //#21422
            $k[$j++] = $_.rows - 1; //#21422
            $_.qmv(); //#21422
            var _Rp = $k[--$j]; //#21422
            $put($k[--$j], _Rp, ($_.i + 1) % 2); //#21422
        } //#21422
        for (var _Rt = 3, _Rs = $_.rows - 4; _Rt <= _Rs; _Rt += 1) { //#21428
            $_.i = _Rt; //#21425
            $k[$j++] = $_.pixs; //#21426
            $k[$j++] = 0; //#21426
            $k[$j++] = $_.i; //#21426
            $_.qmv(); //#21426
            var _Rx = $k[--$j]; //#21426
            $put($k[--$j], _Rx, ($_.i + 1) % 2); //#21426
            $k[$j++] = $_.pixs; //#21427
            $k[$j++] = $_.cols - 1; //#21427
            $k[$j++] = $_.i; //#21427
            $_.qmv(); //#21427
            var _S3 = $k[--$j]; //#21427
            $put($k[--$j], _S3, ($_.i + 1) % 2); //#21427
        } //#21427
        for (var _SA = $_.asp2 - 1, _SB = $f($_.asp3 - $_.asp2), _S9 = $_.cols - 13; _SB < 0 ? _SA >= _S9 : _SA <= _S9; _SA += _SB) { //#21435
            $_.i = _SA; //#21430
            for (var _SE = 3, _SD = $_.rows - 4; _SE <= _SD; _SE += 1) { //#21434
                $_.j = _SE; //#21432
                $k[$j++] = $_.pixs; //#21433
                $k[$j++] = $_.i; //#21433
                $k[$j++] = $_.j; //#21433
                $_.qmv(); //#21433
                var _SJ = $k[--$j]; //#21433
                $put($k[--$j], _SJ, ($_.j + 1) % 2); //#21433
            } //#21433
        } //#21433
    } //#21433
    $_.fpat = $a([$a([1, 1, 1, 1, 1, 1, 1, 0]), $a([1, 0, 0, 0, 0, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 0, 0, 0, 0, 1, 0]), $a([1, 1, 1, 1, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); //#21449
    $_.fsubpat = $a([$a([1, 1, 1, 1, 1, 9, 9, 9]), $a([1, 0, 0, 0, 1, 9, 9, 9]), $a([1, 0, 1, 0, 1, 9, 9, 9]), $a([1, 0, 0, 0, 1, 9, 9, 9]), $a([1, 1, 1, 1, 1, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); //#21459
    $_.fcorpat = $a([$a([1, 1, 1, 9, 9, 9, 9, 9]), $a([1, 0, 9, 9, 9, 9, 9, 9]), $a([1, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); //#21469
    $_.fnullpat = $a([$a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); //#21479
    var _TA = new Map([
        ["full", $a([$_.fpat, $_.fpat, $_.fpat, $_.fnullpat])],
        ["micro", $a([$_.fpat, $_.fnullpat, $_.fnullpat, $_.fnullpat])],
        ["rmqr", $a([$_.fpat, $_.fcorpat, $_.fcorpat, $_.fsubpat])]
    ]); //#21484
    $_.fpatmap = _TA; //#21485
    $_.fpats = $get($_.fpatmap, $_.format); //#21487
    for (var _TF = 0; _TF <= 7; _TF += 1) { //#21501
        $_.y = _TF; //#21489
        for (var _TG = 0; _TG <= 7; _TG += 1) { //#21500
            $_.x = _TG; //#21491
            $_.fpb0 = $get($get($get($_.fpats, 0), $_.y), $_.x); //#21492
            $_.fpb1 = $get($get($get($_.fpats, 1), $_.y), $_.x); //#21493
            $_.fpb2 = $get($get($get($_.fpats, 2), $_.y), $_.x); //#21494
            $_.fpb3 = $get($get($get($_.fpats, 3), $_.y), $_.x); //#21495
            if (($_.fpb0 != 9) && ($_.y < $_.rows)) { //#21496
                $k[$j++] = $_.pixs; //#21496
                $k[$j++] = $_.x; //#21496
                $k[$j++] = $_.y; //#21496
                $_.qmv(); //#21496
                var _Tm = $k[--$j]; //#21496
                $put($k[--$j], _Tm, $_.fpb0); //#21496
            } //#21496
            if ($_.fpb1 != 9) { //#21497
                $k[$j++] = $_.pixs; //#21497
                $k[$j++] = $f($_.cols - $_.x) - 1; //#21497
                $k[$j++] = $_.y; //#21497
                $_.qmv(); //#21497
                var _Tu = $k[--$j]; //#21497
                $put($k[--$j], _Tu, $_.fpb1); //#21497
            } //#21497
            if ($_.fpb2 != 9) { //#21498
                $k[$j++] = $_.pixs; //#21498
                $k[$j++] = $_.x; //#21498
                $k[$j++] = $f($_.rows - $_.y) - 1; //#21498
                $_.qmv(); //#21498
                var _U2 = $k[--$j]; //#21498
                $put($k[--$j], _U2, $_.fpb2); //#21498
            } //#21498
            if ($_.fpb3 != 9) { //#21499
                $k[$j++] = $_.pixs; //#21499
                $k[$j++] = $f($_.cols - $_.x) - 1; //#21499
                $k[$j++] = $f($_.rows - $_.y) - 1; //#21499
                $_.qmv(); //#21499
                var _UB = $k[--$j]; //#21499
                $put($k[--$j], _UB, $_.fpb3); //#21499
            } //#21499
        } //#21499
    } //#21499
    $_.algnpatfull = $a([$a([1, 1, 1, 1, 1]), $a([1, 0, 0, 0, 1]), $a([1, 0, 1, 0, 1]), $a([1, 0, 0, 0, 1]), $a([1, 1, 1, 1, 1])]); //#21511
    $_.algnpatrmqr = $a([$a([1, 1, 1, 9, 9]), $a([1, 0, 1, 9, 9]), $a([1, 1, 1, 9, 9]), $a([9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9])]); //#21518
    $_.putalgnpat = function() {
        $_.py = $k[--$j]; //#21522
        $_.px = $k[--$j]; //#21523
        for (var _US = 0; _US <= 4; _US += 1) { //#21533
            $_.pb = _US; //#21525
            for (var _UT = 0; _UT <= 4; _UT += 1) { //#21532
                $_.pa = _UT; //#21527
                $_.algnb = $get($get($_.algnpat, $_.pb), $_.pa); //#21528
                if ($_.algnb != 9) { //#21531
                    $k[$j++] = $_.pixs; //#21530
                    $k[$j++] = $f($_.px + $_.pa); //#21530
                    $k[$j++] = $f($_.py + $_.pb); //#21530
                    $_.qmv(); //#21530
                    var _Ug = $k[--$j]; //#21530
                    $put($k[--$j], _Ug, $_.algnb); //#21530
                } //#21530
            } //#21530
        } //#21530
    }; //#21530
    if ($eq($_.format, "full")) { //#21549
        $_.algnpat = $_.algnpatfull; //#21536
        for (var _Up = $_.asp2 - 2, _Uq = $f($_.asp3 - $_.asp2), _Uo = $_.cols - 13; _Uq < 0 ? _Up >= _Uo : _Up <= _Uo; _Up += _Uq) { //#21541
            $_.i = _Up; //#21538
            $k[$j++] = $_.i; //#21539
            $k[$j++] = 4; //#21539
            $_.putalgnpat(); //#21539
            $k[$j++] = 4; //#21540
            $k[$j++] = $_.i; //#21540
            $_.putalgnpat(); //#21540
        } //#21540
        for (var _Uy = $_.asp2 - 2, _Uz = $f($_.asp3 - $_.asp2), _Ux = $_.cols - 9; _Uz < 0 ? _Uy >= _Ux : _Uy <= _Ux; _Uy += _Uz) { //#21548
            $_.x = _Uy; //#21543
            for (var _V5 = $_.asp2 - 2, _V6 = $f($_.asp3 - $_.asp2), _V4 = $_.rows - 9; _V6 < 0 ? _V5 >= _V4 : _V5 <= _V4; _V5 += _V6) { //#21547
                $_.y = _V5; //#21545
                $k[$j++] = $_.x; //#21546
                $k[$j++] = $_.y; //#21546
                $_.putalgnpat(); //#21546
            } //#21546
        } //#21546
    } //#21546
    if ($eq($_.format, "rmqr")) { //#21557
        $_.algnpat = $_.algnpatrmqr; //#21551
        for (var _VG = $_.asp2 - 2, _VH = $f($_.asp3 - $_.asp2), _VF = $_.cols - 13; _VH < 0 ? _VG >= _VF : _VG <= _VF; _VG += _VH) { //#21556
            $_.i = _VG; //#21553
            $k[$j++] = $_.i; //#21554
            $k[$j++] = 0; //#21554
            $_.putalgnpat(); //#21554
            $k[$j++] = $_.i; //#21555
            $k[$j++] = $_.rows - 3; //#21555
            $_.putalgnpat(); //#21555
        } //#21555
    } //#21555
    $_.formatmapmicro = $a([$a([$a([1, 8])]), $a([$a([2, 8])]), $a([$a([3, 8])]), $a([$a([4, 8])]), $a([$a([5, 8])]), $a([$a([6, 8])]), $a([$a([7, 8])]), $a([$a([8, 8])]), $a([$a([8, 7])]), $a([$a([8, 6])]), $a([$a([8, 5])]), $a([$a([8, 4])]), $a([$a([8, 3])]), $a([$a([8, 2])]), $a([$a([8, 1])])]); //#21565
    var _YK = new Map([
        ["full", $a([$a([$a([0, 8]), $a([8, $_.cols - 1])]), $a([$a([1, 8]), $a([8, $_.cols - 2])]), $a([$a([2, 8]), $a([8, $_.cols - 3])]), $a([$a([3, 8]), $a([8, $_.cols - 4])]), $a([$a([4, 8]), $a([8, $_.cols - 5])]), $a([$a([5, 8]), $a([8, $_.cols - 6])]), $a([$a([7, 8]), $a([8, $_.cols - 7])]), $a([$a([8, 8]), $a([$_.cols - 8, 8])]), $a([$a([8, 7]), $a([$_.cols - 7, 8])]), $a([$a([8, 5]), $a([$_.cols - 6, 8])]), $a([$a([8, 4]), $a([$_.cols - 5, 8])]), $a([$a([8, 3]), $a([$_.cols - 4, 8])]), $a([$a([8, 2]), $a([$_.cols - 3, 8])]), $a([$a([8, 1]), $a([$_.cols - 2, 8])]), $a([$a([8, 0]), $a([$_.cols - 1, 8])])])],
        ["micro", $_.formatmapmicro],
        ["rmqr", $a([$a([$a([11, 3]), $a([$_.cols - 3, $_.rows - 6])]), $a([$a([11, 2]), $a([$_.cols - 4, $_.rows - 6])]), $a([$a([11, 1]), $a([$_.cols - 5, $_.rows - 6])]), $a([$a([10, 5]), $a([$_.cols - 6, $_.rows - 2])]), $a([$a([10, 4]), $a([$_.cols - 6, $_.rows - 3])]), $a([$a([10, 3]), $a([$_.cols - 6, $_.rows - 4])]), $a([$a([10, 2]), $a([$_.cols - 6, $_.rows - 5])]), $a([$a([10, 1]), $a([$_.cols - 6, $_.rows - 6])]), $a([$a([9, 5]), $a([$_.cols - 7, $_.rows - 2])]), $a([$a([9, 4]), $a([$_.cols - 7, $_.rows - 3])]), $a([$a([9, 3]), $a([$_.cols - 7, $_.rows - 4])]), $a([$a([9, 2]), $a([$_.cols - 7, $_.rows - 5])]), $a([$a([9, 1]), $a([$_.cols - 7, $_.rows - 6])]), $a([$a([8, 5]), $a([$_.cols - 8, $_.rows - 2])]), $a([$a([8, 4]), $a([$_.cols - 8, $_.rows - 3])]), $a([$a([8, 3]), $a([$_.cols - 8, $_.rows - 4])]), $a([$a([8, 2]), $a([$_.cols - 8, $_.rows - 5])]), $a([$a([8, 1]), $a([$_.cols - 8, $_.rows - 6])])])]
    ]); //#21582
    $_.formatmap = $get(_YK, $_.format); //#21584
    $forall($_.formatmap, function() { //#21587
        $forall($k[--$j], function() { //#21586
            $aload($k[--$j]); //#21586
            $_.qmv(); //#21586
            $put($_.pixs, $k[--$j], 1); //#21586
        }); //#21586
    }); //#21586
    if ($eq($_.format, "full") && ($_.cols >= 45)) { //#21603
        $_.versionmap = $a([$a([$a([$_.cols - 9, 5]), $a([5, $_.cols - 9])]), $a([$a([$_.cols - 10, 5]), $a([5, $_.cols - 10])]), $a([$a([$_.cols - 11, 5]), $a([5, $_.cols - 11])]), $a([$a([$_.cols - 9, 4]), $a([4, $_.cols - 9])]), $a([$a([$_.cols - 10, 4]), $a([4, $_.cols - 10])]), $a([$a([$_.cols - 11, 4]), $a([4, $_.cols - 11])]), $a([$a([$_.cols - 9, 3]), $a([3, $_.cols - 9])]), $a([$a([$_.cols - 10, 3]), $a([3, $_.cols - 10])]), $a([$a([$_.cols - 11, 3]), $a([3, $_.cols - 11])]), $a([$a([$_.cols - 9, 2]), $a([2, $_.cols - 9])]), $a([$a([$_.cols - 10, 2]), $a([2, $_.cols - 10])]), $a([$a([$_.cols - 11, 2]), $a([2, $_.cols - 11])]), $a([$a([$_.cols - 9, 1]), $a([1, $_.cols - 9])]), $a([$a([$_.cols - 10, 1]), $a([1, $_.cols - 10])]), $a([$a([$_.cols - 11, 1]), $a([1, $_.cols - 11])]), $a([$a([$_.cols - 9, 0]), $a([0, $_.cols - 9])]), $a([$a([$_.cols - 10, 0]), $a([0, $_.cols - 10])]), $a([$a([$_.cols - 11, 0]), $a([0, $_.cols - 11])])]); //#21601
    } else { //#21603
        $_.versionmap = $a([]); //#21603
    } //#21603
    var _Zy = $_.versionmap; //#21605
    for (var _Zz = 0, _a0 = _Zy.length; _Zz < _a0; _Zz++) { //#21607
        $forall($get(_Zy, _Zz), function() { //#21606
            $aload($k[--$j]); //#21606
            $_.qmv(); //#21606
            $put($_.pixs, $k[--$j], 0); //#21606
        }); //#21606
    } //#21606
    if ($eq($_.format, "full")) { //#21612
        $k[$j++] = $_.pixs; //#21611
        $k[$j++] = 8; //#21611
        $k[$j++] = $_.rows - 8; //#21611
        $_.qmv(); //#21611
        var _a8 = $k[--$j]; //#21611
        $put($k[--$j], _a8, 0); //#21611
    } //#21611
    var _aS = $a([function() {
        var _aA = $k[--$j]; //#21617
        var _aB = $k[--$j]; //#21617
        $k[$j++] = $f(_aB + _aA) % 2; //#21617
    }, function() {
        var _aC = $k[--$j]; //#21618
        $k[$j - 1] = _aC; //#21618
        var _aE = $k[--$j]; //#21618
        $k[$j++] = _aE % 2; //#21618
    }, function() {
        $j--; //#21619
        var _aF = $k[--$j]; //#21619
        $k[$j++] = _aF % 3; //#21619
    }, function() {
        var _aG = $k[--$j]; //#21620
        var _aH = $k[--$j]; //#21620
        $k[$j++] = $f(_aH + _aG) % 3; //#21620
    }, function() {
        var _aI = $k[--$j]; //#21621
        var _aJ = $k[--$j]; //#21621
        $k[$j++] = ((~~(_aI / 2)) + (~~(_aJ / 3))) % 2; //#21621
    }, function() {
        var _aK = $k[--$j]; //#21622
        var _aM = $k[--$j] * _aK; //#21622
        $k[$j++] = $f((_aM % 2) + (_aM % 3)); //#21622
    }, function() {
        var _aN = $k[--$j]; //#21623
        var _aP = $k[--$j] * _aN; //#21623
        $k[$j++] = ($f((_aP % 2) + (_aP % 3))) % 2; //#21623
    }, function() {
        var _aQ = $k[--$j]; //#21624
        var _aR = $k[--$j]; //#21624
        $k[$j++] = $f(_aR * _aQ % 3 + (_aR + _aQ) % 2) % 2; //#21624
    }]); //#21624
    var _ad = $a([function() {
        var _aT = $k[--$j]; //#21627
        $k[$j - 1] = _aT; //#21627
        var _aV = $k[--$j]; //#21627
        $k[$j++] = _aV % 2; //#21627
    }, function() {
        var _aW = $k[--$j]; //#21628
        var _aX = $k[--$j]; //#21628
        $k[$j++] = ((~~(_aW / 2)) + (~~(_aX / 3))) % 2; //#21628
    }, function() {
        var _aY = $k[--$j]; //#21629
        var _aa = $k[--$j] * _aY; //#21629
        $k[$j++] = ($f((_aa % 2) + (_aa % 3))) % 2; //#21629
    }, function() {
        var _ab = $k[--$j]; //#21630
        var _ac = $k[--$j]; //#21630
        $k[$j++] = $f(_ac * _ab % 3 + (_ac + _ab) % 2) % 2; //#21630
    }]); //#21630
    var _ag = $a([function() {
        var _ae = $k[--$j]; //#21633
        var _af = $k[--$j]; //#21633
        $k[$j++] = ((~~(_ae / 2)) + (~~(_af / 3))) % 2; //#21633
    }]); //#21633
    var _ah = new Map([
        ["full", _aS],
        ["micro", _ad],
        ["rmqr", _ag]
    ]); //#21633
    $_.maskfuncs = $get(_ah, $_.format); //#21635
    if ($_.mask != -1) { //#21639
        $_.maskfuncs = $a([$get($_.maskfuncs, $_.mask - 1)]); //#21637
        $_.bestmaskval = $_.mask - 1; //#21638
    } //#21638
    $_.masks = $a($_.maskfuncs.length); //#21640
    for (var _au = 0, _at = $_.masks.length - 1; _au <= _at; _au += 1) { //#21654
        $_.m = _au; //#21642
        $_.mask = $a($_.rows * $_.cols); //#21643
        for (var _b0 = 0, _az = $_.rows - 1; _b0 <= _az; _b0 += 1) { //#21652
            $_.j = _b0; //#21645
            for (var _b3 = 0, _b2 = $_.cols - 1; _b3 <= _b2; _b3 += 1) { //#21651
                $_.i = _b3; //#21647
                $k[$j++] = $_.i; //#21648
                $k[$j++] = $_.j; //#21648
                if ($get($_.maskfuncs, $_.m)() === true) {
                    break;
                } //#21648
                var _b9 = $k[--$j]; //#21648
                $k[$j++] = _b9 == 0; //#21649
                $k[$j++] = $_.pixs; //#21649
                $k[$j++] = $_.i; //#21649
                $k[$j++] = $_.j; //#21649
                $_.qmv(); //#21649
                var _bD = $k[--$j]; //#21649
                var _bF = $get($k[--$j], _bD); //#21649
                var _bG = $k[--$j]; //#21649
                var _bH = (_bG && (_bF == -1)) ? 1 : 0; //#21649
                $k[$j++] = _bH; //#21650
                $k[$j++] = $_.mask; //#21650
                $k[$j++] = $_.i; //#21650
                $k[$j++] = $_.j; //#21650
                $_.qmv(); //#21650
                var _bL = $k[$j - 3]; //#21650
                var _bM = $k[$j - 1]; //#21650
                $put($k[$j - 2], _bM, _bL); //#21650
                $j -= 3; //#21650
            } //#21650
        } //#21650
        $put($_.masks, $_.m, $_.mask); //#21653
    } //#21653
    var _bT = $ne($_.format, "rmqr") ? 1 : 2; //#21657
    $_.posx = $f($_.cols - _bT); //#21657
    $_.posy = $_.rows - 1; //#21658
    $_.dir = -1; //#21659
    $_.col = 1; //#21660
    $_.num = 0; //#21661
    for (;;) { //#21684
        if ($_.posx < 0) { //#21663
            break; //#21663
        } //#21663
        $k[$j++] = $_.pixs; //#21664
        $k[$j++] = $_.posx; //#21664
        $k[$j++] = $_.posy; //#21664
        $_.qmv(); //#21664
        var _bZ = $k[--$j]; //#21664
        if ($get($k[--$j], _bZ) == -1) { //#21668
            var _be = $get($_.cws, ~~($_.num / 8)); //#21665
            var _bg = -(7 - ($_.num % 8)); //#21665
            $k[$j++] = ((_bg < 0 ? _be >>> -_bg : _be << _bg)) & 1; //#21666
            $k[$j++] = $_.pixs; //#21666
            $k[$j++] = $_.posx; //#21666
            $k[$j++] = $_.posy; //#21666
            $_.qmv(); //#21666
            var _bk = $k[$j - 3]; //#21666
            var _bl = $k[$j - 1]; //#21666
            $put($k[$j - 2], _bl, _bk); //#21666
            $j -= 3; //#21666
            $_.num = $_.num + 1; //#21667
        } //#21667
        if ($_.col == 1) { //#21681
            $_.col = 0; //#21670
            $_.posx = $_.posx - 1; //#21671
        } else { //#21681
            $_.col = 1; //#21673
            $_.posx = $_.posx + 1; //#21674
            $_.posy = $f($_.posy + $_.dir); //#21675
            if (($_.posy < 0) || ($_.posy >= $_.rows)) { //#21682
                $_.dir = $_.dir * -1; //#21677
                $_.posy = $f($_.posy + $_.dir); //#21678
                $_.posx = $_.posx - 2; //#21679
                if ($eq($_.format, "full") && ($_.posx == 6)) { //#21681
                    $_.posx = $_.posx - 1; //#21681
                } //#21681
            } //#21681
        } //#21681
    } //#21681
    $_.evalfulln1n3 = function() {
        $_.scrle = $k[--$j]; //#21688
        $k[$j++] = 'scr1'; //#21690
        $k[$j++] = 0; //#21690
        $forall($_.scrle, function() { //#21690
            var _c5 = $k[$j - 1]; //#21690
            if (_c5 >= 5) { //#21690
                var _c6 = $k[--$j]; //#21690
                var _c8 = $f($k[--$j] + _c6) - 2; //#21690
                $k[$j++] = _c8; //#21690
                $k[$j++] = _c8; //#21690
            } //#21690
            $j--; //#21690
        }); //#21690
        var _c9 = $k[--$j]; //#21690
        $_[$k[--$j]] = _c9; //#21690
        $_.scr3 = 0; //#21692
        for (var _cD = 3, _cC = $_.scrle.length - 3; _cD <= _cC; _cD += 2) { //#21707
            $_.j = _cD; //#21694
            if (($get($_.scrle, $_.j) % 3) == 0) { //#21706
                $_.fact = ~~($get($_.scrle, $_.j) / 3); //#21696
                var _cM = $geti($_.scrle, $_.j - 2, 5); //#21697
                for (var _cN = 0, _cO = _cM.length; _cN < _cO; _cN++) { //#21697
                    $k[$j++] = $get(_cM, _cN) == $_.fact; //#21697
                } //#21697
                var _cR = $k[--$j]; //#21697
                var _cS = $k[--$j]; //#21697
                $k[$j - 1] = $an(_cS, _cR); //#21697
                var _cU = $k[--$j]; //#21697
                var _cV = $k[--$j]; //#21697
                if ($k[--$j] && (_cV && _cU)) { //#21705
                    if (($_.j == 3) || (($_.j + 4) >= $_.scrle.length)) { //#21702
                        $_.scr3 = $_.scr3 + 40; //#21699
                    } else { //#21702
                        if (($get($_.scrle, $_.j - 3) >= 4) || ($get($_.scrle, $_.j + 3) >= 4)) { //#21703
                            $_.scr3 = $_.scr3 + 40; //#21702
                        } //#21702
                    } //#21702
                } //#21702
            } //#21702
        } //#21702
        $k[$j++] = $_.scr1; //#21708
        $k[$j++] = $_.scr3; //#21708
    }; //#21708
    $_.evalfull = function() {
        $_.sym = $k[--$j]; //#21713
        $_.n1 = 0; //#21715
        $_.n2 = 0; //#21715
        $_.n3 = 0; //#21715
        $_.rle = $a($_.cols + 1); //#21716
        $_.lastpairs = $a($_.cols); //#21717
        $_.thispairs = $a($_.cols); //#21718
        $_.colsadd1 = $_.cols + 1; //#21719
        for (var _cu = 0, _ct = $_.cols - 1; _cu <= _ct; _cu += 1) { //#21758
            $_.i = _cu; //#21721
            $k[$j++] = Infinity; //#21724
            var _cw = $_.cols; //#21725
            $k[$j++] = 0; //#21727
            $k[$j++] = 0; //#21727
            for (var _cy = $_.i, _cz = _cw, _cx = (_cw * _cw) - 1; _cz < 0 ? _cy >= _cx : _cy <= _cx; _cy += _cz) { //#21727
                var _d1 = $get($_.sym, _cy); //#21726
                var _d2 = $k[--$j]; //#21726
                $k[$j++] = _d1; //#21726
                if ($eq(_d2, _d1)) { //#21726
                    var _d3 = $k[--$j]; //#21726
                    var _d4 = $k[--$j]; //#21726
                    $k[$j++] = _d4 + 1; //#21726
                    $k[$j++] = _d3; //#21726
                } else { //#21726
                    var _d5 = $k[--$j]; //#21726
                    $k[$j++] = 1; //#21726
                    $k[$j++] = _d5; //#21726
                } //#21726
            } //#21726
            $j--; //#21728
            var _d7 = $counttomark() + 2; //#21729
            $astore($geti($_.rle, 0, _d7 - 2)); //#21729
            $_.evalfulln1n3(); //#21730
            $_.n3 = $f($k[--$j] + $_.n3); //#21730
            $_.n1 = $f($k[--$j] + $_.n1); //#21730
            $j--; //#21731
            $_.symrow = $geti($_.sym, $_.i * $_.cols, $_.cols); //#21734
            $k[$j++] = Infinity; //#21735
            var _dI = $_.symrow; //#21736
            $k[$j++] = 0; //#21738
            $k[$j++] = 0; //#21738
            for (var _dJ = 0, _dK = _dI.length; _dJ < _dK; _dJ++) { //#21738
                var _dL = $get(_dI, _dJ); //#21738
                var _dM = $k[--$j]; //#21737
                $k[$j++] = _dL; //#21737
                if ($eq(_dM, _dL)) { //#21737
                    var _dN = $k[--$j]; //#21737
                    var _dO = $k[--$j]; //#21737
                    $k[$j++] = _dO + 1; //#21737
                    $k[$j++] = _dN; //#21737
                } else { //#21737
                    var _dP = $k[--$j]; //#21737
                    $k[$j++] = 1; //#21737
                    $k[$j++] = _dP; //#21737
                } //#21737
            } //#21737
            $j--; //#21739
            var _dR = $counttomark() + 2; //#21740
            $astore($geti($_.rle, 0, _dR - 2)); //#21740
            $_.evalfulln1n3(); //#21741
            $_.n3 = $f($k[--$j] + $_.n3); //#21741
            $_.n1 = $f($k[--$j] + $_.n1); //#21741
            $j--; //#21742
            var _dX = $_.thispairs; //#21745
            $_.thispairs = $_.lastpairs; //#21745
            $_.lastpairs = _dX; //#21745
            var _db = ($get($_.symrow, 0) == 1) ? 0 : 1; //#21746
            var _dc = $_.symrow; //#21747
            $k[$j++] = _db; //#21747
            for (var _dd = 0, _de = _dc.length; _dd < _de; _dd++) { //#21747
                var _df = $get(_dc, _dd); //#21747
                var _dg = $k[--$j]; //#21747
                $k[$j++] = $f(_dg + _df); //#21747
                $k[$j++] = _df; //#21747
            } //#21747
            $j--; //#21748
            $astore($_.thispairs); //#21749
            $j--; //#21749
            if ($_.i > 0) { //#21756
                $k[$j++] = Infinity; //#21751
                $aload($_.lastpairs); //#21752
                $aload($_.thispairs); //#21752
                $k[$j++] = $_.n2; //#21753
                for (var _dn = 0, _do = $_.cols; _dn < _do; _dn++) { //#21753
                    var _dp = $k[--$j]; //#21753
                    var _dq = $k[--$j]; //#21753
                    $k[$j++] = _dp; //#21753
                    $k[$j++] = _dq; //#21753
                    var _ds = $k[$j - 1 - $_.colsadd1]; //#21753
                    if (($f($k[--$j] + _ds) & 3) == 0) { //#21753
                        var _du = $k[--$j]; //#21753
                        $k[$j++] = _du + 3; //#21753
                    } //#21753
                } //#21753
                $_.n2 = $k[--$j]; //#21754
                $cleartomark(); //#21755
            } //#21755
        } //#21755
        $k[$j++] = 'dark'; //#21761
        $k[$j++] = 0; //#21761
        $forall($_.sym, function() { //#21761
            var _dx = $k[--$j]; //#21761
            var _dy = $k[--$j]; //#21761
            $k[$j++] = $f(_dy + _dx); //#21761
        }); //#21761
        var _dz = $k[--$j]; //#21761
        $_[$k[--$j]] = _dz; //#21761
        var _e2 = $_.cols; //#21762
        $_.n4 = (~~(($abs((($_.dark * 100) / (_e2 * _e2)) - 50)) / 5)) * 10; //#21762
        $k[$j++] = $f($_.n1 + $_.n2 + $_.n3 + $_.n4); //#21764
    }; //#21764
    $_.evalmicro = function() {
        $_.sym = $k[--$j]; //#21769
        $_.dkrhs = 0; //#21770
        $_.dkbot = 0; //#21770
        for (var _eA = 1, _e9 = $_.cols - 1; _eA <= _e9; _eA += 1) { //#21775
            $_.i = _eA; //#21772
            $k[$j++] = 'dkrhs'; //#21773
            $k[$j++] = $_.dkrhs; //#21773
            $k[$j++] = $_.sym; //#21773
            $k[$j++] = $_.cols - 1; //#21773
            $k[$j++] = $_.i; //#21773
            $_.qmv(); //#21773
            var _eF = $k[--$j]; //#21773
            var _eH = $get($k[--$j], _eF); //#21773
            var _eI = $k[--$j]; //#21773
            $_[$k[--$j]] = $f(_eI + _eH); //#21773
            $k[$j++] = 'dkbot'; //#21774
            $k[$j++] = $_.dkbot; //#21774
            $k[$j++] = $_.sym; //#21774
            $k[$j++] = $_.i; //#21774
            $k[$j++] = $_.cols - 1; //#21774
            $_.qmv(); //#21774
            var _eO = $k[--$j]; //#21774
            var _eQ = $get($k[--$j], _eO); //#21774
            var _eR = $k[--$j]; //#21774
            $_[$k[--$j]] = $f(_eR + _eQ); //#21774
        } //#21774
        if ($_.dkrhs <= $_.dkbot) { //#21779
            $k[$j++] = -(($_.dkrhs * 16) + $_.dkbot); //#21777
        } else { //#21779
            $k[$j++] = -(($_.dkbot * 16) + $_.dkrhs); //#21779
        } //#21779
    }; //#21779
    $_.bestscore = 999999999; //#21784
    for (var _eb = 0, _ea = $_.masks.length - 1; _eb <= _ea; _eb += 1) { //#21806
        $_.m = _eb; //#21786
        $_.masksym = $a($_.rows * $_.cols); //#21787
        for (var _ei = 0, _eh = ($_.rows * $_.cols) - 1; _ei <= _eh; _ei += 1) { //#21791
            $_.i = _ei; //#21789
            $put($_.masksym, $_.i, $xo($get($_.pixs, $_.i), $get($get($_.masks, $_.m), $_.i))); //#21790
        } //#21790
        if ($_.masks.length != 1) { //#21804
            if ($eq($_.format, "full")) { //#21796
                $k[$j++] = $_.masksym; //#21794
                $_.evalfull(); //#21794
                $_.score = $k[--$j]; //#21794
            } else { //#21796
                $k[$j++] = $_.masksym; //#21796
                $_.evalmicro(); //#21796
                $_.score = $k[--$j]; //#21796
            } //#21796
            if ($_.score < $_.bestscore) { //#21802
                $_.bestsym = $_.masksym; //#21799
                $_.bestmaskval = $_.m; //#21800
                $_.bestscore = $_.score; //#21801
            } //#21801
        } else { //#21804
            $_.bestsym = $_.masksym; //#21804
        } //#21804
    } //#21804
    $_.pixs = $_.bestsym; //#21807
    if ($eq($_.format, "full")) { //#21812
        $k[$j++] = $_.pixs; //#21811
        $k[$j++] = 8; //#21811
        $k[$j++] = $_.cols - 8; //#21811
        $_.qmv(); //#21811
        var _f9 = $k[--$j]; //#21811
        $put($k[--$j], _f9, 1); //#21811
    } //#21811
    $_.fmtvalsfull = $a([21522, 20773, 24188, 23371, 17913, 16590, 20375, 19104, 30660, 29427, 32170, 30877, 26159, 25368, 27713, 26998, 5769, 5054, 7399, 6608, 1890, 597, 3340, 2107, 13663, 12392, 16177, 14854, 9396, 8579, 11994, 11245]); //#21821
    $_.fmtvalsmicro = $a([17477, 16754, 20011, 19228, 21934, 20633, 24512, 23287, 26515, 25252, 28157, 26826, 30328, 29519, 31766, 31009, 1758, 1001, 3248, 2439, 5941, 4610, 7515, 6252, 9480, 8255, 12134, 10833, 13539, 12756, 16013, 15290]); //#21827
    $_.fmtvalsrmqr1 = $a([129714, 124311, 121821, 115960, 112748, 108361, 104707, 99878, 98062, 90155, 89697, 82244, 81360, 74485, 72895, 66458, 61898, 61167, 53413, 53120, 45844, 44081, 37499, 36190, 29814, 27475, 21785, 19004, 13992, 10637, 6087, 2274, 258919, 257090, 250376, 249133, 242105, 241308, 233686, 233459, 227035, 223742, 219060, 215185, 209925, 207648, 202090, 199247, 194591, 190266, 186736, 181845, 178881, 173540, 170926, 165003, 163235, 156294, 154828, 148457, 147325, 139352, 138770, 131383]); //#21837
    $_.fmtvalsrmqr2 = $a([133755, 136542, 142100, 144433, 149669, 153472, 158154, 161519, 167879, 168162, 175784, 176525, 183577, 184892, 191606, 193363, 196867, 204326, 204908, 212809, 213981, 220408, 221874, 228759, 230591, 236442, 239056, 244469, 247393, 252228, 255758, 260139, 942, 7307, 8897, 15844, 16752, 24149, 24607, 32570, 34322, 39223, 42877, 47192, 50380, 56297, 58787, 64134, 67798, 71667, 76217, 79516, 84488, 87341, 93031, 95298, 101738, 102991, 109573, 111392, 118708, 118929, 126683, 127486]); //#21847
    if ($eq($_.format, "full")) { //#21858
        $_.ecid = $get($a([1, 0, 3, 2]), $_.eclval); //#21850
        $_.fmtval = $get($_.fmtvalsfull, ($_.ecid << 3) + $_.bestmaskval); //#21851
        for (var _fQ = 0, _fP = $_.formatmap.length - 1; _fQ <= _fP; _fQ += 1) { //#21857
            $_.i = _fQ; //#21853
            $forall($get($_.formatmap, $_.i), function() { //#21856
                var _fV = $k[--$j]; //#21855
                $k[$j++] = $_.pixs; //#21855
                $aload(_fV); //#21855
                $_.qmv(); //#21855
                var _fW = $_.fmtval; //#21855
                var _fY = -(14 - $_.i); //#21855
                var _fZ = $k[--$j]; //#21855
                $put($k[--$j], _fZ, ((_fY < 0 ? _fW >>> -_fY : _fW << _fY)) & 1); //#21855
            }); //#21855
        } //#21855
    } //#21855
    if ($eq($_.format, "micro")) { //#21866
        $_.symid = $get($get($a([$a([0]), $a([1, 2]), $a([3, 4]), $a([5, 6, 7])]), ~~(($_.cols - 11) / 2)), $_.eclval); //#21860
        $_.fmtval = $get($_.fmtvalsmicro, ($_.symid << 2) + $_.bestmaskval); //#21861
        for (var _fr = 0, _fq = $_.formatmap.length - 1; _fr <= _fq; _fr += 1) { //#21865
            $_.i = _fr; //#21863
            $k[$j++] = $_.pixs; //#21864
            $aload($get($get($_.formatmap, $_.i), 0)); //#21864
            $_.qmv(); //#21864
            var _fx = $_.fmtval; //#21864
            var _fz = -(14 - $_.i); //#21864
            var _g0 = $k[--$j]; //#21864
            $put($k[--$j], _g0, ((_fz < 0 ? _fx >>> -_fz : _fx << _fz)) & 1); //#21864
        } //#21864
    } //#21864
    if ($eq($_.format, "rmqr")) { //#21876
        $_.fmtvalu = ($get($a([-1, 0, -1, 1]), $_.eclval) << 5) + $_.verind; //#21868
        $_.fmtval1 = $get($_.fmtvalsrmqr1, $_.fmtvalu); //#21869
        $_.fmtval2 = $get($_.fmtvalsrmqr2, $_.fmtvalu); //#21870
        for (var _gF = 0, _gE = $_.formatmap.length - 1; _gF <= _gE; _gF += 1) { //#21875
            $_.i = _gF; //#21872
            $k[$j++] = $_.pixs; //#21873
            $aload($get($get($_.formatmap, $_.i), 0)); //#21873
            $_.qmv(); //#21873
            var _gL = $_.fmtval1; //#21873
            var _gN = -(17 - $_.i); //#21873
            var _gO = $k[--$j]; //#21873
            $put($k[--$j], _gO, ((_gN < 0 ? _gL >>> -_gN : _gL << _gN)) & 1); //#21873
            $k[$j++] = $_.pixs; //#21874
            $aload($get($get($_.formatmap, $_.i), 1)); //#21874
            $_.qmv(); //#21874
            var _gV = $_.fmtval2; //#21874
            var _gX = -(17 - $_.i); //#21874
            var _gY = $k[--$j]; //#21874
            $put($k[--$j], _gY, ((_gX < 0 ? _gV >>> -_gX : _gV << _gX)) & 1); //#21874
        } //#21874
    } //#21874
    $_.vervals = $a([31892, 34236, 39577, 42195, 48118, 51042, 55367, 58893, 63784, 68472, 70749, 76311, 79154, 84390, 87683, 92361, 96236, 102084, 102881, 110507, 110734, 117786, 119615, 126325, 127568, 133589, 136944, 141498, 145311, 150283, 152622, 158308, 161089, 167017]); //#21886
    if ($eq($_.format, "full") && ($_.cols >= 45)) { //#21896
        $_.verval = $get($_.vervals, (~~(($_.cols - 17) / 4)) - 7); //#21889
        for (var _gj = 0, _gi = $_.versionmap.length - 1; _gj <= _gi; _gj += 1) { //#21895
            $_.i = _gj; //#21891
            $forall($get($_.versionmap, $_.i), function() { //#21894
                var _go = $k[--$j]; //#21893
                $k[$j++] = $_.pixs; //#21893
                $forall(_go); //#21893
                $_.qmv(); //#21893
                var _gp = $_.verval; //#21893
                var _gr = -(17 - $_.i); //#21893
                var _gs = $k[--$j]; //#21893
                $put($k[--$j], _gs, ((_gr < 0 ? _gp >>> -_gr : _gp << _gr)) & 1); //#21893
            }); //#21893
        } //#21893
    } //#21893
    $k[$j++] = Infinity; //#21899
    $k[$j++] = 'ren'; //#21906
    $k[$j++] = 'renmatrix'; //#21906
    $k[$j++] = 'pixs'; //#21906
    $k[$j++] = $_.pixs; //#21906
    $k[$j++] = 'pixx'; //#21906
    $k[$j++] = $_.cols; //#21906
    $k[$j++] = 'pixy'; //#21906
    $k[$j++] = $_.rows; //#21906
    $k[$j++] = 'height'; //#21906
    $k[$j++] = ($_.rows * 2) / 72; //#21906
    $k[$j++] = 'width'; //#21906
    $k[$j++] = ($_.cols * 2) / 72; //#21906
    $k[$j++] = 'borderleft'; //#21906
    if ($eq($_.format, "full")) { //#21906
        $k[$j++] = 4; //#21906
    } else { //#21906
        $k[$j++] = 2; //#21906
    } //#21906
    $k[$j++] = 'borderright'; //#21907
    if ($eq($_.format, "full")) { //#21907
        $k[$j++] = 4; //#21907
    } else { //#21907
        $k[$j++] = 2; //#21907
    } //#21907
    $k[$j++] = 'bordertop'; //#21908
    if ($eq($_.format, "full")) { //#21908
        $k[$j++] = 4; //#21908
    } else { //#21908
        $k[$j++] = 2; //#21908
    } //#21908
    $k[$j++] = 'borderbottom'; //#21909
    if ($eq($_.format, "full")) { //#21909
        $k[$j++] = 4; //#21909
    } else { //#21909
        $k[$j++] = 2; //#21909
    } //#21909
    $k[$j++] = 'opt'; //#21910
    $k[$j++] = $_.options; //#21910
    var _h4 = $d(); //#21910
    $k[$j++] = _h4; //#21913
    if (!$_.dontdraw) { //#21913
        bwipp_renmatrix(); //#21913
    } //#21913
    $_ = $__; //#21917
} //bwipp_qrcode
function bwipp_swissqrcode() {
    var $__ = $_; //#21947
    $_ = Object.assign({}, $_); //#21947
    $_.dontdraw = false; //#21950
    $_.parse = false; //#21951
    $k[$j++] = $_; //#21953
    bwipp_processoptions(); //#21953
    $_.options = $k[--$j]; //#21953
    $_.barcode = $k[--$j]; //#21954
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#21960
    $_.fncvals = _3; //#21961
    $k[$j++] = 'barcode'; //#21962
    $k[$j++] = $_.barcode; //#21962
    $k[$j++] = $_.fncvals; //#21962
    bwipp_parseinput(); //#21962
    var _6 = $k[--$j]; //#21962
    $_[$k[--$j]] = _6; //#21962
    $_.barlen = $_.barcode.length; //#21963
    delete $_.options["parse"]; //#21964
    if ($_.barcode.length > 997) { //#21969
        $k[$j++] = 'bwipp.swissqrcodeBadLength#21968'; //#21968
        $k[$j++] = "Swiss QR Code input must not exceed 997 digits"; //#21968
        bwipp_raiseerror(); //#21968
    } //#21968
    $put($_.options, "dontdraw", true); //#21972
    $k[$j++] = 'args'; //#21973
    $k[$j++] = $_.barcode; //#21973
    $k[$j++] = $_.options; //#21973
    bwipp_qrcode(); //#21973
    var _E = $k[--$j]; //#21973
    $_[$k[--$j]] = _E; //#21973
    $put($_.args, "opt", $_.options); //#21975
    $k[$j++] = $_.args; //#22044
    if (!$_.dontdraw) { //#22044
        $$.save(); //#21989
        var _K = $$.currpos(); //#21990
        $$.translate(_K.x, _K.y); //#21990
        var _L = 72 / 25.4; //#21991
        $$.scale(_L, _L); //#21991
        $$.save(); //#21994
        $$.newpath(); //#21995
        $$.moveto(0, 0); //#21996
        $$.lineto(46, 0); //#21997
        $$.lineto(46, 46); //#21998
        $$.lineto(0, 46); //#21999
        $$.closepath(); //#22000
        $$.moveto(19.5, 19.5); //#22001
        $$.lineto(19.5, 26.5); //#22002
        $$.lineto(26.5, 26.5); //#22003
        $$.lineto(26.5, 19.5); //#22004
        $$.closepath(); //#22005
        $$.clip(); //#22006
        $$.save(); //#22009
        $$.moveto(0, 0); //#22010
        var _O = (46 / $get($_.args, "pixx")) / 2; //#22011
        $$.scale(_O, _O); //#22011
        bwipp_renmatrix(); //#22012
        $$.restore(); //#22013
        $$.restore(); //#22015
        $$.translate(19.5, 19.5); //#22018
        var _P = 7 / 83; //#22019
        $$.scale(_P, _P); //#22019
        $$.newpath(); //#22021
        $$.moveto(6, 6); //#22022
        $$.lineto(6, 77); //#22023
        $$.lineto(77, 77); //#22024
        $$.lineto(77, 6); //#22025
        $$.closepath(); //#22026
        $$.moveto(49, 18); //#22027
        $$.lineto(49, 34); //#22028
        $$.lineto(65, 34); //#22029
        $$.lineto(65, 49); //#22030
        $$.lineto(49, 49); //#22031
        $$.lineto(49, 65); //#22032
        $$.lineto(34, 65); //#22033
        $$.lineto(34, 49); //#22034
        $$.lineto(18, 49); //#22035
        $$.lineto(18, 34); //#22036
        $$.lineto(34, 34); //#22037
        $$.lineto(34, 18); //#22038
        $$.closepath(); //#22039
        $$.setrgbcolor(0, 0, 0); //#22040
        $$.fill(); //#22040
        $$.restore(); //#22042
    } //#22042
    $_ = $__; //#22046
} //bwipp_swissqrcode
function bwipp_microqrcode() {
    var $__ = $_; //#22075
    $_ = Object.assign({}, $_); //#22075
    $_.dontdraw = false; //#22078
    $k[$j++] = $_; //#22080
    bwipp_processoptions(); //#22080
    $_.options = $k[--$j]; //#22080
    $_.barcode = $k[--$j]; //#22081
    $put($_.options, "dontdraw", true); //#22084
    $put($_.options, "format", "micro"); //#22085
    $k[$j++] = 'args'; //#22087
    $k[$j++] = $_.barcode; //#22087
    $k[$j++] = $_.options; //#22087
    bwipp_qrcode(); //#22087
    var _6 = $k[--$j]; //#22087
    $_[$k[--$j]] = _6; //#22087
    $put($_.args, "opt", $_.options); //#22089
    $k[$j++] = $_.args; //#22092
    if (!$_.dontdraw) { //#22092
        bwipp_renmatrix(); //#22092
    } //#22092
    $_ = $__; //#22094
} //bwipp_microqrcode
function bwipp_rectangularmicroqrcode() {
    var $__ = $_; //#22123
    $_ = Object.assign({}, $_); //#22123
    $_.dontdraw = false; //#22126
    $k[$j++] = $_; //#22128
    bwipp_processoptions(); //#22128
    $_.options = $k[--$j]; //#22128
    $_.barcode = $k[--$j]; //#22129
    $put($_.options, "dontdraw", true); //#22132
    $put($_.options, "format", "rmqr"); //#22133
    $k[$j++] = 'args'; //#22135
    $k[$j++] = $_.barcode; //#22135
    $k[$j++] = $_.options; //#22135
    bwipp_qrcode(); //#22135
    var _6 = $k[--$j]; //#22135
    $_[$k[--$j]] = _6; //#22135
    $put($_.args, "opt", $_.options); //#22137
    $k[$j++] = $_.args; //#22140
    if (!$_.dontdraw) { //#22140
        bwipp_renmatrix(); //#22140
    } //#22140
    $_ = $__; //#22142
} //bwipp_rectangularmicroqrcode
function bwipp_maxicode() {
    var $__ = $_; //#22173
    $_ = Object.assign({}, $_); //#22173
    $_.dontdraw = false; //#22176
    $_.mode = -1; //#22177
    $_.sam = -1; //#22178
    $_.parse = false; //#22179
    $_.parsefnc = false; //#22180
    $_.legacyencoder = false; //#22181
    $k[$j++] = $_; //#22183
    bwipp_processoptions(); //#22183
    $_.options = $k[--$j]; //#22183
    $_.barcode = $k[--$j]; //#22184
    if ($_.barcode.length == 0) { //#22188
        $k[$j++] = 'bwipp.maxicodeEmptyData#22187'; //#22187
        $k[$j++] = "The data must not be empty"; //#22187
        bwipp_raiseerror(); //#22187
    } //#22187
    if (($_.mode != -1) && (($_.mode < 2) || ($_.mode > 6))) { //#22192
        $k[$j++] = 'bwipp.maxicodeBadMode#22191'; //#22191
        $k[$j++] = "Mode must be 2 to 6"; //#22191
        bwipp_raiseerror(); //#22191
    } //#22191
    if ($_.sam != -1) { //#22204
        $k[$j++] = true; //#22200
        for (var _7 = 0; _7 < 1; _7++) { //#22200
            var _8 = $_.sam; //#22197
            if ((_8 < 12) || (_8 > 88)) { //#22197
                $k[$j - 1] = false; //#22197
                break; //#22197
            } //#22197
            var _A = $_.sam % 10; //#22198
            if ((_A < 2) || (_A > 8)) { //#22198
                $k[$j - 1] = false; //#22198
                break; //#22198
            } //#22198
            if ((~~($_.sam / 10)) > ($_.sam % 10)) { //#22199
                $k[$j - 1] = false; //#22199
                break; //#22199
            } //#22199
        } //#22199
        if (!$k[--$j]) { //#22203
            $k[$j++] = 'bwipp.maxicodeBadSAM#22202'; //#22202
            $k[$j++] = "SAM must be formatted as \"NM\" for Nth of M symbols, from 2 to 8 symbols"; //#22202
            bwipp_raiseerror(); //#22202
        } //#22202
    } //#22202
    $_.encoding = "new"; //#22206
    if ($_.legacyencoder) { //#22207
        $_.encoding = "legacy"; //#22207
    } //#22207
    var _H = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["eci", true]
    ]); //#22215
    $_.fncvals = _H; //#22217
    $k[$j++] = 'msg'; //#22218
    $k[$j++] = $_.barcode; //#22218
    $k[$j++] = $_.fncvals; //#22218
    bwipp_parseinput(); //#22218
    var _K = $k[--$j]; //#22218
    $_[$k[--$j]] = _K; //#22218
    $_.msglen = $_.msg.length; //#22219
    if (($_.mode == 2) || ($_.mode == 3)) { //#22314
        $_.barcode = $s($_.msglen); //#22225
        $_.barlen = $_.msglen; //#22226
        for (var _U = 0, _T = $_.msglen - 1; _U <= _T; _U += 1) { //#22231
            $_.i = _U; //#22228
            if ($get($_.msg, $_.i) < 0) { //#22229
                $_.barlen = $_.i; //#22229
                break; //#22229
            } //#22229
            $put($_.barcode, $_.i, $get($_.msg, $_.i)); //#22230
        } //#22230
        $_.difflen = $_.msglen - $_.barlen; //#22232
        $_.fid = ""; //#22235
        if ($_.barlen >= 9) { //#22243
            var _h = $_.barcode; //#22237
            var _j = $get(_h, 7); //#22238
            var _k = $get(_h, 8); //#22239
            if ($eq($geti(_h, 0, 7), "\x5b\x29\x3e\x1e\x30\x31\x1d") && (((_j >= 48) && (_j <= 57)) && ((_k >= 48) && (_k <= 57)))) { //#22242
                $_.fid = $geti($_.barcode, 0, 9); //#22240
                $_.barcode = $geti($_.barcode, 9, $_.barlen - 9); //#22241
            } //#22241
        } //#22241
        $search($_.barcode, "\x1d"); //#22247
        if ($k[--$j]) { //#22274
            $_.pcode = $k[--$j]; //#22248
            $j--; //#22248
            if ($_.mode == 2) { //#22270
                $k[$j++] = true; //#22254
                for (var _u = 0; _u < 1; _u++) { //#22254
                    var _w = $_.pcode.length; //#22252
                    if ((_w > 9) || (_w == 0)) { //#22252
                        $k[$j - 1] = false; //#22252
                        break; //#22252
                    } //#22252
                    $forall($_.pcode, function() { //#22253
                        var _y = $k[--$j]; //#22253
                        if ((_y < 48) || (_y > 57)) { //#22253
                            $k[$j - 1] = false; //#22253
                            return true; //#22253
                        } //#22253
                    }); //#22253
                } //#22253
                if (!$k[--$j]) { //#22257
                    $j--; //#22256
                    $k[$j++] = 'bwipp.maxicodeBadMode2PostCode#22256'; //#22256
                    $k[$j++] = "A mode 2 postcode must not be empty or exceed 9 digits"; //#22256
                    bwipp_raiseerror(); //#22256
                } //#22256
            } else { //#22270
                $k[$j++] = true; //#22268
                for (var _10 = 0; _10 < 1; _10++) { //#22268
                    var _12 = $_.pcode.length; //#22261
                    if ((_12 > 6) || (_12 == 0)) { //#22261
                        $k[$j - 1] = false; //#22261
                        break; //#22261
                    } //#22261
                    $forall($_.pcode, function() { //#22267
                        var _14 = $k[--$j]; //#22263
                        if (!((_14 == 32) || (((_14 >= 34) && (_14 <= 58)) || ((_14 >= 65) && (_14 <= 90))))) { //#22266
                            $k[$j - 1] = false; //#22266
                            return true; //#22266
                        } //#22266
                    }); //#22266
                } //#22266
                if (!$k[--$j]) { //#22271
                    $j--; //#22270
                    $k[$j++] = 'bwipp.maxicodeBadMode3PostCode#22270'; //#22270
                    $k[$j++] = "A mode 3 postcode must not be empty or exceed 6 characters"; //#22270
                    bwipp_raiseerror(); //#22270
                } //#22270
            } //#22270
        } else { //#22274
            $j--; //#22274
            $k[$j++] = 'bwipp.maxicodeExpectedPostCode#22274'; //#22274
            $k[$j++] = "Expected postcode followed by group separator character"; //#22274
            bwipp_raiseerror(); //#22274
        } //#22274
        $search($k[--$j], "\x1d"); //#22276
        if ($k[--$j]) { //#22287
            $_.ccode = $k[--$j]; //#22277
            $k[$j - 1] = true; //#22282
            for (var _19 = 0; _19 < 1; _19++) { //#22282
                if ($_.ccode.length != 3) { //#22280
                    $k[$j - 1] = false; //#22280
                    break; //#22280
                } //#22280
                $forall($_.ccode, function() { //#22281
                    var _1C = $k[--$j]; //#22281
                    if ((_1C < 48) || (_1C > 57)) { //#22281
                        $k[$j - 1] = false; //#22281
                        return true; //#22281
                    } //#22281
                }); //#22281
            } //#22281
            if (!$k[--$j]) { //#22285
                $j--; //#22284
                $k[$j++] = 'bwipp.maxicodeBadCountryCode#22284'; //#22284
                $k[$j++] = "Country code must be three digits"; //#22284
                bwipp_raiseerror(); //#22284
            } //#22284
        } else { //#22287
            $j--; //#22287
            $k[$j++] = 'bwipp.maxicodeExpectedCountryCode#22287'; //#22287
            $k[$j++] = "Expected country code followed by group separator character"; //#22287
            bwipp_raiseerror(); //#22287
        } //#22287
        $search($k[--$j], "\x1d"); //#22289
        if ($k[--$j]) { //#22300
            $_.scode = $k[--$j]; //#22290
            $k[$j - 1] = true; //#22295
            for (var _1H = 0; _1H < 1; _1H++) { //#22295
                if ($_.scode.length != 3) { //#22293
                    $k[$j - 1] = false; //#22293
                    break; //#22293
                } //#22293
                $forall($_.scode, function() { //#22294
                    var _1K = $k[--$j]; //#22294
                    if ((_1K < 48) || (_1K > 57)) { //#22294
                        $k[$j - 1] = false; //#22294
                        return true; //#22294
                    } //#22294
                }); //#22294
            } //#22294
            if (!$k[--$j]) { //#22298
                $j--; //#22297
                $k[$j++] = 'bwipp.maxicodeBadServiceClass#22297'; //#22297
                $k[$j++] = "Service class must be three digits"; //#22297
                bwipp_raiseerror(); //#22297
            } //#22297
        } else { //#22300
            $j--; //#22300
            $k[$j++] = 'bwipp.maxicodeExpectedServiceClass#22300'; //#22300
            $k[$j++] = "Expected service class followed by group separator character"; //#22300
            bwipp_raiseerror(); //#22300
        } //#22300
        $_.barcode = $k[--$j]; //#22302
        var _1P = $s($_.barcode.length + $_.fid.length); //#22305
        $puti(_1P, 0, $_.fid); //#22306
        $puti(_1P, $_.fid.length, $_.barcode); //#22307
        $_.barcode = _1P; //#22308
        $_.barlen = $_.barcode.length; //#22309
        $k[$j++] = Infinity; //#22311
        var _1U = $_.barcode; //#22311
        for (var _1V = 0, _1W = _1U.length; _1V < _1W; _1V++) { //#22311
            $k[$j++] = $get(_1U, _1V); //#22311
        } //#22311
        $aload($geti($_.msg, $_.msglen - $_.difflen, $_.difflen)); //#22311
        $_.msg = $a(); //#22311
        $_.msglen = $_.msg.length; //#22312
    } //#22312
    $_.eci = -1; //#22318
    $_.pad = -2; //#22318
    $_.ns = -3; //#22318
    $_.la = -4; //#22319
    $_.lb = -5; //#22319
    $_.sa = -6; //#22320
    $_.sb = -7; //#22320
    $_.sc = -8; //#22320
    $_.sd = -9; //#22320
    $_.se = -10; //#22320
    $_.sa2 = -11; //#22321
    $_.sa3 = -12; //#22321
    $_.lkc = -13; //#22322
    $_.lkd = -14; //#22322
    $_.lke = -15; //#22322
    $_.pd2 = -16; //#22323
    $_.pd3 = -17; //#22323
    $_.charmaps = $a([$a([13, "`", 192, 224, 0]), $a(["A", "a", 193, 225, 1]), $a(["B", "b", 194, 226, 2]), $a(["C", "c", 195, 227, 3]), $a(["D", "d", 196, 228, 4]), $a(["E", "e", 197, 229, 5]), $a(["F", "f", 198, 230, 6]), $a(["G", "g", 199, 231, 7]), $a(["H", "h", 200, 232, 8]), $a(["I", "i", 201, 233, 9]), $a(["J", "j", 202, 234, 10]), $a(["K", "k", 203, 235, 11]), $a(["L", "l", 204, 236, 12]), $a(["M", "m", 205, 237, 13]), $a(["N", "n", 206, 238, 14]), $a(["O", "o", 207, 239, 15]), $a(["P", "p", 208, 240, 16]), $a(["Q", "q", 209, 241, 17]), $a(["R", "r", 210, 242, 18]), $a(["S", "s", 211, 243, 19]), $a(["T", "t", 212, 244, 20]), $a(["U", "u", 213, 245, 21]), $a(["V", "v", 214, 246, 22]), $a(["W", "w", 215, 247, 23]), $a(["X", "x", 216, 248, 24]), $a(["Y", "y", 217, 249, 25]), $a(["Z", "z", 218, 250, 26]), $a([$_.eci, $_.eci, $_.eci, $_.eci, $_.eci]), $a([28, 28, 28, 28, $_.pad]), $a([29, 29, 29, 29, $_.pd2]), $a([30, 30, 30, 30, 27]), $a([$_.ns, $_.ns, $_.ns, $_.ns, $_.ns]), $a([" ", "{", 219, 251, 28]), $a([$_.pad, $_.pad, 220, 252, 29]), $a(["\"", "}", 221, 253, 30]), $a(["#", "~", 222, 254, 31]), $a(["$", 127, 223, 255, 159]), $a(["%", ";", 170, 161, 160]), $a(["&", "<", 172, 168, 162]), $a(["'", "=", 177, 171, 163]), $a([40, ">", 178, 175, 164]), $a([41, "?", 179, 176, 165]), $a(["*", "[", 181, 180, 166]), $a(["+", 92, 185, 183, 167]), $a([",", "]", 186, 184, 169]), $a(["-", "^", 188, 187, 173]), $a([".", "_", 189, 191, 174]), $a(["/", " ", 190, 138, 182]), $a(["0", ",", 128, 139, 149]), $a(["1", ".", 129, 140, 150]), $a(["2", "/", 130, 141, 151]), $a(["3", ":", 131, 142, 152]), $a(["4", "@", 132, 143, 153]), $a(["5", "!", 133, 144, 154]), $a(["6", "|", 134, 145, 155]), $a(["7", $_.pd2, 135, 146, 156]), $a(["8", $_.sa2, 136, 147, 157]), $a(["9", $_.sa3, 137, 148, 158]), $a([":", $_.pd3, $_.la, $_.la, $_.la]), $a([$_.sb, $_.sa, " ", " ", " "]), $a([$_.sc, $_.sc, $_.lkc, $_.sc, $_.sc]), $a([$_.sd, $_.sd, $_.sd, $_.lkd, $_.sd]), $a([$_.se, $_.se, $_.se, $_.se, $_.lke]), $a([$_.lb, $_.la, $_.lb, $_.lb, $_.lb])]); //#22392
    $_.charvals = $a([new Map, new Map, new Map, new Map, new Map]); //#22395
    for (var _3S = 0, _3R = $_.charmaps.length - 1; _3S <= _3R; _3S += 1) { //#22404
        $_.i = _3S; //#22397
        $_.encs = $get($_.charmaps, $_.i); //#22398
        for (var _3W = 0; _3W <= 4; _3W += 1) { //#22403
            $_.j = _3W; //#22400
            var _3Z = $get($_.encs, $_.j); //#22401
            $k[$j++] = _3Z; //#22401
            if ($eq($type(_3Z), 'stringtype')) { //#22401
                var _3c = $get($k[--$j], 0); //#22401
                $k[$j++] = _3c; //#22401
            } //#22401
            $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#22402
        } //#22402
    } //#22402
    $_.seta = $get($_.charvals, 0); //#22405
    $_.setb = $get($_.charvals, 1); //#22406
    $_.setc = $get($_.charvals, 2); //#22407
    $_.setd = $get($_.charvals, 3); //#22408
    $_.sete = $get($_.charvals, 4); //#22409
    $k[$j++] = 'maxlen'; //#22412
    if ($_.mode == 5) { //#22412
        $k[$j++] = 77; //#22412
    } else { //#22412
        var _3v = ($_.mode <= 3) ? 84 : 93; //#22412
        $k[$j++] = _3v; //#22412
    } //#22412
    var _3w = $k[--$j]; //#22412
    $_[$k[--$j]] = _3w; //#22412
    if ($eq($_.encoding, "legacy")) { //#22603
        $k[$j++] = Infinity; //#22421
        for (var _40 = 0, _41 = $_.msglen + 1; _40 < _41; _40++) { //#22421
            $k[$j++] = 0; //#22421
        } //#22421
        $_.nseq = $a(); //#22421
        for (var _44 = $_.msglen - 1; _44 >= 0; _44 -= 1) { //#22429
            $_.i = _44; //#22423
            var _47 = $get($_.msg, $_.i); //#22424
            if ((_47 >= 48) && (_47 <= 57)) { //#22427
                $put($_.nseq, $_.i, $get($_.nseq, $_.i + 1) + 1); //#22425
            } else { //#22427
                $put($_.nseq, $_.i, 0); //#22427
            } //#22427
        } //#22427
        $_.nseq = $geti($_.nseq, 0, $_.msglen); //#22430
        $_.prefixinset = function() {
            $k[$j++] = 0; //#22437
            for (;;) { //#22437
                var _4I = $k[$j - 1]; //#22435
                var _4J = $k[$j - 2]; //#22435
                if (_4I >= _4J.length) { //#22435
                    break; //#22435
                } //#22435
                var _4K = $k[$j - 1]; //#22436
                var _4L = $k[$j - 2]; //#22436
                var _4N = $k[$j - 3]; //#22436
                var _4O = $get(_4N, $get(_4L, _4K)) !== undefined; //#22436
                if (_4O) { //#22436
                    var _4P = $k[--$j]; //#22436
                    $k[$j++] = _4P + 1; //#22436
                } else { //#22436
                    break; //#22436
                } //#22436
            } //#22436
            var _4Q = $k[--$j]; //#22438
            $k[$j - 1] = _4Q; //#22438
            var _4S = $k[--$j]; //#22438
            $k[$j - 1] = _4S; //#22438
        }; //#22438
        $_.enc = function() {
            var _4U = $k[--$j]; //#22442
            $put($_.out, $_.j, $get(_4U, $k[--$j])); //#22442
            $_.j = $_.j + 1; //#22443
        }; //#22443
        $_.out = $a(144); //#22446
        $_.i = 0; //#22447
        $_.j = 0; //#22447
        $_.cset = "seta"; //#22447
        for (;;) { //#22599
            if ($_.i == $_.msglen) { //#22456
                if (($ne($_.cset, "seta") && $ne($_.cset, "setb")) && ($_.out.length < $_.maxlen)) { //#22454
                    $k[$j++] = $_.la; //#22452
                    $k[$j++] = $_[$_.cset]; //#22452
                    $_.enc(); //#22452
                    $_.cset = "seta"; //#22453
                } //#22453
                break; //#22455
            } //#22455
            for (;;) { //#22598
                if ($get($_.msg, $_.i) <= -1000000) { //#22485
                    $k[$j++] = $_.eci; //#22460
                    $k[$j++] = $_[$_.cset]; //#22460
                    $_.enc(); //#22460
                    var _4t = (-$get($_.msg, $_.i)) - 1000000; //#22462
                    $k[$j++] = _4t; //#22480
                    if (_4t <= 31) { //#22479
                        var _4u = $k[--$j]; //#22463
                        $k[$j++] = _4u & 63; //#22464
                        $astore($a(1)); //#22464
                    } else { //#22479
                        var _4w = $k[$j - 1]; //#22465
                        if (_4w <= 1023) { //#22479
                            var _4x = $k[--$j]; //#22466
                            $k[$j++] = ((_4x >>> 6) & 31) | 32; //#22468
                            $k[$j++] = _4x & 63; //#22468
                            $astore($a(2)); //#22468
                        } else { //#22479
                            var _4z = $k[$j - 1]; //#22469
                            if (_4z <= 32767) { //#22479
                                var _50 = $k[--$j]; //#22470
                                $k[$j++] = ((_50 >>> 12) & 47) | 48; //#22473
                                $k[$j++] = (_50 >>> 6) & 63; //#22473
                                $k[$j++] = _50 & 63; //#22473
                                $astore($a(3)); //#22473
                            } else { //#22479
                                var _52 = $k[--$j]; //#22475
                                $k[$j++] = ((_52 >>> 18) & 55) | 56; //#22479
                                $k[$j++] = (_52 >>> 12) & 63; //#22479
                                $k[$j++] = (_52 >>> 6) & 63; //#22479
                                $k[$j++] = _52 & 63; //#22479
                                $astore($a(4)); //#22479
                            } //#22479
                        } //#22479
                    } //#22479
                    var _54 = $k[--$j]; //#22481
                    $puti($_.out, $_.j, _54); //#22481
                    $_.j = _54.length + $_.j; //#22482
                    $_.i = $_.i + 1; //#22483
                    break; //#22484
                } //#22484
                if ($get($_.nseq, $_.i) >= 9) { //#22496
                    var _5E = $geti($_.msg, $_.i, 9); //#22489
                    $k[$j++] = 0; //#22489
                    for (var _5F = 0, _5G = _5E.length; _5F < _5G; _5F++) { //#22489
                        var _5I = $k[--$j]; //#22489
                        $k[$j++] = ($f(_5I + ($get(_5E, _5F) - 48))) * 10; //#22489
                    } //#22489
                    var _5J = $k[--$j]; //#22489
                    $k[$j++] = ~~(_5J / 10); //#22490
                    for (var _5K = 0; _5K < 4; _5K++) { //#22490
                        var _5L = $k[--$j]; //#22490
                        $k[$j++] = _5L & 63; //#22490
                        $k[$j++] = _5L >>> 6; //#22490
                    } //#22490
                    $k[$j++] = $get($_[$_.cset], $_.ns); //#22491
                    for (var _5Q = 0; _5Q <= 10; _5Q += 2) { //#22491
                        var _5R = $k[$j - 1 - _5Q]; //#22491
                        $k[$j++] = _5R; //#22491
                    } //#22491
                    $astore($a(6)); //#22491
                    $r(7, 1); //#22491
                    for (var _5T = 0; _5T < 6; _5T++) { //#22491
                        $j--; //#22491
                    } //#22491
                    $puti($_.out, $_.j, $k[--$j]); //#22492
                    $_.i = $_.i + 9; //#22493
                    $_.j = $_.j + 6; //#22494
                    break; //#22495
                } //#22495
                $_.char1 = $get($_.msg, $_.i); //#22499
                $k[$j++] = 'char2'; //#22500
                if (($_.i + 1) < $_.msglen) { //#22500
                    $k[$j++] = $get($_.msg, $_.i + 1); //#22500
                } else { //#22500
                    $k[$j++] = -99; //#22500
                } //#22500
                var _5h = $k[--$j]; //#22500
                $_[$k[--$j]] = _5h; //#22500
                $k[$j++] = 'char3'; //#22501
                if (($_.i + 2) < $_.msglen) { //#22501
                    $k[$j++] = $get($_.msg, $_.i + 2); //#22501
                } else { //#22501
                    $k[$j++] = -99; //#22501
                } //#22501
                var _5o = $k[--$j]; //#22501
                $_[$k[--$j]] = _5o; //#22501
                var _5t = $get($_[$_.cset], $_.char1) !== undefined; //#22504
                if (_5t) { //#22508
                    $k[$j++] = $_.char1; //#22505
                    $k[$j++] = $_[$_.cset]; //#22505
                    $_.enc(); //#22505
                    $_.i = $_.i + 1; //#22506
                    break; //#22507
                } //#22507
                var _61 = $get($_.setb, $_.char1) !== undefined; //#22511
                if ($eq($_.cset, "seta") && _61) { //#22521
                    var _64 = $get($_.setb, $_.char2) !== undefined; //#22512
                    if (_64) { //#22518
                        $k[$j++] = $_.lb; //#22513
                        $k[$j++] = $_.seta; //#22513
                        $_.enc(); //#22513
                        $_.cset = "setb"; //#22514
                    } else { //#22518
                        $k[$j++] = $_.sb; //#22516
                        $k[$j++] = $_.seta; //#22516
                        $_.enc(); //#22516
                        $k[$j++] = $_.char1; //#22517
                        $k[$j++] = $_.setb; //#22517
                        $_.enc(); //#22517
                        $_.i = $_.i + 1; //#22518
                    } //#22518
                    break; //#22520
                } //#22520
                var _6F = $get($_.seta, $_.char1) !== undefined; //#22524
                if ($eq($_.cset, "setb") && _6F) { //#22549
                    var _6G = $_.seta; //#22525
                    var _6H = $_.msg; //#22525
                    var _6I = $_.i; //#22525
                    var _6J = $_.msglen; //#22525
                    var _6K = $_.i; //#22525
                    var _6L = _6J - _6K; //#22525
                    var _6M = 4; //#22525
                    if (4 > (_6J - _6K)) { //#22525
                        var _ = _6L; //#22525
                        _6L = _6M; //#22525
                        _6M = _; //#22525
                    } //#22525
                    $k[$j++] = 'p'; //#22525
                    $k[$j++] = _6G; //#22525
                    $k[$j++] = $geti(_6H, _6I, _6M); //#22525
                    $_.prefixinset(); //#22525
                    var _6O = $k[--$j]; //#22525
                    $_[$k[--$j]] = _6O; //#22525
                    if ($_.p == 1) { //#22530
                        $k[$j++] = $_.sa; //#22527
                        $k[$j++] = $_.setb; //#22527
                        $_.enc(); //#22527
                        $k[$j++] = $_.char1; //#22528
                        $k[$j++] = $_.seta; //#22528
                        $_.enc(); //#22528
                        $_.i = $_.i + 1; //#22529
                    } //#22529
                    if ($_.p == 2) { //#22536
                        $k[$j++] = $_.sa2; //#22532
                        $k[$j++] = $_.setb; //#22532
                        $_.enc(); //#22532
                        $k[$j++] = $_.char1; //#22533
                        $k[$j++] = $_.seta; //#22533
                        $_.enc(); //#22533
                        $k[$j++] = $_.char2; //#22534
                        $k[$j++] = $_.seta; //#22534
                        $_.enc(); //#22534
                        $_.i = $_.i + 2; //#22535
                    } //#22535
                    if ($_.p == 3) { //#22543
                        $k[$j++] = $_.sa3; //#22538
                        $k[$j++] = $_.setb; //#22538
                        $_.enc(); //#22538
                        $k[$j++] = $_.char1; //#22539
                        $k[$j++] = $_.seta; //#22539
                        $_.enc(); //#22539
                        $k[$j++] = $_.char2; //#22540
                        $k[$j++] = $_.seta; //#22540
                        $_.enc(); //#22540
                        $k[$j++] = $_.char3; //#22541
                        $k[$j++] = $_.seta; //#22541
                        $_.enc(); //#22541
                        $_.i = $_.i + 3; //#22542
                    } //#22542
                    if ($_.p >= 4) { //#22547
                        $k[$j++] = $_.la; //#22545
                        $k[$j++] = $_.setb; //#22545
                        $_.enc(); //#22545
                        $_.cset = "seta"; //#22546
                    } //#22546
                    break; //#22548
                } //#22548
                var _6t = $get($_.seta, $_.char1) !== undefined; //#22552
                if (_6t) { //#22556
                    $k[$j++] = $_.la; //#22553
                    $k[$j++] = $_[$_.cset]; //#22553
                    $_.enc(); //#22553
                    $_.cset = "seta"; //#22554
                    break; //#22555
                } //#22555
                var _6z = $get($_.setb, $_.char1) !== undefined; //#22557
                if (_6z) { //#22561
                    $k[$j++] = $_.lb; //#22558
                    $k[$j++] = $_[$_.cset]; //#22558
                    $_.enc(); //#22558
                    $_.cset = "setb"; //#22559
                    break; //#22560
                } //#22560
                var _75 = $get($_.setc, $_.char1) !== undefined; //#22564
                if (_75) { //#22564
                    $_.setx = "setc"; //#22564
                    $_.sx = $_.sc; //#22564
                    $_.lkx = $_.lkc; //#22564
                } //#22564
                var _7A = $get($_.setd, $_.char1) !== undefined; //#22565
                if (_7A) { //#22565
                    $_.setx = "setd"; //#22565
                    $_.sx = $_.sd; //#22565
                    $_.lkx = $_.lkd; //#22565
                } //#22565
                var _7F = $get($_.sete, $_.char1) !== undefined; //#22566
                if (_7F) { //#22566
                    $_.setx = "sete"; //#22566
                    $_.sx = $_.se; //#22566
                    $_.lkx = $_.lke; //#22566
                } //#22566
                var _7J = $_[$_.setx]; //#22569
                var _7K = $_.msg; //#22569
                var _7L = $_.i; //#22569
                var _7M = $_.msglen; //#22569
                var _7N = $_.i; //#22569
                var _7O = _7M - _7N; //#22569
                var _7P = 4; //#22569
                if (4 > (_7M - _7N)) { //#22569
                    var _ = _7O; //#22569
                    _7O = _7P; //#22569
                    _7P = _; //#22569
                } //#22569
                $k[$j++] = 'p'; //#22569
                $k[$j++] = _7J; //#22569
                $k[$j++] = $geti(_7K, _7L, _7P); //#22569
                $_.prefixinset(); //#22569
                var _7R = $k[--$j]; //#22569
                $_[$k[--$j]] = _7R; //#22569
                if ($_.p == 1) { //#22574
                    $k[$j++] = $_.sx; //#22571
                    $k[$j++] = $_[$_.cset]; //#22571
                    $_.enc(); //#22571
                    $k[$j++] = $_.char1; //#22572
                    $k[$j++] = $_[$_.setx]; //#22572
                    $_.enc(); //#22572
                    $_.i = $_.i + 1; //#22573
                } //#22573
                if ($_.p == 2) { //#22581
                    $k[$j++] = $_.sx; //#22576
                    $k[$j++] = $_[$_.cset]; //#22576
                    $_.enc(); //#22576
                    $k[$j++] = $_.char1; //#22577
                    $k[$j++] = $_[$_.setx]; //#22577
                    $_.enc(); //#22577
                    $k[$j++] = $_.sx; //#22578
                    $k[$j++] = $_[$_.cset]; //#22578
                    $_.enc(); //#22578
                    $k[$j++] = $_.char2; //#22579
                    $k[$j++] = $_[$_.setx]; //#22579
                    $_.enc(); //#22579
                    $_.i = $_.i + 2; //#22580
                } //#22580
                if ($_.p == 3) { //#22590
                    $k[$j++] = $_.sx; //#22583
                    $k[$j++] = $_[$_.cset]; //#22583
                    $_.enc(); //#22583
                    $k[$j++] = $_.char1; //#22584
                    $k[$j++] = $_[$_.setx]; //#22584
                    $_.enc(); //#22584
                    $k[$j++] = $_.sx; //#22585
                    $k[$j++] = $_[$_.cset]; //#22585
                    $_.enc(); //#22585
                    $k[$j++] = $_.char2; //#22586
                    $k[$j++] = $_[$_.setx]; //#22586
                    $_.enc(); //#22586
                    $k[$j++] = $_.sx; //#22587
                    $k[$j++] = $_[$_.cset]; //#22587
                    $_.enc(); //#22587
                    $k[$j++] = $_.char3; //#22588
                    $k[$j++] = $_[$_.setx]; //#22588
                    $_.enc(); //#22588
                    $_.i = $_.i + 3; //#22589
                } //#22589
                if ($_.p >= 4) { //#22595
                    $k[$j++] = $_.sx; //#22592
                    $k[$j++] = $_[$_.cset]; //#22592
                    $_.enc(); //#22592
                    $k[$j++] = $_.lkx; //#22593
                    $k[$j++] = $_[$_.setx]; //#22593
                    $_.enc(); //#22593
                    $_.cset = $_.setx; //#22594
                } //#22594
                break; //#22597
            } //#22597
        } //#22597
        $_.encmsg = $geti($_.out, 0, $_.j); //#22600
        $_.padval = $get($_[$_.cset], $_.pad); //#22601
    } //#22601
    if ($eq($_.encoding, "new")) { //#22787
        $_.haveb = false; //#22608
        $_.havec = false; //#22608
        $_.haved = false; //#22608
        $_.havee = false; //#22608
        $_.havei = false; //#22609
        for (var _8R = 0, _8Q = $_.msglen - 1; _8R <= _8Q; _8R += 1) { //#22621
            $_.c = $get($_.msg, _8R); //#22611
            if ($_.c <= -1000000) { //#22618
                $_.havei = true; //#22613
            } else { //#22618
                if ((($_.c < 28) || ($_.c > 30)) && ($_.c != 32)) { //#22619
                    var _8a = $get($_.setb, $_.c) !== undefined; //#22615
                    if (_8a) { //#22615
                        $_.haveb = true; //#22615
                    } //#22615
                    var _8d = $get($_.setc, $_.c) !== undefined; //#22616
                    if (_8d) { //#22616
                        $_.havec = true; //#22616
                    } //#22616
                    var _8g = $get($_.setd, $_.c) !== undefined; //#22617
                    if (_8g) { //#22617
                        $_.haved = true; //#22617
                    } //#22617
                    var _8j = $get($_.sete, $_.c) !== undefined; //#22618
                    if (_8j) { //#22618
                        $_.havee = true; //#22618
                    } //#22618
                } //#22618
            } //#22618
        } //#22618
        $k[$j++] = Infinity; //#22625
        $k[$j++] = 0; //#22625
        if ($_.haveb) { //#22625
            $k[$j++] = 1; //#22625
        } //#22625
        if ($_.havee) { //#22625
            $k[$j++] = 4; //#22625
        } //#22625
        if ($_.havec) { //#22625
            $k[$j++] = 2; //#22625
        } //#22625
        if ($_.haved) { //#22625
            $k[$j++] = 3; //#22625
        } //#22625
        $_.priority = $a(); //#22625
        $_.priority_rest = $geti($_.priority, 1, $_.priority.length - 1); //#22626
        $_.latch_sequence = $a([$a([$a([]), $a([63]), $a([58]), $a([58]), $a([58])]), $a([$a([63]), $a([]), $a([63]), $a([63]), $a([63])]), $a([$a([60, 60]), $a([60, 60]), $a([]), $a([60, 60]), $a([60, 60])]), $a([$a([61, 61]), $a([61, 61]), $a([61, 61]), $a([]), $a([61, 61])]), $a([$a([62, 62]), $a([62, 62]), $a([62, 62]), $a([62, 62]), $a([])])]); //#22634
        $_.latch_length = $a([$a([0, 1, 1, 1, 1]), $a([1, 0, 1, 1, 1]), $a([2, 2, 0, 2, 2]), $a([2, 2, 2, 0, 2]), $a([2, 2, 2, 2, 0])]); //#22640
        $_.max_int = 2147483647; //#22642
        $k[$j++] = Infinity; //#22646
        for (var _9T = 0; _9T < 16; _9T++) { //#22646
            $k[$j++] = $a([0, 0, 0, 0, 0]); //#22646
        } //#22646
        $_.best_length = $a(); //#22646
        $k[$j++] = Infinity; //#22647
        for (var _9W = 0; _9W < 16; _9W++) { //#22647
            $k[$j++] = $a([0, 0, 0, 0, 0]); //#22647
        } //#22647
        $_.best_origin = $a(); //#22647
        $k[$j++] = Infinity; //#22650
        for (var _9a = 0, _9b = $_.msglen; _9a < _9b; _9a++) { //#22650
            $k[$j++] = Infinity; //#22650
            for (var _9c = 0; _9c < 5; _9c++) { //#22650
                $k[$j++] = 0; //#22650
            } //#22650
            var _9d = $a(); //#22650
            $k[$j++] = _9d; //#22650
        } //#22650
        $_.prior_code_set = $a(); //#22650
        $k[$j++] = Infinity; //#22651
        for (var _9g = 0, _9h = $_.msglen; _9g < _9h; _9g++) { //#22651
            $k[$j++] = Infinity; //#22651
            for (var _9i = 0; _9i < 5; _9i++) { //#22651
                $k[$j++] = 0; //#22651
            } //#22651
            var _9j = $a(); //#22651
            $k[$j++] = _9j; //#22651
        } //#22651
        $_.path_op = $a(); //#22651
        $_.out_eci = function() {
            var _9m = (-$_.c) - 1000000; //#22654
            $k[$j++] = _9m; //#22655
            if (_9m < 1024) { //#22655
                var _9o = ($k[--$j] < 32) ? 2 : 3; //#22654
                $k[$j++] = _9o; //#22654
            } else { //#22655
                var _9q = ($k[--$j] < 32768) ? 4 : 5; //#22655
                $k[$j++] = _9q; //#22655
            } //#22655
        }; //#22655
        $_.enc_eci = function() {
            var _9s = (-$_.c) - 1000000; //#22658
            $k[$j++] = _9s; //#22664
            if (_9s >= 32) { //#22664
                var _9t = $k[$j - 1]; //#22658
                if (_9t < 1024) { //#22664
                    var _9u = $k[--$j]; //#22659
                    $k[$j++] = (_9u >>> 6) | 32; //#22659
                    $k[$j++] = _9u & 63; //#22659
                } else { //#22664
                    var _9v = $k[$j - 1]; //#22659
                    if (_9v < 32768) { //#22664
                        var _9w = $k[--$j]; //#22660
                        $k[$j++] = (_9w >>> 12) | 48; //#22661
                        $k[$j++] = (_9w >>> 6) & 63; //#22661
                        $k[$j++] = _9w & 63; //#22661
                    } else { //#22664
                        var _9x = $k[--$j]; //#22662
                        $k[$j++] = (_9x >>> 18) | 56; //#22664
                        $k[$j++] = (_9x >>> 12) & 63; //#22664
                        $k[$j++] = (_9x >>> 6) & 63; //#22664
                        $k[$j++] = _9x & 63; //#22664
                    } //#22664
                } //#22664
            } //#22664
        }; //#22664
        $_.enc_ns = function() {
            var _A0 = $geti($_.msg, $_.n, 9); //#22665
            $k[$j++] = 0; //#22665
            for (var _A1 = 0, _A2 = _A0.length; _A1 < _A2; _A1++) { //#22665
                var _A4 = $k[--$j]; //#22665
                $k[$j++] = $f(($get(_A0, _A1) - 48) + (_A4 * 10)); //#22665
            } //#22665
            var _A5 = $k[--$j]; //#22666
            $k[$j++] = _A5 >>> 24; //#22669
            $k[$j++] = (_A5 >>> 18) & 63; //#22669
            $k[$j++] = (_A5 >>> 12) & 63; //#22669
            $k[$j++] = (_A5 >>> 6) & 63; //#22669
            $k[$j++] = _A5 & 63; //#22669
        }; //#22669
        $_.enc_sha2 = function() {
            $k[$j++] = $get($_.seta, $_.c); //#22670
            $k[$j++] = $get($_.seta, $get($_.msg, $_.n + 1)); //#22670
        }; //#22670
        $_.enc_sha3 = function() {
            $k[$j++] = $get($_.seta, $_.c); //#22672
            $k[$j++] = $get($_.seta, $get($_.msg, $_.n + 1)); //#22672
            $k[$j++] = $get($_.seta, $get($_.msg, $_.n + 2)); //#22672
        }; //#22672
        $k[$j++] = Infinity; //#22675
        if ($_.havei) { //#22676
            var _AT = new Map([
                ["can", function() {
                    $k[$j++] = $_.c <= -1000000; //#22676
                }],
                ["intake", 1],
                ["output", function() {
                    $_.out_eci(); //#22676
                }],
                ["sets", 31],
                ["enc", function() {
                    $k[$j++] = 27; //#22676
                    $_.enc_eci(); //#22676
                }]
            ]); //#22676
            $k[$j++] = _AT; //#22676
        } //#22676
        var _AV = new Map([
            ["can", function() {
                $k[$j++] = $_.digits >= 9; //#22677
            }],
            ["intake", 9],
            ["output", function() {
                $k[$j++] = 6; //#22677
            }],
            ["sets", 31],
            ["enc", function() {
                $k[$j++] = 31; //#22677
                $_.enc_ns(); //#22677
            }]
        ]); //#22677
        var _Ac = new Map([
            ["can", function() {
                var _AY = $get($_.seta, $_.c) !== undefined; //#22678
                $k[$j++] = _AY; //#22678
            }],
            ["intake", 1],
            ["output", function() {
                $k[$j++] = 1; //#22678
            }],
            ["sets", 1],
            ["enc", function() {
                $k[$j++] = $get($_.seta, $_.c); //#22678
            }]
        ]); //#22678
        $k[$j++] = _AV; //#22679
        $k[$j++] = _Ac; //#22679
        if ($_.haveb) { //#22679
            var _Ak = new Map([
                ["can", function() {
                    var _Ag = $get($_.setb, $_.c) !== undefined; //#22679
                    $k[$j++] = _Ag; //#22679
                }],
                ["intake", 1],
                ["output", function() {
                    $k[$j++] = 1; //#22679
                }],
                ["sets", 2],
                ["enc", function() {
                    $k[$j++] = $get($_.setb, $_.c); //#22679
                }]
            ]); //#22679
            $k[$j++] = _Ak; //#22679
        } //#22679
        if ($_.havec) { //#22680
            var _As = new Map([
                ["can", function() {
                    var _Ao = $get($_.setc, $_.c) !== undefined; //#22680
                    $k[$j++] = _Ao; //#22680
                }],
                ["intake", 1],
                ["output", function() {
                    $k[$j++] = 1; //#22680
                }],
                ["sets", 4],
                ["enc", function() {
                    $k[$j++] = $get($_.setc, $_.c); //#22680
                }]
            ]); //#22680
            $k[$j++] = _As; //#22680
        } //#22680
        if ($_.haved) { //#22681
            var _B0 = new Map([
                ["can", function() {
                    var _Aw = $get($_.setd, $_.c) !== undefined; //#22681
                    $k[$j++] = _Aw; //#22681
                }],
                ["intake", 1],
                ["output", function() {
                    $k[$j++] = 1; //#22681
                }],
                ["sets", 8],
                ["enc", function() {
                    $k[$j++] = $get($_.setd, $_.c); //#22681
                }]
            ]); //#22681
            $k[$j++] = _B0; //#22681
        } //#22681
        if ($_.havee) { //#22682
            var _B8 = new Map([
                ["can", function() {
                    var _B4 = $get($_.sete, $_.c) !== undefined; //#22682
                    $k[$j++] = _B4; //#22682
                }],
                ["intake", 1],
                ["output", function() {
                    $k[$j++] = 1; //#22682
                }],
                ["sets", 16],
                ["enc", function() {
                    $k[$j++] = $get($_.sete, $_.c); //#22682
                }]
            ]); //#22682
            $k[$j++] = _B8; //#22682
        } //#22682
        var _BD = new Map([
            ["can", function() {
                $k[$j++] = $_.num_a >= 1; //#22683
            }],
            ["intake", 1],
            ["output", function() {
                $k[$j++] = 2; //#22683
            }],
            ["sets", 2],
            ["enc", function() {
                $k[$j++] = 59; //#22683
                $k[$j++] = $get($_.seta, $_.c); //#22683
            }]
        ]); //#22683
        var _BF = new Map([
            ["can", function() {
                $k[$j++] = $_.num_a >= 2; //#22684
            }],
            ["intake", 2],
            ["output", function() {
                $k[$j++] = 3; //#22684
            }],
            ["sets", 2],
            ["enc", function() {
                $k[$j++] = 56; //#22684
                $_.enc_sha2(); //#22684
            }]
        ]); //#22684
        var _BH = new Map([
            ["can", function() {
                $k[$j++] = $_.num_a >= 3; //#22685
            }],
            ["intake", 3],
            ["output", function() {
                $k[$j++] = 4; //#22685
            }],
            ["sets", 2],
            ["enc", function() {
                $k[$j++] = 57; //#22685
                $_.enc_sha3(); //#22685
            }]
        ]); //#22685
        $k[$j++] = _BD; //#22686
        $k[$j++] = _BF; //#22686
        $k[$j++] = _BH; //#22686
        if ($_.haveb) { //#22686
            var _BP = new Map([
                ["can", function() {
                    var _BL = $get($_.setb, $_.c) !== undefined; //#22686
                    $k[$j++] = _BL; //#22686
                }],
                ["intake", 1],
                ["output", function() {
                    $k[$j++] = 2; //#22686
                }],
                ["sets", 1],
                ["enc", function() {
                    $k[$j++] = 59; //#22686
                    $k[$j++] = $get($_.setb, $_.c); //#22686
                }]
            ]); //#22686
            $k[$j++] = _BP; //#22686
        } //#22686
        if ($_.havec) { //#22687
            var _BX = new Map([
                ["can", function() {
                    var _BT = $get($_.setc, $_.c) !== undefined; //#22687
                    $k[$j++] = _BT; //#22687
                }],
                ["intake", 1],
                ["output", function() {
                    $k[$j++] = 2; //#22687
                }],
                ["sets", 27],
                ["enc", function() {
                    $k[$j++] = 60; //#22687
                    $k[$j++] = $get($_.setc, $_.c); //#22687
                }]
            ]); //#22687
            $k[$j++] = _BX; //#22687
        } //#22687
        if ($_.haved) { //#22688
            var _Bf = new Map([
                ["can", function() {
                    var _Bb = $get($_.setd, $_.c) !== undefined; //#22688
                    $k[$j++] = _Bb; //#22688
                }],
                ["intake", 1],
                ["output", function() {
                    $k[$j++] = 2; //#22688
                }],
                ["sets", 23],
                ["enc", function() {
                    $k[$j++] = 61; //#22688
                    $k[$j++] = $get($_.setd, $_.c); //#22688
                }]
            ]); //#22688
            $k[$j++] = _Bf; //#22688
        } //#22688
        if ($_.havee) { //#22689
            var _Bn = new Map([
                ["can", function() {
                    var _Bj = $get($_.sete, $_.c) !== undefined; //#22689
                    $k[$j++] = _Bj; //#22689
                }],
                ["intake", 1],
                ["output", function() {
                    $k[$j++] = 2; //#22689
                }],
                ["sets", 15],
                ["enc", function() {
                    $k[$j++] = 62; //#22689
                    $k[$j++] = $get($_.sete, $_.c); //#22689
                }]
            ]); //#22689
            $k[$j++] = _Bn; //#22689
        } //#22689
        $_.op_tab = $a(); //#22689
        var _Bp = $_.op_tab; //#22693
        $k[$j++] = 0; //#22693
        for (var _Bq = 0, _Br = _Bp.length; _Bq < _Br; _Bq++) { //#22693
            var _Bt = $k[--$j]; //#22693
            $put($get(_Bp, _Bq), 'idx', _Bt); //#22693
            $k[$j++] = _Bt + 1; //#22693
        } //#22693
        $k[$j - 1] = Infinity; //#22696
        var _Bu = $a([1, 2, 4, 8, 16]); //#22696
        for (var _Bv = 0, _Bw = _Bu.length; _Bv < _Bw; _Bv++) { //#22696
            $_.n = $get(_Bu, _Bv); //#22696
            $k[$j++] = Infinity; //#22696
            var _By = $_.op_tab; //#22696
            for (var _Bz = 0, _C0 = _By.length; _Bz < _C0; _Bz++) { //#22696
                var _C1 = $get(_By, _Bz); //#22696
                $k[$j++] = _C1; //#22696
                if ($an($get(_C1, 'sets'), $_.n) == 0) { //#22696
                    $j--; //#22696
                } //#22696
            } //#22696
            var _C4 = $a(); //#22696
            $k[$j++] = _C4; //#22696
        } //#22696
        $_.code_set_operations = $a(); //#22696
        $_.get_best_length = function() {
            $_.latch_length_s = $get($_.latch_length, $_.state); //#22700
            $k[$j++] = $_.max_int; //#22716
            $forall($get($_.code_set_operations, $_.state), function() { //#22716
                $_.op = $k[--$j]; //#22703
                if ($get($_.op, 'can')() === true) {
                    return true;
                } //#22704
                if ($k[--$j]) { //#22715
                    $_.m = $f($_.n - $get($_.op, 'intake')) & 15; //#22705
                    $_.org = $get($get($_.best_origin, $_.m), $_.state); //#22706
                    $k[$j++] = $f($get($get($_.best_length, $_.m), $_.org) + $get($_.latch_length_s, $_.org)); //#22709
                    if ($get($_.op, 'output')() === true) {
                        return true;
                    } //#22709
                    var _CZ = $k[--$j]; //#22709
                    var _Ca = $k[--$j]; //#22709
                    var _Cb = $k[$j - 1]; //#22710
                    $k[$j++] = $f(_Ca + _CZ); //#22714
                    if (_Cb > $f(_Ca + _CZ)) { //#22714
                        var _Cc = $k[--$j]; //#22711
                        var _Cd = $k[--$j]; //#22711
                        $put($_.path_op_0, $_.state, $get($_.op, 'idx')); //#22712
                        $put($_.prior_code_set_0, $_.state, $_.org); //#22713
                        $k[$j++] = _Cc; //#22713
                        $k[$j++] = _Cd; //#22713
                    } //#22713
                    $j--; //#22714
                } //#22714
            }); //#22714
        }; //#22714
        $_.get_best_origin = function() {
            $_.latch_length_s = $get($_.latch_length, $_.state); //#22722
            $_.orglen = $f($get($_.best_length_0, 0) + $get($_.latch_length_s, 0)); //#22723
            var _Cs = $_.priority_rest; //#22724
            $k[$j++] = 0; //#22726
            for (var _Ct = 0, _Cu = _Cs.length; _Ct < _Cu; _Ct++) { //#22726
                $_.p = $get(_Cs, _Ct); //#22725
                var _D2 = $f($get($_.best_length_0, $_.p) + $get($_.latch_length_s, $_.p)); //#22725
                $k[$j++] = _D2; //#22725
                if (_D2 < $_.orglen) { //#22725
                    $_.orglen = $k[--$j]; //#22725
                    $k[$j - 1] = $_.p; //#22725
                } else { //#22725
                    $j--; //#22725
                } //#22725
            } //#22725
        }; //#22725
        $_.digits = 0; //#22729
        $_.num_a = 0; //#22730
        for (var _D8 = 0, _D7 = $_.msglen - 1; _D8 <= _D7; _D8 += 1) { //#22750
            $_.n = _D8; //#22734
            $_.c = $get($_.msg, $_.n); //#22735
            $k[$j++] = 'digits'; //#22738
            if (($_.c >= 48) && ($_.c < 58)) { //#22738
                $k[$j++] = $_.digits + 1; //#22738
            } else { //#22738
                $k[$j++] = 0; //#22738
            } //#22738
            var _DF = $k[--$j]; //#22738
            $_[$k[--$j]] = _DF; //#22738
            var _DJ = $get($_.seta, $_.c) !== undefined; //#22739
            $k[$j++] = 'num_a'; //#22739
            if (_DJ) { //#22739
                $k[$j++] = $_.num_a + 1; //#22739
            } else { //#22739
                $k[$j++] = 0; //#22739
            } //#22739
            var _DL = $k[--$j]; //#22739
            $_[$k[--$j]] = _DL; //#22739
            $_.path_op_0 = $get($_.path_op, $_.n); //#22742
            $_.prior_code_set_0 = $get($_.prior_code_set, $_.n); //#22743
            $_.best_length_0 = $get($_.best_length, $_.n & 15); //#22744
            $_.best_origin_0 = $get($_.best_origin, $_.n & 15); //#22745
            var _DZ = $_.priority; //#22748
            for (var _Da = 0, _Db = _DZ.length; _Da < _Db; _Da++) { //#22748
                $_.state = $get(_DZ, _Da); //#22748
                $k[$j++] = $_.best_length_0; //#22748
                $k[$j++] = $_.state; //#22748
                $_.get_best_length(); //#22748
                var _Df = $k[--$j]; //#22748
                var _Dg = $k[--$j]; //#22748
                $put($k[--$j], _Dg, _Df); //#22748
            } //#22748
            var _Di = $_.priority; //#22749
            for (var _Dj = 0, _Dk = _Di.length; _Dj < _Dk; _Dj++) { //#22749
                $_.state = $get(_Di, _Dj); //#22749
                $k[$j++] = $_.best_origin_0; //#22749
                $k[$j++] = $_.state; //#22749
                $_.get_best_origin(); //#22749
                var _Do = $k[--$j]; //#22749
                var _Dp = $k[--$j]; //#22749
                $put($k[--$j], _Dp, _Do); //#22749
            } //#22749
        } //#22749
        $_.n = $_.msglen; //#22752
        var _Dt = $_.priority; //#22755
        $k[$j++] = 0; //#22755
        $k[$j++] = $_.max_int; //#22755
        for (var _Du = 0, _Dv = _Dt.length; _Du < _Dv; _Du++) { //#22755
            var _Dw = $get(_Dt, _Du); //#22755
            var _Dy = $get($_.best_length_0, _Dw); //#22755
            var _Dz = $k[$j - 1]; //#22755
            $k[$j++] = _Dw; //#22755
            $k[$j++] = _Dy; //#22755
            if ($lt(_Dy, _Dz)) { //#22755
                $r(4, 2); //#22755
            } //#22755
            $j -= 2; //#22755
        } //#22755
        $_.j = $k[--$j]; //#22756
        $_.state = $k[--$j]; //#22757
        $_.pad_code = $a([33, 33, 0, 0, 28]); //#22760
        $k[$j++] = 'final_code_set'; //#22761
        if ($get($_.pad_code, $_.state) == 0) { //#22761
            $k[$j++] = 0; //#22761
        } else { //#22761
            $k[$j++] = $_.state; //#22761
        } //#22761
        var _E7 = $k[--$j]; //#22761
        $_[$k[--$j]] = _E7; //#22761
        if (($get($_.pad_code, $_.state) == 0) && $lt($_.j, $_.maxlen)) { //#22764
            var _EF = $a($_.j + 1); //#22764
            $put(_EF, $_.j, 58); //#22764
            $k[$j++] = _EF; //#22764
        } else { //#22764
            $k[$j++] = $a($_.j); //#22764
        } //#22764
        $_.padval = $get($_.pad_code, $_.final_code_set); //#22765
        $_.len = $_.j; //#22766
        for (;;) { //#22782
            if ($_.n <= 0) { //#22770
                break; //#22770
            } //#22770
            $_.pcs = $get($get($_.prior_code_set, $_.n - 1), $_.state); //#22771
            $_.op_idx = $get($get($_.path_op, $_.n - 1), $_.state); //#22772
            $_.op = $get($_.op_tab, $_.op_idx); //#22773
            $_.n = $f($_.n - $get($_.op, 'intake')); //#22774
            $_.c = $get($_.msg, $_.n); //#22775
            $_.enc = $get($_.op, 'enc'); //#22776
            $k[$j++] = Infinity; //#22777
            if ($_.enc() === true) {
                break;
            } //#22777
            $_.output = $a(); //#22777
            $_.latch = $get($get($_.latch_sequence, $_.state), $_.pcs); //#22778
            $_.len = $f($_.len - $_.latch.length - $_.output.length); //#22779
            var _Et = $k[--$j]; //#22780
            var _Eu = $_.len; //#22780
            var _Ev = $_.latch; //#22780
            $puti(_Et, _Eu, _Ev); //#22780
            $puti(_Et, $f(_Eu + _Ev.length), $_.output); //#22780
            $_.state = $_.pcs; //#22781
            $k[$j++] = _Et; //#22781
        } //#22781
        $_.encmsg = $k[--$j]; //#22785
    } //#22785
    $k[$j++] = 'sami'; //#22790
    if ($_.sam != -1) { //#22790
        $k[$j++] = $a([$get($_.seta, $_.pad), (((~~($_.sam / 10)) - 1) * 8) + (($_.sam % 10) - 1)]); //#22790
    } else { //#22790
        $k[$j++] = $a([]); //#22790
    } //#22790
    var _F7 = $k[--$j]; //#22790
    $_[$k[--$j]] = _F7; //#22790
    $k[$j++] = Infinity; //#22791
    $aload($_.sami); //#22791
    $aload($_.encmsg); //#22791
    $_.encmsg = $a(); //#22791
    if (($_.mode == 2) || ($_.mode == 3)) { //#22852
        if ($_.encmsg.length > 84) { //#22798
            $k[$j++] = 'bwipp.maxicodeMode23TooLong#22797'; //#22797
            $k[$j++] = "The secondary message is too long"; //#22797
            bwipp_raiseerror(); //#22797
        } //#22797
        var _FG = $strcpy($s(4), "0000"); //#22801
        var _FJ = $cvrs($s(4), ~~$_.mode, 2); //#22801
        $puti(_FG, 4 - _FJ.length, _FJ); //#22801
        $_.mdb = _FG; //#22801
        var _FL = $strcpy($s(10), "0000000000"); //#22802
        var _FO = $cvrs($s(10), $cvi($_.ccode), 2); //#22802
        $puti(_FL, 10 - _FO.length, _FO); //#22802
        $_.ccb = _FL; //#22802
        var _FQ = $strcpy($s(10), "0000000000"); //#22803
        var _FT = $cvrs($s(10), $cvi($_.scode), 2); //#22803
        $puti(_FQ, 10 - _FT.length, _FT); //#22803
        $_.scb = _FQ; //#22803
        $_.pcb = $strcpy($s(36), "000000000000000000000000000000000000"); //#22804
        if ($_.mode == 2) { //#22819
            if ($eq($_.ccode, "840") && ($_.pcode.length == 5)) { //#22807
                var _Fa = $strcpy($s(9), "     0000"); //#22807
                $puti(_Fa, 0, $_.pcode); //#22807
                $_.pcode = _Fa; //#22807
            } //#22807
            var _Ff = $cvrs($s(6), $_.pcode.length, 2); //#22809
            $puti($_.pcb, 6 - _Ff.length, _Ff); //#22809
            var _Fj = $cvrs($s(30), $cvi($_.pcode), 2); //#22810
            $puti($_.pcb, 36 - _Fj.length, _Fj); //#22810
        } else { //#22819
            $k[$j++] = Infinity; //#22813
            var _Fl = $strcpy($s(6), "      "); //#22814
            $k[$j++] = _Fl; //#22814
            $k[$j++] = _Fl; //#22814
            $k[$j++] = 0; //#22814
            if ($_.pcode.length > 6) { //#22814
                $k[$j++] = $geti($_.pcode, 0, 6); //#22814
            } else { //#22814
                $k[$j++] = $_.pcode; //#22814
            } //#22814
            var _Fq = $k[--$j]; //#22814
            var _Fr = $k[--$j]; //#22814
            $puti($k[--$j], _Fr, _Fq); //#22814
            $forall($k[--$j], function() { //#22815
                var _Fw = $get($_.seta, $k[--$j]); //#22815
                $k[$j++] = _Fw; //#22815
            }); //#22815
            $_.pccw = $a(); //#22815
            for (var _Fy = 0; _Fy <= 5; _Fy += 1) { //#22820
                $_.i = _Fy; //#22818
                var _G4 = $cvrs($s(6), $get($_.pccw, $_.i), 2); //#22819
                $puti($_.pcb, ((6 * $_.i) + 6) - _G4.length, _G4); //#22819
            } //#22819
        } //#22819
        $_.scm = $s(60); //#22824
        $puti($_.scm, 2, $_.mdb); //#22825
        $puti($_.scm, 38, $geti($_.pcb, 0, 4)); //#22826
        $puti($_.scm, 30, $geti($_.pcb, 4, 6)); //#22827
        $puti($_.scm, 24, $geti($_.pcb, 10, 6)); //#22828
        $puti($_.scm, 18, $geti($_.pcb, 16, 6)); //#22829
        $puti($_.scm, 12, $geti($_.pcb, 22, 6)); //#22830
        $puti($_.scm, 6, $geti($_.pcb, 28, 6)); //#22831
        $puti($_.scm, 0, $geti($_.pcb, 34, 2)); //#22832
        $puti($_.scm, 52, $geti($_.ccb, 0, 2)); //#22833
        $puti($_.scm, 42, $geti($_.ccb, 2, 6)); //#22834
        $puti($_.scm, 36, $geti($_.ccb, 8, 2)); //#22835
        $puti($_.scm, 54, $geti($_.scb, 0, 6)); //#22836
        $puti($_.scm, 48, $geti($_.scb, 6, 4)); //#22837
        $_.pri = $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]); //#22840
        for (var _Gk = 0; _Gk <= 59; _Gk += 1) { //#22846
            $_.i = _Gk; //#22842
            $_.ps = ~~($_.i / 6); //#22843
            $_.ep = (~~($pow(2, 5 - ($_.i % 6)))) * ($get($_.scm, $_.i) - 48); //#22844
            $put($_.pri, $_.ps, $f($get($_.pri, $_.ps) + $_.ep)); //#22845
        } //#22845
        $k[$j++] = Infinity; //#22849
        for (var _Gw = 0; _Gw < 84; _Gw++) { //#22849
            $k[$j++] = $_.padval; //#22849
        } //#22849
        $_.sec = $a(); //#22849
        $puti($_.sec, 0, $_.encmsg); //#22850
    } //#22850
    if (((($_.mode == 4) || ($_.mode == 5)) || ($_.mode == 6)) || ($_.mode == -1)) { //#22873
        if ($_.mode == -1) { //#22860
            var _H7 = ($_.encmsg.length <= 77) ? 5 : 4; //#22859
            $_.mode = _H7; //#22859
        } //#22859
        $k[$j++] = Infinity; //#22862
        var _H9 = ($_.mode == 5) ? 78 : 94; //#22862
        for (var _HA = 0, _HB = _H9; _HA < _HB; _HA++) { //#22862
            $k[$j++] = $_.padval; //#22862
        } //#22862
        $_.cws = $a(); //#22862
        if ($_.encmsg.length > ($_.cws.length - 1)) { //#22865
            $k[$j++] = 'bwipp.maxicodeMode56TooLong#22864'; //#22864
            $k[$j++] = "The message is too long"; //#22864
            bwipp_raiseerror(); //#22864
        } //#22864
        $put($_.cws, 0, $_.mode); //#22866
        $puti($_.cws, 1, $_.encmsg); //#22867
        $_.pri = $geti($_.cws, 0, 10); //#22870
        $_.sec = $geti($_.cws, 10, $_.cws.length - 10); //#22871
    } //#22871
    $k[$j++] = Infinity; //#22877
    $k[$j++] = 1; //#22877
    for (var _HP = 0; _HP < 63; _HP++) { //#22877
        var _HQ = $k[$j - 1]; //#22877
        var _HR = _HQ * 2; //#22877
        $k[$j++] = _HR; //#22877
        if (_HR >= 64) { //#22877
            var _HS = $k[--$j]; //#22877
            $k[$j++] = _HS ^ 67; //#22877
        } //#22877
    } //#22877
    $_.rsalog = $a(); //#22877
    $_.rslog = $a(64); //#22878
    for (var _HV = 1; _HV <= 63; _HV += 1) { //#22879
        $put($_.rslog, $get($_.rsalog, _HV), _HV); //#22879
    } //#22879
    $_.rsprod = function() {
        var _Ha = $k[$j - 1]; //#22884
        var _Hb = $k[$j - 2]; //#22884
        if ((_Ha != 0) && (_Hb != 0)) { //#22887
            var _He = $get($_.rslog, $k[--$j]); //#22885
            var _Hj = $get($_.rsalog, $f(_He + $get($_.rslog, $k[--$j])) % 63); //#22885
            $k[$j++] = _Hj; //#22885
        } else { //#22887
            $j -= 2; //#22887
            $k[$j++] = 0; //#22887
        } //#22887
    }; //#22887
    $_.rscodes = function() {
        $_.rsnum = $k[--$j]; //#22894
        $_.cwb = $k[--$j]; //#22895
        $k[$j++] = Infinity; //#22898
        $k[$j++] = 1; //#22898
        for (var _Hn = 0, _Ho = $_.rsnum; _Hn < _Ho; _Hn++) { //#22898
            $k[$j++] = 0; //#22898
        } //#22898
        $_.coeffs = $a(); //#22898
        for (var _Hs = 1, _Hr = $_.rsnum; _Hs <= _Hr; _Hs += 1) { //#22907
            $_.i = _Hs; //#22900
            $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#22901
            for (var _Hz = $_.i - 1; _Hz >= 1; _Hz -= 1) { //#22905
                $_.j = _Hz; //#22903
                $k[$j++] = $_.coeffs; //#22904
                $k[$j++] = $_.j; //#22904
                $k[$j++] = $get($_.coeffs, $_.j - 1); //#22904
                $k[$j++] = $get($_.coeffs, $_.j); //#22904
                $k[$j++] = $get($_.rsalog, $_.i); //#22904
                $_.rsprod(); //#22904
                var _IB = $k[--$j]; //#22904
                var _IC = $k[--$j]; //#22904
                var _ID = $k[--$j]; //#22904
                $put($k[--$j], _ID, $xo(_IC, _IB)); //#22904
            } //#22904
            $k[$j++] = $_.coeffs; //#22906
            $k[$j++] = 0; //#22906
            $k[$j++] = $get($_.coeffs, 0); //#22906
            $k[$j++] = $get($_.rsalog, $_.i); //#22906
            $_.rsprod(); //#22906
            var _IL = $k[--$j]; //#22906
            var _IM = $k[--$j]; //#22906
            $put($k[--$j], _IM, _IL); //#22906
        } //#22906
        $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#22908
        $k[$j++] = Infinity; //#22911
        for (var _IS = 0, _IT = $_.rsnum; _IS < _IT; _IS++) { //#22911
            $k[$j++] = 0; //#22911
        } //#22911
        $_.ecb = $a(); //#22911
        for (var _IX = 0, _IW = $_.cwb.length - 1; _IX <= _IW; _IX += 1) { //#22920
            $_.t = $xo($get($_.cwb, _IX), $get($_.ecb, 0)); //#22913
            for (var _Id = $_.ecb.length - 1; _Id >= 0; _Id -= 1) { //#22919
                $_.i = _Id; //#22915
                $_.p = ($_.ecb.length - $_.i) - 1; //#22916
                $k[$j++] = $_.ecb; //#22917
                $k[$j++] = $_.p; //#22917
                $k[$j++] = $_.t; //#22917
                $k[$j++] = $get($_.coeffs, $_.i); //#22917
                $_.rsprod(); //#22917
                var _Im = $k[--$j]; //#22917
                var _In = $k[--$j]; //#22917
                $put($k[--$j], _In, _Im); //#22917
                if ($_.i > 0) { //#22918
                    $put($_.ecb, $_.p, $xo($get($_.ecb, $_.p + 1), $get($_.ecb, $_.p))); //#22918
                } //#22918
            } //#22918
        } //#22918
        $k[$j++] = $_.ecb; //#22922
    }; //#22922
    $k[$j++] = Infinity; //#22927
    for (var _J1 = 0, _J0 = $_.sec.length - 1; _J1 <= _J0; _J1 += 2) { //#22927
        $k[$j++] = $get($_.sec, _J1); //#22927
    } //#22927
    $_.seco = $a(); //#22927
    $k[$j++] = Infinity; //#22928
    for (var _J7 = 1, _J6 = $_.sec.length - 1; _J7 <= _J6; _J7 += 2) { //#22928
        $k[$j++] = $get($_.sec, _J7); //#22928
    } //#22928
    $_.sece = $a(); //#22928
    var _JC = ($_.sec.length == 84) ? 20 : 28; //#22931
    $_.scodes = _JC; //#22931
    $k[$j++] = 'secochk'; //#22932
    $k[$j++] = $_.seco; //#22932
    $k[$j++] = $_.scodes; //#22932
    $_.rscodes(); //#22932
    var _JF = $k[--$j]; //#22932
    $_[$k[--$j]] = _JF; //#22932
    $k[$j++] = 'secechk'; //#22933
    $k[$j++] = $_.sece; //#22933
    $k[$j++] = $_.scodes; //#22933
    $_.rscodes(); //#22933
    var _JJ = $k[--$j]; //#22933
    $_[$k[--$j]] = _JJ; //#22933
    $k[$j++] = Infinity; //#22936
    for (var _JN = 0, _JM = $_.scodes - 1; _JN <= _JM; _JN += 1) { //#22936
        $k[$j++] = $get($_.secochk, _JN); //#22936
        $k[$j++] = $get($_.secechk, _JN); //#22936
    } //#22936
    $_.secchk = $a(); //#22936
    $k[$j++] = Infinity; //#22939
    $aload($_.pri); //#22940
    $k[$j++] = $_.pri; //#22941
    $k[$j++] = 10; //#22941
    $_.rscodes(); //#22941
    $aload($k[--$j]); //#22941
    $aload($_.sec); //#22942
    $aload($_.secchk); //#22943
    $_.codewords = $a(); //#22943
    var _Ja = $get($_.options, 'debugcws') !== undefined; //#22946
    if (_Ja) { //#22946
        $k[$j++] = 'bwipp.debugcws#22946'; //#22946
        $k[$j++] = $_.codewords; //#22946
        bwipp_raiseerror(); //#22946
    } //#22946
    $k[$j++] = Infinity; //#22949
    for (var _Jc = 0; _Jc < 864; _Jc++) { //#22949
        $k[$j++] = 0; //#22949
    } //#22949
    $_.mods = $a(); //#22949
    for (var _Je = 0; _Je <= 143; _Je += 1) { //#22954
        $_.i = _Je; //#22951
        $k[$j++] = Infinity; //#22952
        var _Jj = $cvrs($s(6), $get($_.codewords, $_.i), 2); //#22952
        for (var _Jk = 0, _Jl = _Jj.length; _Jk < _Jl; _Jk++) { //#22952
            $k[$j++] = $get(_Jj, _Jk) - 48; //#22952
        } //#22952
        $_.cw = $a(); //#22952
        $puti($_.mods, (6 * $_.i) + (6 - $_.cw.length), $_.cw); //#22953
    } //#22953
    $_.modmap = $a([469, 529, 286, 316, 347, 346, 673, 672, 703, 702, 647, 676, 283, 282, 313, 312, 370, 610, 618, 379, 378, 409, 408, 439, 705, 704, 559, 589, 588, 619, 458, 518, 640, 701, 675, 674, 285, 284, 315, 314, 310, 340, 531, 289, 288, 319, 349, 348, 456, 486, 517, 516, 471, 470, 369, 368, 399, 398, 429, 428, 549, 548, 579, 578, 609, 608, 649, 648, 679, 678, 709, 708, 639, 638, 669, 668, 699, 698, 279, 278, 309, 308, 339, 338, 381, 380, 411, 410, 441, 440, 561, 560, 591, 590, 621, 620, 547, 546, 577, 576, 607, 606, 367, 366, 397, 396, 427, 426, 291, 290, 321, 320, 351, 350, 651, 650, 681, 680, 711, 710, 1, 0, 31, 30, 61, 60, 3, 2, 33, 32, 63, 62, 5, 4, 35, 34, 65, 64, 7, 6, 37, 36, 67, 66, 9, 8, 39, 38, 69, 68, 11, 10, 41, 40, 71, 70, 13, 12, 43, 42, 73, 72, 15, 14, 45, 44, 75, 74, 17, 16, 47, 46, 77, 76, 19, 18, 49, 48, 79, 78, 21, 20, 51, 50, 81, 80, 23, 22, 53, 52, 83, 82, 25, 24, 55, 54, 85, 84, 27, 26, 57, 56, 87, 86, 117, 116, 147, 146, 177, 176, 115, 114, 145, 144, 175, 174, 113, 112, 143, 142, 173, 172, 111, 110, 141, 140, 171, 170, 109, 108, 139, 138, 169, 168, 107, 106, 137, 136, 167, 166, 105, 104, 135, 134, 165, 164, 103, 102, 133, 132, 163, 162, 101, 100, 131, 130, 161, 160, 99, 98, 129, 128, 159, 158, 97, 96, 127, 126, 157, 156, 95, 94, 125, 124, 155, 154, 93, 92, 123, 122, 153, 152, 91, 90, 121, 120, 151, 150, 181, 180, 211, 210, 241, 240, 183, 182, 213, 212, 243, 242, 185, 184, 215, 214, 245, 244, 187, 186, 217, 216, 247, 246, 189, 188, 219, 218, 249, 248, 191, 190, 221, 220, 251, 250, 193, 192, 223, 222, 253, 252, 195, 194, 225, 224, 255, 254, 197, 196, 227, 226, 257, 256, 199, 198, 229, 228, 259, 258, 201, 200, 231, 230, 261, 260, 203, 202, 233, 232, 263, 262, 205, 204, 235, 234, 265, 264, 207, 206, 237, 236, 267, 266, 297, 296, 327, 326, 357, 356, 295, 294, 325, 324, 355, 354, 293, 292, 323, 322, 353, 352, 277, 276, 307, 306, 337, 336, 275, 274, 305, 304, 335, 334, 273, 272, 303, 302, 333, 332, 271, 270, 301, 300, 331, 330, 361, 360, 391, 390, 421, 420, 363, 362, 393, 392, 423, 422, 365, 364, 395, 394, 425, 424, 383, 382, 413, 412, 443, 442, 385, 384, 415, 414, 445, 444, 387, 386, 417, 416, 447, 446, 477, 476, 507, 506, 537, 536, 475, 474, 505, 504, 535, 534, 473, 472, 503, 502, 533, 532, 455, 454, 485, 484, 515, 514, 453, 452, 483, 482, 513, 512, 451, 450, 481, 480, 511, 510, 541, 540, 571, 570, 601, 600, 543, 542, 573, 572, 603, 602, 545, 544, 575, 574, 605, 604, 563, 562, 593, 592, 623, 622, 565, 564, 595, 594, 625, 624, 567, 566, 597, 596, 627, 626, 657, 656, 687, 686, 717, 716, 655, 654, 685, 684, 715, 714, 653, 652, 683, 682, 713, 712, 637, 636, 667, 666, 697, 696, 635, 634, 665, 664, 695, 694, 633, 632, 663, 662, 693, 692, 631, 630, 661, 660, 691, 690, 721, 720, 751, 750, 781, 780, 723, 722, 753, 752, 783, 782, 725, 724, 755, 754, 785, 784, 727, 726, 757, 756, 787, 786, 729, 728, 759, 758, 789, 788, 731, 730, 761, 760, 791, 790, 733, 732, 763, 762, 793, 792, 735, 734, 765, 764, 795, 794, 737, 736, 767, 766, 797, 796, 739, 738, 769, 768, 799, 798, 741, 740, 771, 770, 801, 800, 743, 742, 773, 772, 803, 802, 745, 744, 775, 774, 805, 804, 747, 746, 777, 776, 807, 806, 837, 836, 867, 866, 897, 896, 835, 834, 865, 864, 895, 894, 833, 832, 863, 862, 893, 892, 831, 830, 861, 860, 891, 890, 829, 828, 859, 858, 889, 888, 827, 826, 857, 856, 887, 886, 825, 824, 855, 854, 885, 884, 823, 822, 853, 852, 883, 882, 821, 820, 851, 850, 881, 880, 819, 818, 849, 848, 879, 878, 817, 816, 847, 846, 877, 876, 815, 814, 845, 844, 875, 874, 813, 812, 843, 842, 873, 872, 811, 810, 841, 840, 871, 870, 901, 900, 931, 930, 961, 960, 903, 902, 933, 932, 963, 962, 905, 904, 935, 934, 965, 964, 907, 906, 937, 936, 967, 966, 909, 908, 939, 938, 969, 968, 911, 910, 941, 940, 971, 970, 913, 912, 943, 942, 973, 972, 915, 914, 945, 944, 975, 974, 917, 916, 947, 946, 977, 976, 919, 918, 949, 948, 979, 978, 921, 920, 951, 950, 981, 980, 923, 922, 953, 952, 983, 982, 925, 924, 955, 954, 985, 984, 927, 926, 957, 956, 987, 986, 58, 89, 88, 118, 149, 148, 178, 209, 208, 238, 269, 268, 298, 329, 328, 358, 389, 388, 418, 449, 448, 478, 509, 508, 538, 569, 568, 598, 629, 628, 658, 689, 688, 718, 749, 748, 778, 809, 808, 838, 869, 868, 898, 929, 928, 958, 989, 988]); //#23003
    $_.pixs = $a(864); //#23007
    $_.j = 0; //#23008
    for (var _Jx = 0, _Jw = $_.mods.length - 1; _Jx <= _Jw; _Jx += 1) { //#23015
        $_.i = _Jx; //#23010
        if ($get($_.mods, $_.i) == 1) { //#23014
            $put($_.pixs, $_.j, $get($_.modmap, $_.i)); //#23012
            $_.j = $_.j + 1; //#23013
        } //#23013
    } //#23013
    $k[$j++] = Infinity; //#23016
    $aload($geti($_.pixs, 0, $_.j)); //#23016
    $k[$j++] = 28; //#23016
    $k[$j++] = 29; //#23016
    $k[$j++] = 280; //#23016
    $k[$j++] = 281; //#23016
    $k[$j++] = 311; //#23016
    $k[$j++] = 457; //#23016
    $k[$j++] = 488; //#23016
    $k[$j++] = 500; //#23016
    $k[$j++] = 530; //#23016
    $k[$j++] = 670; //#23016
    $k[$j++] = 700; //#23016
    $k[$j++] = 677; //#23016
    $k[$j++] = 707; //#23016
    $_.pixs = $a(); //#23016
    var _KD = new Map([
        ["ren", 'renmaximatrix'],
        ["pixs", $_.pixs],
        ["borderleft", 1],
        ["borderright", 1],
        ["bordertop", 1],
        ["borderbottom", 1],
        ["opt", $_.options]
    ]); //#23026
    $k[$j++] = _KD; //#23029
    if (!$_.dontdraw) { //#23029
        bwipp_renmaximatrix(); //#23029
    } //#23029
    $_ = $__; //#23033
} //bwipp_maxicode
function bwipp_azteccode() {
    var $__ = $_; //#23064
    $_ = Object.assign({}, $_); //#23064
    $_.dontdraw = false; //#23067
    $_.format = "full"; //#23068
    $_.readerinit = false; //#23069
    $_.layers = -1; //#23070
    $_.eclevel = 23; //#23071
    $_.ecaddchars = 3; //#23072
    $_.raw = false; //#23073
    $_.parse = false; //#23074
    $_.parsefnc = false; //#23075
    $k[$j++] = $_; //#23077
    bwipp_processoptions(); //#23077
    $_.options = $k[--$j]; //#23077
    $_.barcode = $k[--$j]; //#23078
    if ($_.barcode.length == 0) { //#23084
        $k[$j++] = 'bwipp.aztecEmptyData#23083'; //#23083
        $k[$j++] = "The data must not be empty"; //#23083
        bwipp_raiseerror(); //#23083
    } //#23083
    if (($_.eclevel < 5) || ($_.eclevel > 95)) { //#23088
        $k[$j++] = 'bwipp.aztecInvalidEClevel#23087'; //#23087
        $k[$j++] = "The EC percentage must be from 5 to 95"; //#23087
        bwipp_raiseerror(); //#23087
    } //#23087
    if ($_.ecaddchars < 3) { //#23092
        $k[$j++] = 'bwipp.aztecInvalidECaddChars#23091'; //#23091
        $k[$j++] = "The number of additional EC codewords must be 3 or more"; //#23091
        bwipp_raiseerror(); //#23091
    } //#23091
    if ($ne($_.format, "full") && ($ne($_.format, "compact") && $ne($_.format, "rune"))) { //#23096
        $k[$j++] = 'bwipp.aztecInvalidFormat#23095'; //#23095
        $k[$j++] = "The format must be either full, compact or rune"; //#23095
        bwipp_raiseerror(); //#23095
    } //#23095
    if ($eq($_.format, "full")) { //#23105
        if ($_.readerinit && (($_.layers < 1) || ($_.layers > 22))) { //#23101
            $k[$j++] = 'bwipp.aztecFullInitInvalidLayers#23100'; //#23100
            $k[$j++] = "Full-range symbols for reader programming must specify from 1 to 22 layers"; //#23100
            bwipp_raiseerror(); //#23100
        } //#23100
        if (($_.layers != -1) && (($_.layers < 1) || ($_.layers > 32))) { //#23104
            $k[$j++] = 'bwipp.aztecFullInvalidLayers#23103'; //#23103
            $k[$j++] = "Layers for full-range symbols must be from 1 to 32"; //#23103
            bwipp_raiseerror(); //#23103
        } //#23103
    } //#23103
    if ($eq($_.format, "compact")) { //#23117
        if ($_.readerinit) { //#23113
            if (($_.layers != -1) && ($_.layers != 1)) { //#23111
                $k[$j++] = 'bwipp.aztecCompactInitInvalidLayers#23110'; //#23110
                $k[$j++] = "Compact symbols for reader programming must have 1 layer"; //#23110
                bwipp_raiseerror(); //#23110
            } //#23110
            $_.layers = 1; //#23112
        } //#23112
        if (($_.layers != -1) && (($_.layers < 1) || ($_.layers > 4))) { //#23116
            $k[$j++] = 'bwipp.aztecCompactInvalidLayers#23115'; //#23115
            $k[$j++] = "Layers for compact symbols must be from 1 to 4"; //#23115
            bwipp_raiseerror(); //#23115
        } //#23115
    } //#23115
    if ($eq($_.format, "rune")) { //#23137
        if ($_.layers != -1) { //#23122
            $k[$j++] = 'bwipp.aztecRuneInvalidLayers#23121'; //#23121
            $k[$j++] = "It is not valid to specify layers for runes"; //#23121
            bwipp_raiseerror(); //#23121
        } //#23121
        if ($_.readerinit) { //#23125
            $k[$j++] = 'bwipp.aztecRuneReaderInit#23124'; //#23124
            $k[$j++] = "Reader initialisation is not compactible with Aztec Runes"; //#23124
            bwipp_raiseerror(); //#23124
        } //#23124
        if ($_.barcode.length == 0) { //#23128
            $k[$j++] = 'bwipp.aztecRuneNotNumeric#23127'; //#23127
            $k[$j++] = "Aztec runes must be numeric"; //#23127
            bwipp_raiseerror(); //#23127
        } //#23127
        $forall($_.barcode, function() { //#23133
            var _S = $k[--$j]; //#23130
            if ((_S < 48) || (_S > 57)) { //#23132
                $k[$j++] = 'bwipp.aztecRuneNotNumeric#23131'; //#23131
                $k[$j++] = "Aztec runes must be numeric"; //#23131
                bwipp_raiseerror(); //#23131
            } //#23131
        }); //#23131
        var _U = $cvi($_.barcode); //#23134
        if ((_U < 0) || (_U > 255)) { //#23136
            $k[$j++] = 'bwipp.aztecRuneInvalid#23135'; //#23135
            $k[$j++] = "Aztec runes must be 0 to 255"; //#23135
            bwipp_raiseerror(); //#23135
        } //#23135
    } //#23135
    $_.fn1 = -1; //#23140
    var _Y = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["eci", true],
        ["FNC1", $_.fn1]
    ]); //#23145
    $_.fncvals = _Y; //#23146
    $k[$j++] = 'msg'; //#23147
    $k[$j++] = $_.barcode; //#23147
    $k[$j++] = $_.fncvals; //#23147
    bwipp_parseinput(); //#23147
    var _b = $k[--$j]; //#23147
    $_[$k[--$j]] = _b; //#23147
    $_.msglen = $_.msg.length; //#23148
    $_.U = 0; //#23152
    $_.L = 1; //#23152
    $_.M = 2; //#23152
    $_.P = 3; //#23152
    $_.D = 4; //#23152
    $_.B = 5; //#23152
    $_.lu = -2; //#23155
    $_.ll = -3; //#23155
    $_.lm = -4; //#23155
    $_.lp = -5; //#23156
    $_.ld = -6; //#23156
    $_.su = -7; //#23156
    $_.sp = -8; //#23157
    $_.sb = -9; //#23157
    $_.fl = -10; //#23157
    $_.p2 = -11; //#23158
    $_.p3 = -12; //#23158
    $_.p4 = -13; //#23158
    $_.p5 = -14; //#23158
    $_.charmaps = $a([$a([$_.sp, $_.sp, $_.sp, $_.fl, $_.sp]), $a([32, 32, 32, 13, 32]), $a(["A", "a", 1, $_.p2, "0"]), $a(["B", "b", 2, $_.p3, "1"]), $a(["C", "c", 3, $_.p4, "2"]), $a(["D", "d", 4, $_.p5, "3"]), $a(["E", "e", 5, "!", "4"]), $a(["F", "f", 6, "\"", "5"]), $a(["G", "g", 7, "#", "6"]), $a(["H", "h", 8, "$", "7"]), $a(["I", "i", 9, "%", "8"]), $a(["J", "j", 10, "&", "9"]), $a(["K", "k", 11, "'", ","]), $a(["L", "l", 12, 40, "."]), $a(["M", "m", 13, 41, $_.lu]), $a(["N", "n", 27, "*", $_.su]), $a(["O", "o", 28, "+", -99]), $a(["P", "p", 29, ",", -99]), $a(["Q", "q", 30, "-", -99]), $a(["R", "r", 31, ".", -99]), $a(["S", "s", "@", "/", -99]), $a(["T", "t", 92, ":", -99]), $a(["U", "u", "^", ";", -99]), $a(["V", "v", "_", "<", -99]), $a(["W", "w", "`", "=", -99]), $a(["X", "x", "|", ">", -99]), $a(["Y", "y", "~", "?", -99]), $a(["Z", "z", 127, "[", -99]), $a([$_.ll, $_.su, $_.ll, "]", -99]), $a([$_.lm, $_.lm, $_.lu, "{", -99]), $a([$_.ld, $_.ld, $_.lp, "}", -99]), $a([$_.sb, $_.sb, $_.sb, $_.lu, -99])]); //#23195
    $_.charvals = $a([new Map, new Map, new Map, new Map, new Map]); //#23198
    for (var _1c = 0, _1b = $_.charmaps.length - 1; _1c <= _1b; _1c += 1) { //#23207
        $_.i = _1c; //#23200
        $_.encs = $get($_.charmaps, $_.i); //#23201
        for (var _1g = 0; _1g <= 4; _1g += 1) { //#23206
            $_.j = _1g; //#23203
            var _1j = $get($_.encs, $_.j); //#23204
            $k[$j++] = _1j; //#23204
            if ($eq($type(_1j), 'stringtype')) { //#23204
                var _1m = $get($k[--$j], 0); //#23204
                $k[$j++] = _1m; //#23204
            } //#23204
            $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#23205
        } //#23205
    } //#23205
    var _1w = new Map([
        ["\x0d\x0a", $_.p2],
        [". ", $_.p3],
        [", ", $_.p4],
        [": ", $_.p5]
    ]); //#23214
    $_.pcomp = _1w; //#23215
    $_.e = 1000000; //#23217
    $_.latlen = $a([$a([0, 5, 5, 10, 5, 10]), $a([9, 0, 5, 10, 5, 10]), $a([5, 5, 0, 5, 10, 10]), $a([5, 10, 10, 0, 10, 15]), $a([4, 9, 9, 14, 0, 14]), $a([0, 0, 0, 0, 0, 0])]); //#23227
    $_.latseq = $a([$a([$a([]), $a([$_.ll]), $a([$_.lm]), $a([$_.lm, $_.lp]), $a([$_.ld]), $a([$_.sb])]), $a([$a([$_.ld, $_.lu]), $a([]), $a([$_.lm]), $a([$_.lm, $_.lp]), $a([$_.ld]), $a([$_.sb])]), $a([$a([$_.lu]), $a([$_.ll]), $a([]), $a([$_.lp]), $a([$_.lu, $_.ld]), $a([$_.sb])]), $a([$a([$_.lu]), $a([$_.lu, $_.ll]), $a([$_.lu, $_.lm]), $a([]), $a([$_.lu, $_.ld]), $a([$_.lu, $_.sb])]), $a([$a([$_.lu]), $a([$_.lu, $_.ll]), $a([$_.lu, $_.lm]), $a([$_.lu, $_.lm, $_.lp]), $a([]), $a([$_.lu, $_.sb])]), $a([$a([$_.lu]), $a([$_.ll]), $a([$_.lm]), $a([]), $a([]), $a([])])]); //#23237
    $_.shftlen = $a([$a([$_.e, $_.e, $_.e, 5, $_.e]), $a([5, $_.e, $_.e, 5, $_.e]), $a([$_.e, $_.e, $_.e, 5, $_.e]), $a([$_.e, $_.e, $_.e, $_.e, $_.e]), $a([4, $_.e, $_.e, 4, $_.e])]); //#23246
    $_.msgbits = ""; //#23251
    if ($ne($_.format, "rune") && $_.raw) { //#23252
        $_.msgbits = $_.barcode; //#23252
    } //#23252
    if ($ne($_.format, "rune") && (!$_.raw)) { //#23548
        $_.charsize = function() {
            var _3v = $k[$j - 1]; //#23256
            if (_3v >= 0) { //#23265
                $j--; //#23258
                var _3y = $get($a([5, 5, 5, 5, 4, 8]), $k[--$j]); //#23258
                $k[$j++] = _3y; //#23258
            } else { //#23265
                var _3z = $k[--$j]; //#23260
                $k[$j - 1] = _3z; //#23260
                var _41 = $k[$j - 1]; //#23261
                if (_41 == $_.fn1) { //#23265
                    $k[$j - 1] = 8; //#23262
                } else { //#23265
                    var _44 = (-$k[--$j]) - 1000000; //#23264
                    $k[$j++] = _44; //#23264
                    if (_44 == 0) { //#23264
                        $k[$j - 1] = 1; //#23264
                    } //#23264
                    var _45 = $k[--$j]; //#23265
                    $k[$j++] = (((~~($log(_45) / $log(10))) + 1) * 4) + 8; //#23265
                } //#23265
            } //#23265
        }; //#23265
        $_.curlen = $a([0, $_.e, $_.e, $_.e, $_.e, $_.e]); //#23271
        $_.curseq = $a([$a([]), $a([]), $a([]), $a([]), $a([]), $a([])]); //#23272
        $_.backto = $_.U; //#23274
        $_.lastchar = ""; //#23275
        $forall($_.msg, function() { //#23431
            $_.char = $k[--$j]; //#23280
            for (;;) { //#23306
                $_.imp = false; //#23284
                var _4S = $a([$_.U, $_.L, $_.M, $_.P, $_.D, $_.B]); //#23285
                for (var _4T = 0, _4U = _4S.length; _4T < _4U; _4T++) { //#23304
                    $_.x = $get(_4S, _4T); //#23286
                    var _4c = $a([$_.U, $_.L, $_.M, $_.P, $_.D, $_.B]); //#23287
                    for (var _4d = 0, _4e = _4c.length; _4d < _4e; _4d++) { //#23303
                        $_.y = $get(_4c, _4d); //#23288
                        if (($_.x != $_.B) || ($_.y == $_.backto)) { //#23302
                            $_.cost = $f($get($_.curlen, $_.x) + $get($get($_.latlen, $_.x), $_.y)); //#23290
                            if ($_.cost < $get($_.curlen, $_.y)) { //#23301
                                $put($_.curlen, $_.y, $_.cost); //#23292
                                $k[$j++] = $_.curseq; //#23295
                                $k[$j++] = $_.y; //#23295
                                $k[$j++] = Infinity; //#23293
                                $aload($get($_.curseq, $_.x)); //#23294
                                $aload($get($get($_.latseq, $_.x), $_.y)); //#23295
                                var _59 = $a(); //#23295
                                var _5A = $k[--$j]; //#23296
                                $put($k[--$j], _5A, _59); //#23296
                                if ($_.y == $_.B) { //#23299
                                    $k[$j++] = 'backto'; //#23298
                                    if (($_.x == $_.P) || ($_.x == $_.D)) { //#23298
                                        $k[$j++] = $_.U; //#23298
                                    } else { //#23298
                                        $k[$j++] = $_.x; //#23298
                                    } //#23298
                                    var _5K = $k[--$j]; //#23298
                                    $_[$k[--$j]] = _5K; //#23298
                                } //#23298
                                $_.imp = true; //#23300
                            } //#23300
                        } //#23300
                    } //#23300
                } //#23300
                if (!$_.imp) { //#23305
                    break; //#23305
                } //#23305
            } //#23305
            $_.nxtlen = $a([$_.e, $_.e, $_.e, $_.e, $_.e, $_.e]); //#23309
            $_.nxtseq = $a(6); //#23310
            var _5b = $a([$_.U, $_.L, $_.M, $_.P, $_.D, $_.B]); //#23312
            for (var _5c = 0, _5d = _5b.length; _5c < _5d; _5c++) { //#23351
                $_.x = $get(_5b, _5c); //#23313
                for (;;) { //#23349
                    if ($_.char >= 0) { //#23321
                        if ($_.x != $_.B) { //#23319
                            var _5m = $get($get($_.charvals, $_.x), $_.char) !== undefined; //#23319
                            if (!_5m) { //#23319
                                break; //#23319
                            } //#23319
                        } //#23319
                    } else { //#23321
                        if ($_.x != $_.P) { //#23321
                            break; //#23321
                        } //#23321
                    } //#23321
                    $k[$j++] = 'cost'; //#23325
                    $k[$j++] = $get($_.curlen, $_.x); //#23325
                    $k[$j++] = $_.x; //#23325
                    $k[$j++] = $_.char; //#23325
                    $_.charsize(); //#23325
                    var _5u = $k[--$j]; //#23325
                    var _5v = $k[--$j]; //#23325
                    $_[$k[--$j]] = $f(_5v + _5u); //#23325
                    if ($_.cost < $get($_.nxtlen, $_.x)) { //#23329
                        $put($_.nxtlen, $_.x, $_.cost); //#23327
                        $k[$j++] = $_.nxtseq; //#23328
                        $k[$j++] = $_.x; //#23328
                        $k[$j++] = Infinity; //#23328
                        $aload($get($_.curseq, $_.x)); //#23328
                        $k[$j++] = $_.char; //#23328
                        var _6A = $a(); //#23328
                        var _6B = $k[--$j]; //#23328
                        $put($k[--$j], _6B, _6A); //#23328
                    } //#23328
                    if ($_.x == $_.B) { //#23332
                        break; //#23332
                    } //#23332
                    var _6K = $a([$_.U, $_.L, $_.M, $_.P, $_.D]); //#23333
                    for (var _6L = 0, _6M = _6K.length; _6L < _6M; _6L++) { //#23346
                        $_.y = $get(_6K, _6L); //#23334
                        if ($ne($_.x, $_.y)) { //#23345
                            $k[$j++] = 'cost'; //#23336
                            $k[$j++] = $f($get($_.curlen, $_.y) + $get($get($_.shftlen, $_.y), $_.x)); //#23336
                            $k[$j++] = $_.x; //#23336
                            $k[$j++] = $_.char; //#23336
                            $_.charsize(); //#23336
                            var _6a = $k[--$j]; //#23336
                            var _6b = $k[--$j]; //#23336
                            $_[$k[--$j]] = $f(_6b + _6a); //#23336
                            if ($_.cost < $get($_.nxtlen, $_.y)) { //#23344
                                $put($_.nxtlen, $_.y, $_.cost); //#23338
                                $k[$j++] = $_.nxtseq; //#23342
                                $k[$j++] = $_.y; //#23342
                                $k[$j++] = Infinity; //#23339
                                $aload($get($_.curseq, $_.y)); //#23340
                                var _6r = ($_.x == $_.U) ? $_.su : $_.sp; //#23341
                                $k[$j++] = _6r; //#23342
                                $k[$j++] = $_.char; //#23342
                                var _6t = $a(); //#23342
                                var _6u = $k[--$j]; //#23343
                                $put($k[--$j], _6u, _6t); //#23343
                            } //#23343
                        } //#23343
                    } //#23343
                    break; //#23348
                } //#23348
            } //#23348
            if (($_.lastchar.length != 0) && ($_.char >= 0)) { //#23416
                var _6y = $s(2); //#23355
                $put(_6y, 0, $_.lastchar); //#23355
                $put(_6y, 1, $_.char); //#23355
                $_.pchars = _6y; //#23355
                var _73 = $get($_.pcomp, $_.pchars) !== undefined; //#23356
                if (_73) { //#23415
                    var _79 = $a([$_.U, $_.L, $_.M, $_.P, $_.D]); //#23357
                    for (var _7A = 0, _7B = _79.length; _7A < _7B; _7A++) { //#23414
                        $_.i = $get(_79, _7A); //#23358
                        $_.inP = true; //#23359
                        if ($_.i == $_.M) { //#23364
                            if ($_.lastchar == 13) { //#23361
                                $_.inP = false; //#23361
                            } //#23361
                        } else { //#23364
                            if ($_.i == $_.D) { //#23365
                                if (($_.lastchar == 44) || ($_.lastchar == 46)) { //#23364
                                    $_.inP = false; //#23364
                                } //#23364
                            } //#23364
                        } //#23364
                        if ($_.inP && $lt($get($_.curlen, $_.i), $get($_.nxtlen, $_.i))) { //#23413
                            $_.curseqi = $get($_.curseq, $_.i); //#23368
                            $_.lastld = false; //#23369
                            $_.lastsp = false; //#23370
                            $_.lastidx = -1; //#23371
                            for (var _7V = $_.curseqi.length - 1; _7V >= 0; _7V -= 1) { //#23396
                                $_.idx = _7V; //#23373
                                $_.ch = $get($_.curseqi, $_.idx); //#23374
                                if ($_.lastidx == -1) { //#23393
                                    if ($eq($_.ch, $_.lastchar)) { //#23381
                                        $_.lastidx = $_.idx; //#23377
                                        if ($_.idx > 0) { //#23380
                                            if ($get($_.curseqi, $_.idx - 1) == $_.sp) { //#23379
                                                $_.lastsp = true; //#23379
                                            } //#23379
                                        } //#23379
                                    } //#23379
                                } else { //#23393
                                    if ($_.ch == $_.sb) { //#23386
                                        $_.lastidx = -1; //#23384
                                        break; //#23385
                                    } //#23385
                                    if (($_.ch < 0) && ($_.ch >= $_.ld)) { //#23394
                                        if ($_.i == $_.P) { //#23391
                                            if ($_.ch == $_.ld) { //#23389
                                                $_.lastld = true; //#23389
                                            } //#23389
                                        } else { //#23391
                                            if ($_.ch != $_.lp) { //#23391
                                                $_.inP = $_.lastsp; //#23391
                                            } //#23391
                                        } //#23391
                                        break; //#23393
                                    } //#23393
                                } //#23393
                            } //#23393
                            if ($_.inP && ($_.lastidx >= 0)) { //#23412
                                $put($_.nxtlen, $_.i, $get($_.curlen, $_.i)); //#23398
                                if ($_.lastidx < ($_.curseqi.length - 1)) { //#23410
                                    if ($_.i == $_.P) { //#23407
                                        if ($_.lastld) { //#23401
                                            $put($_.nxtlen, $_.i, $get($_.nxtlen, $_.i) + 1); //#23401
                                        } //#23401
                                        $k[$j++] = $_.nxtseq; //#23403
                                        $k[$j++] = $_.i; //#23403
                                        $k[$j++] = Infinity; //#23403
                                        $aload($_.curseqi); //#23403
                                        $r($_.curseqi.length - $_.lastidx, -1); //#23403
                                        $k[$j - 1] = $get($_.pcomp, $_.pchars); //#23403
                                        var _8J = $a(); //#23403
                                        var _8K = $k[--$j]; //#23403
                                        $put($k[--$j], _8K, _8J); //#23403
                                    } else { //#23407
                                        $k[$j++] = $_.nxtseq; //#23406
                                        $k[$j++] = $_.i; //#23406
                                        $k[$j++] = Infinity; //#23406
                                        $aload($_.curseqi); //#23406
                                        var _8P = $a(); //#23406
                                        var _8Q = $k[--$j]; //#23406
                                        $put($k[--$j], _8Q, _8P); //#23406
                                        $put($get($_.nxtseq, $_.i), $_.lastidx, $get($_.pcomp, $_.pchars)); //#23407
                                    } //#23407
                                } else { //#23410
                                    $k[$j++] = $_.nxtseq; //#23410
                                    $k[$j++] = $_.i; //#23410
                                    $k[$j++] = Infinity; //#23410
                                    $aload($_.curseqi); //#23410
                                    $k[$j - 1] = $get($_.pcomp, $_.pchars); //#23410
                                    var _8f = $a(); //#23410
                                    var _8g = $k[--$j]; //#23410
                                    $put($k[--$j], _8g, _8f); //#23410
                                } //#23410
                            } //#23410
                        } //#23410
                    } //#23410
                } //#23410
            } //#23410
            if ($ne($get($_.nxtseq, $_.B), null)) { //#23425
                $_.numbytes = 0; //#23420
                $forall($get($_.nxtseq, $_.B), function() { //#23423
                    if ($k[--$j] == $_.sb) { //#23422
                        $k[$j++] = 0; //#23422
                    } else { //#23422
                        $k[$j++] = $_.numbytes + 1; //#23422
                    } //#23422
                    $_.numbytes = $k[--$j]; //#23422
                }); //#23422
                if ($_.numbytes == 32) { //#23424
                    $put($_.nxtlen, $_.B, $get($_.nxtlen, $_.B) + 11); //#23424
                } //#23424
            } //#23424
            $_.curlen = $_.nxtlen; //#23427
            $_.curseq = $_.nxtseq; //#23428
            $k[$j++] = 'lastchar'; //#23429
            if ($_.char >= 0) { //#23429
                $k[$j++] = $_.char; //#23429
            } else { //#23429
                $k[$j++] = ""; //#23429
            } //#23429
            var _92 = $k[--$j]; //#23429
            $_[$k[--$j]] = _92; //#23429
        }); //#23429
        $_.minseq = $_.e; //#23434
        var _9B = $a([$_.U, $_.L, $_.M, $_.P, $_.D, $_.B]); //#23435
        for (var _9C = 0, _9D = _9B.length; _9C < _9D; _9C++) { //#23441
            $_.i = $get(_9B, _9C); //#23436
            if ($get($_.curlen, $_.i) < $_.minseq) { //#23440
                $_.minseq = $get($_.curlen, $_.i); //#23438
                $_.seq = $get($_.curseq, $_.i); //#23439
            } //#23439
        } //#23439
        $_.tobin = function() {
            var _9Q = $s($k[--$j]); //#23445
            $k[$j++] = _9Q; //#23445
            for (var _9S = 0, _9R = _9Q.length - 1; _9S <= _9R; _9S += 1) { //#23445
                var _9T = $k[$j - 1]; //#23445
                $put(_9T, _9S, 48); //#23445
            } //#23445
            var _9U = $k[$j - 1]; //#23446
            $k[$j++] = _9U; //#23446
            var _9V = $k[$j - 3]; //#23446
            var _9W = $k[$j - 1]; //#23446
            $k[$j - 3] = $k[$j - 2]; //#23446
            $j -= 2; //#23446
            var _9Y = $cvrs($s(_9W.length), _9V, 2); //#23446
            $puti(_9W, _9W.length - _9Y.length, _9Y); //#23446
        }; //#23446
        $_.encu = function() {
            var _9d = $get($get($_.charvals, $_.U), $k[--$j]); //#23449
            $k[$j++] = _9d; //#23449
            $k[$j++] = 5; //#23449
            $_.tobin(); //#23449
        }; //#23449
        $_.encl = function() {
            var _9i = $get($get($_.charvals, $_.L), $k[--$j]); //#23450
            $k[$j++] = _9i; //#23450
            $k[$j++] = 5; //#23450
            $_.tobin(); //#23450
        }; //#23450
        $_.encm = function() {
            var _9n = $get($get($_.charvals, $_.M), $k[--$j]); //#23451
            $k[$j++] = _9n; //#23451
            $k[$j++] = 5; //#23451
            $_.tobin(); //#23451
        }; //#23451
        $_.encd = function() {
            var _9s = $get($get($_.charvals, $_.D), $k[--$j]); //#23452
            $k[$j++] = _9s; //#23452
            $k[$j++] = 4; //#23452
            $_.tobin(); //#23452
        }; //#23452
        $_.encp = function() {
            var _9t = $k[$j - 1]; //#23455
            if (_9t == $_.fn1) { //#23471
                $k[$j - 1] = "00000000"; //#23456
            } else { //#23471
                var _9v = $k[$j - 1]; //#23458
                if (_9v <= -1000000) { //#23471
                    var _9x = (-$k[--$j]) - 1000000; //#23459
                    $k[$j++] = _9x; //#23459
                    $k[$j++] = _9x; //#23459
                    if (_9x == 0) { //#23459
                        $k[$j - 1] = 1; //#23459
                    } //#23459
                    var _9z = ~~($log($k[--$j]) / $log(10)); //#23461
                    var _A0 = $s(((_9z + 1) * 4) + 8); //#23461
                    $puti(_A0, 0, "00000"); //#23462
                    $k[$j++] = _9z; //#23463
                    $k[$j++] = _A0; //#23463
                    $k[$j++] = _A0; //#23463
                    $k[$j++] = _9z + 1; //#23463
                    $k[$j++] = 3; //#23463
                    $_.tobin(); //#23463
                    var _A1 = $k[--$j]; //#23463
                    $puti($k[--$j], 5, _A1); //#23463
                    $r(3, 1); //#23464
                    $k[$j++] = -1; //#23468
                    $k[$j++] = 0; //#23468
                    if ($j < 3) throw "--stack-underflow--"; //#23468
                    $j -= 3; //#23468
                    for (var _A6 = $k[$j], _A7 = $k[$j + 1], _A5 = $k[$j + 2]; _A7 < 0 ? _A6 >= _A5 : _A6 <= _A5; _A6 += _A7) { //#23468
                        var _A8 = $k[--$j]; //#23465
                        var _A9 = $k[$j - 1]; //#23466
                        $k[$j++] = ~~(_A8 / 10); //#23467
                        $k[$j++] = _A9; //#23467
                        $k[$j++] = (_A6 * 4) + 8; //#23467
                        $k[$j++] = (_A8 % 10) + 2; //#23467
                        $k[$j++] = 4; //#23467
                        $_.tobin(); //#23467
                        var _AA = $k[--$j]; //#23467
                        var _AB = $k[--$j]; //#23467
                        $puti($k[--$j], _AB, _AA); //#23467
                    } //#23467
                    $j--; //#23469
                } else { //#23471
                    var _AH = $get($get($_.charvals, $_.P), $k[--$j]); //#23471
                    $k[$j++] = _AH; //#23471
                    $k[$j++] = 5; //#23471
                    $_.tobin(); //#23471
                } //#23471
            } //#23471
        }; //#23471
        $_.encfuncs = $a(['encu', 'encl', 'encm', 'encp', 'encd']); //#23475
        $_.addtomsgbits = function() {
            $_.v = $k[--$j]; //#23478
            $puti($_.msgbits, $_.j, $_.v); //#23479
            $_.j = $_.j + $_.v.length; //#23480
        }; //#23480
        $_.state = $_.U; //#23484
        $_.msgbits = $s($_.minseq); //#23485
        $_.i = 0; //#23486
        $_.j = 0; //#23486
        for (;;) { //#23545
            if ($_.i >= $_.seq.length) { //#23487
                break; //#23487
            } //#23487
            if ($_.state != $_.B) { //#23540
                $_.char = $get($_.seq, $_.i); //#23491
                $k[$j++] = $_.char; //#23494
                if ($_[$get($_.encfuncs, $_.state)]() === true) {
                    break;
                } //#23494
                $_.addtomsgbits(); //#23494
                $_.i = $_.i + 1; //#23495
                if (($_.char == $_.su) || ($_.char == $_.sp)) { //#23501
                    $k[$j++] = $get($_.seq, $_.i); //#23499
                    if ($_.char == $_.su) { //#23499
                        $_.encu(); //#23499
                    } else { //#23499
                        $_.encp(); //#23499
                    } //#23499
                    $_.addtomsgbits(); //#23499
                    $_.i = $_.i + 1; //#23500
                } //#23500
                if ($_.char == $_.lu) { //#23504
                    $_.state = $_.U; //#23504
                } //#23504
                if ($_.char == $_.ll) { //#23505
                    $_.state = $_.L; //#23505
                } //#23505
                if ($_.char == $_.lm) { //#23506
                    $_.state = $_.M; //#23506
                } //#23506
                if ($_.char == $_.lp) { //#23507
                    $_.state = $_.P; //#23507
                } //#23507
                if ($_.char == $_.ld) { //#23508
                    $_.state = $_.D; //#23508
                } //#23508
                if ($_.char == $_.sb) { //#23509
                    $_.state = $_.B; //#23509
                } //#23509
            } else { //#23540
                $_.numbytes = 0; //#23514
                for (;;) { //#23518
                    if (($_.i + $_.numbytes) >= $_.seq.length) { //#23515
                        break; //#23515
                    } //#23515
                    if ($get($_.seq, $_.i + $_.numbytes) < 0) { //#23516
                        break; //#23516
                    } //#23516
                    $_.numbytes = $_.numbytes + 1; //#23517
                } //#23517
                if ($_.numbytes <= 31) { //#23525
                    $k[$j++] = $_.numbytes; //#23522
                    $k[$j++] = 5; //#23522
                    $_.tobin(); //#23522
                    $_.addtomsgbits(); //#23522
                } else { //#23525
                    $k[$j++] = 0; //#23524
                    $k[$j++] = 5; //#23524
                    $_.tobin(); //#23524
                    $_.addtomsgbits(); //#23524
                    $k[$j++] = $_.numbytes - 31; //#23525
                    $k[$j++] = 11; //#23525
                    $_.tobin(); //#23525
                    $_.addtomsgbits(); //#23525
                } //#23525
                for (var _BJ = 0, _BK = $_.numbytes; _BJ < _BK; _BJ++) { //#23532
                    $k[$j++] = $get($_.seq, $_.i); //#23530
                    $k[$j++] = 8; //#23530
                    $_.tobin(); //#23530
                    $_.addtomsgbits(); //#23530
                    $_.i = $_.i + 1; //#23531
                } //#23531
                if ($_.i < $_.seq.length) { //#23541
                    $_.char = $get($_.seq, $_.i); //#23536
                    $_.i = $_.i + 1; //#23537
                    if ($_.char == $_.lu) { //#23538
                        $_.state = $_.U; //#23538
                    } //#23538
                    if ($_.char == $_.ll) { //#23539
                        $_.state = $_.L; //#23539
                    } //#23539
                    if ($_.char == $_.lm) { //#23540
                        $_.state = $_.M; //#23540
                    } //#23540
                } //#23540
            } //#23540
        } //#23540
        $_.msgbits = $geti($_.msgbits, 0, $_.j); //#23546
    } //#23546
    $_.metrics = $a([$a(["rune", 0, 0, 0, 6]), $a(["compact", 1, 1, 17, 6]), $a(["full", 1, 1, 21, 6]), $a(["compact", 2, 0, 40, 6]), $a(["full", 2, 1, 48, 6]), $a(["compact", 3, 0, 51, 8]), $a(["full", 3, 1, 60, 8]), $a(["compact", 4, 0, 76, 8]), $a(["full", 4, 1, 88, 8]), $a(["full", 5, 1, 120, 8]), $a(["full", 6, 1, 156, 8]), $a(["full", 7, 1, 196, 8]), $a(["full", 8, 1, 240, 8]), $a(["full", 9, 1, 230, 10]), $a(["full", 10, 1, 272, 10]), $a(["full", 11, 1, 316, 10]), $a(["full", 12, 1, 364, 10]), $a(["full", 13, 1, 416, 10]), $a(["full", 14, 1, 470, 10]), $a(["full", 15, 1, 528, 10]), $a(["full", 16, 1, 588, 10]), $a(["full", 17, 1, 652, 10]), $a(["full", 18, 1, 720, 10]), $a(["full", 19, 1, 790, 10]), $a(["full", 20, 1, 864, 10]), $a(["full", 21, 1, 940, 10]), $a(["full", 22, 1, 1020, 10]), $a(["full", 23, 0, 920, 12]), $a(["full", 24, 0, 992, 12]), $a(["full", 25, 0, 1066, 12]), $a(["full", 26, 0, 1144, 12]), $a(["full", 27, 0, 1224, 12]), $a(["full", 28, 0, 1306, 12]), $a(["full", 29, 0, 1392, 12]), $a(["full", 30, 0, 1480, 12]), $a(["full", 31, 0, 1570, 12]), $a(["full", 32, 0, 1664, 12])]); //#23566
    var _CK = $_.metrics; //#23569
    for (var _CL = 0, _CM = _CK.length; _CL < _CM; _CL++) { //#23585
        $_.m = $get(_CK, _CL); //#23570
        $_.frmt = $get($_.m, 0); //#23571
        $_.mlyr = $get($_.m, 1); //#23572
        $_.icap = $get($_.m, 2); //#23573
        $_.ncws = $get($_.m, 3); //#23574
        $_.bpcw = $get($_.m, 4); //#23575
        $_.numecw = ~~($ceil($f((($_.ncws * $_.eclevel) / 100) + $_.ecaddchars))); //#23576
        if ($_.msgbits.length == 0) { //#23577
            $_.numecw = 0; //#23577
        } //#23577
        $_.numdcw = $f($_.ncws - $_.numecw); //#23578
        $_.okay = true; //#23579
        if ($ne($_.format, $_.frmt)) { //#23580
            $_.okay = false; //#23580
        } //#23580
        if ($_.readerinit && ($_.icap != 1)) { //#23581
            $_.okay = false; //#23581
        } //#23581
        if (($_.layers != -1) && ($_.layers != $_.mlyr)) { //#23582
            $_.okay = false; //#23582
        } //#23582
        if ((~~$ceil($_.msgbits.length / $_.bpcw)) > $_.numdcw) { //#23583
            $_.okay = false; //#23583
        } //#23583
        if ($_.okay) { //#23584
            break; //#23584
        } //#23584
    } //#23584
    if (!$_.okay) { //#23589
        $k[$j++] = 'bwipp.aztecNoValidSymbol#23588'; //#23588
        $k[$j++] = "Maximum length exceeded"; //#23588
        bwipp_raiseerror(); //#23588
    } //#23588
    $_.layers = $_.mlyr; //#23591
    $_.allzero = function() {
        var _Cr = $k[--$j]; //#23594
        $k[$j++] = $eq(_Cr, $geti("000000000000", 0, _Cr.length)); //#23594
    }; //#23594
    $_.allones = function() {
        var _Ct = $k[--$j]; //#23595
        $k[$j++] = $eq(_Ct, $geti("111111111111", 0, _Ct.length)); //#23595
    }; //#23595
    $_.cws = $a($_.ncws); //#23596
    $_.m = 0; //#23597
    $_.c = 0; //#23597
    for (;;) { //#23624
        if ($_.msgbits.length <= $_.m) { //#23599
            break; //#23599
        } //#23599
        if (($_.msgbits.length - $_.m) >= $_.bpcw) { //#23613
            $_.cwb = $geti($_.msgbits, $_.m, $_.bpcw - 1); //#23601
            $_.cwf = $geti($_.msgbits, $f($_.m + $_.bpcw) - 1, 1); //#23602
            $k[$j++] = $_.cwb; //#23603
            $_.allzero(); //#23603
            if ($k[--$j]) { //#23603
                $_.cwf = "1"; //#23603
                $_.m = $_.m - 1; //#23603
            } //#23603
            $k[$j++] = $_.cwb; //#23604
            $_.allones(); //#23604
            if ($k[--$j]) { //#23604
                $_.cwf = "0"; //#23604
                $_.m = $_.m - 1; //#23604
            } //#23604
            var _DG = $s(12); //#23606
            $puti(_DG, 0, $_.cwb); //#23606
            $puti(_DG, $_.bpcw - 1, $_.cwf); //#23607
            $_.cwb = $geti(_DG, 0, $_.bpcw); //#23609
        } else { //#23613
            $_.cwb = $geti($_.msgbits, $_.m, $_.msgbits.length - $_.m); //#23611
            var _DS = $strcpy($s(12), "111111111111"); //#23612
            $puti(_DS, 0, $_.cwb); //#23612
            $_.cwb = $geti(_DS, 0, $_.bpcw); //#23612
            $k[$j++] = $_.cwb; //#23613
            $_.allones(); //#23613
            if ($k[--$j]) { //#23613
                $puti($_.cwb, $_.cwb.length - 1, "0"); //#23613
            } //#23613
        } //#23613
        $_.cw = 0; //#23616
        for (var _Dc = 0, _Db = $_.bpcw - 1; _Dc <= _Db; _Dc += 1) { //#23620
            $_.i = _Dc; //#23618
            $_.cw = $f($_.cw + ~~$pow(2, $f($_.bpcw - $_.i) - 1) * ($get($_.cwb, $_.i) - 48)); //#23619
        } //#23619
        $put($_.cws, $_.c, $_.cw); //#23621
        $_.m = $f($_.m + $_.bpcw); //#23622
        $_.c = $_.c + 1; //#23623
    } //#23623
    $_.cws = $geti($_.cws, 0, $_.c); //#23625
    var _Dt = $get($_.options, 'debugcws') !== undefined; //#23627
    if (_Dt) { //#23627
        $k[$j++] = 'bwipp.debugcws#23627'; //#23627
        $k[$j++] = $_.cws; //#23627
        bwipp_raiseerror(); //#23627
    } //#23627
    $_.rscodes = function() {
        $_.rspm = $k[--$j]; //#23632
        $_.rsgf = $k[--$j]; //#23633
        $_.rsnc = $k[--$j]; //#23634
        $_.rscws = $k[--$j]; //#23635
        $k[$j++] = Infinity; //#23638
        $k[$j++] = 1; //#23638
        for (var _E0 = 0, _E1 = $_.rsgf - 1; _E0 < _E1; _E0++) { //#23638
            var _E2 = $k[$j - 1]; //#23638
            var _E3 = _E2 * 2; //#23638
            $k[$j++] = _E3; //#23638
            if (_E3 >= $_.rsgf) { //#23638
                var _E6 = $k[--$j]; //#23638
                $k[$j++] = $xo(_E6, $_.rspm); //#23638
            } //#23638
        } //#23638
        $_.rsalog = $a(); //#23638
        $_.rslog = $a($_.rsgf); //#23639
        for (var _EC = 1, _EB = $_.rsgf - 1; _EC <= _EB; _EC += 1) { //#23640
            $put($_.rslog, $get($_.rsalog, _EC), _EC); //#23640
        } //#23640
        $_.rsprod = function() {
            var _EG = $k[$j - 1]; //#23644
            var _EH = $k[$j - 2]; //#23644
            if ((_EG != 0) && (_EH != 0)) { //#23647
                var _EK = $get($_.rslog, $k[--$j]); //#23645
                var _EQ = $get($_.rsalog, $f(_EK + $get($_.rslog, $k[--$j])) % ($_.rsgf - 1)); //#23645
                $k[$j++] = _EQ; //#23645
            } else { //#23647
                $j -= 2; //#23647
                $k[$j++] = 0; //#23647
            } //#23647
        }; //#23647
        $k[$j++] = Infinity; //#23652
        $k[$j++] = 1; //#23652
        for (var _ES = 0, _ET = $_.rsnc; _ES < _ET; _ES++) { //#23652
            $k[$j++] = 0; //#23652
        } //#23652
        $_.coeffs = $a(); //#23652
        for (var _EX = 1, _EW = $_.rsnc; _EX <= _EW; _EX += 1) { //#23661
            $_.i = _EX; //#23654
            $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#23655
            for (var _Ee = $_.i - 1; _Ee >= 1; _Ee -= 1) { //#23659
                $_.j = _Ee; //#23657
                $k[$j++] = $_.coeffs; //#23658
                $k[$j++] = $_.j; //#23658
                $k[$j++] = $get($_.coeffs, $_.j - 1); //#23658
                $k[$j++] = $get($_.coeffs, $_.j); //#23658
                $k[$j++] = $get($_.rsalog, $_.i); //#23658
                $_.rsprod(); //#23658
                var _Eq = $k[--$j]; //#23658
                var _Er = $k[--$j]; //#23658
                var _Es = $k[--$j]; //#23658
                $put($k[--$j], _Es, $xo(_Er, _Eq)); //#23658
            } //#23658
            $k[$j++] = $_.coeffs; //#23660
            $k[$j++] = 0; //#23660
            $k[$j++] = $get($_.coeffs, 0); //#23660
            $k[$j++] = $get($_.rsalog, $_.i); //#23660
            $_.rsprod(); //#23660
            var _F0 = $k[--$j]; //#23660
            var _F1 = $k[--$j]; //#23660
            $put($k[--$j], _F1, _F0); //#23660
        } //#23660
        $_.nd = $_.rscws.length; //#23664
        $k[$j++] = Infinity; //#23665
        $aload($_.rscws); //#23665
        for (var _F6 = 0, _F7 = $_.rsnc; _F6 < _F7; _F6++) { //#23665
            $k[$j++] = 0; //#23665
        } //#23665
        $k[$j++] = 0; //#23665
        $_.rscws = $a(); //#23665
        for (var _FB = 0, _FA = $_.nd - 1; _FB <= _FA; _FB += 1) { //#23672
            $_.k = $xo($get($_.rscws, _FB), $get($_.rscws, $_.nd)); //#23667
            for (var _FJ = 0, _FI = $_.rsnc - 1; _FJ <= _FI; _FJ += 1) { //#23671
                $_.j = _FJ; //#23669
                $k[$j++] = $_.rscws; //#23670
                $k[$j++] = $_.nd + $_.j; //#23670
                $k[$j++] = $get($_.rscws, ($_.nd + $_.j) + 1); //#23670
                $k[$j++] = $_.k; //#23670
                $k[$j++] = $get($_.coeffs, $f($_.rsnc - $_.j) - 1); //#23670
                $_.rsprod(); //#23670
                var _FW = $k[--$j]; //#23670
                var _FX = $k[--$j]; //#23670
                var _FY = $k[--$j]; //#23670
                $put($k[--$j], _FY, $xo(_FX, _FW)); //#23670
            } //#23670
        } //#23670
        $k[$j++] = $geti($_.rscws, 0, $_.rscws.length - 1); //#23675
    }; //#23675
    if ($eq($_.format, "full")) { //#23690
        $_.mode = (($_.layers - 1) << 11) + ($_.cws.length - 1); //#23681
        if ($_.readerinit) { //#23682
            $_.mode = $_.mode | 1024; //#23682
        } //#23682
        $_.mode = $a([($_.mode & 61440) >>> 12, ($_.mode & 3840) >>> 8, ($_.mode & 240) >>> 4, $_.mode & 15]); //#23688
        $k[$j++] = 'mode'; //#23689
        $k[$j++] = $_.mode; //#23689
        $k[$j++] = 6; //#23689
        $k[$j++] = 16; //#23689
        $k[$j++] = 19; //#23689
        $_.rscodes(); //#23689
        var _Fo = $k[--$j]; //#23689
        $_[$k[--$j]] = _Fo; //#23689
    } //#23689
    if ($eq($_.format, "compact")) { //#23699
        $_.mode = (($_.layers - 1) << 6) + ($_.cws.length - 1); //#23692
        if ($_.readerinit) { //#23693
            $_.mode = $_.mode | 32; //#23693
        } //#23693
        $_.mode = $a([($_.mode & 240) >>> 4, $_.mode & 15]); //#23697
        $k[$j++] = 'mode'; //#23698
        $k[$j++] = $_.mode; //#23698
        $k[$j++] = 5; //#23698
        $k[$j++] = 16; //#23698
        $k[$j++] = 19; //#23698
        $_.rscodes(); //#23698
        var _Fz = $k[--$j]; //#23698
        $_[$k[--$j]] = _Fz; //#23698
    } //#23698
    if ($eq($_.format, "rune")) { //#23708
        $_.mode = $cvi($_.barcode); //#23701
        $_.mode = $a([($_.mode & 240) >>> 4, $_.mode & 15]); //#23705
        $k[$j++] = 'mode'; //#23706
        $k[$j++] = $_.mode; //#23706
        $k[$j++] = 5; //#23706
        $k[$j++] = 16; //#23706
        $k[$j++] = 19; //#23706
        $_.rscodes(); //#23706
        var _G7 = $k[--$j]; //#23706
        $_[$k[--$j]] = _G7; //#23706
        $k[$j++] = Infinity; //#23707
        var _G9 = $_.mode; //#23707
        for (var _GA = 0, _GB = _G9.length; _GA < _GB; _GA++) { //#23707
            $k[$j++] = $get(_G9, _GA) ^ 10; //#23707
        } //#23707
        $_.mode = $a(); //#23707
    } //#23707
    $_.modebits = $s($_.mode.length * 4); //#23709
    for (var _GI = 0, _GH = $_.modebits.length - 1; _GI <= _GH; _GI += 1) { //#23710
        $puti($_.modebits, _GI, "0"); //#23710
    } //#23710
    for (var _GM = 0, _GL = $_.mode.length - 1; _GM <= _GL; _GM += 1) { //#23714
        $_.i = _GM; //#23712
        var _GS = $cvrs($s(4), $get($_.mode, $_.i), 2); //#23713
        $puti($_.modebits, (4 - _GS.length) + (4 * $_.i), _GS); //#23713
    } //#23713
    $_.rsparams = $a([$a([]), $a([]), $a([]), $a([]), $a([]), $a([]), $a([64, 67]), $a([]), $a([256, 301]), $a([]), $a([1024, 1033]), $a([]), $a([4096, 4201])]); //#23727
    $k[$j++] = 'cws'; //#23729
    $k[$j++] = $_.cws; //#23729
    $k[$j++] = $f($_.ncws - $_.cws.length); //#23729
    $aload($get($_.rsparams, $_.bpcw)); //#23729
    $_.rscodes(); //#23729
    var _Gp = $k[--$j]; //#23729
    $_[$k[--$j]] = _Gp; //#23729
    if ($eq($_.format, "full")) { //#23733
        $_.databits = $s($f((($_.layers * $_.layers) * 16) + ($_.layers * 112))); //#23731
    } else { //#23733
        $_.databits = $s($f((($_.layers * $_.layers) * 16) + ($_.layers * 88))); //#23733
    } //#23733
    for (var _H2 = 0, _H1 = $_.databits.length - 1; _H2 <= _H1; _H2 += 1) { //#23735
        $puti($_.databits, _H2, "0"); //#23735
    } //#23735
    for (var _H6 = 0, _H5 = $_.ncws - 1; _H6 <= _H5; _H6 += 1) { //#23741
        $_.i = _H6; //#23737
        var _HD = $cvrs($s($_.bpcw), $get($_.cws, $_.i), 2); //#23738
        $puti($_.databits, $f($_.bpcw - _HD.length + $_.bpcw * $_.i + ($_.databits.length - $_.ncws * $_.bpcw)), _HD); //#23740
    } //#23740
    $_.cmv = function() {
        var _HL = $k[--$j]; //#23744
        var _HM = $k[--$j]; //#23744
        $k[$j++] = $f(_HM - _HL * $_.size + $_.mid); //#23744
    }; //#23744
    $_.lmv = function() {
        $_.lbit = $k[--$j]; //#23748
        $_.llyr = $k[--$j]; //#23749
        $_.lwid = $f($_.fw + ($_.llyr * 4)); //#23750
        $_.ldir = ~~((~~($_.lbit / 2)) / $_.lwid); //#23751
        if ($_.ldir == 0) { //#23756
            $k[$j++] = $f(((-(~~(($_.lwid - 1) / 2))) + 1) + ((~~($_.lbit / 2)) % $_.lwid)); //#23755
            $k[$j++] = $f(~~(($_.fw - 1) / 2) + $_.llyr * 2 + $_.lbit % 2); //#23755
            $_.cmv(); //#23755
        } //#23755
        if ($_.ldir == 1) { //#23761
            $k[$j++] = $f(~~($_.fw / 2) + $_.llyr * 2 + $_.lbit % 2); //#23760
            $k[$j++] = $f(((~~(($_.lwid - 1) / 2)) - 1) - ((~~($_.lbit / 2)) % $_.lwid)); //#23760
            $_.cmv(); //#23760
        } //#23760
        if ($_.ldir == 2) { //#23766
            $k[$j++] = -($f(((-(~~($_.lwid / 2))) + 1) + ((~~($_.lbit / 2)) % $_.lwid))); //#23765
            $k[$j++] = -$f(~~($_.fw / 2) + $_.llyr * 2 + $_.lbit % 2); //#23765
            $_.cmv(); //#23765
        } //#23765
        if ($_.ldir == 3) { //#23771
            $k[$j++] = -$f(~~(($_.fw - 1) / 2) + $_.llyr * 2 + $_.lbit % 2); //#23770
            $k[$j++] = -($f(((~~($_.lwid / 2)) - 1) - ((~~($_.lbit / 2)) % $_.lwid))); //#23770
            $_.cmv(); //#23770
        } //#23770
    }; //#23770
    if ($eq($_.format, "full")) { //#23776
        $_.fw = 12; //#23776
    } else { //#23776
        $_.fw = 9; //#23776
    } //#23776
    $_.size = ($f($_.fw + ($_.layers * 4))) + 2; //#23777
    $k[$j++] = Infinity; //#23778
    for (var _I1 = 0, _I2 = $_.size * $_.size; _I1 < _I2; _I1++) { //#23778
        $k[$j++] = -1; //#23778
    } //#23778
    $_.pixs = $a(); //#23778
    $_.mid = $f(((~~(($_.size - 1) / 2)) * $_.size) + (~~(($_.size - 1) / 2))); //#23779
    $_.i = 0; //#23782
    for (var _I9 = 1, _I8 = $_.layers; _I9 <= _I8; _I9 += 1) { //#23790
        $_.layer = _I9; //#23784
        for (var _ID = 0, _IC = (($_.fw + ($_.layer * 4)) * 8) - 1; _ID <= _IC; _ID += 1) { //#23789
            $_.pos = _ID; //#23786
            $k[$j++] = $_.pixs; //#23787
            $k[$j++] = $_.layer; //#23787
            $k[$j++] = $_.pos; //#23787
            $_.lmv(); //#23787
            var _IL = $k[--$j]; //#23787
            $put($k[--$j], _IL, $get($_.databits, ($_.databits.length - $_.i) - 1) - 48); //#23787
            $_.i = $_.i + 1; //#23788
        } //#23788
    } //#23788
    if ($eq($_.format, "full")) { //#23817
        $_.fw = 13; //#23794
        $_.size = $f($_.fw + $_.layers * 4 + 2 + ~~(($_.layers + 10.5) / 7.5 - 1) * 2); //#23795
        $_.mid = ~~(($_.size * $_.size) / 2); //#23796
        $k[$j++] = Infinity; //#23797
        for (var _IW = 0, _IX = $_.size * $_.size; _IW < _IX; _IW++) { //#23797
            $k[$j++] = -2; //#23797
        } //#23797
        $_.npixs = $a(); //#23797
        for (var _Ib = 0, _Ia = ~~($_.size / 2); _Ib <= _Ia; _Ib += 16) { //#23807
            $_.i = _Ib; //#23799
            for (var _Ie = 0, _Id = $_.size - 1; _Ie <= _Id; _Ie += 1) { //#23806
                $_.j = _Ie; //#23801
                $k[$j++] = $_.npixs; //#23802
                $k[$j++] = (-(~~($_.size / 2))) + $_.j; //#23802
                $k[$j++] = $_.i; //#23802
                $_.cmv(); //#23802
                var _In = $k[--$j]; //#23802
                $puti($k[--$j], _In, $a([((((~~($_.size / 2)) + $_.j) + $_.i) + 1) % 2])); //#23802
                $k[$j++] = $_.npixs; //#23803
                $k[$j++] = (-(~~($_.size / 2))) + $_.j; //#23803
                $k[$j++] = -$_.i; //#23803
                $_.cmv(); //#23803
                var _Ix = $k[--$j]; //#23803
                $puti($k[--$j], _Ix, $a([((((~~($_.size / 2)) + $_.j) + $_.i) + 1) % 2])); //#23803
                $k[$j++] = $_.npixs; //#23804
                $k[$j++] = $_.i; //#23804
                $k[$j++] = (-(~~($_.size / 2))) + $_.j; //#23804
                $_.cmv(); //#23804
                var _J7 = $k[--$j]; //#23804
                $puti($k[--$j], _J7, $a([((((~~($_.size / 2)) + $_.j) + $_.i) + 1) % 2])); //#23804
                $k[$j++] = $_.npixs; //#23805
                $k[$j++] = -$_.i; //#23805
                $k[$j++] = (-(~~($_.size / 2))) + $_.j; //#23805
                $_.cmv(); //#23805
                var _JH = $k[--$j]; //#23805
                $puti($k[--$j], _JH, $a([((((~~($_.size / 2)) + $_.j) + $_.i) + 1) % 2])); //#23805
            } //#23805
        } //#23805
        $_.j = 0; //#23808
        for (var _JL = 0, _JK = $_.npixs.length - 1; _JL <= _JK; _JL += 1) { //#23815
            $_.i = _JL; //#23810
            if ($get($_.npixs, $_.i) == -2) { //#23814
                $put($_.npixs, $_.i, $get($_.pixs, $_.j)); //#23812
                $_.j = $_.j + 1; //#23813
            } //#23813
        } //#23813
        $_.pixs = $_.npixs; //#23816
    } //#23816
    $_.fw = ~~($_.fw / 2); //#23820
    for (var _Ja = -$_.fw, _JZ = $_.fw; _Ja <= _JZ; _Ja += 1) { //#23829
        $_.i = _Ja; //#23822
        for (var _Je = -$_.fw, _Jd = $_.fw; _Je <= _Jd; _Je += 1) { //#23828
            $_.j = _Je; //#23824
            $k[$j++] = $_.pixs; //#23825
            $k[$j++] = $_.i; //#23825
            $k[$j++] = $_.j; //#23825
            $_.cmv(); //#23825
            if ($abs($_.i) > $abs($_.j)) { //#23826
                $k[$j++] = $abs($_.i); //#23826
            } else { //#23826
                $k[$j++] = $abs($_.j); //#23826
            } //#23826
            var _Jm = $k[--$j]; //#23826
            var _Jn = $k[--$j]; //#23827
            $put($k[--$j], _Jn, (_Jm + 1) % 2); //#23827
        } //#23827
    } //#23827
    var _KP = $a([$a([-($_.fw + 1), $_.fw, 1]), $a([-($_.fw + 1), $_.fw + 1, 1]), $a([-$_.fw, $_.fw + 1, 1]), $a([$_.fw + 1, $_.fw + 1, 1]), $a([$_.fw + 1, $_.fw, 1]), $a([$_.fw + 1, -$_.fw, 1]), $a([$_.fw, $_.fw + 1, 0]), $a([$_.fw + 1, -($_.fw + 1), 0]), $a([$_.fw, -($_.fw + 1), 0]), $a([-$_.fw, -($_.fw + 1), 0]), $a([-($_.fw + 1), -($_.fw + 1), 0]), $a([-($_.fw + 1), -$_.fw, 0])]); //#23837
    for (var _KQ = 0, _KR = _KP.length; _KQ < _KR; _KQ++) { //#23838
        $k[$j++] = $_.pixs; //#23838
        $aload($get(_KP, _KQ)); //#23838
        $r(3, 1); //#23838
        $_.cmv(); //#23838
        var _KU = $k[--$j]; //#23838
        var _KV = $k[--$j]; //#23838
        $put($k[--$j], _KU, _KV); //#23838
    } //#23838
    $_.modemapfull = $a([$a([-5, 7]), $a([-4, 7]), $a([-3, 7]), $a([-2, 7]), $a([-1, 7]), $a([1, 7]), $a([2, 7]), $a([3, 7]), $a([4, 7]), $a([5, 7]), $a([7, 5]), $a([7, 4]), $a([7, 3]), $a([7, 2]), $a([7, 1]), $a([7, -1]), $a([7, -2]), $a([7, -3]), $a([7, -4]), $a([7, -5]), $a([5, -7]), $a([4, -7]), $a([3, -7]), $a([2, -7]), $a([1, -7]), $a([-1, -7]), $a([-2, -7]), $a([-3, -7]), $a([-4, -7]), $a([-5, -7]), $a([-7, -5]), $a([-7, -4]), $a([-7, -3]), $a([-7, -2]), $a([-7, -1]), $a([-7, 1]), $a([-7, 2]), $a([-7, 3]), $a([-7, 4]), $a([-7, 5])]); //#23847
    $_.modemapcompact = $a([$a([-3, 5]), $a([-2, 5]), $a([-1, 5]), $a([0, 5]), $a([1, 5]), $a([2, 5]), $a([3, 5]), $a([5, 3]), $a([5, 2]), $a([5, 1]), $a([5, 0]), $a([5, -1]), $a([5, -2]), $a([5, -3]), $a([3, -5]), $a([2, -5]), $a([1, -5]), $a([0, -5]), $a([-1, -5]), $a([-2, -5]), $a([-3, -5]), $a([-5, -3]), $a([-5, -2]), $a([-5, -1]), $a([-5, 0]), $a([-5, 1]), $a([-5, 2]), $a([-5, 3])]); //#23853
    $k[$j++] = 'modemap'; //#23855
    if ($eq($_.format, "full")) { //#23855
        $k[$j++] = $_.modemapfull; //#23855
    } else { //#23855
        $k[$j++] = $_.modemapcompact; //#23855
    } //#23855
    var _Lj = $k[--$j]; //#23855
    $_[$k[--$j]] = _Lj; //#23855
    for (var _Ln = 0, _Lm = $_.modemap.length - 1; _Ln <= _Lm; _Ln += 1) { //#23859
        $k[$j++] = _Ln; //#23857
        $k[$j++] = $_.pixs; //#23857
        $aload($get($_.modemap, _Ln)); //#23857
        $_.cmv(); //#23857
        var _Ls = $k[--$j]; //#23857
        var _Lt = $k[--$j]; //#23857
        $put(_Lt, _Ls, $get($_.modebits, $k[--$j]) - 48); //#23857
    } //#23858
    var _M2 = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.size],
        ["pixy", $_.size],
        ["height", ($_.size * 2) / 72],
        ["width", ($_.size * 2) / 72],
        ["opt", $_.options]
    ]); //#23868
    $k[$j++] = _M2; //#23871
    if (!$_.dontdraw) { //#23871
        bwipp_renmatrix(); //#23871
    } //#23871
    $_ = $__; //#23875
} //bwipp_azteccode
function bwipp_azteccodecompact() {
    var $__ = $_; //#23904
    $_ = Object.assign({}, $_); //#23904
    $_.dontdraw = false; //#23907
    $k[$j++] = $_; //#23909
    bwipp_processoptions(); //#23909
    $_.options = $k[--$j]; //#23909
    $_.barcode = $k[--$j]; //#23910
    $put($_.options, "dontdraw", true); //#23913
    $put($_.options, "format", "compact"); //#23914
    $k[$j++] = 'args'; //#23916
    $k[$j++] = $_.barcode; //#23916
    $k[$j++] = $_.options; //#23916
    bwipp_azteccode(); //#23916
    var _6 = $k[--$j]; //#23916
    $_[$k[--$j]] = _6; //#23916
    $put($_.args, "opt", $_.options); //#23918
    $k[$j++] = $_.args; //#23921
    if (!$_.dontdraw) { //#23921
        bwipp_renmatrix(); //#23921
    } //#23921
    $_ = $__; //#23923
} //bwipp_azteccodecompact
function bwipp_aztecrune() {
    var $__ = $_; //#23952
    $_ = Object.assign({}, $_); //#23952
    $_.dontdraw = false; //#23955
    $k[$j++] = $_; //#23957
    bwipp_processoptions(); //#23957
    $_.options = $k[--$j]; //#23957
    $_.barcode = $k[--$j]; //#23958
    $put($_.options, "dontdraw", true); //#23961
    $put($_.options, "format", "rune"); //#23962
    $k[$j++] = 'args'; //#23964
    $k[$j++] = $_.barcode; //#23964
    $k[$j++] = $_.options; //#23964
    bwipp_azteccode(); //#23964
    var _6 = $k[--$j]; //#23964
    $_[$k[--$j]] = _6; //#23964
    $put($_.args, "opt", $_.options); //#23966
    $k[$j++] = $_.args; //#23969
    if (!$_.dontdraw) { //#23969
        bwipp_renmatrix(); //#23969
    } //#23969
    $_ = $__; //#23971
} //bwipp_aztecrune
function bwipp_codeone() {
    var $__ = $_; //#24002
    $_ = Object.assign({}, $_); //#24002
    $_.dontdraw = false; //#24005
    $_.version = "unset"; //#24006
    $_.parse = false; //#24007
    $_.parsefnc = false; //#24008
    $k[$j++] = $_; //#24010
    bwipp_processoptions(); //#24010
    $_.options = $k[--$j]; //#24010
    $_.barcode = $k[--$j]; //#24011
    var _2 = $a(["unset", "T-16", "T-32", "T-48", "S-10", "S-20", "S-30", "A", "B", "C", "D", "E", "F", "G", "H"]); //#24013
    $k[$j++] = false; //#24014
    for (var _3 = 0, _4 = _2.length; _3 < _4; _3++) { //#24014
        var _7 = $k[--$j]; //#24014
        $k[$j++] = _7 || $eq($get(_2, _3), $_.version); //#24014
    } //#24014
    if (!$k[--$j]) { //#24016
        $k[$j++] = 'bwipp.codeoneBadVersion#24015'; //#24015
        $k[$j++] = "version must be A to H, T-16, T-32, T-48, S-10, S-20 or S-30"; //#24015
        bwipp_raiseerror(); //#24015
    } //#24015
    $_.stype = $eq($geti($_.version, 0, 1), "S"); //#24020
    $_.ttype = $eq($geti($_.version, 0, 1), "T"); //#24021
    $_.stypevals = $a(["1", "1010", "1100100", "1111101000", "10011100010000", "11000011010100000", "11110100001001000000", "100110001001011010000000", "101111101011110000100000000", "111011100110101100101000000000", "1001010100000010111110010000000000", "1011101001000011101101110100000000000", "1110100011010100101001010001000000000000", "10010001100001001110011100101010000000000000", "10110101111001100010000011110100100000000000000", "11100011010111111010100100110001101000000000000000", "100011100001101111001001101111110000010000000000000000", "101100011010001010111100001011101100010100000000000000000"]); //#24043
    $_.stypemetrics = $a([$a(["S-10", 8, 11, 10, 4, 4, 1, 99, 99, 99]), $a(["S-20", 8, 21, 20, 8, 8, 1, 99, 99, 99]), $a(["S-30", 8, 31, 30, 12, 12, 1, 99, 99, 99])]); //#24051
    $_.nonstypemetrics = $a([$a(["A", 16, 18, 16, 10, 10, 1, 4, 99, 6]), $a(["B", 22, 22, 20, 19, 16, 1, 4, 99, 8]), $a(["C", 28, 32, 28, 44, 26, 1, 4, 22, 11]), $a(["D", 40, 42, 36, 91, 44, 1, 4, 16, 16]), $a(["E", 52, 54, 48, 182, 70, 1, 4, 22, 22]), $a(["F", 70, 76, 68, 370, 140, 2, 4, 22, 31]), $a(["G", 104, 98, 88, 732, 280, 4, 6, 21, 47]), $a(["H", 148, 134, 120, 1480, 560, 8, 6, 20, 69]), $a(["T-16", 16, 17, 16, 10, 10, 1, 99, 99, 99]), $a(["T-32", 16, 33, 32, 24, 16, 1, 99, 99, 99]), $a(["T-48", 16, 49, 48, 38, 22, 1, 99, 99, 99])]); //#24067
    $_.fnc1 = -1; //#24070
    $_.fnc3 = -2; //#24070
    $_.lC = -5; //#24071
    $_.lB = -6; //#24071
    $_.lX = -7; //#24071
    $_.lT = -8; //#24071
    $_.lD = -9; //#24071
    $_.unl = -10; //#24071
    $_.fnc2 = -11; //#24072
    $_.fnc4 = -12; //#24072
    $_.sft1 = -13; //#24072
    $_.sft2 = -14; //#24072
    $_.sft3 = -15; //#24072
    $_.eci = -16; //#24072
    $_.pad = -17; //#24072
    $_.fnc1lD = -18; //#24072
    $_.unlcw = 255; //#24073
    $k[$j++] = Infinity; //#24075
    for (var _U = 0; _U <= 128; _U += 1) { //#24076
        $k[$j++] = _U; //#24076
        $k[$j++] = _U + 1; //#24076
    } //#24076
    $k[$j++] = $_.pad; //#24081
    $k[$j++] = 129; //#24081
    for (var _W = 0; _W <= 99; _W += 1) { //#24081
        var _Y = $cvrs($s(2), _W, 10); //#24079
        var _a = $strcpy($s(2), "00"); //#24079
        $puti(_a, 2 - _Y.length, _Y); //#24079
        $k[$j++] = _a; //#24080
        $k[$j++] = _W + 130; //#24080
    } //#24080
    var _i = $a([$_.lC, $_.lB, $_.fnc1, $_.fnc2, $_.fnc3, $_.fnc4, $_.fnc1lD]); //#24082
    $k[$j++] = 229; //#24082
    for (var _j = 0, _k = _i.length; _j < _k; _j++) { //#24082
        var _n = $k[--$j] + 1; //#24082
        $k[$j++] = $get(_i, _j); //#24082
        $k[$j++] = _n; //#24082
        $k[$j++] = _n; //#24082
    } //#24082
    $k[$j - 1] = $_.lX; //#24084
    $k[$j++] = 238; //#24084
    $k[$j++] = $_.lT; //#24084
    $k[$j++] = 239; //#24084
    $_.Avals = $d(); //#24086
    $k[$j++] = Infinity; //#24087
    var _r = $_.Avals; //#24088
    for (var _w = _r.size, _v = _r.keys(), _u = 0; _u < _w; _u++) { //#24088
        var _s = _v.next().value; //#24088
        $k[$j++] = _s; //#24088
        var _x = Infinity; //#24088
        var _y = _r.get(_s); //#24088
        $k[$j++] = _x; //#24088
        $k[$j++] = _y; //#24088
        var _z = $a(); //#24088
        $k[$j++] = _z; //#24088
    } //#24088
    $_.Avals = $d(); //#24089
    $k[$j++] = Infinity; //#24091
    $k[$j++] = $_.sft1; //#24096
    $k[$j++] = 0; //#24096
    $k[$j++] = $_.sft2; //#24096
    $k[$j++] = 1; //#24096
    $k[$j++] = $_.sft3; //#24096
    $k[$j++] = 2; //#24096
    $k[$j++] = 32; //#24096
    $k[$j++] = 3; //#24096
    for (var _14 = 48; _14 <= 57; _14 += 1) { //#24096
        $k[$j++] = _14; //#24096
        $k[$j++] = _14 - 44; //#24096
    } //#24096
    for (var _15 = 65; _15 <= 90; _15 += 1) { //#24097
        $k[$j++] = _15; //#24097
        $k[$j++] = _15 - 51; //#24097
    } //#24097
    $_.CNvals = $d(); //#24098
    $k[$j++] = Infinity; //#24099
    for (var _17 = 0; _17 <= 31; _17 += 1) { //#24099
        $k[$j++] = _17; //#24099
        $k[$j++] = _17; //#24099
    } //#24099
    $_.C1vals = $d(); //#24099
    $k[$j++] = Infinity; //#24100
    for (var _19 = 33; _19 <= 47; _19 += 1) { //#24101
        $k[$j++] = _19; //#24101
        $k[$j++] = _19 - 33; //#24101
    } //#24101
    for (var _1A = 58; _1A <= 64; _1A += 1) { //#24102
        $k[$j++] = _1A; //#24102
        $k[$j++] = _1A - 43; //#24102
    } //#24102
    for (var _1B = 91; _1B <= 95; _1B += 1) { //#24103
        $k[$j++] = _1B; //#24103
        $k[$j++] = _1B - 69; //#24103
    } //#24103
    $k[$j++] = $_.fnc1; //#24108
    $k[$j++] = 27; //#24108
    $k[$j++] = $_.fnc2; //#24108
    $k[$j++] = 28; //#24108
    $k[$j++] = $_.fnc3; //#24108
    $k[$j++] = 29; //#24108
    $k[$j++] = $_.fnc4; //#24108
    $k[$j++] = 30; //#24108
    $k[$j++] = $_.pad; //#24108
    $k[$j++] = 31; //#24108
    $_.C2vals = $d(); //#24109
    $k[$j++] = Infinity; //#24110
    for (var _1I = 96; _1I <= 127; _1I += 1) { //#24110
        $k[$j++] = _1I; //#24110
        $k[$j++] = _1I - 96; //#24110
    } //#24110
    $_.C3vals = $d(); //#24110
    $k[$j++] = Infinity; //#24111
    var _1K = $_.CNvals; //#24112
    for (var _1P = _1K.size, _1O = _1K.keys(), _1N = 0; _1N < _1P; _1N++) { //#24112
        var _1L = _1O.next().value; //#24112
        $k[$j++] = _1L; //#24112
        var _1Q = Infinity; //#24112
        var _1R = _1K.get(_1L); //#24112
        $k[$j++] = _1Q; //#24112
        $k[$j++] = _1R; //#24112
        var _1S = $a(); //#24112
        $k[$j++] = _1S; //#24112
    } //#24112
    var _1T = $_.C1vals; //#24113
    for (var _1Y = _1T.size, _1X = _1T.keys(), _1W = 0; _1W < _1Y; _1W++) { //#24113
        var _1U = _1X.next().value; //#24113
        $k[$j++] = _1U; //#24113
        var _1Z = Infinity; //#24113
        var _1a = _1T.get(_1U); //#24113
        $k[$j++] = _1Z; //#24113
        $k[$j++] = $get($_.CNvals, $_.sft1); //#24113
        $k[$j++] = _1a; //#24113
        var _1e = $a(); //#24113
        $k[$j++] = _1e; //#24113
    } //#24113
    var _1f = $_.C2vals; //#24114
    for (var _1k = _1f.size, _1j = _1f.keys(), _1i = 0; _1i < _1k; _1i++) { //#24114
        var _1g = _1j.next().value; //#24114
        $k[$j++] = _1g; //#24114
        var _1l = Infinity; //#24114
        var _1m = _1f.get(_1g); //#24114
        $k[$j++] = _1l; //#24114
        $k[$j++] = $get($_.CNvals, $_.sft2); //#24114
        $k[$j++] = _1m; //#24114
        var _1q = $a(); //#24114
        $k[$j++] = _1q; //#24114
    } //#24114
    var _1r = $_.C3vals; //#24115
    for (var _1w = _1r.size, _1v = _1r.keys(), _1u = 0; _1u < _1w; _1u++) { //#24115
        var _1s = _1v.next().value; //#24115
        $k[$j++] = _1s; //#24115
        var _1x = Infinity; //#24115
        var _1y = _1r.get(_1s); //#24115
        $k[$j++] = _1x; //#24115
        $k[$j++] = $get($_.CNvals, $_.sft3); //#24115
        $k[$j++] = _1y; //#24115
        var _22 = $a(); //#24115
        $k[$j++] = _22; //#24115
    } //#24115
    $_.Cvals = $d(); //#24116
    $k[$j++] = Infinity; //#24118
    $k[$j++] = $_.sft1; //#24123
    $k[$j++] = 0; //#24123
    $k[$j++] = $_.sft2; //#24123
    $k[$j++] = 1; //#24123
    $k[$j++] = $_.sft3; //#24123
    $k[$j++] = 2; //#24123
    $k[$j++] = 32; //#24123
    $k[$j++] = 3; //#24123
    for (var _27 = 48; _27 <= 57; _27 += 1) { //#24123
        $k[$j++] = _27; //#24123
        $k[$j++] = _27 - 44; //#24123
    } //#24123
    for (var _28 = 97; _28 <= 122; _28 += 1) { //#24124
        $k[$j++] = _28; //#24124
        $k[$j++] = _28 - 83; //#24124
    } //#24124
    $_.TNvals = $d(); //#24125
    $k[$j++] = Infinity; //#24126
    for (var _2A = 0; _2A <= 31; _2A += 1) { //#24126
        $k[$j++] = _2A; //#24126
        $k[$j++] = _2A; //#24126
    } //#24126
    $_.T1vals = $d(); //#24126
    $k[$j++] = Infinity; //#24127
    for (var _2C = 33; _2C <= 47; _2C += 1) { //#24128
        $k[$j++] = _2C; //#24128
        $k[$j++] = _2C - 33; //#24128
    } //#24128
    for (var _2D = 58; _2D <= 64; _2D += 1) { //#24129
        $k[$j++] = _2D; //#24129
        $k[$j++] = _2D - 43; //#24129
    } //#24129
    for (var _2E = 91; _2E <= 95; _2E += 1) { //#24130
        $k[$j++] = _2E; //#24130
        $k[$j++] = _2E - 69; //#24130
    } //#24130
    $k[$j++] = $_.fnc1; //#24135
    $k[$j++] = 27; //#24135
    $k[$j++] = $_.fnc2; //#24135
    $k[$j++] = 28; //#24135
    $k[$j++] = $_.fnc3; //#24135
    $k[$j++] = 29; //#24135
    $k[$j++] = $_.fnc4; //#24135
    $k[$j++] = 30; //#24135
    $k[$j++] = $_.pad; //#24135
    $k[$j++] = 31; //#24135
    $_.T2vals = $d(); //#24136
    $k[$j++] = Infinity; //#24137
    $k[$j++] = 96; //#24139
    $k[$j++] = 0; //#24139
    for (var _2L = 65; _2L <= 90; _2L += 1) { //#24139
        $k[$j++] = _2L; //#24139
        $k[$j++] = _2L - 64; //#24139
    } //#24139
    for (var _2M = 123; _2M <= 127; _2M += 1) { //#24140
        $k[$j++] = _2M; //#24140
        $k[$j++] = _2M - 96; //#24140
    } //#24140
    $_.T3vals = $d(); //#24141
    $k[$j++] = Infinity; //#24142
    var _2O = $_.TNvals; //#24143
    for (var _2T = _2O.size, _2S = _2O.keys(), _2R = 0; _2R < _2T; _2R++) { //#24143
        var _2P = _2S.next().value; //#24143
        $k[$j++] = _2P; //#24143
        var _2U = Infinity; //#24143
        var _2V = _2O.get(_2P); //#24143
        $k[$j++] = _2U; //#24143
        $k[$j++] = _2V; //#24143
        var _2W = $a(); //#24143
        $k[$j++] = _2W; //#24143
    } //#24143
    var _2X = $_.T1vals; //#24144
    for (var _2c = _2X.size, _2b = _2X.keys(), _2a = 0; _2a < _2c; _2a++) { //#24144
        var _2Y = _2b.next().value; //#24144
        $k[$j++] = _2Y; //#24144
        var _2d = Infinity; //#24144
        var _2e = _2X.get(_2Y); //#24144
        $k[$j++] = _2d; //#24144
        $k[$j++] = $get($_.TNvals, $_.sft1); //#24144
        $k[$j++] = _2e; //#24144
        var _2i = $a(); //#24144
        $k[$j++] = _2i; //#24144
    } //#24144
    var _2j = $_.T2vals; //#24145
    for (var _2o = _2j.size, _2n = _2j.keys(), _2m = 0; _2m < _2o; _2m++) { //#24145
        var _2k = _2n.next().value; //#24145
        $k[$j++] = _2k; //#24145
        var _2p = Infinity; //#24145
        var _2q = _2j.get(_2k); //#24145
        $k[$j++] = _2p; //#24145
        $k[$j++] = $get($_.TNvals, $_.sft2); //#24145
        $k[$j++] = _2q; //#24145
        var _2u = $a(); //#24145
        $k[$j++] = _2u; //#24145
    } //#24145
    var _2v = $_.T3vals; //#24146
    for (var _30 = _2v.size, _2z = _2v.keys(), _2y = 0; _2y < _30; _2y++) { //#24146
        var _2w = _2z.next().value; //#24146
        $k[$j++] = _2w; //#24146
        var _31 = Infinity; //#24146
        var _32 = _2v.get(_2w); //#24146
        $k[$j++] = _31; //#24146
        $k[$j++] = $get($_.TNvals, $_.sft3); //#24146
        $k[$j++] = _32; //#24146
        var _36 = $a(); //#24146
        $k[$j++] = _36; //#24146
    } //#24146
    $_.Tvals = $d(); //#24147
    for (var _38 = 128; _38 <= 255; _38 += 1) { //#24155
        $_.i = _38; //#24151
        $k[$j++] = $_.Avals; //#24152
        $k[$j++] = $_.i; //#24152
        $k[$j++] = Infinity; //#24152
        $aload($get($_.Avals, $_.fnc4)); //#24152
        $aload($get($_.Avals, $_.i - 128)); //#24152
        var _3H = $a(); //#24152
        var _3I = $k[--$j]; //#24152
        $put($k[--$j], _3I, _3H); //#24152
        $k[$j++] = $_.Cvals; //#24153
        $k[$j++] = $_.i; //#24153
        $k[$j++] = Infinity; //#24153
        $aload($get($_.Cvals, $_.fnc4)); //#24153
        $aload($get($_.Cvals, $_.i - 128)); //#24153
        var _3S = $a(); //#24153
        var _3T = $k[--$j]; //#24153
        $put($k[--$j], _3T, _3S); //#24153
        $k[$j++] = $_.Tvals; //#24154
        $k[$j++] = $_.i; //#24154
        $k[$j++] = Infinity; //#24154
        $aload($get($_.Tvals, $_.fnc4)); //#24154
        $aload($get($_.Tvals, $_.i - 128)); //#24154
        var _3d = $a(); //#24154
        var _3e = $k[--$j]; //#24154
        $put($k[--$j], _3e, _3d); //#24154
    } //#24154
    $k[$j++] = Infinity; //#24157
    $k[$j++] = 13; //#24162
    $k[$j++] = 0; //#24162
    $k[$j++] = 42; //#24162
    $k[$j++] = 1; //#24162
    $k[$j++] = 62; //#24162
    $k[$j++] = 2; //#24162
    $k[$j++] = 32; //#24162
    $k[$j++] = 3; //#24162
    for (var _3g = 48; _3g <= 57; _3g += 1) { //#24162
        $k[$j++] = _3g; //#24162
        $k[$j++] = _3g - 44; //#24162
    } //#24162
    for (var _3h = 65; _3h <= 90; _3h += 1) { //#24163
        $k[$j++] = _3h; //#24163
        $k[$j++] = _3h - 51; //#24163
    } //#24163
    $_.Xvals = $d(); //#24164
    $k[$j++] = Infinity; //#24165
    var _3j = $_.Xvals; //#24166
    for (var _3o = _3j.size, _3n = _3j.keys(), _3m = 0; _3m < _3o; _3m++) { //#24166
        var _3k = _3n.next().value; //#24166
        $k[$j++] = _3k; //#24166
        var _3p = Infinity; //#24166
        var _3q = _3j.get(_3k); //#24166
        $k[$j++] = _3p; //#24166
        $k[$j++] = _3q; //#24166
        var _3r = $a(); //#24166
        $k[$j++] = _3r; //#24166
    } //#24166
    $_.Xvals = $d(); //#24167
    $k[$j++] = Infinity; //#24169
    for (var _3t = 0; _3t <= 255; _3t += 1) { //#24170
        $k[$j++] = _3t; //#24170
        $k[$j++] = _3t; //#24170
    } //#24170
    $_.Bvals = $d(); //#24171
    $k[$j++] = Infinity; //#24172
    var _3v = $_.Bvals; //#24173
    for (var _40 = _3v.size, _3z = _3v.keys(), _3y = 0; _3y < _40; _3y++) { //#24173
        var _3w = _3z.next().value; //#24173
        $k[$j++] = _3w; //#24173
        var _41 = Infinity; //#24173
        var _42 = _3v.get(_3w); //#24173
        $k[$j++] = _41; //#24173
        $k[$j++] = _42; //#24173
        var _43 = $a(); //#24173
        $k[$j++] = _43; //#24173
    } //#24173
    $_.Bvals = $d(); //#24174
    $_.encvals = $a([$_.Avals, $_.Cvals, $_.Tvals, $_.Xvals, -1, $_.Bvals]); //#24176
    $_.A = 0; //#24178
    $_.C = 1; //#24178
    $_.T = 2; //#24178
    $_.X = 3; //#24178
    $_.D = 4; //#24178
    $_.B = 5; //#24178
    if ($_.stype) { //#24677
        $forall($_.barcode, function() { //#24187
            var _4E = $k[--$j]; //#24184
            if ((_4E < 48) || (_4E > 57)) { //#24186
                $k[$j++] = 'bwipp.codeoneStypeNonDigit#24185'; //#24185
                $k[$j++] = "S-Type symbols can only contain digits"; //#24185
                bwipp_raiseerror(); //#24185
            } //#24185
        }); //#24185
        $_.barlen = $_.barcode.length; //#24189
        if ($_.barlen > 18) { //#24192
            $k[$j++] = 'bwipp.codeoneStypeTooLong#24191'; //#24191
            $k[$j++] = "Maximum length exceeded"; //#24191
            bwipp_raiseerror(); //#24191
        } //#24191
        $_.normalize = function() {
            $_.base = $k[--$j]; //#24195
            $_.num = $k[--$j]; //#24196
            for (var _4K = $_.num.length - 1; _4K >= 1; _4K -= 1) { //#24201
                $_.i = _4K; //#24198
                var _4L = $_.num; //#24199
                var _4M = $_.i; //#24199
                $put(_4L, _4M - 1, $f($get(_4L, _4M - 1) + (~~($get($_.num, $_.i) / $_.base)))); //#24199
                $put($_.num, $_.i, $get($_.num, $_.i) % $_.base); //#24200
            } //#24200
            for (;;) { //#24207
                if ($lt($get($_.num, 0), $_.base)) { //#24203
                    break; //#24203
                } //#24203
                $k[$j++] = Infinity; //#24204
                $k[$j++] = 0; //#24204
                $aload($_.num); //#24204
                $_.num = $a(); //#24204
                $put($_.num, 0, $f($get($_.num, 0) + (~~($get($_.num, 1) / $_.base)))); //#24205
                $put($_.num, 1, $get($_.num, 1) % $_.base); //#24206
            } //#24206
            $k[$j++] = Infinity; //#24209
            $_.i = true; //#24209
            var _4n = $_.num; //#24209
            for (var _4o = 0, _4p = _4n.length; _4o < _4p; _4o++) { //#24209
                var _4q = $get(_4n, _4o); //#24209
                $k[$j++] = _4q; //#24209
                if ((_4q == 0) && $_.i) { //#24209
                    $j--; //#24209
                } else { //#24209
                    $_.i = false; //#24209
                } //#24209
            } //#24209
            $_.num = $a(); //#24209
            if ($_.num.length == 0) { //#24210
                $_.num = $a([0]); //#24210
            } //#24210
            $k[$j++] = $_.num; //#24211
        }; //#24211
        $_.bigadd = function() {
            var _4w = $k[--$j]; //#24215
            var _4x = $k[--$j]; //#24215
            $_.offset = $abs(_4w.length - _4x.length); //#24216
            if (_4w.length < _4x.length) { //#24217
                var _ = _4w; //#24217
                _4w = _4x; //#24217
                _4x = _; //#24217
            } //#24217
            $_.a = _4w; //#24218
            $_.b = _4x; //#24218
            for (var _50 = 0, _4z = $_.b.length - 1; _50 <= _4z; _50 += 1) { //#24221
                var _51 = $_.a; //#24220
                var _52 = $_.offset; //#24220
                $put(_51, _50 + _52, $f($get(_51, _50 + _52) + $get($_.b, _50))); //#24220
            } //#24220
            $k[$j++] = $_.a; //#24222
        }; //#24222
        $_.barlen = $_.barcode.length; //#24225
        $_.v = $a([1]); //#24228
        for (var _5B = 0, _5A = $_.barlen - 1; _5B <= _5A; _5B += 1) { //#24233
            $_.i = _5B; //#24230
            $k[$j++] = Infinity; //#24231
            $forall($get($_.stypevals, $_.i), function() { //#24231
                var _5F = $k[--$j]; //#24231
                $k[$j++] = (_5F - 48) * ($get($_.barcode, ($_.barlen - $_.i) - 1) - 48); //#24231
            }); //#24231
            var _5K = $a(); //#24231
            $k[$j++] = _5K; //#24232
            $k[$j++] = $_.v; //#24232
            $_.bigadd(); //#24232
            $_.v = $k[--$j]; //#24232
        } //#24232
        $k[$j++] = 'v'; //#24234
        $k[$j++] = $_.v; //#24234
        $k[$j++] = 2; //#24234
        $_.normalize(); //#24234
        var _5O = $k[--$j]; //#24234
        $_[$k[--$j]] = _5O; //#24234
        $k[$j++] = Infinity; //#24237
        for (var _5R = 0, _5S = (5 - ($_.v.length % 5)) % 5; _5R < _5S; _5R++) { //#24237
            $k[$j++] = 0; //#24237
        } //#24237
        $aload($_.v); //#24237
        $_.v = $a(); //#24237
        $_.cws = $a(~~($_.v.length / 5)); //#24238
        for (var _5Z = 0, _5Y = $_.cws.length - 1; _5Z <= _5Y; _5Z += 1) { //#24244
            $_.i = _5Z; //#24240
            var _5c = $geti($_.v, $_.i * 5, 5); //#24241
            $k[$j++] = 0; //#24242
            for (var _5d = 0, _5e = _5c.length; _5d < _5e; _5d++) { //#24242
                var _5g = $k[--$j]; //#24242
                $k[$j++] = $f(_5g + $get(_5c, _5d)) * 2; //#24242
            } //#24242
            $put($_.cws, $_.i, ~~($k[--$j] / 2)); //#24243
        } //#24243
        $_.metrics = $_.stypemetrics; //#24246
    } else { //#24677
        var _5p = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true],
            ["FNC1", $_.fnc1],
            ["FNC3", $_.fnc3]
        ]); //#24256
        $_.fncvals = _5p; //#24257
        $k[$j++] = 'msg'; //#24258
        $k[$j++] = $_.barcode; //#24258
        $k[$j++] = $_.fncvals; //#24258
        bwipp_parseinput(); //#24258
        var _5s = $k[--$j]; //#24258
        $_[$k[--$j]] = _5s; //#24258
        $_.msglen = $_.msg.length; //#24259
        $_.eciesc = 92; //#24262
        var _5v = $_.msg; //#24263
        $k[$j++] = 'numecis'; //#24263
        $k[$j++] = 0; //#24263
        for (var _5w = 0, _5x = _5v.length; _5w < _5x; _5w++) { //#24263
            if ($get(_5v, _5w) <= -1000000) { //#24263
                var _5z = $k[--$j]; //#24263
                $k[$j++] = _5z + 1; //#24263
            } //#24263
        } //#24263
        var _60 = $k[--$j]; //#24263
        $_[$k[--$j]] = _60; //#24263
        if ($_.numecis > 0) { //#24290
            $_.msgtmp = $a(($f(($_.msg.length * 2) + ($_.numecis * 6))) + 2); //#24265
            $put($_.msgtmp, 0, $_.pad); //#24266
            $put($_.msgtmp, 1, $_.eciesc); //#24267
            $_.j = 2; //#24268
            for (var _6C = 0, _6B = $_.msg.length - 1; _6C <= _6B; _6C += 1) { //#24287
                var _6E = $get($_.msg, _6C); //#24270
                $k[$j++] = _6E; //#24286
                if (_6E <= -1000000) { //#24284
                    var _6I = $geti($cvrs($s(7), -$k[--$j], 10), 1, 6); //#24272
                    for (var _6J = 0, _6K = _6I.length; _6J < _6K; _6J++) { //#24272
                        $k[$j++] = $get(_6I, _6J); //#24272
                    } //#24272
                    $astore($a(6)); //#24272
                    $puti($_.msgtmp, $_.j + 1, $k[--$j]); //#24273
                    $put($_.msgtmp, $_.j, $_.eciesc); //#24274
                    $_.j = $_.j + 7; //#24275
                } else { //#24284
                    var _6U = $k[$j - 1]; //#24277
                    if (_6U != $_.eciesc) { //#24284
                        $put($_.msgtmp, $_.j, $k[--$j]); //#24278
                        $_.j = $_.j + 1; //#24279
                    } else { //#24284
                        $j--; //#24281
                        $put($_.msgtmp, $_.j, $_.eciesc); //#24282
                        $put($_.msgtmp, $_.j + 1, $_.eciesc); //#24283
                        $_.j = $_.j + 2; //#24284
                    } //#24284
                } //#24284
            } //#24284
            $_.msg = $geti($_.msgtmp, 0, $_.j); //#24288
            $_.msglen = $_.msg.length; //#24289
        } //#24289
        $_.metrics = $_.nonstypemetrics; //#24292
        $_.fullcws = $a([]); //#24295
        var _6n = $_.metrics; //#24296
        for (var _6o = 0, _6p = _6n.length; _6o < _6p; _6o++) { //#24307
            $_.m = $get(_6n, _6o); //#24297
            $_.vers = $get($_.m, 0); //#24298
            $_.dcws = $get($_.m, 4); //#24299
            $_.okay = true; //#24300
            if ($eq($_.version, "unset")) { //#24304
                if ($_.vers.length != 1) { //#24302
                    $_.okay = false; //#24302
                } //#24302
            } else { //#24304
                if ($ne($_.version, $_.vers)) { //#24304
                    $_.okay = false; //#24304
                } //#24304
            } //#24304
            if ($_.okay) { //#24306
                $k[$j++] = Infinity; //#24306
                $aload($_.fullcws); //#24306
                $k[$j++] = $_.dcws; //#24306
                $_.fullcws = $a(); //#24306
            } //#24306
        } //#24306
        $k[$j++] = Infinity; //#24308
        for (var _73 = 0; _73 < 1480; _73++) { //#24308
            $k[$j++] = 10000; //#24308
        } //#24308
        $_.numremcws = $a(); //#24308
        var _75 = $_.fullcws; //#24309
        for (var _76 = 0, _77 = _75.length; _76 < _77; _76++) { //#24309
            $put($_.numremcws, $get(_75, _76) - 1, 1); //#24309
        } //#24309
        for (var _7A = 1478; _7A >= 0; _7A -= 1) { //#24315
            $_.i = _7A; //#24311
            if ($get($_.numremcws, $_.i) != 1) { //#24314
                $put($_.numremcws, $_.i, $get($_.numremcws, $_.i + 1) + 1); //#24313
            } //#24313
        } //#24313
        $k[$j++] = Infinity; //#24317
        for (var _7K = 0, _7L = $_.msglen; _7K < _7L; _7K++) { //#24317
            $k[$j++] = 0; //#24317
        } //#24317
        $k[$j++] = 0; //#24317
        $_.numD = $a(); //#24317
        $k[$j++] = Infinity; //#24318
        for (var _7O = 0, _7P = $_.msglen; _7O < _7P; _7O++) { //#24318
            $k[$j++] = 0; //#24318
        } //#24318
        $k[$j++] = 9999; //#24318
        $_.nextXterm = $a(); //#24318
        $k[$j++] = Infinity; //#24319
        for (var _7S = 0, _7T = $_.msglen; _7S < _7T; _7S++) { //#24319
            $k[$j++] = 0; //#24319
        } //#24319
        $k[$j++] = 9999; //#24319
        $_.nextNonX = $a(); //#24319
        for (var _7W = $_.msglen - 1; _7W >= 0; _7W -= 1) { //#24336
            $_.i = _7W; //#24321
            $_.barchar = $get($_.msg, $_.i); //#24322
            if (($_.barchar >= 48) && ($_.barchar <= 57)) { //#24325
                $put($_.numD, $_.i, $get($_.numD, $_.i + 1) + 1); //#24324
            } //#24324
            if ((($_.barchar == 13) || ($_.barchar == 42)) || ($_.barchar == 62)) { //#24329
                $put($_.nextXterm, $_.i, 0); //#24327
            } else { //#24329
                $put($_.nextXterm, $_.i, $get($_.nextXterm, $_.i + 1) + 1); //#24329
            } //#24329
            var _7t = $get($_.Xvals, $_.barchar) !== undefined; //#24331
            if (!_7t) { //#24334
                $put($_.nextNonX, $_.i, 0); //#24332
            } else { //#24334
                $put($_.nextNonX, $_.i, $get($_.nextNonX, $_.i + 1) + 1); //#24334
            } //#24334
        } //#24334
        $k[$j++] = Infinity; //#24337
        var _81 = $_.nextXterm; //#24337
        for (var _82 = 0, _83 = _81.length; _82 < _83; _82++) { //#24337
            var _84 = $get(_81, _82); //#24337
            $k[$j++] = _84; //#24337
            if (_84 > 10000) { //#24337
                $k[$j - 1] = 10000; //#24337
            } //#24337
        } //#24337
        $_.nextXterm = $a(); //#24337
        $k[$j++] = Infinity; //#24338
        var _86 = $_.nextNonX; //#24338
        for (var _87 = 0, _88 = _86.length; _87 < _88; _87++) { //#24338
            var _89 = $get(_86, _87); //#24338
            $k[$j++] = _89; //#24338
            if (_89 > 10000) { //#24338
                $k[$j - 1] = 10000; //#24338
            } //#24338
        } //#24338
        $_.nextNonX = $a(); //#24338
        $_.isD = function() {
            $k[$j++] = ($_.char >= 48) && ($_.char <= 57); //#24340
        }; //#24340
        $_.isC = function() {
            var _8F = $get($_.CNvals, $_.char) !== undefined; //#24341
            $k[$j++] = _8F; //#24341
        }; //#24341
        $_.isT = function() {
            var _8I = $get($_.TNvals, $_.char) !== undefined; //#24342
            $k[$j++] = _8I; //#24342
        }; //#24342
        $_.isX = function() {
            var _8L = $get($_.Xvals, $_.char) !== undefined; //#24343
            $k[$j++] = _8L; //#24343
        }; //#24343
        $_.isEA = function() {
            $k[$j++] = $_.char > 127; //#24344
        }; //#24344
        $_.isFN = function() {
            $k[$j++] = $_.char < 0; //#24345
        }; //#24345
        $_.XtermFirst = function() {
            var _8O = $k[--$j]; //#24346
            $k[$j++] = $lt($get($_.nextXterm, _8O), $get($_.nextNonX, _8O)); //#24346
        }; //#24346
        $_.lookup = function() {
            $_.ac = 1; //#24349
            $_.cc = 2; //#24349
            $_.tc = 2; //#24349
            $_.xc = 2; //#24349
            $_.bc = 3; //#24349
            if ($_.mode == $_.A) { //#24350
                $_.ac = 0; //#24350
                $_.cc = 1; //#24350
                $_.tc = 1; //#24350
                $_.xc = 1; //#24350
                $_.bc = 2; //#24350
            } //#24350
            if ($_.mode == $_.C) { //#24351
                $_.cc = 0; //#24351
            } //#24351
            if ($_.mode == $_.T) { //#24352
                $_.tc = 0; //#24352
            } //#24352
            if ($_.mode == $_.X) { //#24353
                $_.xc = 0; //#24353
            } //#24353
            if ($_.mode == $_.B) { //#24354
                $_.bc = 0; //#24354
            } //#24354
            for (var _8d = 0; _8d < 1; _8d++) { //#24382
                $_.k = 0; //#24356
                for (;;) { //#24381
                    if (($_.i + $_.k) == $_.msglen) { //#24363
                        var _8l = $a([$_.ac, $_.cc, $_.tc, $_.xc]); //#24358
                        $k[$j++] = true; //#24358
                        for (var _8m = 0, _8n = _8l.length; _8m < _8n; _8m++) { //#24358
                            var _8q = $k[--$j]; //#24358
                            $k[$j++] = _8q && ($_.bc <= $ceil($get(_8l, _8m))); //#24358
                        } //#24358
                        if ($k[--$j]) { //#24358
                            $k[$j++] = $_.B; //#24358
                            break; //#24358
                        } //#24358
                        var _8x = $a([$_.cc, $_.tc, $_.xc, $_.bc]); //#24359
                        $k[$j++] = true; //#24359
                        for (var _8y = 0, _8z = _8x.length; _8y < _8z; _8y++) { //#24359
                            var _92 = $k[--$j]; //#24359
                            $k[$j++] = _92 && ($_.ac <= $ceil($get(_8x, _8y))); //#24359
                        } //#24359
                        if ($k[--$j]) { //#24359
                            $k[$j++] = $_.A; //#24359
                            break; //#24359
                        } //#24359
                        var _97 = $a([$_.tc, $_.xc]); //#24360
                        $k[$j++] = true; //#24360
                        for (var _98 = 0, _99 = _97.length; _98 < _99; _98++) { //#24360
                            var _9C = $k[--$j]; //#24360
                            $k[$j++] = _9C && ($ceil($_.cc) <= $ceil($get(_97, _98))); //#24360
                        } //#24360
                        if ($k[--$j]) { //#24360
                            $k[$j++] = $_.C; //#24360
                            break; //#24360
                        } //#24360
                        var _9G = $a([$_.xc]); //#24361
                        $k[$j++] = true; //#24361
                        for (var _9H = 0, _9I = _9G.length; _9H < _9I; _9H++) { //#24361
                            var _9L = $k[--$j]; //#24361
                            $k[$j++] = _9L && ($ceil($_.tc) <= $ceil($get(_9G, _9H))); //#24361
                        } //#24361
                        if ($k[--$j]) { //#24361
                            $k[$j++] = $_.T; //#24361
                            break; //#24361
                        } //#24361
                        $k[$j++] = $_.X; //#24362
                        break; //#24362
                    } //#24362
                    $_.char = $get($_.msg, $_.i + $_.k); //#24364
                    $k[$j++] = 'ac'; //#24365
                    $k[$j++] = $_.ac; //#24365
                    $_.isD(); //#24365
                    if ($k[--$j]) { //#24365
                        var _9V = $k[--$j]; //#24365
                        $k[$j++] = $f(_9V + (1 / 2)); //#24365
                    } else { //#24365
                        $_.isEA(); //#24365
                        if ($k[--$j]) { //#24365
                            var _9X = $k[--$j]; //#24365
                            $k[$j++] = $ceil(_9X) + 2; //#24365
                        } else { //#24365
                            var _9Y = $k[--$j]; //#24365
                            $k[$j++] = $ceil(_9Y) + 1; //#24365
                        } //#24365
                    } //#24365
                    var _9Z = $k[--$j]; //#24365
                    $_[$k[--$j]] = _9Z; //#24365
                    $k[$j++] = 'cc'; //#24366
                    $k[$j++] = $_.cc; //#24366
                    $_.isC(); //#24366
                    if ($k[--$j]) { //#24366
                        var _9d = $k[--$j]; //#24366
                        $k[$j++] = $f(_9d + 0.6666667); //#24366
                    } else { //#24366
                        $_.isEA(); //#24366
                        if ($k[--$j]) { //#24366
                            var _9f = $k[--$j]; //#24366
                            $k[$j++] = $f(_9f + 2.6666667); //#24366
                        } else { //#24366
                            var _9g = $k[--$j]; //#24366
                            $k[$j++] = $f(_9g + 1.3333334); //#24366
                        } //#24366
                    } //#24366
                    var _9h = $k[--$j]; //#24366
                    $_[$k[--$j]] = _9h; //#24366
                    $k[$j++] = 'tc'; //#24367
                    $k[$j++] = $_.tc; //#24367
                    $_.isT(); //#24367
                    if ($k[--$j]) { //#24367
                        var _9l = $k[--$j]; //#24367
                        $k[$j++] = $f(_9l + 0.6666667); //#24367
                    } else { //#24367
                        $_.isEA(); //#24367
                        if ($k[--$j]) { //#24367
                            var _9n = $k[--$j]; //#24367
                            $k[$j++] = $f(_9n + 2.6666667); //#24367
                        } else { //#24367
                            var _9o = $k[--$j]; //#24367
                            $k[$j++] = $f(_9o + 1.3333334); //#24367
                        } //#24367
                    } //#24367
                    var _9p = $k[--$j]; //#24367
                    $_[$k[--$j]] = _9p; //#24367
                    $k[$j++] = 'xc'; //#24368
                    $k[$j++] = $_.xc; //#24368
                    $_.isX(); //#24368
                    if ($k[--$j]) { //#24368
                        var _9t = $k[--$j]; //#24368
                        $k[$j++] = $f(_9t + 0.6666667); //#24368
                    } else { //#24368
                        $_.isEA(); //#24368
                        if ($k[--$j]) { //#24368
                            var _9v = $k[--$j]; //#24368
                            $k[$j++] = $f(_9v + 4.3333334); //#24368
                        } else { //#24368
                            var _9w = $k[--$j]; //#24368
                            $k[$j++] = $f(_9w + 3.3333334); //#24368
                        } //#24368
                    } //#24368
                    var _9x = $k[--$j]; //#24368
                    $_[$k[--$j]] = _9x; //#24368
                    $k[$j++] = 'bc'; //#24369
                    $k[$j++] = $_.bc; //#24369
                    $_.isFN(); //#24369
                    if ($k[--$j]) { //#24369
                        var _A1 = $k[--$j]; //#24369
                        $k[$j++] = _A1 + 3; //#24369
                    } else { //#24369
                        var _A2 = $k[--$j]; //#24369
                        $k[$j++] = _A2 + 1; //#24369
                    } //#24369
                    var _A3 = $k[--$j]; //#24369
                    $_[$k[--$j]] = _A3; //#24369
                    if ($_.k >= 3) { //#24379
                        var _AA = $a([$_.ac, $_.cc, $_.tc, $_.xc]); //#24371
                        $k[$j++] = true; //#24371
                        for (var _AB = 0, _AC = _AA.length; _AB < _AC; _AB++) { //#24371
                            var _AF = $k[--$j]; //#24371
                            $k[$j++] = _AF && (($_.bc + 1) <= $ceil($get(_AA, _AB))); //#24371
                        } //#24371
                        if ($k[--$j]) { //#24371
                            $k[$j++] = $_.B; //#24371
                            break; //#24371
                        } //#24371
                        var _AM = $a([$_.cc, $_.tc, $_.xc, $_.bc]); //#24372
                        $k[$j++] = true; //#24372
                        for (var _AN = 0, _AO = _AM.length; _AN < _AO; _AN++) { //#24372
                            var _AR = $k[--$j]; //#24372
                            $k[$j++] = _AR && (($_.ac + 1) <= $ceil($get(_AM, _AN))); //#24372
                        } //#24372
                        if ($k[--$j]) { //#24372
                            $k[$j++] = $_.A; //#24372
                            break; //#24372
                        } //#24372
                        var _AY = $a([$_.ac, $_.cc, $_.xc, $_.bc]); //#24373
                        $k[$j++] = true; //#24373
                        for (var _AZ = 0, _Aa = _AY.length; _AZ < _Aa; _AZ++) { //#24373
                            var _Ad = $k[--$j]; //#24373
                            $k[$j++] = _Ad && (($ceil($_.tc) + 1) <= $ceil($get(_AY, _AZ))); //#24373
                        } //#24373
                        if ($k[--$j]) { //#24373
                            $k[$j++] = $_.T; //#24373
                            break; //#24373
                        } //#24373
                        var _Ai = $a([$_.ac, $_.tc]); //#24374
                        $k[$j++] = true; //#24374
                        for (var _Aj = 0, _Ak = _Ai.length; _Aj < _Ak; _Aj++) { //#24374
                            var _An = $k[--$j]; //#24374
                            $k[$j++] = _An && (($ceil($_.cc) + 1) <= $ceil($get(_Ai, _Aj))); //#24374
                        } //#24374
                        if ($k[--$j]) { //#24377
                            if ($ceil($_.cc) < $ceil($_.xc)) { //#24375
                                $k[$j++] = $_.C; //#24375
                                break; //#24375
                            } //#24375
                            if ($_.cc == $_.xc) { //#24376
                                $k[$j++] = ($_.i + $_.k) + 1; //#24376
                                $_.XtermFirst(); //#24376
                                if ($k[--$j]) { //#24376
                                    $k[$j++] = $_.X; //#24376
                                    break; //#24376
                                } else { //#24376
                                    $k[$j++] = $_.C; //#24376
                                    break; //#24376
                                } //#24376
                            } //#24376
                        } //#24376
                        var _B3 = $a([$_.ac, $_.cc, $_.tc, $_.bc]); //#24378
                        $k[$j++] = true; //#24378
                        for (var _B4 = 0, _B5 = _B3.length; _B4 < _B5; _B4++) { //#24378
                            var _B8 = $k[--$j]; //#24378
                            $k[$j++] = _B8 && (($ceil($_.xc) + 1) <= $ceil($get(_B3, _B4))); //#24378
                        } //#24378
                        if ($k[--$j]) { //#24378
                            $k[$j++] = $_.X; //#24378
                            break; //#24378
                        } //#24378
                    } //#24378
                    $_.k = $_.k + 1; //#24380
                } //#24380
            } //#24380
        }; //#24380
        $_.addtocws = function() {
            var _BC = $k[$j - 1]; //#24386
            if ((_BC.length + $_.j) > 1480) { //#24388
                $j--; //#24387
                $k[$j++] = 'bwipp.codeoneTooLong#24387'; //#24387
                $k[$j++] = "Maximum length exceeded"; //#24387
                bwipp_raiseerror(); //#24387
            } //#24387
            var _BE = $k[--$j]; //#24389
            $puti($_.cws, $_.j, _BE); //#24389
            $_.j = _BE.length + $_.j; //#24390
        }; //#24390
        $_.tobin = function() {
            var _BJ = $s($k[--$j]); //#24394
            $k[$j++] = _BJ; //#24394
            for (var _BL = 0, _BK = _BJ.length - 1; _BL <= _BK; _BL += 1) { //#24394
                var _BM = $k[$j - 1]; //#24394
                $put(_BM, _BL, 48); //#24394
            } //#24394
            var _BN = $k[$j - 1]; //#24395
            $k[$j++] = _BN; //#24395
            var _BO = $k[$j - 3]; //#24395
            var _BP = $k[$j - 1]; //#24395
            $k[$j - 3] = $k[$j - 2]; //#24395
            $j -= 2; //#24395
            var _BR = $cvrs($s(_BP.length), _BO, 2); //#24395
            $puti(_BP, _BP.length - _BR.length, _BR); //#24395
            $k[$j++] = Infinity; //#24396
            var _BS = $k[--$j]; //#24396
            var _BT = $k[--$j]; //#24396
            $k[$j++] = _BS; //#24396
            $forall(_BT, function() { //#24396
                var _BU = $k[--$j]; //#24396
                $k[$j++] = _BU - 48; //#24396
            }); //#24396
            var _BV = $a(); //#24396
            $k[$j++] = _BV; //#24396
        }; //#24396
        $_.encA = function() {
            for (var _BW = 0; _BW < 1; _BW++) { //#24441
                if ($get($_.numD, $_.i) >= 21) { //#24405
                    $_.Dbits = $a([1, 1, 1, 1]); //#24402
                    $_.mode = $_.D; //#24403
                    break; //#24404
                } //#24404
                var _Be = $get($_.numD, $_.i); //#24406
                if ((_Be >= 13) && ($f(_Be + $_.i) == $_.msglen)) { //#24410
                    $_.Dbits = $a([1, 1, 1, 1]); //#24407
                    $_.mode = $_.D; //#24408
                    break; //#24409
                } //#24409
                if ($get($_.numD, $_.i) >= 2) { //#24415
                    var _Bm = $s(2); //#24412
                    $put(_Bm, 0, $get($_.msg, $_.i)); //#24412
                    $put(_Bm, 1, $get($_.msg, $_.i + 1)); //#24412
                    $k[$j++] = $get($_.Avals, _Bm); //#24412
                    $_.addtocws(); //#24412
                    $_.i = $_.i + 2; //#24413
                    break; //#24414
                } //#24414
                if ($get($_.msg, $_.i) == $_.fnc1) { //#24431
                    if ($get($_.numD, $_.i + 1) >= 15) { //#24423
                        $k[$j++] = $get($_.Avals, $_.fnc1lD); //#24418
                        $_.addtocws(); //#24418
                        $_.i = $_.i + 1; //#24419
                        $_.Dbits = $a([]); //#24420
                        $_.mode = $_.D; //#24421
                        break; //#24422
                    } //#24422
                    var _CB = $get($_.numD, $_.i + 1); //#24424
                    if ((_CB >= 7) && (($f(_CB + $_.i) + 1) == $_.msglen)) { //#24430
                        $k[$j++] = $get($_.Avals, $_.fnc1lD); //#24425
                        $_.addtocws(); //#24425
                        $_.i = $_.i + 1; //#24426
                        $_.Dbits = $a([]); //#24427
                        $_.mode = $_.D; //#24428
                        break; //#24429
                    } //#24429
                } //#24429
                $k[$j++] = 'newmode'; //#24432
                $_.lookup(); //#24432
                var _CK = $k[--$j]; //#24432
                $_[$k[--$j]] = _CK; //#24432
                if ($_.newmode != $_.mode) { //#24437
                    $k[$j++] = $get($_.Avals, $get($a([-1, $_.lC, $_.lT, $_.lX, $_.lD, $_.lB]), $_.newmode)); //#24434
                    $_.addtocws(); //#24434
                    $_.mode = $_.newmode; //#24435
                    break; //#24436
                } //#24436
                $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#24438
                $_.addtocws(); //#24438
                $_.i = $_.i + 1; //#24439
                break; //#24440
            } //#24440
        }; //#24440
        $_.CTXvalstocws = function() {
            $_.in = $k[--$j]; //#24445
            $k[$j++] = Infinity; //#24446
            for (var _Ci = 0, _Ch = $_.in.length - 1; _Ci <= _Ch; _Ci += 3) { //#24450
                var _Ck = $geti($_.in, _Ci, 3); //#24448
                $k[$j++] = 0; //#24448
                for (var _Cl = 0, _Cm = _Ck.length; _Cl < _Cm; _Cl++) { //#24448
                    var _Co = $k[--$j]; //#24448
                    $k[$j++] = $f(_Co + $get(_Ck, _Cl)) * 40; //#24448
                } //#24448
                var _Cq = (~~($k[--$j] / 40)) + 1; //#24449
                $k[$j++] = ~~(_Cq / 256); //#24449
                $k[$j++] = _Cq % 256; //#24449
            } //#24449
            $astore($a($counttomark())); //#24451
            var _Ct = $k[--$j]; //#24451
            $k[$j - 1] = _Ct; //#24451
        }; //#24451
        $_.encCTX = function() {
            $_.p = 0; //#24455
            $_.ctxvals = $a(2220); //#24456
            for (;;) { //#24553
                if ($_.i == $_.msglen) { //#24460
                    break; //#24460
                } //#24460
                if (($_.p % 3) == 0) { //#24548
                    if ($get($_.numD, $_.i) >= 12) { //#24467
                        $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#24463
                        $_.CTXvalstocws(); //#24463
                        $_.addtocws(); //#24463
                        $k[$j++] = $a([$_.unlcw]); //#24464
                        $_.addtocws(); //#24464
                        $_.mode = $_.A; //#24465
                        break; //#24466
                    } //#24466
                    var _DA = $get($_.numD, $_.i); //#24468
                    if ((_DA >= 8) && ($f(_DA + $_.i) == $_.msglen)) { //#24473
                        $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#24469
                        $_.CTXvalstocws(); //#24469
                        $_.addtocws(); //#24469
                        $k[$j++] = $a([$_.unlcw]); //#24470
                        $_.addtocws(); //#24470
                        $_.mode = $_.A; //#24471
                        break; //#24472
                    } //#24472
                    if ($_.mode == $_.X) { //#24495
                        var _DP = $get($_.Xvals, $get($_.msg, $_.i)) !== undefined; //#24475
                        if (!_DP) { //#24483
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#24476
                            $_.CTXvalstocws(); //#24476
                            $_.addtocws(); //#24476
                            if (($get($_.numremcws, $_.j) != 1) || ($get($_.msg, $_.i) > 127)) { //#24480
                                $k[$j++] = $a([$_.unlcw]); //#24479
                                $_.addtocws(); //#24479
                            } //#24479
                            $_.mode = $_.A; //#24481
                            break; //#24482
                        } //#24482
                        if (($_.i + 1) < $_.msglen) { //#24489
                            var _Di = $get($_.Xvals, $get($_.msg, $_.i + 1)) !== undefined; //#24485
                            if (!_Di) { //#24485
                                break; //#24485
                            } //#24485
                            if (($_.i + 2) < $_.msglen) { //#24488
                                var _Dp = $get($_.Xvals, $get($_.msg, $_.i + 2)) !== undefined; //#24487
                                if (!_Dp) { //#24487
                                    break; //#24487
                                } //#24487
                            } //#24487
                        } //#24487
                    } else { //#24495
                        $_.lookup(); //#24491
                        if ($k[--$j] != $_.mode) { //#24496
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#24492
                            $_.CTXvalstocws(); //#24492
                            $_.addtocws(); //#24492
                            $k[$j++] = $a([$_.unlcw]); //#24493
                            $_.addtocws(); //#24493
                            $_.mode = $_.A; //#24494
                            break; //#24495
                        } //#24495
                    } //#24495
                    if (($_.msglen - $_.i) <= 3) { //#24547
                        $_.remcws = $get($_.numremcws, $_.j + ((~~($_.p / 3)) * 2)); //#24499
                        $k[$j++] = Infinity; //#24500
                        var _E8 = $geti($_.msg, $_.i, $_.msglen - $_.i); //#24501
                        for (var _E9 = 0, _EA = _E8.length; _E9 < _EA; _E9++) { //#24507
                            var _EB = $get(_E8, _E9); //#24507
                            var _EF = $get($get($_.encvals, $_.mode), _EB) !== undefined; //#24502
                            $k[$j++] = _EB; //#24506
                            if (_EF) { //#24505
                                $aload($get($get($_.encvals, $_.mode), $k[--$j])); //#24503
                            } else { //#24505
                                $k[$j - 1] = -1; //#24505
                                $k[$j++] = -1; //#24505
                                $k[$j++] = -1; //#24505
                                $k[$j++] = -1; //#24505
                            } //#24505
                        } //#24505
                        $_.remvals = $a(); //#24505
                        if (($_.remcws == 2) && ($_.remvals.length == 3)) { //#24518
                            $k[$j++] = Infinity; //#24511
                            $aload($geti($_.ctxvals, 0, $_.p)); //#24512
                            $aload($_.remvals); //#24513
                            var _ES = $a(); //#24513
                            $k[$j++] = _ES; //#24514
                            $_.CTXvalstocws(); //#24514
                            $_.addtocws(); //#24514
                            $_.mode = $_.A; //#24515
                            $_.i = $_.msglen; //#24516
                            break; //#24517
                        } //#24517
                        if ((($_.remcws == 2) && ($_.remvals.length == 2)) && ($_.mode != $_.X)) { //#24529
                            $k[$j++] = Infinity; //#24521
                            $aload($geti($_.ctxvals, 0, $_.p)); //#24522
                            $aload($_.remvals); //#24523
                            $aload($get($get($_.encvals, $_.mode), $_.sft1)); //#24524
                            var _Ei = $a(); //#24524
                            $k[$j++] = _Ei; //#24525
                            $_.CTXvalstocws(); //#24525
                            $_.addtocws(); //#24525
                            $_.mode = $_.A; //#24526
                            $_.i = $_.msglen; //#24527
                            break; //#24528
                        } //#24528
                        if (($_.remcws == 2) && ($_.remvals.length == 1)) { //#24538
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#24532
                            $_.CTXvalstocws(); //#24532
                            $_.addtocws(); //#24532
                            $k[$j++] = $a([$_.unlcw]); //#24533
                            $_.addtocws(); //#24533
                            $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#24534
                            $_.addtocws(); //#24534
                            $_.mode = $_.A; //#24535
                            $_.i = $_.msglen; //#24536
                            break; //#24537
                        } //#24537
                        if (($_.remcws == 1) && ($_.remvals.length == 1)) { //#24546
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#24541
                            $_.CTXvalstocws(); //#24541
                            $_.addtocws(); //#24541
                            $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#24542
                            $_.addtocws(); //#24542
                            $_.mode = $_.A; //#24543
                            $_.i = $_.msglen; //#24544
                            break; //#24545
                        } //#24545
                    } //#24545
                } //#24545
                var _FH = $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)); //#24549
                $puti($_.ctxvals, $_.p, _FH); //#24550
                $_.p = _FH.length + $_.p; //#24551
                $_.i = $_.i + 1; //#24552
            } //#24552
            if ($_.mode != $_.A) { //#24577
                for (;;) { //#24561
                    if (($_.p % 3) == 0) { //#24558
                        break; //#24558
                    } //#24558
                    $_.i = $_.i - 1; //#24559
                    $_.p = $_.p - $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)).length; //#24560
                } //#24560
                $k[$j++] = Infinity; //#24562
                $aload($geti($_.ctxvals, 0, $_.p)); //#24563
                var _Fb = $a(); //#24563
                $k[$j++] = _Fb; //#24564
                $_.CTXvalstocws(); //#24564
                $_.addtocws(); //#24564
                $k[$j++] = $a([$_.unlcw]); //#24565
                $_.addtocws(); //#24565
                $_.mode = $_.A; //#24566
                if ($_.i != $_.msglen) { //#24576
                    if ($get($_.numD, $_.i) >= 2) { //#24574
                        var _Fk = $s(2); //#24570
                        $put(_Fk, 0, $get($_.msg, $_.i)); //#24570
                        $put(_Fk, 1, $get($_.msg, $_.i + 1)); //#24570
                        $k[$j++] = $get($_.Avals, _Fk); //#24570
                        $_.addtocws(); //#24570
                        $_.i = $_.i + 2; //#24571
                    } else { //#24574
                        $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#24573
                        $_.addtocws(); //#24573
                        $_.i = $_.i + 1; //#24574
                    } //#24574
                } //#24574
            } //#24574
        }; //#24574
        $_.encD = function() {
            for (;;) { //#24638
                if ($get($_.numD, $_.i) < 3) { //#24628
                    $_.Drem = (8 - ($_.Dbits.length % 8)) % 8; //#24587
                    $_.remcws = $get($_.numremcws, $_.j + (~~($_.Dbits.length / 8))); //#24588
                    if ((((($get($_.numremcws, ($_.j + (~~($_.Dbits.length / 8))) - 1) - 1) == 0) && ($_.Drem == 0)) || (($_.remcws == 1) && ($_.Drem != 0))) && ($_.i == $_.msglen)) { //#24597
                        if (($_.Drem == 4) || ($_.Drem == 6)) { //#24594
                            $k[$j++] = Infinity; //#24594
                            $aload($_.Dbits); //#24594
                            $k[$j++] = 1; //#24594
                            $k[$j++] = 1; //#24594
                            $k[$j++] = 1; //#24594
                            $k[$j++] = 1; //#24594
                            $_.Dbits = $a(); //#24594
                        } //#24594
                        if (($_.Drem == 2) || ($_.Drem == 6)) { //#24595
                            $k[$j++] = Infinity; //#24595
                            $aload($_.Dbits); //#24595
                            $k[$j++] = 0; //#24595
                            $k[$j++] = 1; //#24595
                            $_.Dbits = $a(); //#24595
                        } //#24595
                        break; //#24596
                    } //#24596
                    if ((((($_.i == ($_.msglen - 1)) && ($get($_.numD, $_.i) == 1)) || (($_.i == ($_.msglen - 2)) && ($get($_.numD, $_.i) == 2))) && ($_.remcws == 1)) && ($_.Drem == 0)) { //#24602
                        break; //#24602
                    } //#24602
                    if (!(((($_.i == ($_.msglen - 1)) && ($get($_.numD, $_.i) == 1)) && ($_.remcws == 1)) && (($_.Drem == 4) || ($_.Drem == 6)))) { //#24609
                        $k[$j++] = Infinity; //#24607
                        $aload($_.Dbits); //#24607
                        $k[$j++] = 1; //#24607
                        $k[$j++] = 1; //#24607
                        $k[$j++] = 1; //#24607
                        $k[$j++] = 1; //#24607
                        $k[$j++] = 1; //#24607
                        $k[$j++] = 1; //#24607
                        $_.Dbits = $a(); //#24607
                        $_.Drem = (8 - ($_.Dbits.length % 8)) % 8; //#24608
                    } //#24608
                    if (($_.Drem == 4) || ($_.Drem == 6)) { //#24620
                        if ($get($_.numD, $_.i) >= 1) { //#24617
                            $k[$j++] = Infinity; //#24614
                            $aload($_.Dbits); //#24614
                            $k[$j++] = ($get($_.msg, $_.i) - 48) + 1; //#24614
                            $k[$j++] = 4; //#24614
                            $_.tobin(); //#24614
                            $aload($k[--$j]); //#24614
                            $_.Dbits = $a(); //#24614
                            $_.i = $_.i + 1; //#24615
                        } else { //#24617
                            $k[$j++] = Infinity; //#24617
                            $aload($_.Dbits); //#24617
                            $k[$j++] = 1; //#24617
                            $k[$j++] = 1; //#24617
                            $k[$j++] = 1; //#24617
                            $k[$j++] = 1; //#24617
                            $_.Dbits = $a(); //#24617
                        } //#24617
                        $_.Drem = $_.Drem - 4; //#24619
                    } //#24619
                    if ($_.Drem == 2) { //#24624
                        $k[$j++] = Infinity; //#24622
                        $aload($_.Dbits); //#24622
                        $k[$j++] = 0; //#24622
                        $k[$j++] = 1; //#24622
                        $_.Dbits = $a(); //#24622
                        $_.Drem = 0; //#24623
                    } //#24623
                    break; //#24626
                } //#24626
                $k[$j++] = Infinity; //#24631
                $aload($_.Dbits); //#24632
                var _H7 = $geti($_.msg, $_.i, 3); //#24633
                $k[$j++] = 0; //#24633
                for (var _H8 = 0, _H9 = _H7.length; _H8 < _H9; _H8++) { //#24633
                    var _HB = $k[--$j]; //#24633
                    $k[$j++] = ($f(_HB + ($get(_H7, _H8) - 48))) * 10; //#24633
                } //#24633
                var _HC = $k[--$j]; //#24633
                $k[$j++] = (~~(_HC / 10)) + 1; //#24634
                $k[$j++] = 10; //#24634
                $_.tobin(); //#24634
                $aload($k[--$j]); //#24634
                $_.Dbits = $a(); //#24634
                $_.i = $_.i + 3; //#24636
            } //#24636
            $k[$j++] = Infinity; //#24640
            for (var _HI = 0, _HH = $_.Dbits.length - 1; _HI <= _HH; _HI += 8) { //#24643
                var _HK = $geti($_.Dbits, _HI, 8); //#24642
                $k[$j++] = 0; //#24642
                for (var _HL = 0, _HM = _HK.length; _HL < _HM; _HL++) { //#24642
                    var _HO = $k[--$j]; //#24642
                    $k[$j++] = $f(_HO + $get(_HK, _HL)) * 2; //#24642
                } //#24642
                var _HP = $k[--$j]; //#24642
                $k[$j++] = ~~(_HP / 2); //#24642
            } //#24642
            $astore($a($counttomark())); //#24644
            var _HS = $k[--$j]; //#24644
            $k[$j - 1] = _HS; //#24644
            $_.addtocws(); //#24644
            $_.mode = $_.A; //#24645
        }; //#24645
        $_.encB = function() {
            $_.p = 0; //#24650
            $_.bvals = $a(1480); //#24650
            for (;;) { //#24657
                if ($_.i == $_.msglen) { //#24651
                    break; //#24651
                } //#24651
                if ($get($_.msg, $_.i) < 0) { //#24652
                    break; //#24652
                } //#24652
                $_.lookup(); //#24653
                if ($k[--$j] != $_.mode) { //#24653
                    break; //#24653
                } //#24653
                $put($_.bvals, $_.p, $get($_.msg, $_.i)); //#24654
                $_.p = $_.p + 1; //#24655
                $_.i = $_.i + 1; //#24656
            } //#24656
            $_.remcws = $get($_.numremcws, $_.j + $_.p) - 1; //#24658
            $k[$j++] = Infinity; //#24659
            if (($_.remcws == 0) && ($_.i == $_.msglen)) { //#24663
                $k[$j++] = 0; //#24661
            } else { //#24663
                if ($_.p < 250) { //#24663
                    $k[$j++] = $_.p; //#24663
                } else { //#24663
                    $k[$j++] = (~~($_.p / 250)) + 249; //#24663
                    $k[$j++] = $_.p % 250; //#24663
                } //#24663
            } //#24663
            $aload($geti($_.bvals, 0, $_.p)); //#24665
            $_.bvals = $a(); //#24665
            $k[$j++] = $_.bvals; //#24667
            $_.addtocws(); //#24667
            $_.mode = $_.A; //#24668
        }; //#24668
        $_.cws = $a(1480); //#24672
        $_.mode = $_.A; //#24673
        $_.i = 0; //#24673
        $_.j = 0; //#24673
        for (;;) { //#24676
            if ($_.i >= $_.msglen) { //#24674
                break; //#24674
            } //#24674
            if ($_[$get($a(['encA', 'encCTX', 'encCTX', 'encCTX', 'encD', 'encB']), $_.mode)]() === true) {
                break;
            } //#24675
        } //#24675
        $_.cws = $geti($_.cws, 0, $_.j); //#24677
    } //#24677
    var _IC = $_.metrics; //#24682
    for (var _ID = 0, _IE = _IC.length; _ID < _IE; _ID++) { //#24700
        $_.m = $get(_IC, _ID); //#24683
        $_.vers = $get($_.m, 0); //#24684
        $_.rows = $get($_.m, 1); //#24685
        $_.cols = $get($_.m, 2); //#24686
        $_.dcol = $get($_.m, 3); //#24687
        $_.dcws = $get($_.m, 4); //#24688
        $_.rscw = $get($_.m, 5); //#24689
        $_.rsbl = $get($_.m, 6); //#24690
        $_.riso = $get($_.m, 7); //#24691
        $_.risi = $get($_.m, 8); //#24692
        $_.risl = $get($_.m, 9); //#24693
        $_.dcpb = ~~($_.dcws / $_.rsbl); //#24694
        $_.ecpb = ~~($_.rscw / $_.rsbl); //#24695
        $_.okay = true; //#24696
        if ($ne($_.version, "unset") && $ne($_.version, $_.vers)) { //#24697
            $_.okay = false; //#24697
        } //#24697
        if ($_.cws.length > $_.dcws) { //#24698
            $_.okay = false; //#24698
        } //#24698
        if ($_.okay) { //#24699
            break; //#24699
        } //#24699
    } //#24699
    if (!$_.okay) { //#24704
        $k[$j++] = 'bwipp.codeoneNoValidSymbol#24703'; //#24703
        $k[$j++] = "Maximum length exceeded"; //#24703
        bwipp_raiseerror(); //#24703
    } //#24703
    if (!$_.stype) { //#24710
        $k[$j++] = Infinity; //#24708
        $aload($_.cws); //#24708
        for (var _Ip = 0, _Iq = $f($_.dcws - $_.cws.length); _Ip < _Iq; _Ip++) { //#24708
            $k[$j++] = 129; //#24708
        } //#24708
        $_.cws = $a(); //#24708
    } else { //#24710
        $k[$j++] = Infinity; //#24710
        for (var _Iu = 0, _Iv = $f($_.dcws - $_.cws.length); _Iu < _Iv; _Iu++) { //#24710
            $k[$j++] = 0; //#24710
        } //#24710
        $aload($_.cws); //#24710
        $_.cws = $a(); //#24710
    } //#24710
    var _Iz = $get($_.options, 'debugcws') !== undefined; //#24713
    if (_Iz) { //#24713
        $k[$j++] = 'bwipp.debugcws#24713'; //#24713
        $k[$j++] = $_.cws; //#24713
        bwipp_raiseerror(); //#24713
    } //#24713
    $_.cwbs = $a($_.rsbl); //#24716
    $_.ecbs = $a($_.rsbl); //#24717
    for (var _J7 = 0, _J6 = $_.rsbl - 1; _J7 <= _J6; _J7 += 1) { //#24726
        $_.i = _J7; //#24719
        $_.cwb = $a($_.dcpb); //#24720
        for (var _JC = 0, _JB = $_.dcpb - 1; _JC <= _JB; _JC += 1) { //#24724
            $_.j = _JC; //#24722
            $put($_.cwb, $_.j, $get($_.cws, $f(($_.j * $_.rsbl) + $_.i))); //#24723
        } //#24723
        $put($_.cwbs, $_.i, $_.cwb); //#24725
    } //#24725
    var _JO = $_.stype ? 32 : 256; //#24729
    $_.gf = _JO; //#24729
    $_['gf-1'] = $_.gf - 1; //#24730
    var _JR = $_.stype ? 37 : 301; //#24731
    $_.pm = _JR; //#24731
    $k[$j++] = Infinity; //#24732
    $k[$j++] = 1; //#24732
    for (var _JT = 0, _JU = $_["gf-1"]; _JT < _JU; _JT++) { //#24732
        var _JV = $k[$j - 1]; //#24732
        var _JW = _JV * 2; //#24732
        $k[$j++] = _JW; //#24732
        if (_JW >= $_.gf) { //#24732
            var _JZ = $k[--$j]; //#24732
            $k[$j++] = _JZ ^ $_.pm; //#24732
        } //#24732
    } //#24732
    $_.rsalog = $a(); //#24732
    $_.rslog = $a($_.gf); //#24733
    for (var _Jf = 1, _Je = $_["gf-1"]; _Jf <= _Je; _Jf += 1) { //#24734
        $put($_.rslog, $get($_.rsalog, _Jf), _Jf); //#24734
    } //#24734
    $_.rsprod = function() {
        var _Jj = $k[$j - 1]; //#24736
        var _Jk = $k[$j - 2]; //#24736
        if ((_Jj != 0) && (_Jk != 0)) { //#24739
            var _Jn = $get($_.rslog, $k[--$j]); //#24737
            var _Jt = $get($_.rsalog, $f(_Jn + $get($_.rslog, $k[--$j])) % $_["gf-1"]); //#24737
            $k[$j++] = _Jt; //#24737
        } else { //#24739
            $j -= 2; //#24739
            $k[$j++] = 0; //#24739
        } //#24739
    }; //#24739
    $k[$j++] = Infinity; //#24744
    $k[$j++] = 1; //#24744
    for (var _Jv = 0, _Jw = $_.ecpb; _Jv < _Jw; _Jv++) { //#24744
        $k[$j++] = 0; //#24744
    } //#24744
    $_.coeffs = $a(); //#24744
    for (var _K0 = 0, _Jz = $_.ecpb - 1; _K0 <= _Jz; _K0 += 1) { //#24753
        $_.i = _K0; //#24746
        $put($_.coeffs, $_.i + 1, $get($_.coeffs, $_.i)); //#24747
        for (var _K7 = $_.i; _K7 >= 1; _K7 -= 1) { //#24751
            $_.j = _K7; //#24749
            $k[$j++] = $_.coeffs; //#24750
            $k[$j++] = $_.j; //#24750
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#24750
            $k[$j++] = $get($_.coeffs, $_.j); //#24750
            $k[$j++] = $get($_.rsalog, $_.i); //#24750
            $_.rsprod(); //#24750
            var _KJ = $k[--$j]; //#24750
            var _KK = $k[--$j]; //#24750
            var _KL = $k[--$j]; //#24750
            $put($k[--$j], _KL, $xo(_KK, _KJ)); //#24750
        } //#24750
        $k[$j++] = $_.coeffs; //#24752
        $k[$j++] = 0; //#24752
        $k[$j++] = $get($_.coeffs, 0); //#24752
        $k[$j++] = $get($_.rsalog, $_.i); //#24752
        $_.rsprod(); //#24752
        var _KT = $k[--$j]; //#24752
        var _KU = $k[--$j]; //#24752
        $put($k[--$j], _KU, _KT); //#24752
    } //#24752
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#24754
    for (var _Kb = 0, _Ka = $_.cwbs.length - 1; _Kb <= _Ka; _Kb += 1) { //#24769
        $_.i = _Kb; //#24758
        $k[$j++] = Infinity; //#24759
        $aload($get($_.cwbs, $_.i)); //#24759
        for (var _Kg = 0, _Kh = $_.ecpb; _Kg < _Kh; _Kg++) { //#24759
            $k[$j++] = 0; //#24759
        } //#24759
        $_.rscws = $a(); //#24759
        for (var _Kl = 0, _Kk = $_.dcpb - 1; _Kl <= _Kk; _Kl += 1) { //#24767
            $_.m = _Kl; //#24761
            $_.k = $get($_.rscws, $_.m); //#24762
            for (var _Kr = 0, _Kq = $_.ecpb - 1; _Kr <= _Kq; _Kr += 1) { //#24766
                $_.j = _Kr; //#24764
                $k[$j++] = $_.rscws; //#24765
                $k[$j++] = ($_.m + $_.j) + 1; //#24765
                $k[$j++] = $get($_.coeffs, ($_.ecpb - $_.j) - 1); //#24765
                $k[$j++] = $_.k; //#24765
                $_.rsprod(); //#24765
                var _L4 = $k[--$j]; //#24765
                var _L5 = $k[--$j]; //#24765
                $put($k[--$j], _L5, $xo(_L4, $get($_.rscws, ($_.m + $_.j) + 1))); //#24765
            } //#24765
        } //#24765
        $put($_.ecbs, $_.i, $geti($_.rscws, $_.dcpb, $_.ecpb)); //#24768
    } //#24768
    $k[$j++] = Infinity; //#24772
    $aload($_.cws); //#24772
    for (var _LF = 0, _LG = $_.rscw; _LF < _LG; _LF++) { //#24772
        $k[$j++] = 0; //#24772
    } //#24772
    $_.cws = $a(); //#24772
    for (var _LK = 0, _LJ = $_.rscw - 1; _LK <= _LJ; _LK += 1) { //#24776
        $_.i = _LK; //#24774
        $put($_.cws, $f($_.dcws + $_.i), $get($get($_.ecbs, $_.i % $_.rsbl), ~~($_.i / $_.rsbl))); //#24775
    } //#24775
    var _LY = $_.stype ? 5 : 8; //#24779
    $_.mmat = $a($f($_.dcws + $_.rscw) * _LY); //#24779
    $_.r = 0; //#24780
    $_.c = 0; //#24780
    var _Lb = $_.stype ? 2 : 1; //#24781
    for (var _Le = 0, _Lf = _Lb, _Ld = $_.cws.length - 1; _Lf < 0 ? _Le >= _Ld : _Le <= _Ld; _Le += _Lf) { //#24802
        $_.i = _Le; //#24782
        if (!$_.stype) { //#24796
            var _Li = $strcpy($s(8), "00000000"); //#24784
            var _Ln = $cvrs($s(8), $get($_.cws, $_.i), 2); //#24784
            $puti(_Li, 8 - _Ln.length, _Ln); //#24785
            var _Lo = Infinity; //#24785
            var _Lp = _Li; //#24785
            $k[$j++] = _Lo; //#24785
            $forall(_Lp, function() { //#24785
                var _Lq = $k[--$j]; //#24785
                $k[$j++] = _Lq - 48; //#24785
            }); //#24785
            var _Lr = $a(); //#24785
            $_.top = $geti(_Lr, 0, 4); //#24786
            $_.bot = $geti(_Lr, 4, 4); //#24787
        } else { //#24796
            var _Lv = $strcpy($s(5), "00000"); //#24789
            var _M0 = $cvrs($s(5), $get($_.cws, $_.i), 2); //#24789
            $puti(_Lv, 5 - _M0.length, _M0); //#24790
            var _M1 = Infinity; //#24790
            var _M2 = _Lv; //#24790
            $k[$j++] = _M1; //#24790
            $forall(_M2, function() { //#24790
                var _M3 = $k[--$j]; //#24790
                $k[$j++] = _M3 - 48; //#24790
            }); //#24790
            $_.c1 = $a(); //#24791
            var _M6 = $strcpy($s(5), "00000"); //#24792
            var _MB = $cvrs($s(5), $get($_.cws, $_.i + 1), 2); //#24792
            $puti(_M6, 5 - _MB.length, _MB); //#24793
            var _MC = Infinity; //#24793
            var _MD = _M6; //#24793
            $k[$j++] = _MC; //#24793
            $forall(_MD, function() { //#24793
                var _ME = $k[--$j]; //#24793
                $k[$j++] = _ME - 48; //#24793
            }); //#24793
            $_.c2 = $a(); //#24794
            $k[$j++] = Infinity; //#24795
            $aload($geti($_.c1, 0, 3)); //#24795
            $aload($geti($_.c2, 0, 2)); //#24795
            $_.top = $a(); //#24795
            $k[$j++] = Infinity; //#24796
            $aload($geti($_.c1, 3, 2)); //#24796
            $aload($geti($_.c2, 2, 3)); //#24796
            $_.bot = $a(); //#24796
        } //#24796
        $puti($_.mmat, $f(($_.r * $_.dcol) + $_.c), $_.top); //#24798
        $puti($_.mmat, $f((($_.r + 1) * $_.dcol) + $_.c), $_.bot); //#24799
        $_.c = $_.c + $_.top.length; //#24800
        if ($_.c == $_.dcol) { //#24801
            $_.c = 0; //#24801
            $_.r = $_.r + 2; //#24801
        } //#24801
    } //#24801
    $_.mmv = function() {
        var _Mg = $k[--$j]; //#24805
        var _Mh = $k[--$j]; //#24805
        $k[$j++] = $f(_Mh + (_Mg * $_.cols)); //#24805
    }; //#24805
    $k[$j++] = Infinity; //#24806
    for (var _Mk = 0, _Ml = $_.rows * $_.cols; _Mk < _Ml; _Mk++) { //#24806
        $k[$j++] = -1; //#24806
    } //#24806
    $_.pixs = $a(); //#24806
    var _NH = $a([function() {
        for (var _Mo = 0, _Mp = $_.cols; _Mo < _Mp; _Mo++) { //#24810
            $k[$j++] = 0; //#24810
        } //#24810
    }, function() {
        for (var _Mr = 0, _Ms = $_.cols; _Mr < _Ms; _Mr++) { //#24811
            $k[$j++] = 1; //#24811
        } //#24811
    }, function() {
        $k[$j++] = 0; //#24812
        for (var _Mu = 0, _Mv = $_.cols - 2; _Mu < _Mv; _Mu++) { //#24812
            $k[$j++] = 1; //#24812
        } //#24812
        $k[$j++] = 0; //#24812
    }, function() {
        $k[$j++] = 0; //#24813
        $k[$j++] = 1; //#24813
        for (var _Mx = 0, _My = $_.cols - 4; _Mx < _My; _Mx++) { //#24813
            $k[$j++] = 0; //#24813
        } //#24813
        $k[$j++] = 1; //#24813
        $k[$j++] = 0; //#24813
    }, function() {
        for (var _N0 = 0, _N1 = ~~(($_.cols - 1) / 2); _N0 < _N1; _N0++) { //#24814
            $k[$j++] = -1; //#24814
        } //#24814
        $k[$j++] = 1; //#24814
        for (var _N3 = 0, _N4 = ~~(($_.cols - 1) / 2); _N3 < _N4; _N3++) { //#24814
            $k[$j++] = -1; //#24814
        } //#24814
    }, function() {
        for (var _N6 = 0, _N7 = ~~(($_.cols - 1) / 2); _N6 < _N7; _N6++) { //#24815
            $k[$j++] = -1; //#24815
        } //#24815
        $k[$j++] = 0; //#24815
        for (var _N9 = 0, _NA = ~~(($_.cols - 1) / 2); _N9 < _NA; _N9++) { //#24815
            $k[$j++] = -1; //#24815
        } //#24815
    }, function() {
        $k[$j++] = 1; //#24816
        for (var _NC = 0, _ND = $_.cols - 2; _NC < _ND; _NC++) { //#24816
            $k[$j++] = 0; //#24816
        } //#24816
        $k[$j++] = 1; //#24816
    }, function() {
        $k[$j++] = 1; //#24817
        $k[$j++] = 0; //#24817
        for (var _NF = 0, _NG = $_.cols - 4; _NF < _NG; _NF++) { //#24817
            $k[$j++] = 1; //#24817
        } //#24817
        $k[$j++] = 0; //#24817
        $k[$j++] = 1; //#24817
    }]); //#24817
    $_.artifact = _NH; //#24818
    var _NI = new Map([
        ["A", "121343"],
        ["B", "12134343"],
        ["C", "12121343"],
        ["D", "1213434343"],
        ["E", "1212134343"],
        ["F", "1212121343"],
        ["G", "121213434343"],
        ["H", "121212134343"],
        ["S", "56661278"],
        ["T", "5666666666127878"]
    ]); //#24830
    $_.cpatmap = _NI; //#24831
    $_.cpat = $get($_.cpatmap, $geti($_.vers, 0, 1)); //#24833
    $k[$j++] = $_.pixs; //#24834
    $k[$j++] = 0; //#24834
    $k[$j++] = ~~($f($_.rows - $_.cpat.length) / 2); //#24834
    $_.mmv(); //#24834
    $k[$j++] = Infinity; //#24835
    $forall($_.cpat, function() { //#24835
        if ($get($_.artifact, $k[--$j] - 49)() === true) {
            return true;
        } //#24835
    }); //#24835
    var _NV = $a(); //#24835
    var _NW = $k[--$j]; //#24835
    $puti($k[--$j], _NW, _NV); //#24835
    for (var _Na = 0, _NZ = $_.risl - 1; _Na <= _NZ; _Na += 1) { //#24850
        $_.i = _Na; //#24839
        for (var _Nf = $_.riso, _Ng = $_.risi, _Ne = $_.cols - 1; _Ng < 0 ? _Nf >= _Ne : _Nf <= _Ne; _Nf += _Ng) { //#24849
            $_.j = _Nf; //#24841
            var _Ni = (($_.i % 12) == 0) ? 1 : 0; //#24842
            var _Nj = $a([1, _Ni]); //#24842
            $k[$j++] = _Nj; //#24843
            $k[$j++] = _Nj; //#24843
            $k[$j++] = $_.pixs; //#24843
            $k[$j++] = $_.j; //#24843
            $k[$j++] = $_.i; //#24843
            $_.mmv(); //#24843
            var _Nn = $k[$j - 3]; //#24844
            var _No = $k[$j - 1]; //#24844
            $puti($k[$j - 2], _No, _Nn); //#24844
            $j -= 3; //#24844
            if ($_.i != ($_.risl - 1)) { //#24848
                $k[$j++] = $_.pixs; //#24846
                $k[$j++] = $f($_.cols - $_.j) - 2; //#24846
                $k[$j++] = $f($_.rows - $_.i) - 1; //#24846
                $_.mmv(); //#24846
                var _Nx = $k[$j - 3]; //#24847
                var _Ny = $k[$j - 1]; //#24847
                $puti($k[$j - 2], _Ny, _Nx); //#24847
                $j -= 3; //#24847
            } else { //#24848
                $j--; //#24848
            } //#24848
        } //#24848
    } //#24848
    var _Od = new Map([
        ["A", $a([$a([12, 5])])],
        ["B", $a([$a([16, 7])])],
        ["C", $a([$a([26, 12])])],
        ["D", $a([])],
        ["E", $a([$a([26, 23])])],
        ["F", $a([$a([26, 32]), $a([70, 32]), $a([26, 34]), $a([70, 34])])],
        ["G", $a([$a([27, 48]), $a([69, 48])])],
        ["H", $a([$a([26, 70]), $a([66, 70]), $a([106, 70]), $a([26, 72]), $a([66, 72]), $a([106, 72])])],
        ["S-10", $a([])],
        ["S-20", $a([$a([10, 4])])],
        ["S-30", $a([$a([15, 4]), $a([15, 6])])],
        ["T-16", $a([$a([8, 10])])],
        ["T-32", $a([$a([16, 10]), $a([16, 12])])],
        ["T-48", $a([$a([24, 10]), $a([24, 12]), $a([24, 14])])]
    ]); //#24868
    $_.blackdotmap = _Od; //#24869
    $forall($get($_.blackdotmap, $_.vers), function() { //#24871
        var _Oj = $k[--$j]; //#24871
        $k[$j++] = $_.pixs; //#24871
        $aload(_Oj); //#24871
        $_.mmv(); //#24871
        var _Ok = $k[--$j]; //#24871
        $put($k[--$j], _Ok, 1); //#24871
    }); //#24871
    $_.j = 0; //#24874
    for (var _Oo = 0, _On = $_.pixs.length - 1; _Oo <= _On; _Oo += 1) { //#24881
        $_.i = _Oo; //#24876
        if ($get($_.pixs, $_.i) == -1) { //#24880
            $put($_.pixs, $_.i, $get($_.mmat, $_.j)); //#24878
            $_.j = $_.j + 1; //#24879
        } //#24879
    } //#24879
    $k[$j++] = Infinity; //#24884
    $k[$j++] = 'ren'; //#24896
    $k[$j++] = 'renmatrix'; //#24896
    $k[$j++] = 'pixs'; //#24896
    $k[$j++] = $_.pixs; //#24896
    $k[$j++] = 'pixx'; //#24896
    $k[$j++] = $_.cols; //#24896
    $k[$j++] = 'pixy'; //#24896
    $k[$j++] = $_.rows; //#24896
    $k[$j++] = 'height'; //#24896
    $k[$j++] = ($_.rows / 72) * 2; //#24896
    $k[$j++] = 'width'; //#24896
    $k[$j++] = ($_.cols / 72) * 2; //#24896
    if ($_.stype || $_.ttype) { //#24896
        $k[$j++] = 'borderleft'; //#24895
        $k[$j++] = 1; //#24895
        $k[$j++] = 'borderright'; //#24895
        $k[$j++] = 1; //#24895
        $k[$j++] = 'bordertop'; //#24895
        $k[$j++] = 0; //#24895
        $k[$j++] = 'borderbottom'; //#24895
        $k[$j++] = 1; //#24895
    } //#24895
    $k[$j++] = 'opt'; //#24897
    $k[$j++] = $_.options; //#24897
    var _P6 = $d(); //#24897
    $k[$j++] = _P6; //#24900
    if (!$_.dontdraw) { //#24900
        bwipp_renmatrix(); //#24900
    } //#24900
    $_ = $__; //#24904
} //bwipp_codeone
function bwipp_hanxin() {
    var $__ = $_; //#24935
    $_ = Object.assign({}, $_); //#24935
    $_.dontdraw = false; //#24938
    $_.version = "unset"; //#24939
    $_.eclevel = "L2"; //#24940
    $_.parse = false; //#24941
    $_.parsefnc = false; //#24942
    $_.mask = -1; //#24943
    $k[$j++] = $_; //#24945
    bwipp_processoptions(); //#24945
    $_.options = $k[--$j]; //#24945
    $_.barcode = $k[--$j]; //#24946
    if ($_.barcode.length == 0) { //#24950
        $k[$j++] = 'bwipp.hanxinEmptyData#24949'; //#24949
        $k[$j++] = "The data must not be empty"; //#24949
        bwipp_raiseerror(); //#24949
    } //#24949
    if ($ne($_.version, "unset")) { //#24962
        var _5 = $_.version.length; //#24953
        var _6 = (_5 >= 1) && (_5 <= 2); //#24953
        $k[$j++] = _6; //#24958
        if (_6) { //#24958
            $j--; //#24954
            var _7 = $_.version; //#24955
            $k[$j++] = true; //#24955
            for (var _8 = 0, _9 = _7.length; _8 < _9; _8++) { //#24955
                var _A = $get(_7, _8); //#24955
                if ((_A < 48) || (_A > 57)) { //#24955
                    $k[$j - 1] = false; //#24955
                } //#24955
            } //#24955
            var _B = $k[$j - 1]; //#24955
            if (_B) { //#24957
                $j--; //#24956
                var _D = $cvi($_.version); //#24956
                $k[$j++] = (_D >= 1) && (_D <= 84); //#24956
            } //#24956
        } //#24956
        if (!$k[--$j]) { //#24961
            $k[$j++] = 'bwipp.hanxinInvalidVersion#24960'; //#24960
            $k[$j++] = "Valid versions are 1 to 84"; //#24960
            bwipp_raiseerror(); //#24960
        } //#24960
    } //#24960
    var _G = $_.eclevel.length == 2; //#24964
    $k[$j++] = _G; //#24968
    if (_G) { //#24968
        $j--; //#24965
        var _J = $eq($geti($_.eclevel, 0, 1), "L"); //#24965
        $k[$j++] = _J; //#24967
        if (_J) { //#24967
            $j--; //#24966
            var _M = $get($_.eclevel, 1) - 48; //#24966
            $k[$j++] = (_M >= 1) && (_M <= 4); //#24966
        } //#24966
    } //#24966
    if (!$k[--$j]) { //#24971
        $k[$j++] = 'bwipp.hanxinInvalidErrorCorrectionLevel#24970'; //#24970
        $k[$j++] = "Valid error correction levels are L1 to L4"; //#24970
        bwipp_raiseerror(); //#24970
    } //#24970
    if ($_.mask != -1) { //#24977
        if (($_.mask < 1) || ($_.mask > 4)) { //#24976
            $k[$j++] = 'bwipp.hanxinInvalidErrorCorrectionLevel#24975'; //#24975
            $k[$j++] = "The valid masks are 1 to 4"; //#24975
            bwipp_raiseerror(); //#24975
        } //#24975
    } //#24975
    var _T = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc]
    ]); //#24984
    $_.fncvals = _T; //#24986
    $k[$j++] = 'msg'; //#24987
    $k[$j++] = $_.barcode; //#24987
    $k[$j++] = $_.fncvals; //#24987
    bwipp_parseinput(); //#24987
    var _W = $k[--$j]; //#24987
    $_[$k[--$j]] = _W; //#24987
    $_.msglen = $_.msg.length; //#24988
    $_.tobin = function() {
        var _a = $s($k[--$j]); //#24991
        $k[$j++] = _a; //#24991
        for (var _c = 0, _b = _a.length - 1; _c <= _b; _c += 1) { //#24991
            var _d = $k[$j - 1]; //#24991
            $put(_d, _c, 48); //#24991
        } //#24991
        var _e = $k[$j - 1]; //#24992
        $k[$j++] = _e; //#24992
        var _f = $k[$j - 3]; //#24992
        var _g = $k[$j - 1]; //#24992
        $k[$j - 3] = $k[$j - 2]; //#24992
        $j -= 2; //#24992
        var _i = $cvrs($s(_g.length), _f, 2); //#24992
        $puti(_g, _g.length - _i.length, _i); //#24993
    }; //#24993
    $_.bits = $s((4 + 13) + ($_.msglen * 8)); //#24997
    $puti($_.bits, 0, "0011"); //#24998
    $k[$j++] = $_.bits; //#24999
    $k[$j++] = 4; //#24999
    $k[$j++] = $_.msglen; //#24999
    $k[$j++] = 13; //#24999
    $_.tobin(); //#24999
    var _o = $k[--$j]; //#24999
    var _p = $k[--$j]; //#24999
    $puti($k[--$j], _p, _o); //#24999
    for (var _t = 0, _s = $_.msglen - 1; _t <= _s; _t += 1) { //#25003
        $_.i = _t; //#25001
        $k[$j++] = $_.bits; //#25002
        $k[$j++] = 17 + ($_.i * 8); //#25002
        $k[$j++] = $get($_.msg, $_.i); //#25002
        $k[$j++] = 8; //#25002
        $_.tobin(); //#25002
        var _z = $k[--$j]; //#25002
        var _10 = $k[--$j]; //#25002
        $puti($k[--$j], _10, _z); //#25002
    } //#25002
    $_.metrics = $a([$a(["1", 23, -1, 0, 205, $a([1, 21, 4]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 17, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 13, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 9, 16]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["2", 25, -1, 0, 301, $a([1, 31, 6]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 25, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 19, 18]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 15, 22]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["3", 27, -1, 0, 405, $a([1, 42, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 34, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 26, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["4", 29, 14, 1, 439, $a([1, 46, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 38, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 30, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 22, 32]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["5", 31, 16, 1, 555, $a([1, 57, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 49, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 37, 32]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 14, 20]), $a([1, 13, 22]), $a([0, -1, -1])]), $a(["6", 33, 16, 1, 675, $a([1, 70, 14]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 58, 26]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 24, 20]), $a([1, 22, 18]), $a([0, -1, -1]), $a([1, 16, 24]), $a([1, 18, 26]), $a([0, -1, -1])]), $a(["7", 35, 17, 1, 805, $a([1, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 26, 22]), $a([1, 28, 24]), $a([0, -1, -1]), $a([2, 14, 20]), $a([1, 12, 20]), $a([0, -1, -1])]), $a(["8", 37, 18, 1, 943, $a([1, 99, 18]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 40, 18]), $a([1, 41, 18]), $a([0, -1, -1]), $a([1, 31, 26]), $a([1, 32, 28]), $a([0, -1, -1]), $a([2, 16, 24]), $a([1, 15, 22]), $a([0, -1, -1])]), $a(["9", 39, 19, 1, 1089, $a([1, 114, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([2, 48, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([2, 24, 20]), $a([1, 26, 22]), $a([0, -1, -1]), $a([2, 18, 28]), $a([1, 18, 26]), $a([0, -1, -1])]), $a(["10", 41, 20, 1, 1243, $a([1, 131, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 52, 22]), $a([1, 57, 24]), $a([0, -1, -1]), $a([2, 27, 24]), $a([1, 29, 24]), $a([0, -1, -1]), $a([2, 21, 32]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["11", 43, 14, 2, 1289, $a([1, 135, 26]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 56, 24]), $a([1, 57, 24]), $a([0, -1, -1]), $a([2, 28, 24]), $a([1, 31, 26]), $a([0, -1, -1]), $a([2, 22, 32]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["12", 45, 15, 2, 1455, $a([1, 153, 28]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 62, 26]), $a([1, 65, 28]), $a([0, -1, -1]), $a([2, 32, 28]), $a([1, 33, 28]), $a([0, -1, -1]), $a([3, 17, 26]), $a([1, 22, 30]), $a([0, -1, -1])]), $a(["13", 47, 16, 2, 1629, $a([1, 86, 16]), $a([1, 85, 16]), $a([0, -1, -1]), $a([1, 71, 30]), $a([1, 72, 30]), $a([0, -1, -1]), $a([2, 37, 32]), $a([1, 35, 30]), $a([0, -1, -1]), $a([3, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["14", 49, 16, 2, 1805, $a([1, 94, 18]), $a([1, 95, 18]), $a([0, -1, -1]), $a([2, 51, 22]), $a([1, 55, 24]), $a([0, -1, -1]), $a([3, 30, 26]), $a([1, 31, 26]), $a([0, -1, -1]), $a([4, 18, 28]), $a([1, 17, 24]), $a([0, -1, -1])]), $a(["15", 51, 17, 2, 1995, $a([1, 104, 20]), $a([1, 105, 20]), $a([0, -1, -1]), $a([2, 57, 24]), $a([1, 61, 26]), $a([0, -1, -1]), $a([3, 33, 28]), $a([1, 36, 30]), $a([0, -1, -1]), $a([4, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["16", 53, 17, 2, 2187, $a([1, 115, 22]), $a([1, 114, 22]), $a([0, -1, -1]), $a([2, 65, 28]), $a([1, 61, 26]), $a([0, -1, -1]), $a([3, 38, 32]), $a([1, 33, 30]), $a([0, -1, -1]), $a([5, 19, 28]), $a([1, 14, 24]), $a([0, -1, -1])]), $a(["17", 55, 18, 2, 2393, $a([1, 126, 24]), $a([1, 125, 24]), $a([0, -1, -1]), $a([2, 70, 30]), $a([1, 69, 30]), $a([0, -1, -1]), $a([4, 33, 28]), $a([1, 29, 26]), $a([0, -1, -1]), $a([5, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["18", 57, 19, 2, 2607, $a([1, 136, 26]), $a([1, 137, 26]), $a([0, -1, -1]), $a([3, 56, 24]), $a([1, 59, 26]), $a([0, -1, -1]), $a([5, 35, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([6, 18, 28]), $a([1, 21, 28]), $a([0, -1, -1])]), $a(["19", 59, 20, 2, 2829, $a([1, 148, 28]), $a([1, 149, 28]), $a([0, -1, -1]), $a([3, 61, 26]), $a([1, 64, 28]), $a([0, -1, -1]), $a([7, 24, 20]), $a([1, 23, 22]), $a([0, -1, -1]), $a([6, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["20", 61, 20, 2, 3053, $a([3, 107, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([3, 65, 28]), $a([1, 72, 30]), $a([0, -1, -1]), $a([7, 26, 22]), $a([1, 23, 22]), $a([0, -1, -1]), $a([7, 19, 28]), $a([1, 20, 32]), $a([0, -1, -1])]), $a(["21", 63, 21, 2, 3291, $a([3, 115, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([4, 56, 24]), $a([1, 63, 28]), $a([0, -1, -1]), $a([7, 28, 24]), $a([1, 25, 22]), $a([0, -1, -1]), $a([8, 18, 28]), $a([1, 21, 22]), $a([0, -1, -1])]), $a(["22", 65, 16, 3, 3383, $a([2, 116, 22]), $a([1, 122, 24]), $a([0, -1, -1]), $a([4, 56, 24]), $a([1, 72, 30]), $a([0, -1, -1]), $a([7, 28, 24]), $a([1, 32, 26]), $a([0, -1, -1]), $a([8, 18, 28]), $a([1, 24, 30]), $a([0, -1, -1])]), $a(["23", 67, 17, 3, 3631, $a([3, 127, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([5, 51, 22]), $a([1, 62, 26]), $a([0, -1, -1]), $a([7, 30, 26]), $a([1, 35, 26]), $a([0, -1, -1]), $a([8, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["24", 69, 17, 3, 3887, $a([2, 135, 26]), $a([1, 137, 26]), $a([0, -1, -1]), $a([5, 56, 24]), $a([1, 59, 26]), $a([0, -1, -1]), $a([7, 33, 28]), $a([1, 30, 28]), $a([0, -1, -1]), $a([11, 16, 24]), $a([1, 19, 26]), $a([0, -1, -1])]), $a(["25", 71, 18, 3, 4151, $a([3, 105, 20]), $a([1, 121, 22]), $a([0, -1, -1]), $a([5, 61, 26]), $a([1, 57, 26]), $a([0, -1, -1]), $a([9, 28, 24]), $a([1, 28, 22]), $a([0, -1, -1]), $a([10, 19, 28]), $a([1, 18, 30]), $a([0, -1, -1])]), $a(["26", 73, 18, 3, 4423, $a([2, 157, 30]), $a([1, 150, 28]), $a([0, -1, -1]), $a([5, 65, 28]), $a([1, 61, 26]), $a([0, -1, -1]), $a([8, 33, 28]), $a([1, 34, 30]), $a([0, -1, -1]), $a([10, 19, 28]), $a([2, 15, 26]), $a([0, -1, -1])]), $a(["27", 75, 19, 3, 4703, $a([3, 126, 24]), $a([1, 115, 22]), $a([0, -1, -1]), $a([7, 51, 22]), $a([1, 54, 22]), $a([0, -1, -1]), $a([8, 35, 30]), $a([1, 37, 30]), $a([0, -1, -1]), $a([15, 15, 22]), $a([1, 10, 22]), $a([0, -1, -1])]), $a(["28", 77, 19, 3, 4991, $a([4, 105, 20]), $a([1, 103, 20]), $a([0, -1, -1]), $a([7, 56, 24]), $a([1, 45, 18]), $a([0, -1, -1]), $a([10, 31, 26]), $a([1, 27, 26]), $a([0, -1, -1]), $a([10, 17, 26]), $a([3, 20, 28]), $a([1, 21, 28])]), $a(["29", 79, 20, 3, 5287, $a([3, 139, 26]), $a([1, 137, 28]), $a([0, -1, -1]), $a([6, 66, 28]), $a([1, 66, 30]), $a([0, -1, -1]), $a([9, 36, 30]), $a([1, 34, 32]), $a([0, -1, -1]), $a([13, 19, 28]), $a([1, 17, 32]), $a([0, -1, -1])]), $a(["30", 81, 20, 3, 5591, $a([6, 84, 16]), $a([1, 82, 16]), $a([0, -1, -1]), $a([6, 70, 30]), $a([1, 68, 30]), $a([0, -1, -1]), $a([7, 35, 30]), $a([3, 33, 28]), $a([1, 32, 28]), $a([13, 20, 30]), $a([1, 20, 28]), $a([0, -1, -1])]), $a(["31", 83, 21, 3, 5903, $a([5, 105, 20]), $a([1, 94, 18]), $a([0, -1, -1]), $a([6, 74, 32]), $a([1, 71, 30]), $a([0, -1, -1]), $a([11, 33, 28]), $a([1, 34, 32]), $a([0, -1, -1]), $a([13, 19, 28]), $a([3, 16, 26]), $a([0, -1, -1])]), $a(["32", 85, 17, 4, 6033, $a([4, 127, 24]), $a([1, 126, 24]), $a([0, -1, -1]), $a([7, 66, 28]), $a([1, 66, 30]), $a([0, -1, -1]), $a([12, 30, 24]), $a([1, 24, 28]), $a([1, 24, 30]), $a([15, 19, 28]), $a([1, 17, 32]), $a([0, -1, -1])]), $a(["33", 87, 17, 4, 6353, $a([7, 84, 16]), $a([1, 78, 16]), $a([0, -1, -1]), $a([7, 70, 30]), $a([1, 66, 28]), $a([0, -1, -1]), $a([12, 33, 28]), $a([1, 32, 30]), $a([0, -1, -1]), $a([14, 21, 32]), $a([1, 24, 28]), $a([0, -1, -1])]), $a(["34", 89, 18, 4, 6689, $a([5, 117, 22]), $a([1, 117, 24]), $a([0, -1, -1]), $a([8, 66, 28]), $a([1, 58, 26]), $a([0, -1, -1]), $a([11, 38, 32]), $a([1, 34, 32]), $a([0, -1, -1]), $a([15, 20, 30]), $a([2, 17, 26]), $a([0, -1, -1])]), $a(["35", 91, 18, 4, 7025, $a([4, 148, 28]), $a([1, 146, 28]), $a([0, -1, -1]), $a([8, 68, 30]), $a([1, 70, 24]), $a([0, -1, -1]), $a([10, 36, 32]), $a([3, 38, 28]), $a([0, -1, -1]), $a([16, 19, 28]), $a([3, 16, 26]), $a([0, -1, -1])]), $a(["36", 93, 19, 4, 7377, $a([4, 126, 24]), $a([2, 135, 26]), $a([0, -1, -1]), $a([8, 70, 28]), $a([2, 43, 26]), $a([0, -1, -1]), $a([13, 32, 28]), $a([2, 41, 30]), $a([0, -1, -1]), $a([17, 19, 28]), $a([3, 15, 26]), $a([0, -1, -1])]), $a(["37", 95, 19, 4, 7729, $a([5, 136, 26]), $a([1, 132, 24]), $a([0, -1, -1]), $a([5, 67, 30]), $a([4, 68, 28]), $a([1, 69, 28]), $a([14, 35, 30]), $a([1, 32, 24]), $a([0, -1, -1]), $a([18, 18, 26]), $a([3, 16, 28]), $a([1, 14, 28])]), $a(["38", 97, 19, 4, 8089, $a([3, 142, 26]), $a([3, 141, 28]), $a([0, -1, -1]), $a([8, 70, 30]), $a([1, 73, 32]), $a([1, 74, 32]), $a([12, 34, 30]), $a([3, 34, 26]), $a([1, 35, 28]), $a([18, 21, 32]), $a([1, 27, 30]), $a([0, -1, -1])]), $a(["39", 99, 20, 4, 8465, $a([5, 116, 22]), $a([2, 103, 20]), $a([1, 102, 20]), $a([9, 74, 32]), $a([1, 74, 30]), $a([0, -1, -1]), $a([14, 34, 28]), $a([2, 32, 32]), $a([1, 32, 30]), $a([19, 21, 32]), $a([1, 25, 26]), $a([0, -1, -1])]), $a(["40", 101, 20, 4, 8841, $a([7, 116, 22]), $a([1, 117, 22]), $a([0, -1, -1]), $a([11, 65, 28]), $a([1, 58, 24]), $a([0, -1, -1]), $a([15, 38, 32]), $a([1, 27, 28]), $a([0, -1, -1]), $a([20, 20, 30]), $a([1, 20, 32]), $a([1, 21, 32])]), $a(["41", 103, 17, 5, 9009, $a([6, 136, 26]), $a([1, 130, 24]), $a([0, -1, -1]), $a([11, 66, 28]), $a([1, 62, 30]), $a([0, -1, -1]), $a([14, 34, 28]), $a([3, 34, 32]), $a([1, 30, 30]), $a([18, 20, 30]), $a([3, 20, 28]), $a([2, 15, 26])]), $a(["42", 105, 17, 5, 9401, $a([5, 105, 20]), $a([2, 115, 22]), $a([2, 116, 22]), $a([10, 75, 32]), $a([1, 73, 32]), $a([0, -1, -1]), $a([16, 38, 32]), $a([1, 27, 28]), $a([0, -1, -1]), $a([22, 19, 28]), $a([2, 16, 30]), $a([1, 19, 30])]), $a(["43", 107, 18, 5, 9799, $a([6, 147, 28]), $a([1, 146, 28]), $a([0, -1, -1]), $a([11, 66, 28]), $a([2, 65, 30]), $a([0, -1, -1]), $a([18, 33, 28]), $a([2, 33, 30]), $a([0, -1, -1]), $a([22, 21, 32]), $a([1, 28, 30]), $a([0, -1, -1])]), $a(["44", 109, 18, 5, 10207, $a([6, 116, 22]), $a([3, 125, 24]), $a([0, -1, -1]), $a([11, 75, 32]), $a([1, 68, 30]), $a([0, -1, -1]), $a([13, 35, 28]), $a([6, 34, 32]), $a([1, 30, 30]), $a([23, 21, 32]), $a([1, 26, 30]), $a([0, -1, -1])]), $a(["45", 111, 18, 5, 10623, $a([7, 105, 20]), $a([4, 95, 18]), $a([0, -1, -1]), $a([12, 67, 28]), $a([1, 63, 30]), $a([1, 62, 32]), $a([21, 31, 26]), $a([2, 33, 32]), $a([0, -1, -1]), $a([23, 21, 32]), $a([2, 24, 30]), $a([0, -1, -1])]), $a(["46", 113, 19, 5, 11045, $a([10, 116, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([12, 74, 32]), $a([1, 78, 30]), $a([0, -1, -1]), $a([18, 37, 32]), $a([1, 39, 30]), $a([1, 41, 28]), $a([25, 21, 32]), $a([1, 27, 28]), $a([0, -1, -1])]), $a(["47", 115, 19, 5, 11477, $a([5, 126, 24]), $a([4, 115, 22]), $a([1, 114, 22]), $a([12, 67, 28]), $a([2, 66, 32]), $a([1, 68, 30]), $a([21, 35, 30]), $a([1, 39, 30]), $a([0, -1, -1]), $a([26, 21, 32]), $a([1, 28, 28]), $a([0, -1, -1])]), $a(["48", 117, 19, 5, 11917, $a([9, 126, 24]), $a([1, 117, 22]), $a([0, -1, -1]), $a([13, 75, 32]), $a([1, 68, 30]), $a([0, -1, -1]), $a([20, 35, 30]), $a([3, 35, 28]), $a([0, -1, -1]), $a([27, 21, 32]), $a([1, 28, 30]), $a([0, -1, -1])]), $a(["49", 119, 17, 6, 12111, $a([9, 126, 24]), $a([1, 137, 26]), $a([0, -1, -1]), $a([13, 71, 30]), $a([2, 68, 32]), $a([0, -1, -1]), $a([20, 37, 32]), $a([1, 39, 28]), $a([1, 38, 28]), $a([24, 20, 32]), $a([5, 25, 28]), $a([0, -1, -1])]), $a(["50", 121, 17, 6, 12559, $a([8, 147, 28]), $a([1, 141, 28]), $a([0, -1, -1]), $a([10, 73, 32]), $a([4, 74, 30]), $a([1, 73, 30]), $a([16, 36, 32]), $a([6, 39, 30]), $a([1, 37, 30]), $a([27, 21, 32]), $a([3, 20, 26]), $a([0, -1, -1])]), $a(["51", 123, 18, 6, 13025, $a([9, 137, 26]), $a([1, 135, 26]), $a([0, -1, -1]), $a([12, 70, 30]), $a([4, 75, 32]), $a([0, -1, -1]), $a([24, 35, 30]), $a([1, 40, 28]), $a([0, -1, -1]), $a([23, 20, 32]), $a([8, 24, 30]), $a([0, -1, -1])]), $a(["52", 125, 18, 6, 13489, $a([14, 95, 18]), $a([1, 86, 18]), $a([0, -1, -1]), $a([13, 73, 32]), $a([3, 77, 30]), $a([0, -1, -1]), $a([24, 35, 30]), $a([2, 35, 28]), $a([0, -1, -1]), $a([26, 21, 32]), $a([5, 21, 30]), $a([1, 23, 30])]), $a(["53", 127, 18, 6, 13961, $a([9, 147, 28]), $a([1, 142, 28]), $a([0, -1, -1]), $a([10, 73, 30]), $a([6, 70, 32]), $a([1, 71, 32]), $a([25, 35, 30]), $a([2, 34, 26]), $a([0, -1, -1]), $a([29, 21, 32]), $a([4, 22, 30]), $a([0, -1, -1])]), $a(["54", 129, 18, 6, 14441, $a([11, 126, 24]), $a([1, 131, 24]), $a([0, -1, -1]), $a([16, 74, 32]), $a([1, 79, 30]), $a([0, -1, -1]), $a([25, 38, 32]), $a([1, 25, 30]), $a([0, -1, -1]), $a([33, 21, 32]), $a([1, 28, 28]), $a([0, -1, -1])]), $a(["55", 131, 19, 6, 14939, $a([14, 105, 20]), $a([1, 99, 18]), $a([0, -1, -1]), $a([19, 65, 28]), $a([1, 72, 28]), $a([0, -1, -1]), $a([24, 37, 32]), $a([2, 40, 30]), $a([1, 41, 30]), $a([31, 21, 32]), $a([4, 24, 32]), $a([0, -1, -1])]), $a(["56", 133, 19, 6, 15435, $a([10, 147, 28]), $a([1, 151, 28]), $a([0, -1, -1]), $a([15, 71, 30]), $a([3, 71, 32]), $a([1, 73, 32]), $a([24, 37, 32]), $a([3, 38, 30]), $a([1, 39, 30]), $a([36, 19, 30]), $a([3, 29, 26]), $a([0, -1, -1])]), $a(["57", 135, 19, 6, 15939, $a([15, 105, 20]), $a([1, 99, 18]), $a([0, -1, -1]), $a([19, 70, 30]), $a([1, 64, 28]), $a([0, -1, -1]), $a([27, 38, 32]), $a([2, 25, 26]), $a([0, -1, -1]), $a([38, 20, 30]), $a([2, 18, 28]), $a([0, -1, -1])]), $a(["58", 137, 17, 7, 16171, $a([14, 105, 20]), $a([1, 113, 22]), $a([1, 114, 22]), $a([17, 67, 30]), $a([3, 92, 32]), $a([0, -1, -1]), $a([30, 35, 30]), $a([1, 41, 30]), $a([0, -1, -1]), $a([36, 21, 32]), $a([1, 26, 30]), $a([1, 27, 30])]), $a(["59", 139, 17, 7, 16691, $a([11, 146, 28]), $a([1, 146, 26]), $a([0, -1, -1]), $a([20, 70, 30]), $a([1, 60, 26]), $a([0, -1, -1]), $a([29, 38, 32]), $a([1, 24, 32]), $a([0, -1, -1]), $a([40, 20, 30]), $a([2, 17, 26]), $a([0, -1, -1])]), $a(["60", 141, 18, 7, 17215, $a([3, 137, 26]), $a([1, 136, 26]), $a([10, 126, 24]), $a([22, 65, 28]), $a([1, 75, 30]), $a([0, -1, -1]), $a([30, 37, 32]), $a([1, 51, 30]), $a([0, -1, -1]), $a([42, 20, 30]), $a([1, 21, 30]), $a([0, -1, -1])]), $a(["61", 143, 18, 7, 17751, $a([12, 126, 24]), $a([2, 118, 22]), $a([1, 116, 22]), $a([19, 74, 32]), $a([1, 74, 30]), $a([1, 72, 28]), $a([30, 38, 32]), $a([2, 29, 30]), $a([0, -1, -1]), $a([39, 20, 32]), $a([2, 37, 26]), $a([1, 38, 26])]), $a(["62", 145, 18, 7, 18295, $a([12, 126, 24]), $a([3, 136, 26]), $a([0, -1, -1]), $a([21, 70, 30]), $a([2, 65, 28]), $a([0, -1, -1]), $a([34, 35, 30]), $a([1, 44, 32]), $a([0, -1, -1]), $a([42, 20, 30]), $a([2, 19, 28]), $a([2, 18, 28])]), $a(["63", 147, 18, 7, 18847, $a([12, 126, 24]), $a([3, 117, 22]), $a([1, 116, 22]), $a([25, 61, 26]), $a([2, 62, 28]), $a([0, -1, -1]), $a([34, 35, 30]), $a([1, 40, 32]), $a([1, 41, 32]), $a([45, 20, 30]), $a([1, 20, 32]), $a([1, 21, 32])]), $a(["64", 149, 19, 7, 19403, $a([15, 105, 20]), $a([2, 115, 22]), $a([2, 116, 22]), $a([25, 65, 28]), $a([1, 72, 28]), $a([0, -1, -1]), $a([18, 35, 30]), $a([17, 37, 32]), $a([1, 50, 32]), $a([42, 20, 30]), $a([6, 19, 28]), $a([1, 15, 28])]), $a(["65", 151, 19, 7, 19971, $a([19, 105, 20]), $a([1, 101, 20]), $a([0, -1, -1]), $a([33, 51, 22]), $a([1, 65, 22]), $a([0, -1, -1]), $a([40, 33, 28]), $a([1, 28, 28]), $a([0, -1, -1]), $a([49, 20, 30]), $a([1, 18, 28]), $a([0, -1, -1])]), $a(["66", 153, 17, 8, 20229, $a([18, 105, 20]), $a([2, 117, 22]), $a([0, -1, -1]), $a([26, 65, 28]), $a([1, 80, 30]), $a([0, -1, -1]), $a([35, 35, 30]), $a([3, 35, 28]), $a([1, 36, 28]), $a([52, 18, 28]), $a([2, 38, 30]), $a([0, -1, -1])]), $a(["67", 155, 17, 8, 20805, $a([26, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([26, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([45, 31, 26]), $a([1, 9, 26]), $a([0, -1, -1]), $a([52, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["68", 157, 17, 8, 21389, $a([16, 126, 24]), $a([1, 114, 22]), $a([1, 115, 22]), $a([23, 70, 30]), $a([3, 65, 28]), $a([1, 66, 28]), $a([40, 35, 30]), $a([1, 43, 30]), $a([0, -1, -1]), $a([46, 20, 30]), $a([7, 19, 28]), $a([1, 16, 28])]), $a(["69", 159, 18, 8, 21993, $a([19, 116, 22]), $a([1, 105, 22]), $a([0, -1, -1]), $a([20, 70, 30]), $a([7, 66, 28]), $a([1, 63, 28]), $a([40, 35, 30]), $a([1, 42, 32]), $a([1, 43, 32]), $a([54, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["70", 161, 18, 8, 22593, $a([17, 126, 24]), $a([2, 115, 22]), $a([0, -1, -1]), $a([24, 70, 30]), $a([4, 74, 32]), $a([0, -1, -1]), $a([48, 31, 26]), $a([2, 18, 26]), $a([0, -1, -1]), $a([54, 19, 28]), $a([6, 15, 26]), $a([1, 14, 26])]), $a(["71", 163, 18, 8, 23201, $a([29, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([29, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([6, 34, 30]), $a([3, 36, 30]), $a([38, 33, 28]), $a([58, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["72", 165, 18, 8, 23817, $a([16, 147, 28]), $a([1, 149, 28]), $a([0, -1, -1]), $a([31, 66, 28]), $a([1, 37, 26]), $a([0, -1, -1]), $a([48, 33, 28]), $a([1, 23, 26]), $a([0, -1, -1]), $a([53, 20, 30]), $a([6, 19, 28]), $a([1, 17, 28])]), $a(["73", 167, 19, 8, 24453, $a([20, 115, 22]), $a([2, 134, 24]), $a([0, -1, -1]), $a([29, 66, 28]), $a([2, 56, 26]), $a([2, 57, 26]), $a([45, 36, 30]), $a([2, 15, 28]), $a([0, -1, -1]), $a([59, 20, 30]), $a([2, 21, 32]), $a([0, -1, -1])]), $a(["74", 169, 19, 8, 25085, $a([17, 147, 28]), $a([1, 134, 26]), $a([0, -1, -1]), $a([26, 70, 30]), $a([5, 75, 32]), $a([0, -1, -1]), $a([47, 35, 30]), $a([1, 48, 32]), $a([0, -1, -1]), $a([64, 18, 28]), $a([2, 33, 30]), $a([1, 35, 30])]), $a(["75", 171, 17, 9, 25373, $a([22, 115, 22]), $a([1, 133, 24]), $a([0, -1, -1]), $a([33, 65, 28]), $a([1, 74, 28]), $a([0, -1, -1]), $a([43, 36, 30]), $a([5, 27, 28]), $a([1, 30, 28]), $a([57, 20, 30]), $a([5, 21, 32]), $a([1, 24, 32])]), $a(["76", 173, 17, 9, 26021, $a([18, 136, 26]), $a([2, 142, 26]), $a([0, -1, -1]), $a([33, 66, 28]), $a([2, 49, 26]), $a([0, -1, -1]), $a([48, 35, 30]), $a([2, 38, 28]), $a([0, -1, -1]), $a([64, 20, 30]), $a([1, 20, 32]), $a([0, -1, -1])]), $a(["77", 175, 17, 9, 26677, $a([19, 126, 24]), $a([2, 135, 26]), $a([1, 136, 26]), $a([32, 66, 28]), $a([2, 55, 26]), $a([2, 56, 26]), $a([49, 36, 30]), $a([2, 18, 32]), $a([0, -1, -1]), $a([65, 18, 28]), $a([5, 27, 30]), $a([1, 29, 30])]), $a(["78", 177, 18, 9, 27335, $a([20, 137, 26]), $a([1, 130, 26]), $a([0, -1, -1]), $a([30, 75, 32]), $a([2, 71, 32]), $a([0, -1, -1]), $a([46, 35, 30]), $a([6, 39, 32]), $a([0, -1, -1]), $a([3, 12, 30]), $a([70, 19, 28]), $a([0, -1, -1])]), $a(["79", 179, 18, 9, 28007, $a([20, 147, 28]), $a([0, -1, -1]), $a([0, -1, -1]), $a([35, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([49, 35, 30]), $a([5, 35, 28]), $a([0, -1, -1]), $a([70, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["80", 181, 18, 9, 28687, $a([21, 136, 26]), $a([1, 155, 28]), $a([0, -1, -1]), $a([34, 70, 30]), $a([1, 64, 28]), $a([1, 65, 28]), $a([54, 35, 30]), $a([1, 45, 30]), $a([0, -1, -1]), $a([68, 20, 30]), $a([3, 18, 28]), $a([1, 19, 28])]), $a(["81", 183, 18, 9, 29375, $a([19, 126, 24]), $a([5, 115, 22]), $a([1, 114, 22]), $a([33, 70, 30]), $a([3, 65, 28]), $a([1, 64, 28]), $a([52, 35, 30]), $a([3, 41, 32]), $a([1, 40, 32]), $a([67, 20, 30]), $a([5, 21, 32]), $a([1, 24, 32])]), $a(["82", 185, 18, 9, 30071, $a([2, 150, 28]), $a([21, 136, 26]), $a([0, -1, -1]), $a([32, 70, 30]), $a([6, 65, 28]), $a([0, -1, -1]), $a([52, 38, 32]), $a([2, 27, 32]), $a([0, -1, -1]), $a([73, 20, 30]), $a([2, 22, 32]), $a([0, -1, -1])]), $a(["83", 187, 17, 10, 30387, $a([21, 126, 24]), $a([4, 136, 26]), $a([0, -1, -1]), $a([30, 74, 32]), $a([6, 73, 30]), $a([0, -1, -1]), $a([54, 35, 30]), $a([4, 40, 32]), $a([0, -1, -1]), $a([75, 20, 30]), $a([1, 20, 28]), $a([0, -1, -1])]), $a(["84", 189, 17, 10, 31091, $a([30, 105, 20]), $a([1, 114, 22]), $a([0, -1, -1]), $a([3, 45, 22]), $a([55, 47, 20]), $a([0, -1, -1]), $a([2, 26, 26]), $a([62, 33, 28]), $a([0, -1, -1]), $a([79, 18, 28]), $a([4, 33, 30]), $a([0, -1, -1])])]); //#25345
    $_.eclval = $get($_.eclevel, 1) - 49; //#25348
    var _Ii = $_.metrics; //#25349
    for (var _Ij = 0, _Ik = _Ii.length; _Ij < _Ik; _Ij++) { //#25367
        $_.m = $get(_Ii, _Ij); //#25350
        $_.vers = $get($_.m, 0); //#25351
        $_.size = $get($_.m, 1); //#25352
        $_.alnk = $get($_.m, 2); //#25353
        $_.alnn = $get($_.m, 3); //#25354
        $_.alnr = $f($_.size - ($_.alnk * $_.alnn)); //#25355
        $_.nmod = $get($_.m, 4); //#25356
        $_.ncws = ~~($_.nmod / 8); //#25357
        $_.rbit = $_.nmod % 8; //#25358
        $_.ecbs = $geti($_.m, 5 + ($_.eclval * 3), 3); //#25359
        var _J4 = $_.ecbs; //#25360
        $k[$j++] = 'ecws'; //#25360
        $k[$j++] = 0; //#25360
        for (var _J5 = 0, _J6 = _J4.length; _J5 < _J6; _J5++) { //#25360
            var _J7 = $get(_J4, _J5); //#25360
            var _JA = $k[--$j]; //#25360
            $k[$j++] = $f(_JA + ($get(_J7, 0) * $get(_J7, 2))); //#25360
        } //#25360
        var _JB = $k[--$j]; //#25360
        $_[$k[--$j]] = _JB; //#25360
        $_.dcws = $f($_.ncws - $_.ecws); //#25361
        $_.dmod = $_.dcws * 8; //#25362
        $_.okay = true; //#25363
        if ($ne($_.version, "unset") && $ne($_.version, $_.vers)) { //#25364
            $_.okay = false; //#25364
        } //#25364
        if ($_.bits.length > $_.dmod) { //#25365
            $_.okay = false; //#25365
        } //#25365
        if ($_.okay) { //#25366
            break; //#25366
        } //#25366
    } //#25366
    if (!$_.okay) { //#25371
        $k[$j++] = 'bwipp.hanxinNoValidSymbol#25370'; //#25370
        $k[$j++] = "Maximum length exceeded or invalid content"; //#25370
        bwipp_raiseerror(); //#25370
    } //#25370
    $_.version = $_.vers; //#25373
    $_.msgbits = $_.bits; //#25374
    $_.e1nb = $get($get($_.ecbs, 0), 0); //#25375
    $_.e2nb = $get($get($_.ecbs, 1), 0); //#25375
    $_.e3nb = $get($get($_.ecbs, 2), 0); //#25375
    $_.e1dcws = $get($get($_.ecbs, 0), 1); //#25376
    $_.e2dcws = $get($get($_.ecbs, 1), 1); //#25376
    $_.e3dcws = $get($get($_.ecbs, 2), 1); //#25376
    $_.e1ecws = $get($get($_.ecbs, 0), 2); //#25377
    $_.e2ecws = $get($get($_.ecbs, 1), 2); //#25377
    $_.e3ecws = $get($get($_.ecbs, 2), 2); //#25377
    $_.pad = $s($_.dmod); //#25380
    for (var _Ju = 0, _Jt = $_.pad.length - 1; _Ju <= _Jt; _Ju += 1) { //#25381
        $put($_.pad, _Ju, 48); //#25381
    } //#25381
    $puti($_.pad, 0, $_.msgbits); //#25382
    $_.cws = $a($_.dcws); //#25385
    for (var _K2 = 0, _K1 = $_.cws.length - 1; _K2 <= _K1; _K2 += 1) { //#25395
        $_.c = _K2; //#25387
        $_.cwb = $geti($_.pad, $_.c * 8, 8); //#25388
        $_.cw = 0; //#25389
        for (var _K6 = 0; _K6 <= 7; _K6 += 1) { //#25393
            $_.i = _K6; //#25391
            $_.cw = $f($_.cw + ((~~($pow(2, (8 - $_.i) - 1))) * ($get($_.cwb, $_.i) - 48))); //#25392
        } //#25392
        $put($_.cws, $_.c, $_.cw); //#25394
    } //#25394
    $_.rscodes = function() {
        $_.rspm = $k[--$j]; //#25399
        $_.rsgf = $k[--$j]; //#25400
        $_.rsnc = $k[--$j]; //#25401
        $_.rscws = $k[--$j]; //#25402
        $k[$j++] = Infinity; //#25405
        $k[$j++] = 1; //#25405
        for (var _KK = 0, _KL = $_.rsgf - 1; _KK < _KL; _KK++) { //#25405
            var _KM = $k[$j - 1]; //#25405
            var _KN = _KM * 2; //#25405
            $k[$j++] = _KN; //#25405
            if (_KN >= $_.rsgf) { //#25405
                var _KQ = $k[--$j]; //#25405
                $k[$j++] = $xo(_KQ, $_.rspm); //#25405
            } //#25405
        } //#25405
        $_.rsalog = $a(); //#25405
        $_.rslog = $a($_.rsgf); //#25406
        for (var _KW = 1, _KV = $_.rsgf - 1; _KW <= _KV; _KW += 1) { //#25407
            $put($_.rslog, $get($_.rsalog, _KW), _KW); //#25407
        } //#25407
        $_.rsprod = function() {
            var _Ka = $k[$j - 1]; //#25411
            var _Kb = $k[$j - 2]; //#25411
            if ((_Ka != 0) && (_Kb != 0)) { //#25414
                var _Ke = $get($_.rslog, $k[--$j]); //#25412
                var _Kk = $get($_.rsalog, $f(_Ke + $get($_.rslog, $k[--$j])) % ($_.rsgf - 1)); //#25412
                $k[$j++] = _Kk; //#25412
            } else { //#25414
                $j -= 2; //#25414
                $k[$j++] = 0; //#25414
            } //#25414
        }; //#25414
        $k[$j++] = Infinity; //#25419
        $k[$j++] = 1; //#25419
        for (var _Km = 0, _Kn = $_.rsnc; _Km < _Kn; _Km++) { //#25419
            $k[$j++] = 0; //#25419
        } //#25419
        $_.coeffs = $a(); //#25419
        for (var _Kr = 1, _Kq = $_.rsnc; _Kr <= _Kq; _Kr += 1) { //#25428
            $_.i = _Kr; //#25421
            $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#25422
            for (var _Ky = $_.i - 1; _Ky >= 1; _Ky -= 1) { //#25426
                $_.j = _Ky; //#25424
                $k[$j++] = $_.coeffs; //#25425
                $k[$j++] = $_.j; //#25425
                $k[$j++] = $get($_.coeffs, $_.j - 1); //#25425
                $k[$j++] = $get($_.coeffs, $_.j); //#25425
                $k[$j++] = $get($_.rsalog, $_.i); //#25425
                $_.rsprod(); //#25425
                var _LA = $k[--$j]; //#25425
                var _LB = $k[--$j]; //#25425
                var _LC = $k[--$j]; //#25425
                $put($k[--$j], _LC, $xo(_LB, _LA)); //#25425
            } //#25425
            $k[$j++] = $_.coeffs; //#25427
            $k[$j++] = 0; //#25427
            $k[$j++] = $get($_.coeffs, 0); //#25427
            $k[$j++] = $get($_.rsalog, $_.i); //#25427
            $_.rsprod(); //#25427
            var _LK = $k[--$j]; //#25427
            var _LL = $k[--$j]; //#25427
            $put($k[--$j], _LL, _LK); //#25427
        } //#25427
        $_.nd = $_.rscws.length; //#25431
        $k[$j++] = Infinity; //#25432
        $aload($_.rscws); //#25432
        for (var _LQ = 0, _LR = $_.rsnc; _LQ < _LR; _LQ++) { //#25432
            $k[$j++] = 0; //#25432
        } //#25432
        $k[$j++] = 0; //#25432
        $_.rscws = $a(); //#25432
        for (var _LV = 0, _LU = $_.nd - 1; _LV <= _LU; _LV += 1) { //#25439
            $_.k = $xo($get($_.rscws, _LV), $get($_.rscws, $_.nd)); //#25434
            for (var _Ld = 0, _Lc = $_.rsnc - 1; _Ld <= _Lc; _Ld += 1) { //#25438
                $_.j = _Ld; //#25436
                $k[$j++] = $_.rscws; //#25437
                $k[$j++] = $_.nd + $_.j; //#25437
                $k[$j++] = $get($_.rscws, ($_.nd + $_.j) + 1); //#25437
                $k[$j++] = $_.k; //#25437
                $k[$j++] = $get($_.coeffs, $f($_.rsnc - $_.j) - 1); //#25437
                $_.rsprod(); //#25437
                var _Lq = $k[--$j]; //#25437
                var _Lr = $k[--$j]; //#25437
                var _Ls = $k[--$j]; //#25437
                $put($k[--$j], _Ls, $xo(_Lr, _Lq)); //#25437
            } //#25437
        } //#25437
        $k[$j++] = $geti($_.rscws, 0, $_.rscws.length - 1); //#25442
    }; //#25442
    $_.dcwsb = $a($f($_.e1nb + $_.e2nb + $_.e3nb)); //#25447
    $_.ecwsb = $a($_.dcwsb.length); //#25448
    $_.in = 0; //#25449
    $_.out = 0; //#25449
    for (var _M4 = 0, _M5 = $_.e1nb; _M4 < _M5; _M4++) { //#25455
        $k[$j++] = $geti($_.cws, $_.in, $_.e1dcws); //#25451
        $k[$j++] = $_.e1ecws; //#25451
        $k[$j++] = 256; //#25451
        $k[$j++] = 355; //#25451
        $_.rscodes(); //#25451
        var _MB = $k[--$j]; //#25452
        $put($_.dcwsb, $_.out, $geti(_MB, 0, $_.e1dcws)); //#25452
        $put($_.ecwsb, $_.out, $geti(_MB, $_.e1dcws, $_.e1ecws)); //#25453
        $_.in = $f($_.in + $_.e1dcws); //#25454
        $_.out = $_.out + 1; //#25454
    } //#25454
    for (var _MP = 0, _MQ = $_.e2nb; _MP < _MQ; _MP++) { //#25461
        $k[$j++] = $geti($_.cws, $_.in, $_.e2dcws); //#25457
        $k[$j++] = $_.e2ecws; //#25457
        $k[$j++] = 256; //#25457
        $k[$j++] = 355; //#25457
        $_.rscodes(); //#25457
        var _MW = $k[--$j]; //#25458
        $put($_.dcwsb, $_.out, $geti(_MW, 0, $_.e2dcws)); //#25458
        $put($_.ecwsb, $_.out, $geti(_MW, $_.e2dcws, $_.e2ecws)); //#25459
        $_.in = $f($_.in + $_.e2dcws); //#25460
        $_.out = $_.out + 1; //#25460
    } //#25460
    for (var _Mk = 0, _Ml = $_.e3nb; _Mk < _Ml; _Mk++) { //#25467
        $k[$j++] = $geti($_.cws, $_.in, $_.e3dcws); //#25463
        $k[$j++] = $_.e3ecws; //#25463
        $k[$j++] = 256; //#25463
        $k[$j++] = 355; //#25463
        $_.rscodes(); //#25463
        var _Mr = $k[--$j]; //#25464
        $put($_.dcwsb, $_.out, $geti(_Mr, 0, $_.e3dcws)); //#25464
        $put($_.ecwsb, $_.out, $geti(_Mr, $_.e3dcws, $_.e3ecws)); //#25465
        $_.in = $f($_.in + $_.e3dcws); //#25466
        $_.out = $_.out + 1; //#25466
    } //#25466
    $_.cws = $a($_.ncws); //#25470
    $_.cw = 0; //#25471
    for (var _N8 = 0, _N7 = $_.dcwsb.length - 1; _N8 <= _N7; _N8 += 1) { //#25476
        $_.i = _N8; //#25473
        var _NB = $get($_.dcwsb, $_.i); //#25474
        $puti($_.cws, $_.cw, _NB); //#25474
        $_.cw = _NB.length + $_.cw; //#25474
        var _NH = $get($_.ecwsb, $_.i); //#25475
        $puti($_.cws, $_.cw, _NH); //#25475
        $_.cw = _NH.length + $_.cw; //#25475
    } //#25475
    $k[$j++] = Infinity; //#25479
    var _NL = $_.ncws; //#25480
    var _NM = 12; //#25480
    var _NN = _NL - 1; //#25480
    if ((_NL - 1) > 12) { //#25480
        var _ = _NM; //#25480
        _NM = _NN; //#25480
        _NN = _; //#25480
    } //#25480
    for (var _NP = 0, _NO = _NN; _NP <= _NO; _NP += 1) { //#25482
        for (var _NS = _NP, _NR = $_.ncws - 1; _NS <= _NR; _NS += 13) { //#25481
            $k[$j++] = _NS; //#25481
            if (_NS < $_.ncws) { //#25481
                var _NW = $get($_.cws, $k[--$j]); //#25481
                $k[$j++] = _NW; //#25481
            } else { //#25481
                $j--; //#25481
            } //#25481
        } //#25481
    } //#25481
    $_.cws = $a(); //#25481
    if ($_.rbit > 0) { //#25491
        $_.pad = $a($_.cws.length + 1); //#25487
        $puti($_.pad, 0, $_.cws); //#25488
        $put($_.pad, $_.pad.length - 1, 0); //#25489
        $_.cws = $_.pad; //#25490
    } //#25490
    var _Nh = $get($_.options, 'debugcws') !== undefined; //#25493
    if (_Nh) { //#25493
        $k[$j++] = 'bwipp.debugcws#25493'; //#25493
        $k[$j++] = $_.cws; //#25493
        bwipp_raiseerror(); //#25493
    } //#25493
    $k[$j++] = Infinity; //#25496
    for (var _Nl = 0, _Nm = $_.size * $_.size; _Nl < _Nm; _Nl++) { //#25496
        $k[$j++] = -1; //#25496
    } //#25496
    $_.pixs = $a(); //#25496
    $_.qmv = function() {
        var _Np = $k[--$j]; //#25497
        var _Nq = $k[--$j]; //#25497
        $k[$j++] = $f(_Nq + (_Np * $_.size)); //#25497
    }; //#25497
    if ($_.alnn != 0) { //#25556
        $_.trmv = function() {
            var _Nt = $k[--$j]; //#25501
            var _Nv = $k[--$j]; //#25501
            $k[$j++] = $f(_Nt * $_.size + $_.size - 1 - _Nv); //#25501
        }; //#25501
        $_.aplot = function() {
            var _Nw = $k[$j - 2]; //#25503
            var _Nx = $k[$j - 3]; //#25503
            var _Ny = $k[$j - 1]; //#25503
            $j -= 3; //#25503
            $k[$j++] = _Ny; //#25503
            $k[$j++] = _Nx; //#25503
            $k[$j++] = _Nw; //#25503
            $k[$j++] = _Ny; //#25503
            $k[$j++] = _Nw; //#25503
            $k[$j++] = _Nx; //#25503
            $_.trmv(); //#25503
            var _O0 = $k[--$j]; //#25503
            $k[$j++] = $_.pixs; //#25503
            $k[$j++] = _O0; //#25503
            var _O1 = $k[$j - 3]; //#25503
            var _O2 = $k[$j - 1]; //#25503
            $put($k[$j - 2], _O2, _O1); //#25503
            $j -= 3; //#25503
            $_.trmv(); //#25504
            var _O5 = $k[--$j]; //#25504
            $k[$j++] = $_.pixs; //#25504
            $k[$j++] = _O5; //#25504
            var _O6 = $k[$j - 3]; //#25504
            var _O7 = $k[$j - 1]; //#25504
            $put($k[$j - 2], _O7, _O6); //#25504
            $j -= 3; //#25504
        }; //#25504
        $_.i = 0; //#25506
        $_.stag = 0; //#25506
        for (;;) { //#25528
            if ($_.i >= $_.size) { //#25507
                break; //#25507
            } //#25507
            for (var _OD = 0, _OC = $_.size - 1; _OD <= _OC; _OD += 1) { //#25521
                $_.j = _OD; //#25509
                if ($f($_.j + $_.alnr) < $_.size) { //#25515
                    $k[$j++] = (((((~~($_.j / $_.alnk)) + $_.stag) % 2) == 0) && (!(($_.i == 0) && ($_.j < $_.alnk)))) || (($_.j % $_.alnk) == 0); //#25513
                } else { //#25515
                    $k[$j++] = ($f($_.alnn + $_.stag) % 2) == 0; //#25515
                } //#25515
                if ($k[--$j]) { //#25520
                    $k[$j++] = $_.j; //#25518
                    $k[$j++] = $_.i; //#25518
                    $k[$j++] = 1; //#25518
                    $_.aplot(); //#25518
                    var _OU = $_.j; //#25519
                    var _OV = $_.i; //#25519
                    $k[$j++] = _OU + 1; //#25519
                    $k[$j++] = _OV + 1; //#25519
                    if (((_OV + 1) < $_.size) && ((_OU + 1) < $_.size)) { //#25519
                        $k[$j++] = 0; //#25519
                        $_.aplot(); //#25519
                    } else { //#25519
                        $j -= 2; //#25519
                    } //#25519
                } //#25519
            } //#25519
            if ($f($_.i + $_.alnr) == $_.size) { //#25525
                $_.i = $f($_.i + $_.alnr) - 1; //#25523
            } else { //#25525
                $_.i = $f($_.i + $_.alnk); //#25525
            } //#25525
            $_.stag = 1 - $_.stag; //#25527
        } //#25527
        for (var _Ok = $_.alnk, _Ol = $_.alnk, _Oj = $_.size - 2; _Ol < 0 ? _Ok >= _Oj : _Ok <= _Oj; _Ok += _Ol) { //#25555
            $_.i = _Ok; //#25530
            if (((~~($_.i / $_.alnk)) % 2) != 0) { //#25542
                $k[$j++] = $_.pixs; //#25532
                $k[$j++] = 0; //#25532
                $k[$j++] = $_.i - 1; //#25532
                $_.trmv(); //#25532
                var _Oq = $k[--$j]; //#25532
                $put($k[--$j], _Oq, 0); //#25532
                $k[$j++] = $_.pixs; //#25533
                $k[$j++] = 0; //#25533
                $k[$j++] = $_.i + 1; //#25533
                $_.trmv(); //#25533
                var _Ou = $k[--$j]; //#25533
                $put($k[--$j], _Ou, 0); //#25533
                $k[$j++] = $_.pixs; //#25534
                $k[$j++] = 1; //#25534
                $k[$j++] = $_.i - 1; //#25534
                $_.trmv(); //#25534
                var _Oy = $k[--$j]; //#25534
                $put($k[--$j], _Oy, 0); //#25534
                $k[$j++] = $_.pixs; //#25535
                $k[$j++] = 1; //#25535
                $k[$j++] = $_.i; //#25535
                $_.trmv(); //#25535
                var _P2 = $k[--$j]; //#25535
                $put($k[--$j], _P2, 0); //#25535
                $k[$j++] = $_.pixs; //#25536
                $k[$j++] = 1; //#25536
                $k[$j++] = $_.i + 1; //#25536
                $_.trmv(); //#25536
                var _P6 = $k[--$j]; //#25536
                $put($k[--$j], _P6, 0); //#25536
                $k[$j++] = $_.pixs; //#25537
                $k[$j++] = $_.i - 1; //#25537
                $k[$j++] = 0; //#25537
                $_.trmv(); //#25537
                var _PA = $k[--$j]; //#25537
                $put($k[--$j], _PA, 0); //#25537
                $k[$j++] = $_.pixs; //#25538
                $k[$j++] = $_.i + 1; //#25538
                $k[$j++] = 0; //#25538
                $_.trmv(); //#25538
                var _PE = $k[--$j]; //#25538
                $put($k[--$j], _PE, 0); //#25538
                $k[$j++] = $_.pixs; //#25539
                $k[$j++] = $_.i - 1; //#25539
                $k[$j++] = 1; //#25539
                $_.trmv(); //#25539
                var _PI = $k[--$j]; //#25539
                $put($k[--$j], _PI, 0); //#25539
                $k[$j++] = $_.pixs; //#25540
                $k[$j++] = $_.i; //#25540
                $k[$j++] = 1; //#25540
                $_.trmv(); //#25540
                var _PM = $k[--$j]; //#25540
                $put($k[--$j], _PM, 0); //#25540
                $k[$j++] = $_.pixs; //#25541
                $k[$j++] = $_.i + 1; //#25541
                $k[$j++] = 1; //#25541
                $_.trmv(); //#25541
                var _PQ = $k[--$j]; //#25541
                $put($k[--$j], _PQ, 0); //#25541
            } //#25541
            $k[$j++] = $_.pixs; //#25543
            $k[$j++] = $_.size - 1; //#25543
            $k[$j++] = $_.i - 1; //#25543
            $_.trmv(); //#25543
            var _PV = $k[--$j]; //#25543
            if ($get($k[--$j], _PV) != 1) { //#25554
                $k[$j++] = $_.pixs; //#25544
                $k[$j++] = $_.size - 1; //#25544
                $k[$j++] = $_.i - 1; //#25544
                $_.trmv(); //#25544
                var _Pb = $k[--$j]; //#25544
                $put($k[--$j], _Pb, 0); //#25544
                $k[$j++] = $_.pixs; //#25545
                $k[$j++] = $_.size - 2; //#25545
                $k[$j++] = $_.i - 1; //#25545
                $_.trmv(); //#25545
                var _Pg = $k[--$j]; //#25545
                $put($k[--$j], _Pg, 0); //#25545
                $k[$j++] = $_.pixs; //#25546
                $k[$j++] = $_.size - 2; //#25546
                $k[$j++] = $_.i; //#25546
                $_.trmv(); //#25546
                var _Pl = $k[--$j]; //#25546
                $put($k[--$j], _Pl, 0); //#25546
                $k[$j++] = $_.pixs; //#25547
                $k[$j++] = $_.size - 2; //#25547
                $k[$j++] = $_.i + 1; //#25547
                $_.trmv(); //#25547
                var _Pq = $k[--$j]; //#25547
                $put($k[--$j], _Pq, 0); //#25547
                $k[$j++] = $_.pixs; //#25548
                $k[$j++] = $_.size - 1; //#25548
                $k[$j++] = $_.i + 1; //#25548
                $_.trmv(); //#25548
                var _Pv = $k[--$j]; //#25548
                $put($k[--$j], _Pv, 0); //#25548
                $k[$j++] = $_.pixs; //#25549
                $k[$j++] = $_.i - 1; //#25549
                $k[$j++] = $_.size - 1; //#25549
                $_.trmv(); //#25549
                var _Q0 = $k[--$j]; //#25549
                $put($k[--$j], _Q0, 0); //#25549
                $k[$j++] = $_.pixs; //#25550
                $k[$j++] = $_.i - 1; //#25550
                $k[$j++] = $_.size - 2; //#25550
                $_.trmv(); //#25550
                var _Q5 = $k[--$j]; //#25550
                $put($k[--$j], _Q5, 0); //#25550
                $k[$j++] = $_.pixs; //#25551
                $k[$j++] = $_.i; //#25551
                $k[$j++] = $_.size - 2; //#25551
                $_.trmv(); //#25551
                var _QA = $k[--$j]; //#25551
                $put($k[--$j], _QA, 0); //#25551
                $k[$j++] = $_.pixs; //#25552
                $k[$j++] = $_.i + 1; //#25552
                $k[$j++] = $_.size - 2; //#25552
                $_.trmv(); //#25552
                var _QF = $k[--$j]; //#25552
                $put($k[--$j], _QF, 0); //#25552
                $k[$j++] = $_.pixs; //#25553
                $k[$j++] = $_.i + 1; //#25553
                $k[$j++] = $_.size - 1; //#25553
                $_.trmv(); //#25553
                var _QK = $k[--$j]; //#25553
                $put($k[--$j], _QK, 0); //#25553
            } //#25553
        } //#25553
    } //#25553
    $_.fpat = $a([$a([1, 1, 1, 1, 1, 1, 1, 0]), $a([1, 0, 0, 0, 0, 0, 0, 0]), $a([1, 0, 1, 1, 1, 1, 1, 0]), $a([1, 0, 1, 0, 0, 0, 0, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); //#25569
    $_.fpat2 = $a([$a([1, 1, 1, 0, 1, 0, 1, 0]), $a([1, 1, 1, 0, 1, 0, 1, 0]), $a([1, 1, 1, 0, 1, 0, 1, 0]), $a([0, 0, 0, 0, 1, 0, 1, 0]), $a([1, 1, 1, 1, 1, 0, 1, 0]), $a([0, 0, 0, 0, 0, 0, 1, 0]), $a([1, 1, 1, 1, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); //#25579
    for (var _Qh = 0, _Qg = $_.fpat.length - 1; _Qh <= _Qg; _Qh += 1) { //#25592
        $_.y = _Qh; //#25582
        for (var _Ql = 0, _Qk = $get($_.fpat, 0).length - 1; _Ql <= _Qk; _Ql += 1) { //#25591
            $_.x = _Ql; //#25584
            $_.fpb = $get($get($_.fpat, $_.y), $_.x); //#25585
            $_.fpb2 = $get($get($_.fpat2, $_.y), $_.x); //#25586
            $k[$j++] = $_.pixs; //#25587
            $k[$j++] = $_.x; //#25587
            $k[$j++] = $_.y; //#25587
            $_.qmv(); //#25587
            var _R0 = $k[--$j]; //#25587
            $put($k[--$j], _R0, $_.fpb); //#25587
            $k[$j++] = $_.pixs; //#25588
            $k[$j++] = $f($_.size - $_.x) - 1; //#25588
            $k[$j++] = $_.y; //#25588
            $_.qmv(); //#25588
            var _R7 = $k[--$j]; //#25588
            $put($k[--$j], _R7, $_.fpb); //#25588
            $k[$j++] = $_.pixs; //#25589
            $k[$j++] = $f($_.size - $_.x) - 1; //#25589
            $k[$j++] = $f($_.size - $_.y) - 1; //#25589
            $_.qmv(); //#25589
            var _RF = $k[--$j]; //#25589
            $put($k[--$j], _RF, $_.fpb); //#25589
            $k[$j++] = $_.pixs; //#25590
            $k[$j++] = $_.x; //#25590
            $k[$j++] = $f($_.size - $_.y) - 1; //#25590
            $_.qmv(); //#25590
            var _RM = $k[--$j]; //#25590
            $put($k[--$j], _RM, $_.fpb2); //#25590
        } //#25590
    } //#25590
    $_.functionmap = $a([$a([$a([0, 8]), $a([$_.size - 1, $_.size - 9])]), $a([$a([1, 8]), $a([$_.size - 2, $_.size - 9])]), $a([$a([2, 8]), $a([$_.size - 3, $_.size - 9])]), $a([$a([3, 8]), $a([$_.size - 4, $_.size - 9])]), $a([$a([4, 8]), $a([$_.size - 5, $_.size - 9])]), $a([$a([5, 8]), $a([$_.size - 6, $_.size - 9])]), $a([$a([6, 8]), $a([$_.size - 7, $_.size - 9])]), $a([$a([7, 8]), $a([$_.size - 8, $_.size - 9])]), $a([$a([8, 8]), $a([$_.size - 9, $_.size - 9])]), $a([$a([8, 7]), $a([$_.size - 9, $_.size - 8])]), $a([$a([8, 6]), $a([$_.size - 9, $_.size - 7])]), $a([$a([8, 5]), $a([$_.size - 9, $_.size - 6])]), $a([$a([8, 4]), $a([$_.size - 9, $_.size - 5])]), $a([$a([8, 3]), $a([$_.size - 9, $_.size - 4])]), $a([$a([8, 2]), $a([$_.size - 9, $_.size - 3])]), $a([$a([8, 1]), $a([$_.size - 9, $_.size - 2])]), $a([$a([8, 0]), $a([$_.size - 9, $_.size - 1])]), $a([$a([$_.size - 9, 0]), $a([8, $_.size - 1])]), $a([$a([$_.size - 9, 1]), $a([8, $_.size - 2])]), $a([$a([$_.size - 9, 2]), $a([8, $_.size - 3])]), $a([$a([$_.size - 9, 3]), $a([8, $_.size - 4])]), $a([$a([$_.size - 9, 4]), $a([8, $_.size - 5])]), $a([$a([$_.size - 9, 5]), $a([8, $_.size - 6])]), $a([$a([$_.size - 9, 6]), $a([8, $_.size - 7])]), $a([$a([$_.size - 9, 7]), $a([8, $_.size - 8])]), $a([$a([$_.size - 9, 8]), $a([8, $_.size - 9])]), $a([$a([$_.size - 8, 8]), $a([7, $_.size - 9])]), $a([$a([$_.size - 7, 8]), $a([6, $_.size - 9])]), $a([$a([$_.size - 6, 8]), $a([5, $_.size - 9])]), $a([$a([$_.size - 5, 8]), $a([4, $_.size - 9])]), $a([$a([$_.size - 4, 8]), $a([3, $_.size - 9])]), $a([$a([$_.size - 3, 8]), $a([2, $_.size - 9])]), $a([$a([$_.size - 2, 8]), $a([1, $_.size - 9])]), $a([$a([$_.size - 1, 8]), $a([0, $_.size - 9])])]); //#25614
    var _U9 = $_.functionmap; //#25615
    for (var _UA = 0, _UB = _U9.length; _UA < _UB; _UA++) { //#25617
        $forall($get(_U9, _UA), function() { //#25616
            $aload($k[--$j]); //#25616
            $_.qmv(); //#25616
            $put($_.pixs, $k[--$j], 0); //#25616
        }); //#25616
    } //#25616
    var _UM = $a([function() {
        $j -= 2; //#25620
        $k[$j++] = 1; //#25620
    }, function() {
        var _UG = $k[--$j]; //#25621
        var _UH = $k[--$j]; //#25621
        $k[$j++] = $f(_UH + _UG) % 2; //#25621
    }, function() {
        var _UI = $k[--$j]; //#25622
        var _UJ = $k[--$j]; //#25622
        $k[$j++] = $f((_UI + _UJ) % 3 + _UJ % 3) % 2; //#25622
    }, function() {
        var _UK = $k[--$j]; //#25623
        var _UL = $k[--$j]; //#25623
        $k[$j++] = $f(_UL % _UK + (_UK % _UL + (_UK % 3 + _UL % 3))) % 2; //#25624
    }]); //#25624
    $_.maskfuncs = _UM; //#25625
    if ($_.mask != -1) { //#25629
        $_.maskfuncs = $a([$get($_.maskfuncs, $_.mask - 1)]); //#25627
        $_.bestmaskval = $_.mask - 1; //#25628
    } //#25628
    $_.masks = $a($_.maskfuncs.length); //#25630
    for (var _UX = 0, _UW = $_.masks.length - 1; _UX <= _UW; _UX += 1) { //#25644
        $_.m = _UX; //#25632
        $_.mask = $a($_.size * $_.size); //#25633
        for (var _Ud = 0, _Uc = $_.size - 1; _Ud <= _Uc; _Ud += 1) { //#25642
            $_.j = _Ud; //#25635
            for (var _Ug = 0, _Uf = $_.size - 1; _Ug <= _Uf; _Ug += 1) { //#25641
                $_.i = _Ug; //#25637
                $k[$j++] = $_.i + 1; //#25638
                $k[$j++] = $_.j + 1; //#25638
                if ($get($_.maskfuncs, $_.m)() === true) {
                    break;
                } //#25638
                var _Um = $k[--$j]; //#25638
                $k[$j++] = _Um == 0; //#25639
                $k[$j++] = $_.pixs; //#25639
                $k[$j++] = $_.i; //#25639
                $k[$j++] = $_.j; //#25639
                $_.qmv(); //#25639
                var _Uq = $k[--$j]; //#25639
                var _Us = $get($k[--$j], _Uq); //#25639
                var _Ut = $k[--$j]; //#25639
                var _Uu = (_Ut && (_Us == -1)) ? 1 : 0; //#25639
                $k[$j++] = _Uu; //#25640
                $k[$j++] = $_.mask; //#25640
                $k[$j++] = $_.i; //#25640
                $k[$j++] = $_.j; //#25640
                $_.qmv(); //#25640
                var _Uy = $k[$j - 3]; //#25640
                var _Uz = $k[$j - 1]; //#25640
                $put($k[$j - 2], _Uz, _Uy); //#25640
                $j -= 3; //#25640
            } //#25640
        } //#25640
        $put($_.masks, $_.m, $_.mask); //#25643
    } //#25643
    $_.posx = 0; //#25647
    $_.posy = 0; //#25648
    $_.num = 0; //#25649
    for (;;) { //#25659
        if ($_.posy == $_.size) { //#25651
            break; //#25651
        } //#25651
        $k[$j++] = $_.pixs; //#25652
        $k[$j++] = $_.posx; //#25652
        $k[$j++] = $_.posy; //#25652
        $_.qmv(); //#25652
        var _V9 = $k[--$j]; //#25652
        if ($get($k[--$j], _V9) == -1) { //#25656
            var _VE = $get($_.cws, ~~($_.num / 8)); //#25653
            var _VG = -(7 - ($_.num % 8)); //#25653
            $k[$j++] = ((_VG < 0 ? _VE >>> -_VG : _VE << _VG)) & 1; //#25654
            $k[$j++] = $_.pixs; //#25654
            $k[$j++] = $_.posx; //#25654
            $k[$j++] = $_.posy; //#25654
            $_.qmv(); //#25654
            var _VK = $k[$j - 3]; //#25654
            var _VL = $k[$j - 1]; //#25654
            $put($k[$j - 2], _VL, _VK); //#25654
            $j -= 3; //#25654
            $_.num = $_.num + 1; //#25655
        } //#25655
        $_.posx = $_.posx + 1; //#25657
        if ($_.posx == $_.size) { //#25658
            $_.posx = 0; //#25658
            $_.posy = $_.posy + 1; //#25658
        } //#25658
    } //#25658
    $_.evalfulln1n3 = function() {
        $_.scrle = $k[--$j]; //#25663
        $k[$j++] = 'scr1'; //#25665
        $k[$j++] = 0; //#25665
        $forall($_.scrle, function() { //#25665
            var _VU = $k[$j - 1]; //#25665
            if (_VU >= 3) { //#25665
                var _VV = $k[--$j]; //#25665
                var _VX = $f($k[--$j] + (_VV * 4)); //#25665
                $k[$j++] = _VX; //#25665
                $k[$j++] = _VX; //#25665
            } //#25665
            $j--; //#25665
        }); //#25665
        var _VY = $k[--$j]; //#25665
        $_[$k[--$j]] = _VY; //#25665
        $_.scr3 = 0; //#25666
        for (var _Vc = 5, _Vb = $_.scrle.length - 1; _Vc <= _Vb; _Vc += 2) { //#25682
            $_.j = _Vc; //#25669
            if (($get($_.scrle, $_.j) % 3) == 0) { //#25681
                $_.fact = ~~($get($_.scrle, $_.j) / 3); //#25671
                var _Vl = $geti($_.scrle, $_.j - 4, 4); //#25672
                for (var _Vm = 0, _Vn = _Vl.length; _Vm < _Vn; _Vm++) { //#25672
                    $k[$j++] = $get(_Vl, _Vm) == $_.fact; //#25672
                } //#25672
                var _Vq = $k[--$j]; //#25672
                var _Vr = $k[--$j]; //#25672
                var _Vs = $k[--$j]; //#25672
                if ($k[--$j] && (_Vs && (_Vr && _Vq))) { //#25680
                    if (($_.j == 5) || (($_.j + 2) >= $_.scrle.length)) { //#25677
                        $_.scr3 = $_.scr3 + 50; //#25674
                    } else { //#25677
                        if (($get($_.scrle, $_.j - 5) >= 3) || ($get($_.scrle, $_.j + 1) >= 3)) { //#25678
                            $_.scr3 = $_.scr3 + 50; //#25677
                        } //#25677
                    } //#25677
                } //#25677
            } //#25677
        } //#25677
        for (var _W7 = 1, _W6 = $_.scrle.length - 5; _W7 <= _W6; _W7 += 2) { //#25698
            $_.j = _W7; //#25685
            if (($get($_.scrle, $_.j) % 3) == 0) { //#25697
                $_.fact = ~~($get($_.scrle, $_.j) / 3); //#25687
                var _WG = $geti($_.scrle, $_.j + 1, 4); //#25688
                for (var _WH = 0, _WI = _WG.length; _WH < _WI; _WH++) { //#25688
                    $k[$j++] = $get(_WG, _WH) == $_.fact; //#25688
                } //#25688
                var _WL = $k[--$j]; //#25688
                var _WM = $k[--$j]; //#25688
                var _WN = $k[--$j]; //#25688
                if ($k[--$j] && (_WN && (_WM && _WL))) { //#25696
                    if (($_.j == 1) || (($_.j + 6) >= $_.scrle.length)) { //#25693
                        $_.scr3 = $_.scr3 + 50; //#25690
                    } else { //#25693
                        if (($get($_.scrle, $_.j - 1) >= 3) || ($get($_.scrle, $_.j + 5) >= 3)) { //#25694
                            $_.scr3 = $_.scr3 + 50; //#25693
                        } //#25693
                    } //#25693
                } //#25693
            } //#25693
        } //#25693
        $k[$j++] = $_.scr1; //#25699
        $k[$j++] = $_.scr3; //#25699
    }; //#25699
    $_.evalfull = function() {
        $_.sym = $k[--$j]; //#25704
        $_.n1 = 0; //#25706
        $_.n3 = 0; //#25706
        $_.rle = $a($_.size + 1); //#25707
        $_.lastpairs = $a($_.size); //#25708
        $_.thispairs = $a($_.size); //#25709
        $_.sizeadd1 = $_.size + 1; //#25710
        for (var _Wm = 0, _Wl = $_.size - 1; _Wm <= _Wl; _Wm += 1) { //#25735
            $_.i = _Wm; //#25712
            $k[$j++] = Infinity; //#25715
            var _Wo = $_.size; //#25716
            $k[$j++] = 0; //#25718
            $k[$j++] = 0; //#25718
            for (var _Wq = $_.i, _Wr = _Wo, _Wp = (_Wo * _Wo) - 1; _Wr < 0 ? _Wq >= _Wp : _Wq <= _Wp; _Wq += _Wr) { //#25718
                var _Wt = $get($_.sym, _Wq); //#25717
                var _Wu = $k[--$j]; //#25717
                $k[$j++] = _Wt; //#25717
                if ($eq(_Wu, _Wt)) { //#25717
                    var _Wv = $k[--$j]; //#25717
                    var _Ww = $k[--$j]; //#25717
                    $k[$j++] = _Ww + 1; //#25717
                    $k[$j++] = _Wv; //#25717
                } else { //#25717
                    var _Wx = $k[--$j]; //#25717
                    $k[$j++] = 1; //#25717
                    $k[$j++] = _Wx; //#25717
                } //#25717
            } //#25717
            $j--; //#25719
            var _Wz = $counttomark() + 2; //#25720
            $astore($geti($_.rle, 0, _Wz - 2)); //#25720
            $_.evalfulln1n3(); //#25721
            $_.n3 = $f($k[--$j] + $_.n3); //#25721
            $_.n1 = $f($k[--$j] + $_.n1); //#25721
            $j--; //#25722
            $_.symrow = $geti($_.sym, $_.i * $_.size, $_.size); //#25725
            $k[$j++] = Infinity; //#25726
            var _XA = $_.symrow; //#25727
            $k[$j++] = 0; //#25729
            $k[$j++] = 0; //#25729
            for (var _XB = 0, _XC = _XA.length; _XB < _XC; _XB++) { //#25729
                var _XD = $get(_XA, _XB); //#25729
                var _XE = $k[--$j]; //#25728
                $k[$j++] = _XD; //#25728
                if ($eq(_XE, _XD)) { //#25728
                    var _XF = $k[--$j]; //#25728
                    var _XG = $k[--$j]; //#25728
                    $k[$j++] = _XG + 1; //#25728
                    $k[$j++] = _XF; //#25728
                } else { //#25728
                    var _XH = $k[--$j]; //#25728
                    $k[$j++] = 1; //#25728
                    $k[$j++] = _XH; //#25728
                } //#25728
            } //#25728
            $j--; //#25730
            var _XJ = $counttomark() + 2; //#25731
            $astore($geti($_.rle, 0, _XJ - 2)); //#25731
            $_.evalfulln1n3(); //#25732
            $_.n3 = $f($k[--$j] + $_.n3); //#25732
            $_.n1 = $f($k[--$j] + $_.n1); //#25732
            $j--; //#25733
        } //#25733
        $k[$j++] = $f($_.n1 + $_.n3); //#25737
    }; //#25737
    $_.bestscore = 999999999; //#25741
    for (var _XT = 0, _XS = $_.masks.length - 1; _XT <= _XS; _XT += 1) { //#25759
        $_.m = _XT; //#25743
        $_.masksym = $a($_.size * $_.size); //#25744
        for (var _Xa = 0, _XZ = ($_.size * $_.size) - 1; _Xa <= _XZ; _Xa += 1) { //#25748
            $_.i = _Xa; //#25746
            $put($_.masksym, $_.i, $xo($get($_.pixs, $_.i), $get($get($_.masks, $_.m), $_.i))); //#25747
        } //#25747
        if ($_.masks.length != 1) { //#25757
            $k[$j++] = $_.masksym; //#25750
            $_.evalfull(); //#25750
            $_.score = $k[--$j]; //#25750
            if ($_.score < $_.bestscore) { //#25755
                $_.bestsym = $_.masksym; //#25752
                $_.bestmaskval = $_.m; //#25753
                $_.bestscore = $_.score; //#25754
            } //#25754
        } else { //#25757
            $_.bestsym = $_.masksym; //#25757
        } //#25757
    } //#25757
    $_.pixs = $_.bestsym; //#25760
    $_.funval = (((((~~(($_.size - 21) / 2)) + 20) * 4) + $_.eclval) * 4) + $_.bestmaskval; //#25763
    $k[$j++] = $a([($_.funval & 3840) >>> 8, ($_.funval & 240) >>> 4, $_.funval & 15]); //#25767
    $k[$j++] = 4; //#25767
    $k[$j++] = 16; //#25767
    $k[$j++] = 19; //#25767
    $_.rscodes(); //#25767
    $_.funvals = $k[--$j]; //#25767
    $k[$j++] = Infinity; //#25768
    $forall($_.funvals, function() { //#25771
        $k[$j++] = 4; //#25770
        $_.tobin(); //#25770
        $forall($k[--$j], function() { //#25770
            var _Y5 = $k[--$j]; //#25770
            $k[$j++] = _Y5 - 48; //#25770
        }); //#25770
    }); //#25770
    $k[$j++] = 0; //#25772
    $k[$j++] = 1; //#25772
    $k[$j++] = 0; //#25772
    $k[$j++] = 1; //#25772
    $k[$j++] = 0; //#25772
    $k[$j++] = 1; //#25772
    $_.funbits = $a(); //#25772
    for (var _Y9 = 0, _Y8 = $_.functionmap.length - 1; _Y9 <= _Y8; _Y9 += 1) { //#25779
        $_.i = _Y9; //#25775
        $forall($get($_.functionmap, $_.i), function() { //#25778
            var _YE = $k[--$j]; //#25777
            $k[$j++] = $_.pixs; //#25777
            $aload(_YE); //#25777
            $_.qmv(); //#25777
            var _YI = $k[--$j]; //#25777
            $put($k[--$j], _YI, $get($_.funbits, $_.i)); //#25777
        }); //#25777
    } //#25777
    var _YQ = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.size],
        ["pixy", $_.size],
        ["height", ($_.size * 2) / 72],
        ["width", ($_.size * 2) / 72],
        ["borderleft", 3],
        ["borderright", 3],
        ["bordertop", 3],
        ["borderbottom", 3],
        ["opt", $_.options]
    ]); //#25793
    $k[$j++] = _YQ; //#25796
    if (!$_.dontdraw) { //#25796
        bwipp_renmatrix(); //#25796
    } //#25796
    $_ = $__; //#25800
} //bwipp_hanxin
function bwipp_dotcode() {
    var $__ = $_; //#25831
    $_ = Object.assign({}, $_); //#25831
    $_.dontdraw = false; //#25834
    $_.rows = -1; //#25835
    $_.columns = -1; //#25836
    $_.ratio = -1; //#25837
    $_.parse = false; //#25838
    $_.parsefnc = false; //#25839
    $_.raw = false; //#25840
    $_.fast = false; //#25841
    $_.mask = -1; //#25842
    $k[$j++] = $_; //#25844
    bwipp_processoptions(); //#25844
    $_.options = $k[--$j]; //#25844
    $_.barcode = $k[--$j]; //#25845
    if ($_.rows != -1) { //#25851
        if ($_.rows < 5) { //#25850
            $k[$j++] = 'bwipp.dotcodeBadRows#25849'; //#25849
            $k[$j++] = "There must be at least 5 rows"; //#25849
            bwipp_raiseerror(); //#25849
        } //#25849
    } //#25849
    if ($_.columns != -1) { //#25857
        if ($_.columns < 5) { //#25856
            $k[$j++] = 'bwipp.dotcodeBadColumns#25855'; //#25855
            $k[$j++] = "There must be at least 5 columns"; //#25855
            bwipp_raiseerror(); //#25855
        } //#25855
    } //#25855
    if ((($_.rows != -1) && ($_.columns != -1)) && ((($_.rows + $_.columns) % 2) != 1)) { //#25861
        $k[$j++] = 'bwipp.dotcodeRowsColumnsBadParity#25860'; //#25860
        $k[$j++] = "Sum of rows and columns must be odd"; //#25860
        bwipp_raiseerror(); //#25860
    } //#25860
    if ((($_.ratio == -1) && ($_.rows == -1)) && ($_.columns == -1)) { //#25866
        $_.ratio = 3 / 2; //#25865
    } //#25865
    if ($_.ratio != -1) { //#25871
        if ($_.ratio <= 0) { //#25870
            $k[$j++] = 'bwipp.dotcodeRatio#25869'; //#25869
            $k[$j++] = "The ratio must be greater than 0"; //#25869
            bwipp_raiseerror(); //#25869
        } //#25869
    } //#25869
    if ($_.mask != -1) { //#25877
        if (($_.mask < 0) || ($_.mask > 3)) { //#25876
            $k[$j++] = 'bwipp.dotcodeBadMask#25875'; //#25875
            $k[$j++] = "Valid mask values are 0 to 3"; //#25875
            bwipp_raiseerror(); //#25875
        } //#25875
    } //#25875
    $_.laa = -1; //#25883
    $_.lab = -2; //#25883
    $_.lac = -3; //#25883
    $_.bin = -4; //#25883
    $_.sfa = -5; //#25884
    $_.sfb = -6; //#25884
    $_.sb2 = -7; //#25884
    $_.sb3 = -8; //#25884
    $_.sb4 = -9; //#25885
    $_.sb5 = -10; //#25885
    $_.sb6 = -11; //#25885
    $_.sfc = -12; //#25885
    $_.sc2 = -13; //#25886
    $_.sc3 = -14; //#25886
    $_.sc4 = -15; //#25886
    $_.sc5 = -16; //#25886
    $_.sc6 = -17; //#25887
    $_.sc7 = -18; //#25887
    $_.bsa = -19; //#25887
    $_.bsb = -20; //#25887
    $_.tma = -21; //#25888
    $_.tmb = -22; //#25888
    $_.tmc = -23; //#25888
    $_.tms = -24; //#25888
    $_.fn1 = -25; //#25889
    $_.fn2 = -26; //#25889
    $_.fn3 = -27; //#25889
    $_.crl = -28; //#25889
    $_.aim = -29; //#25890
    $_.m05 = -30; //#25890
    $_.m06 = -31; //#25890
    $_.m12 = -32; //#25890
    $_.mac = -33; //#25891
    var _N = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["eci", true],
        ["FNC1", $_.fn1],
        ["FNC3", $_.fn3]
    ]); //#25901
    $_.fncvals = _N; //#25902
    $k[$j++] = 'msg'; //#25903
    $k[$j++] = $_.barcode; //#25903
    $k[$j++] = $_.fncvals; //#25903
    bwipp_parseinput(); //#25903
    var _Q = $k[--$j]; //#25903
    $_[$k[--$j]] = _Q; //#25903
    $_.msglen = $_.msg.length; //#25904
    var _T = $_.msg; //#25907
    $k[$j++] = 'numecis'; //#25907
    $k[$j++] = 0; //#25907
    for (var _U = 0, _V = _T.length; _U < _V; _U++) { //#25907
        if ($get(_T, _U) <= -1000000) { //#25907
            var _X = $k[--$j]; //#25907
            $k[$j++] = _X + 1; //#25907
        } //#25907
    } //#25907
    var _Y = $k[--$j]; //#25907
    $_[$k[--$j]] = _Y; //#25907
    $_.msgtmp = $a($f($_.msg.length + ($_.numecis * 6))); //#25908
    $_.j = 0; //#25909
    for (var _f = 0, _e = $_.msg.length - 1; _f <= _e; _f += 1) { //#25920
        var _h = $get($_.msg, _f); //#25911
        $k[$j++] = _h; //#25919
        if (_h <= -1000000) { //#25918
            var _l = $geti($cvrs($s(7), -$k[--$j], 10), 1, 6); //#25912
            for (var _m = 0, _n = _l.length; _m < _n; _m++) { //#25912
                $k[$j++] = $get(_l, _m); //#25912
            } //#25912
            $astore($a(6)); //#25912
            $puti($_.msgtmp, $_.j + 1, $k[--$j]); //#25913
            $put($_.msgtmp, $_.j, $_.fn2); //#25914
            $_.j = $_.j + 7; //#25915
        } else { //#25918
            $put($_.msgtmp, $_.j, $k[--$j]); //#25917
            $_.j = $_.j + 1; //#25918
        } //#25918
    } //#25918
    $_.msg = $_.msgtmp; //#25921
    $_.msglen = $_.msg.length; //#25922
    $_.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$_.sfb, $_.crl, "96"]), $a([$_.sb2, 9, "97"]), $a([$_.sb3, 28, "98"]), $a([$_.sb4, 29, "99"]), $a([$_.sb5, 30, $_.aim]), $a([$_.sb6, $_.sfa, $_.laa]), $a([$_.lab, $_.laa, $_.sfb]), $a([$_.sc2, $_.sc2, $_.sb2]), $a([$_.sc3, $_.sc3, $_.sb3]), $a([$_.sc4, $_.sc4, $_.sb4]), $a([$_.lac, $_.lac, $_.lab]), $a([$_.fn1, $_.fn1, $_.fn1]), $a([$_.fn2, $_.fn2, $_.fn2]), $a([$_.fn3, $_.fn3, $_.fn3]), $a([$_.bsa, $_.bsa, $_.bsa]), $a([$_.bsb, $_.bsb, $_.bsb]), $a([$_.bin, $_.bin, $_.bin])]); //#25966
    $_.charvals = $a([new Map, new Map, new Map]); //#25969
    for (var _3d = 0, _3c = $_.charmaps.length - 1; _3d <= _3c; _3d += 1) { //#25978
        $_.i = _3d; //#25971
        $_.encs = $get($_.charmaps, $_.i); //#25972
        for (var _3h = 0; _3h <= 2; _3h += 1) { //#25977
            $_.j = _3h; //#25974
            var _3k = $get($_.encs, $_.j); //#25975
            $k[$j++] = _3k; //#25975
            if ($eq($type(_3k), 'stringtype')) { //#25975
                var _3n = $get($k[--$j], 0); //#25975
                $k[$j++] = _3n; //#25975
            } //#25975
            $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#25976
        } //#25976
    } //#25976
    $_.Avals = $get($_.charvals, 0); //#25979
    $_.Bvals = $get($_.charvals, 1); //#25980
    $put($_.Bvals, $_.m05, 97); //#25981
    $put($_.Bvals, $_.m06, 98); //#25982
    $put($_.Bvals, $_.m12, 99); //#25983
    $put($_.Bvals, $_.mac, 100); //#25984
    $_.Cvals = $get($_.charvals, 2); //#25985
    $k[$j++] = Infinity; //#25986
    var _4H = $a([$_.sc2, $_.sc3, $_.sc4, $_.sc5, $_.sc6, $_.sc7, $_.tma, $_.tmb, $_.tmc, $_.tms]); //#25987
    $k[$j++] = 102; //#25987
    for (var _4I = 0, _4J = _4H.length; _4I < _4J; _4I++) { //#25987
        var _4M = $k[--$j] + 1; //#25987
        $k[$j++] = $get(_4H, _4I); //#25987
        $k[$j++] = _4M; //#25987
        $k[$j++] = _4M; //#25987
    } //#25987
    $j--; //#25987
    $_.BINvals = $d(); //#25988
    $_.A = 0; //#25990
    $_.B = 1; //#25990
    $_.C = 2; //#25990
    $_.BIN = 3; //#25990
    $k[$j++] = Infinity; //#25994
    for (var _4Q = 0, _4R = $_.msglen + 1; _4Q < _4R; _4Q++) { //#25994
        $k[$j++] = 0; //#25994
    } //#25994
    $_.nDigits = $a(); //#25994
    $k[$j++] = Infinity; //#25995
    for (var _4U = 0, _4V = $_.msglen + 1; _4U < _4V; _4U++) { //#25995
        $k[$j++] = false; //#25995
    } //#25995
    $_.SeventeenTen = $a(); //#25995
    $k[$j++] = Infinity; //#25996
    for (var _4Y = 0, _4Z = $_.msglen + 1; _4Y < _4Z; _4Y++) { //#25996
        $k[$j++] = false; //#25996
    } //#25996
    $_.ECI = $a(); //#25996
    $k[$j++] = Infinity; //#25997
    for (var _4c = 0, _4d = $_.msglen + 1; _4c < _4d; _4c++) { //#25997
        $k[$j++] = false; //#25997
    } //#25997
    $_.DatumA = $a(); //#25997
    $k[$j++] = Infinity; //#25998
    for (var _4g = 0, _4h = $_.msglen + 1; _4g < _4h; _4g++) { //#25998
        $k[$j++] = false; //#25998
    } //#25998
    $_.DatumB = $a(); //#25998
    $k[$j++] = Infinity; //#25999
    for (var _4k = 0, _4l = $_.msglen + 1; _4k < _4l; _4k++) { //#25999
        $k[$j++] = false; //#25999
    } //#25999
    $_.DatumC = $a(); //#25999
    $k[$j++] = Infinity; //#26000
    for (var _4o = 0, _4p = $_.msglen + 8; _4o < _4p; _4o++) { //#26000
        $k[$j++] = false; //#26000
    } //#26000
    $_.Binary = $a(); //#26000
    $k[$j++] = Infinity; //#26001
    for (var _4s = 0, _4t = $_.msglen + 1; _4s < _4t; _4s++) { //#26001
        $k[$j++] = 0; //#26001
    } //#26001
    $_.AheadC = $a(); //#26001
    $k[$j++] = Infinity; //#26002
    for (var _4w = 0, _4x = $_.msglen + 1; _4w < _4x; _4w++) { //#26002
        $k[$j++] = 0; //#26002
    } //#26002
    $_.TryC = $a(); //#26002
    $k[$j++] = Infinity; //#26003
    for (var _50 = 0, _51 = $_.msglen + 1; _50 < _51; _50++) { //#26003
        $k[$j++] = 0; //#26003
    } //#26003
    $_.AheadA = $a(); //#26003
    $k[$j++] = Infinity; //#26004
    for (var _54 = 0, _55 = $_.msglen + 1; _54 < _55; _54++) { //#26004
        $k[$j++] = 0; //#26004
    } //#26004
    $_.AheadB = $a(); //#26004
    $k[$j++] = Infinity; //#26005
    for (var _58 = 0, _59 = $_.msglen + 1; _58 < _59; _58++) { //#26005
        $k[$j++] = 0; //#26005
    } //#26005
    $_.UntilEndSeg = $a(); //#26005
    for (var _5C = $_.msglen - 1; _5C >= 0; _5C -= 1) { //#26060
        $_.i = _5C; //#26007
        $_.barchar = $get($_.msg, $_.i); //#26008
        if (($_.barchar >= 48) && ($_.barchar <= 57)) { //#26011
            $put($_.nDigits, $_.i, $get($_.nDigits, $_.i + 1) + 1); //#26010
        } //#26010
        var _5P = $get($_.Avals, $_.barchar) !== undefined; //#26012
        if (_5P) { //#26012
            $put($_.DatumA, $_.i, true); //#26012
        } //#26012
        var _5U = $get($_.Bvals, $_.barchar) !== undefined; //#26013
        if (_5U) { //#26013
            $put($_.DatumB, $_.i, true); //#26013
        } //#26013
        $_.CRLF = false; //#26014
        if (($_.barchar == 13) && ($_.i < ($_.msglen - 1))) { //#26017
            if ($get($_.msg, $_.i + 1) == 10) { //#26016
                $_.CRLF = true; //#26016
            } //#26016
        } //#26016
        if ($_.CRLF) { //#26018
            $put($_.DatumB, $_.i, true); //#26018
        } //#26018
        if ($get($_.nDigits, $_.i) >= 2) { //#26019
            $put($_.DatumC, $_.i, true); //#26019
        } //#26019
        if ($_.barchar < 0) { //#26020
            $put($_.DatumC, $_.i, true); //#26020
        } //#26020
        if ($_.barchar >= 128) { //#26021
            $put($_.Binary, $_.i, true); //#26021
        } //#26021
        if ($get($_.nDigits, $_.i) >= 10) { //#26035
            $k[$j++] = Infinity; //#26023
            $aload($geti($_.msg, $_.i, 10)); //#26024
            for (var _5x = 0; _5x < 1; _5x++) { //#26032
                if ($k[--$j] != 48) { //#26026
                    $k[$j++] = false; //#26026
                    break; //#26026
                } //#26026
                if ($k[--$j] != 49) { //#26027
                    $k[$j++] = false; //#26027
                    break; //#26027
                } //#26027
                $j -= 6; //#26028
                if ($k[--$j] != 55) { //#26029
                    $k[$j++] = false; //#26029
                    break; //#26029
                } //#26029
                if ($k[--$j] != 49) { //#26030
                    $k[$j++] = false; //#26030
                    break; //#26030
                } //#26030
                $k[$j++] = true; //#26031
            } //#26031
            $k[$j++] = $_.SeventeenTen; //#26033
            $k[$j++] = $_.i; //#26033
            var _64 = $k[$j - 3]; //#26033
            var _65 = $k[$j - 1]; //#26033
            $put($k[$j - 2], _65, _64); //#26033
            $j -= 3; //#26033
            $cleartomark(); //#26034
        } //#26034
        if (($get($_.nDigits, $_.i + 1) >= 6) && ($get($_.msg, $_.i) == $_.fn2)) { //#26038
            $put($_.ECI, $_.i, true); //#26037
        } //#26037
        if (($_.barchar < 0) && ($_.barchar != $_.fn3)) { //#26045
            $put($_.AheadC, $_.i, $get($_.AheadC, $_.i + 1) + 1); //#26040
        } else { //#26045
            if ($get($_.nDigits, $_.i) <= 1) { //#26045
                $put($_.AheadC, $_.i, 0); //#26043
            } else { //#26045
                $put($_.AheadC, $_.i, $get($_.AheadC, $_.i + 2) + 1); //#26045
            } //#26045
        } //#26045
        if (($get($_.nDigits, $_.i) > 0) && $gt($get($_.AheadC, $_.i), $get($_.AheadC, $_.i + 1))) { //#26050
            $put($_.TryC, $_.i, $get($_.AheadC, $_.i)); //#26049
        } //#26049
        if (($get($_.DatumA, $_.i) && ($get($_.TryC, $_.i) < 2)) && ($_.barchar != $_.fn3)) { //#26053
            $put($_.AheadA, $_.i, $get($_.AheadA, $_.i + 1) + 1); //#26052
        } //#26052
        if (($get($_.DatumB, $_.i) && ($get($_.TryC, $_.i) < 2)) && ($_.barchar != $_.fn3)) { //#26056
            $k[$j++] = $_.AheadB; //#26055
            $k[$j++] = $_.i; //#26055
            $k[$j++] = $_.AheadB; //#26055
            $k[$j++] = $_.i + 1; //#26055
            if ($_.CRLF) { //#26055
                var _7C = $k[--$j]; //#26055
                $k[$j++] = _7C + 1; //#26055
            } //#26055
            var _7D = $k[--$j]; //#26055
            var _7F = $get($k[--$j], _7D); //#26055
            var _7G = $k[--$j]; //#26055
            $put($k[--$j], _7G, _7F + 1); //#26055
        } //#26055
        if ($_.barchar != $_.fn3) { //#26059
            $put($_.UntilEndSeg, $_.i, $get($_.UntilEndSeg, $_.i + 1) + 1); //#26058
        } //#26058
    } //#26058
    $_.addtocws = function() {
        var _7P = $k[--$j]; //#26063
        $puti($_.cws, $_.j, _7P); //#26063
        $_.j = _7P.length + $_.j; //#26064
    }; //#26064
    $_.base259to103 = function() {
        $_.in = $k[--$j]; //#26069
        $_.inlen = $_.in.length; //#26070
        $k[$j++] = Infinity; //#26071
        for (var _7W = 0, _7X = 5 - $_.inlen; _7W < _7X; _7W++) { //#26071
            $k[$j++] = 0; //#26071
        } //#26071
        $aload($_.in); //#26071
        $_.in = $a(); //#26071
        $_.out = $a(6); //#26072
        $k[$j++] = Infinity; //#26073
        $aload($geti($_.in, 0, 2)); //#26073
        $_.msbs = $a(); //#26073
        $k[$j++] = Infinity; //#26074
        $aload($_.msbs); //#26075
        var _7f = $k[--$j]; //#26075
        var _7g = $k[--$j]; //#26075
        $k[$j++] = $f(_7f + (_7g * 259)); //#26076
        for (var _7h = 0; _7h < 2; _7h++) { //#26076
            var _7i = $k[--$j]; //#26076
            $k[$j++] = _7i % 103; //#26076
            $k[$j++] = ~~(_7i / 103); //#26076
        } //#26076
        $_.mscs = $a(); //#26076
        $k[$j++] = Infinity; //#26078
        $aload($geti($_.in, 2, 3)); //#26078
        $_.lsbs = $a(); //#26078
        $k[$j++] = Infinity; //#26079
        $aload($_.lsbs); //#26080
        var _7o = $k[--$j]; //#26080
        var _7p = $k[--$j]; //#26080
        var _7q = $k[--$j]; //#26080
        $k[$j++] = $f(_7o + _7p * 259 + _7q * 67081); //#26081
        for (var _7r = 0; _7r < 3; _7r++) { //#26081
            var _7s = $k[--$j]; //#26081
            $k[$j++] = _7s % 103; //#26081
            $k[$j++] = ~~(_7s / 103); //#26081
        } //#26081
        $_.lscs = $a(); //#26081
        var _7v = $get($_.lscs, 0); //#26083
        var _7x = $get($_.mscs, 0); //#26083
        $put($_.out, 5, ($f(_7v + (_7x * 42))) % 103); //#26084
        var _80 = $get($_.lscs, 1); //#26085
        var _82 = $get($_.mscs, 0); //#26085
        var _84 = $get($_.mscs, 1); //#26085
        $put($_.out, 4, $f(~~((_7v + _7x * 42) / 103) + _80 + _82 * 68 + _84 * 42) % 103); //#26086
        var _87 = $get($_.lscs, 2); //#26087
        var _89 = $get($_.mscs, 0); //#26087
        var _8B = $get($_.mscs, 1); //#26087
        var _8D = $get($_.mscs, 2); //#26087
        $put($_.out, 3, $f(~~((~~((_7v + _7x * 42) / 103) + _80 + _82 * 68 + _84 * 42) / 103) + _87 + _89 * 92 + _8B * 68 + _8D * 42) % 103); //#26088
        var _8G = $get($_.lscs, 3); //#26089
        var _8I = $get($_.mscs, 0); //#26089
        var _8K = $get($_.mscs, 1); //#26089
        var _8M = $get($_.mscs, 2); //#26089
        $put($_.out, 2, $f(~~((~~((~~((_7v + _7x * 42) / 103) + _80 + _82 * 68 + _84 * 42) / 103) + _87 + _89 * 92 + _8B * 68 + _8D * 42) / 103) + _8G + _8I * 15 + _8K * 92 + _8M * 68) % 103); //#26090
        var _8P = $get($_.mscs, 1); //#26091
        var _8R = $get($_.mscs, 2); //#26091
        $put($_.out, 1, $f(~~((~~((~~((~~((_7v + _7x * 42) / 103) + _80 + _82 * 68 + _84 * 42) / 103) + _87 + _89 * 92 + _8B * 68 + _8D * 42) / 103) + _8G + _8I * 15 + _8K * 92 + _8M * 68) / 103) + _8P * 15 + _8R * 92) % 103); //#26092
        $put($_.out, 0, $f(~~((~~((~~((~~((~~((_7v + _7x * 42) / 103) + _80 + _82 * 68 + _84 * 42) / 103) + _87 + _89 * 92 + _8B * 68 + _8D * 42) / 103) + _8G + _8I * 15 + _8K * 92 + _8M * 68) / 103) + _8P * 15 + _8R * 92) / 103) + $get($_.mscs, 2) * 15) % 103); //#26094
        $k[$j++] = $geti($_.out, (6 - $_.inlen) - 1, $_.inlen + 1); //#26095
    }; //#26095
    $_.finaliseBIN = function() {
        if ($_.bpos != 0) { //#26102
            $k[$j++] = $geti($_.bvals, 0, $_.bpos); //#26100
            $_.base259to103(); //#26100
            $aload($k[--$j]); //#26100
            $_.bpos = 0; //#26101
        } //#26101
    }; //#26101
    $_.addtobin = function() {
        $put($_.bvals, $_.bpos, $k[--$j]); //#26106
        $_.bpos = $_.bpos + 1; //#26107
        if ($_.bpos == 5) { //#26108
            $_.finaliseBIN(); //#26108
        } //#26108
    }; //#26108
    $_.ECIabc = function() {
        var _8m = $geti($_.msg, $_.i + 1, 6); //#26112
        $k[$j++] = 0; //#26112
        for (var _8n = 0, _8o = _8m.length; _8n < _8o; _8n++) { //#26112
            var _8q = $k[--$j]; //#26112
            $k[$j++] = ($f(_8q + ($get(_8m, _8n) - 48))) * 10; //#26112
        } //#26112
        var _8s = ~~($k[--$j] / 10); //#26113
        $k[$j++] = _8s; //#26117
        if (_8s >= 40) { //#26117
            var _8u = $k[--$j] - 40; //#26115
            var _8v = _8u % 12769; //#26116
            $k[$j++] = (~~(_8u / 12769)) + 40; //#26116
            $k[$j++] = ~~(_8v / 113); //#26116
            $k[$j++] = _8v % 113; //#26116
        } //#26116
    }; //#26116
    $_.ECIbin = function() {
        $k[$j++] = Infinity; //#26121
        var _8y = $geti($_.msg, $_.i + 1, 6); //#26122
        $k[$j++] = 0; //#26122
        for (var _8z = 0, _90 = _8y.length; _8z < _90; _8z++) { //#26122
            var _92 = $k[--$j]; //#26122
            $k[$j++] = ($f(_92 + ($get(_8y, _8z) - 48))) * 10; //#26122
        } //#26122
        var _94 = ~~($k[--$j] / 10); //#26123
        $k[$j++] = _94; //#26131
        if (_94 >= 65536) { //#26129
            var _95 = $k[--$j]; //#26124
            var _96 = _95 % 65536; //#26124
            $k[$j++] = 258; //#26124
            $k[$j++] = ~~(_95 / 65536); //#26124
            $k[$j++] = ~~(_96 / 256); //#26124
            $k[$j++] = _96 % 256; //#26124
        } else { //#26129
            var _97 = $k[$j - 1]; //#26126
            if (_97 >= 256) { //#26129
                var _98 = $k[--$j]; //#26127
                $k[$j++] = 257; //#26127
                $k[$j++] = ~~(_98 / 256); //#26127
                $k[$j++] = _98 % 256; //#26127
            } else { //#26129
                var _99 = $k[--$j]; //#26129
                $k[$j++] = 256; //#26129
                $k[$j++] = _99; //#26129
            } //#26129
        } //#26129
        var _9A = $a(); //#26129
        for (var _9B = 0, _9C = _9A.length; _9B < _9C; _9B++) { //#26134
            $k[$j++] = $get(_9A, _9B); //#26133
            $_.addtobin(); //#26133
        } //#26133
    }; //#26133
    $_.encC = function() {
        for (var _9E = 0; _9E < 1; _9E++) { //#26258
            if ($_.i == $_.segstart) { //#26171
                for (var _9H = 0; _9H < 1; _9H++) { //#26156
                    if ($_.i > ($_.segend - 7)) { //#26141
                        $k[$j++] = 0; //#26141
                        break; //#26141
                    } //#26141
                    if ($get($_.msg, $_.segstart) != 91) { //#26142
                        $k[$j++] = 0; //#26142
                        break; //#26142
                    } //#26142
                    if ($get($_.msg, $_.segstart + 1) != 41) { //#26143
                        $k[$j++] = 0; //#26143
                        break; //#26143
                    } //#26143
                    if ($get($_.msg, $_.segstart + 2) != 62) { //#26144
                        $k[$j++] = 0; //#26144
                        break; //#26144
                    } //#26144
                    if ($get($_.msg, $_.segstart + 3) != 30) { //#26145
                        $k[$j++] = 0; //#26145
                        break; //#26145
                    } //#26145
                    var _9Y = $get($_.msg, $_.segstart + 4); //#26146
                    if ((_9Y < 48) || (_9Y > 57)) { //#26146
                        $k[$j++] = 0; //#26146
                        break; //#26146
                    } //#26146
                    var _9b = $get($_.msg, $_.segstart + 5); //#26147
                    if ((_9b < 48) || (_9b > 57)) { //#26147
                        $k[$j++] = 0; //#26147
                        break; //#26147
                    } //#26147
                    if ($get($_.msg, $_.segend - 1) != 4) { //#26148
                        $k[$j++] = 0; //#26148
                        break; //#26148
                    } //#26148
                    var _9l = $f((($get($_.msg, $_.segstart + 4) - 48) * 10) + ($get($_.msg, $_.segstart + 5) - 48)); //#26150
                    $k[$j++] = _9l; //#26150
                    if ((_9l != 5) && ((_9l != 6) && (_9l != 12))) { //#26150
                        $k[$j - 1] = $_.mac; //#26150
                        break; //#26150
                    } //#26150
                    if ($get($_.msg, $_.segstart + 6) != 29) { //#26151
                        $k[$j - 1] = 0; //#26151
                        break; //#26151
                    } //#26151
                    if ($get($_.msg, $_.segend - 2) != 30) { //#26152
                        $k[$j - 1] = 0; //#26152
                        break; //#26152
                    } //#26152
                    var _9t = $k[$j - 1]; //#26153
                    if (_9t == 5) { //#26153
                        $k[$j - 1] = $_.m05; //#26153
                        break; //#26153
                    } //#26153
                    if ($k[--$j] == 6) { //#26154
                        $k[$j++] = $_.m06; //#26154
                        break; //#26154
                    } //#26154
                    $k[$j++] = $_.m12; //#26155
                    break; //#26155
                } //#26155
                $_.inmac = $k[--$j]; //#26157
                if ($_.inmac != 0) { //#26170
                    $k[$j++] = $a([$get($_.Cvals, $_.lab)]); //#26159
                    $_.addtocws(); //#26159
                    $_.mode = $_.B; //#26160
                    $k[$j++] = $a([$get($_.Bvals, $_.inmac)]); //#26161
                    $_.addtocws(); //#26161
                    if ($_.inmac == $_.mac) { //#26167
                        $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.segstart + 4))]); //#26163
                        $_.addtocws(); //#26163
                        $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.segstart + 5))]); //#26164
                        $_.addtocws(); //#26164
                        $_.i = $_.i + 6; //#26165
                    } else { //#26167
                        $_.i = $_.i + 7; //#26167
                    } //#26167
                    break; //#26169
                } //#26169
            } //#26169
            if ($_.i == $_.segstart) { //#26182
                if ($get($_.nDigits, $_.i) >= 2) { //#26177
                    $k[$j++] = $a([$get($_.Cvals, $_.fn1)]); //#26176
                    $_.addtocws(); //#26176
                } //#26176
                if (($get($_.msg, $_.i) == $_.fn1) && ($get($_.nDigits, $_.i + 1) >= 2)) { //#26181
                    $_.i = $_.i + 1; //#26180
                } //#26180
            } //#26180
            if ($get($_.SeventeenTen, $_.i)) { //#26192
                $k[$j++] = $a([$get($_.Cvals, $_.aim), $f(($get($_.msg, $_.i + 2) - 48) * 10 + ($get($_.msg, $_.i + 3) - 48)), $f(($get($_.msg, $_.i + 4) - 48) * 10 + ($get($_.msg, $_.i + 5) - 48)), $f(($get($_.msg, $_.i + 6) - 48) * 10 + ($get($_.msg, $_.i + 7) - 48))]); //#26189
                $_.addtocws(); //#26189
                $_.i = $_.i + 10; //#26190
                break; //#26191
            } //#26191
            if ($get($_.DatumC, $_.i)) { //#26214
                var _BB = $get($_.msg, $_.i); //#26194
                if ((_BB == $_.fn1) || ((_BB == $_.fn2) || (_BB == $_.fn3))) { //#26210
                    $k[$j++] = $a([$get($_.Cvals, $get($_.msg, $_.i))]); //#26195
                    $_.addtocws(); //#26195
                    if ($get($_.ECI, $_.i)) { //#26200
                        $k[$j++] = Infinity; //#26197
                        $_.ECIabc(); //#26197
                        var _BO = $a(); //#26197
                        $k[$j++] = _BO; //#26197
                        $_.addtocws(); //#26197
                        $_.i = $_.i + 7; //#26198
                        break; //#26199
                    } //#26199
                    if (($get($_.msg, $_.i) == $_.fn3) && ($_.segstart != $_.i)) { //#26207
                        $_.i = $_.i + 1; //#26202
                        $_.inmac = 0; //#26203
                        $_.segstart = $_.i; //#26204
                        $_.segend = $f($_.i + $get($_.UntilEndSeg, $_.i)); //#26205
                        break; //#26206
                    } //#26206
                    $_.i = $_.i + 1; //#26208
                    break; //#26209
                } //#26209
                $k[$j++] = $a([$f((($get($_.msg, $_.i) - 48) * 10) + ($get($_.msg, $_.i + 1) - 48))]); //#26211
                $_.addtocws(); //#26211
                $_.i = $_.i + 2; //#26212
                break; //#26213
            } //#26213
            if ($get($_.Binary, $_.i)) { //#26228
                if ($get($_.nDigits, $_.i + 1) > 0) { //#26224
                    if ($get($_.msg, $_.i) < 160) { //#26220
                        $k[$j++] = $a([$get($_.Cvals, $_.bsa), $get($_.Avals, $get($_.msg, $_.i) - 128)]); //#26218
                        $_.addtocws(); //#26218
                    } else { //#26220
                        $k[$j++] = $a([$get($_.Cvals, $_.bsb), $get($_.Bvals, $get($_.msg, $_.i) - 128)]); //#26220
                        $_.addtocws(); //#26220
                    } //#26220
                    $_.i = $_.i + 1; //#26222
                    break; //#26223
                } //#26223
                $k[$j++] = $a([$get($_.Cvals, $_.bin)]); //#26225
                $_.addtocws(); //#26225
                $_.mode = $_.BIN; //#26226
                break; //#26227
            } //#26227
            $_.m = $get($_.AheadA, $_.i); //#26229
            $_.n = $get($_.AheadB, $_.i); //#26229
            if ($gt($_.m, $_.n)) { //#26234
                $k[$j++] = $a([$get($_.Cvals, $_.laa)]); //#26231
                $_.addtocws(); //#26231
                $_.mode = $_.A; //#26232
                break; //#26233
            } //#26233
            if ($_.i == $_.segstart) { //#26241
                var _CZ = $get($_.msg, $_.i); //#26236
                if ((_CZ == 9) || ((_CZ == 28) || ((_CZ == 29) || (_CZ == 30)))) { //#26240
                    $k[$j++] = $a([$get($_.Cvals, $_.laa)]); //#26237
                    $_.addtocws(); //#26237
                    $_.mode = $_.A; //#26238
                    break; //#26239
                } //#26239
            } //#26239
            if ($_.n > 4) { //#26246
                $k[$j++] = $a([$get($_.Cvals, $_.lab)]); //#26243
                $_.addtocws(); //#26243
                $_.mode = $_.B; //#26244
                break; //#26245
            } //#26245
            $k[$j++] = $a([$get($_.Cvals, $get($a([$_.sfb, $_.sb2, $_.sb3, $_.sb4]), $_.n - 1))]); //#26247
            $_.addtocws(); //#26247
            for (var _Cw = 0, _Cx = $_.n; _Cw < _Cx; _Cw++) { //#26256
                if ($get($_.msg, $_.i) == 13) { //#26254
                    $k[$j++] = $a([$get($_.Bvals, $_.crl)]); //#26250
                    $_.addtocws(); //#26250
                    $_.i = $_.i + 2; //#26251
                } else { //#26254
                    $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.i))]); //#26253
                    $_.addtocws(); //#26253
                    $_.i = $_.i + 1; //#26254
                } //#26254
            } //#26254
            break; //#26257
        } //#26257
    }; //#26257
    $_.encB = function() {
        for (var _DD = 0; _DD < 1; _DD++) { //#26334
            $_.n = $get($_.TryC, $_.i); //#26263
            if ($_.n >= 2) { //#26281
                if ($_.n > 4) { //#26269
                    $k[$j++] = $a([$get($_.Bvals, $_.lac)]); //#26266
                    $_.addtocws(); //#26266
                    $_.mode = $_.C; //#26267
                    break; //#26268
                } //#26268
                $k[$j++] = $a([$get($_.Bvals, $get($a([$_.sfc, $_.sc2, $_.sc3, $_.sc4]), $_.n - 1))]); //#26270
                $_.addtocws(); //#26270
                for (var _DZ = 0, _Da = $_.n; _DZ < _Da; _DZ++) { //#26279
                    if ($get($_.msg, $_.i) < 0) { //#26277
                        $k[$j++] = $a([$get($_.Cvals, $get($_.msg, $_.i))]); //#26273
                        $_.addtocws(); //#26273
                        $_.i = $_.i + 1; //#26274
                    } else { //#26277
                        $k[$j++] = $a([$f((($get($_.msg, $_.i) - 48) * 10) + ($get($_.msg, $_.i + 1) - 48))]); //#26276
                        $_.addtocws(); //#26276
                        $_.i = $_.i + 2; //#26277
                    } //#26277
                } //#26277
                break; //#26280
            } //#26280
            if ($get($_.DatumB, $_.i)) { //#26311
                var _Dy = $get($_.msg, $_.i); //#26283
                if ((_Dy == $_.fn1) || ((_Dy == $_.fn2) || (_Dy == $_.fn3))) { //#26300
                    $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.i))]); //#26284
                    $_.addtocws(); //#26284
                    if ($get($_.ECI, $_.i)) { //#26289
                        $k[$j++] = Infinity; //#26286
                        $_.ECIabc(); //#26286
                        var _EB = $a(); //#26286
                        $k[$j++] = _EB; //#26286
                        $_.addtocws(); //#26286
                        $_.i = $_.i + 7; //#26287
                        break; //#26288
                    } //#26288
                    if (($get($_.msg, $_.i) == $_.fn3) && ($_.i != $_.segstart)) { //#26297
                        $_.i = $_.i + 1; //#26291
                        $_.mode = $_.C; //#26292
                        $_.inmac = 0; //#26293
                        $_.segstart = $_.i; //#26294
                        $_.segend = $f($_.i + $get($_.UntilEndSeg, $_.i)); //#26295
                        break; //#26296
                    } //#26296
                    $_.i = $_.i + 1; //#26298
                    break; //#26299
                } //#26299
                if (($get($_.msg, $_.i) == 13) && ($_.i < ($_.msglen - 1))) { //#26307
                    if ($get($_.msg, $_.i + 1) == 10) { //#26306
                        $k[$j++] = $a([$get($_.Bvals, $_.crl)]); //#26303
                        $_.addtocws(); //#26303
                        $_.i = $_.i + 2; //#26304
                        break; //#26305
                    } //#26305
                } //#26305
                $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.i))]); //#26308
                $_.addtocws(); //#26308
                $_.i = $_.i + 1; //#26309
                break; //#26310
            } //#26310
            if ($get($_.Binary, $_.i)) { //#26325
                if ($get($_.DatumB, $_.i + 1)) { //#26321
                    if ($get($_.msg, $_.i) < 160) { //#26317
                        $k[$j++] = $a([$get($_.Bvals, $_.bsa), $get($_.Avals, $get($_.msg, $_.i) - 128)]); //#26315
                        $_.addtocws(); //#26315
                    } else { //#26317
                        $k[$j++] = $a([$get($_.Bvals, $_.bsb), $get($_.Bvals, $get($_.msg, $_.i) - 128)]); //#26317
                        $_.addtocws(); //#26317
                    } //#26317
                    $_.i = $_.i + 1; //#26319
                    break; //#26320
                } //#26320
                $k[$j++] = $a([$get($_.Bvals, $_.bin)]); //#26322
                $_.addtocws(); //#26322
                $_.mode = $_.BIN; //#26323
                break; //#26324
            } //#26324
            if ($get($_.AheadA, $_.i) == 1) { //#26330
                $k[$j++] = $a([$get($_.Bvals, $_.sfa), $get($_.Avals, $get($_.msg, $_.i))]); //#26327
                $_.addtocws(); //#26327
                $_.i = $_.i + 1; //#26328
                break; //#26329
            } //#26329
            $k[$j++] = $a([$get($_.Bvals, $_.laa)]); //#26331
            $_.addtocws(); //#26331
            $_.mode = $_.A; //#26332
            break; //#26333
        } //#26333
    }; //#26333
    $_.encA = function() {
        for (var _Fa = 0; _Fa < 1; _Fa++) { //#26412
            $_.n = $get($_.TryC, $_.i); //#26339
            if ($_.n >= 2) { //#26357
                if ($_.n > 4) { //#26345
                    $k[$j++] = $a([$get($_.Avals, $_.lac)]); //#26342
                    $_.addtocws(); //#26342
                    $_.mode = $_.C; //#26343
                    break; //#26344
                } //#26344
                $k[$j++] = $a([$get($_.Avals, $get($a([$_.sfc, $_.sc2, $_.sc3, $_.sc4]), $_.n - 1))]); //#26346
                $_.addtocws(); //#26346
                for (var _Fw = 0, _Fx = $_.n; _Fw < _Fx; _Fw++) { //#26355
                    if ($get($_.msg, $_.i) < 0) { //#26353
                        $k[$j++] = $a([$get($_.Cvals, $get($_.msg, $_.i))]); //#26349
                        $_.addtocws(); //#26349
                        $_.i = $_.i + 1; //#26350
                    } else { //#26353
                        $k[$j++] = $a([$f((($get($_.msg, $_.i) - 48) * 10) + ($get($_.msg, $_.i + 1) - 48))]); //#26352
                        $_.addtocws(); //#26352
                        $_.i = $_.i + 2; //#26353
                    } //#26353
                } //#26353
                break; //#26356
            } //#26356
            if ($get($_.DatumA, $_.i)) { //#26380
                var _GL = $get($_.msg, $_.i); //#26359
                if ((_GL == $_.fn1) || ((_GL == $_.fn2) || (_GL == $_.fn3))) { //#26376
                    $k[$j++] = $a([$get($_.Avals, $get($_.msg, $_.i))]); //#26360
                    $_.addtocws(); //#26360
                    if ($get($_.ECI, $_.i)) { //#26365
                        $k[$j++] = Infinity; //#26362
                        $_.ECIabc(); //#26362
                        var _GY = $a(); //#26362
                        $k[$j++] = _GY; //#26362
                        $_.addtocws(); //#26362
                        $_.i = $_.i + 7; //#26363
                        break; //#26364
                    } //#26364
                    if (($get($_.msg, $_.i) == $_.fn3) && ($_.i != $_.segstart)) { //#26373
                        $_.i = $_.i + 1; //#26367
                        $_.mode = $_.C; //#26368
                        $_.inmac = 0; //#26369
                        $_.segstart = $_.i; //#26370
                        $_.segend = $f($_.i + $get($_.UntilEndSeg, $_.i)); //#26371
                        break; //#26372
                    } //#26372
                    $_.i = $_.i + 1; //#26374
                    break; //#26375
                } //#26375
                $k[$j++] = $a([$get($_.Avals, $get($_.msg, $_.i))]); //#26377
                $_.addtocws(); //#26377
                $_.i = $_.i + 1; //#26378
                break; //#26379
            } //#26379
            if ($get($_.Binary, $_.i)) { //#26394
                if ($get($_.DatumA, $_.i + 1)) { //#26390
                    if ($get($_.msg, $_.i) < 160) { //#26386
                        $k[$j++] = $a([$get($_.Avals, $_.bsa), $get($_.Avals, $get($_.msg, $_.i) - 128)]); //#26384
                        $_.addtocws(); //#26384
                    } else { //#26386
                        $k[$j++] = $a([$get($_.Avals, $_.bsb), $get($_.Bvals, $get($_.msg, $_.i) - 128)]); //#26386
                        $_.addtocws(); //#26386
                    } //#26386
                    $_.i = $_.i + 1; //#26388
                    break; //#26389
                } //#26389
                $k[$j++] = $a([$get($_.Avals, $_.bin)]); //#26391
                $_.addtocws(); //#26391
                $_.mode = $_.BIN; //#26392
                break; //#26393
            } //#26393
            $_.n = $get($_.AheadB, $_.i); //#26395
            if ($_.n > 6) { //#26400
                $k[$j++] = $a([$get($_.Avals, $_.lab)]); //#26397
                $_.addtocws(); //#26397
                $_.mode = $_.B; //#26398
                break; //#26399
            } //#26399
            $k[$j++] = $a([$get($_.Avals, $get($a([$_.sfb, $_.sb2, $_.sb3, $_.sb4, $_.sb5, $_.sb6]), $_.n - 1))]); //#26401
            $_.addtocws(); //#26401
            for (var _Ho = 0, _Hp = $_.n; _Ho < _Hp; _Ho++) { //#26410
                if ($get($_.msg, $_.i) == 13) { //#26408
                    $k[$j++] = $a([$get($_.Bvals, $_.crl)]); //#26404
                    $_.addtocws(); //#26404
                    $_.i = $_.i + 2; //#26405
                } else { //#26408
                    $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.i))]); //#26407
                    $_.addtocws(); //#26407
                    $_.i = $_.i + 1; //#26408
                } //#26408
            } //#26408
            break; //#26411
        } //#26411
    }; //#26411
    $_.encBIN = function() {
        for (var _I5 = 0; _I5 < 1; _I5++) { //#26474
            $_.n = $get($_.TryC, $_.i); //#26417
            if ($_.n >= 2) { //#26436
                $k[$j++] = Infinity; //#26419
                $_.finaliseBIN(); //#26419
                var _IA = $a(); //#26419
                $k[$j++] = _IA; //#26419
                $_.addtocws(); //#26419
                if ($_.n > 7) { //#26424
                    $k[$j++] = $a([$get($_.BINvals, $_.tmc)]); //#26421
                    $_.addtocws(); //#26421
                    $_.mode = $_.C; //#26422
                    break; //#26423
                } //#26423
                $k[$j++] = $a([$get($_.BINvals, $get($a([$_.sc2, $_.sc3, $_.sc4, $_.sc5, $_.sc6, $_.sc7]), $_.n - 2))]); //#26425
                $_.addtocws(); //#26425
                for (var _IU = 0, _IV = $_.n; _IU < _IV; _IU++) { //#26434
                    if ($get($_.msg, $_.i) < 0) { //#26432
                        $k[$j++] = $a([$get($_.Cvals, $get($_.msg, $_.i))]); //#26428
                        $_.addtocws(); //#26428
                        $_.i = $_.i + 1; //#26429
                    } else { //#26432
                        $k[$j++] = $a([$f((($get($_.msg, $_.i) - 48) * 10) + ($get($_.msg, $_.i + 1) - 48))]); //#26431
                        $_.addtocws(); //#26431
                        $_.i = $_.i + 2; //#26432
                    } //#26432
                } //#26432
                break; //#26435
            } //#26435
            if ($get($_.ECI, $_.i) && $get($_.Binary, $_.i + 7)) { //#26442
                $k[$j++] = Infinity; //#26438
                $_.ECIbin(); //#26438
                var _Iu = $a(); //#26438
                $k[$j++] = _Iu; //#26438
                $_.addtocws(); //#26438
                $_.i = $_.i + 7; //#26439
                if ($_.i == $_.msglen) { //#26440
                    $k[$j++] = Infinity; //#26440
                    $_.finaliseBIN(); //#26440
                    var _Iy = $a(); //#26440
                    $k[$j++] = _Iy; //#26440
                    $_.addtocws(); //#26440
                } //#26440
                break; //#26441
            } //#26441
            if ($get($_.msg, $_.i) >= 0) { //#26452
                if ($get($_.Binary, $_.i) || $get($_.Binary, $_.i + 1) || $get($_.Binary, $_.i + 2) || $get($_.Binary, $_.i + 3) || $get($_.ECI, $_.i + 1) && $get($_.Binary, $_.i + 8)) { //#26451
                    $k[$j++] = Infinity; //#26447
                    $k[$j++] = $get($_.msg, $_.i); //#26447
                    $_.addtobin(); //#26447
                    var _JN = $a(); //#26447
                    $k[$j++] = _JN; //#26447
                    $_.addtocws(); //#26447
                    $_.i = $_.i + 1; //#26448
                    if ($_.i == $_.msglen) { //#26449
                        $k[$j++] = Infinity; //#26449
                        $_.finaliseBIN(); //#26449
                        var _JR = $a(); //#26449
                        $k[$j++] = _JR; //#26449
                        $_.addtocws(); //#26449
                    } //#26449
                    break; //#26450
                } //#26450
            } //#26450
            $k[$j++] = Infinity; //#26453
            $_.finaliseBIN(); //#26453
            var _JS = $a(); //#26453
            $k[$j++] = _JS; //#26453
            $_.addtocws(); //#26453
            if ($_.i != ($_.msglen - 1)) { //#26472
                if (($get($_.msg, $_.i) == $_.fn3) && ($_.i != $_.segstart)) { //#26463
                    $k[$j++] = $a([$get($_.BINvals, $_.tms)]); //#26456
                    $_.addtocws(); //#26456
                    $_.i = $_.i + 1; //#26457
                    $_.mode = $_.C; //#26458
                    $_.inmac = 0; //#26459
                    $_.segstart = $_.i; //#26460
                    $_.segend = $f($_.i + $get($_.UntilEndSeg, $_.i)); //#26461
                    break; //#26462
                } //#26462
                if ($gt($get($_.AheadA, $_.i), $get($_.AheadB, $_.i))) { //#26469
                    $k[$j++] = $a([$get($_.BINvals, $_.tma)]); //#26465
                    $_.addtocws(); //#26465
                    $_.mode = $_.A; //#26466
                } else { //#26469
                    $k[$j++] = $a([$get($_.BINvals, $_.tmb)]); //#26468
                    $_.addtocws(); //#26468
                    $_.mode = $_.B; //#26469
                } //#26469
                break; //#26471
            } //#26471
            break; //#26473
        } //#26473
    }; //#26473
    $_.cws = $a(($_.msglen * 2) + 1); //#26477
    $_.mode = $_.C; //#26478
    $_.bvals = $a(5); //#26479
    $_.bpos = 0; //#26479
    $_.inmac = 0; //#26480
    $_.segstart = 0; //#26480
    $_.segend = $get($_.UntilEndSeg, 0); //#26480
    $_.i = 0; //#26481
    $_.j = 0; //#26481
    for (;;) { //#26494
        if ($_.i >= $_.msglen) { //#26482
            break; //#26482
        } //#26482
        if ($_.inmac != 0) { //#26492
            if (($_.inmac != $_.mac) && ($_.i == ($_.segend - 2))) { //#26487
                $_.i = $_.i + 2; //#26485
                if ($_.i >= $_.msglen) { //#26486
                    break; //#26486
                } //#26486
            } //#26486
            if (($_.inmac == $_.mac) && ($_.i == ($_.segend - 1))) { //#26491
                $_.i = $_.i + 1; //#26489
                if ($_.i >= $_.msglen) { //#26490
                    break; //#26490
                } //#26490
            } //#26490
        } //#26490
        if ($_[$get($a(['encA', 'encB', 'encC', 'encBIN']), $_.mode)]() === true) {
            break;
        } //#26493
    } //#26493
    $_.cws = $geti($_.cws, 0, $_.j); //#26495
    $_.nd = $_.cws.length; //#26498
    $_.minarea = (((($_.nd + 3) + (~~($_.nd / 2))) * 9) + 2) * 2; //#26499
    if ($_.ratio != -1) { //#26527
        $_.hgt = $sqrt($_.minarea / $_.ratio); //#26501
        $_.wid = $sqrt($_.minarea * $_.ratio); //#26502
        $_.h = ~~$_.hgt; //#26503
        $_.w = ~~$_.wid; //#26503
        if ((($_.h + $_.w) % 2) == 1) { //#26517
            if (($_.h * $_.w) < $_.minarea) { //#26505
                $_.h = $_.h + 1; //#26505
                $_.w = $_.w + 1; //#26505
            } //#26505
        } else { //#26517
            if (($_.hgt * $_.w) < ($_.wid * $_.h)) { //#26517
                $_.w = $_.w + 1; //#26508
                if (($_.h * $_.w) < $_.minarea) { //#26512
                    $_.w = $_.w - 1; //#26510
                    $_.h = $_.h + 1; //#26510
                    if (($_.h * $_.w) < $_.minarea) { //#26511
                        $_.w = $_.w + 2; //#26511
                    } //#26511
                } //#26511
            } else { //#26517
                $_.h = $_.h + 1; //#26514
                if (($_.h * $_.w) < $_.minarea) { //#26518
                    $_.h = $_.h - 1; //#26516
                    $_.w = $_.w + 1; //#26516
                    if (($_.h * $_.w) < $_.minarea) { //#26517
                        $_.h = $_.h + 2; //#26517
                    } //#26517
                } //#26517
            } //#26517
        } //#26517
        $_.rows = $_.h; //#26521
        $_.columns = $_.w; //#26521
    } else { //#26527
        if ($_.columns == -1) { //#26525
            var _LH = ~~((($_.minarea + $_.rows) - 1) / $_.rows); //#26524
            $k[$j++] = 'columns'; //#26524
            $k[$j++] = _LH; //#26524
            if (((_LH + $_.rows) % 2) == 0) { //#26524
                var _LJ = $k[--$j]; //#26524
                $k[$j++] = _LJ + 1; //#26524
            } //#26524
            var _LK = $k[--$j]; //#26524
            $_[$k[--$j]] = _LK; //#26524
        } //#26524
        if ($_.rows == -1) { //#26528
            var _LQ = ~~((($_.minarea + $_.columns) - 1) / $_.columns); //#26527
            $k[$j++] = 'rows'; //#26527
            $k[$j++] = _LQ; //#26527
            if (((_LQ + $_.columns) % 2) == 0) { //#26527
                var _LS = $k[--$j]; //#26527
                $k[$j++] = _LS + 1; //#26527
            } //#26527
            var _LT = $k[--$j]; //#26527
            $_[$k[--$j]] = _LT; //#26527
        } //#26527
    } //#26527
    $_.ndots = ~~(($_.rows * $_.columns) / 2); //#26532
    for (;;) { //#26536
        var _LY = $_.nd + 1; //#26534
        if ((((_LY + ((~~(_LY / 2)) + 3)) * 9) + 2) > $_.ndots) { //#26534
            break; //#26534
        } //#26534
        $_.nd = $_.nd + 1; //#26535
    } //#26535
    $_.nc = (~~($_.nd / 2)) + 3; //#26537
    $_.nw = $_.nd + $_.nc; //#26538
    $_.rembits = $_.ndots - (($_.nw * 9) + 2); //#26539
    if ($_.nd > $_.cws.length) { //#26546
        $k[$j++] = Infinity; //#26541
        $aload($_.cws); //#26542
        var _Ll = ($_.mode == $_.BIN) ? 109 : 106; //#26543
        $k[$j++] = _Ll; //#26544
        for (var _Lo = 0, _Lp = ($_.nd - $_.cws.length) - 1; _Lo < _Lp; _Lo++) { //#26544
            $k[$j++] = 106; //#26544
        } //#26544
        $_.cws = $a(); //#26544
    } //#26545
    var _Ls = $get($_.options, 'debugcws') !== undefined; //#26548
    if (_Ls) { //#26548
        $k[$j++] = 'bwipp.debugcws#26548'; //#26548
        $k[$j++] = $_.cws; //#26548
        bwipp_raiseerror(); //#26548
    } //#26548
    if (($_.nw * 9) > ($_.ndots - 2)) { //#26553
        $k[$j++] = 'bwipp.dotcodeTooLong#26552'; //#26552
        $k[$j++] = "Maximum length exceeded"; //#26552
        bwipp_raiseerror(); //#26552
    } //#26552
    $_.encs = $a
    if (($_.rows % 2) == 0) { //#26602
        $_.sixedges = $a([$a([$_.columns - 1, $_.rows - 2]), $a([0, $_.rows - 2]), $a([$_.columns - 2, $_.rows - 1]), $a([1, $_.rows - 1]), $a([$_.columns - 1, 0]), $a([0, 0])]); //#26593
    } else { //#26602
        $_.sixedges = $a([$a([$_.columns - 2, 0]), $a([$_.columns - 2, $_.rows - 1]), $a([$_.columns - 1, 1]), $a([$_.columns - 1, $_.rows - 2]), $a([0, 0]), $a([0, $_.rows - 1])]); //#26602
    } //#26602
    $_.dmv = function() {
        var _MS = $k[--$j]; //#26605
        var _MT = $k[--$j]; //#26605
        $k[$j++] = $f(_MT + (_MS * $_.columns)); //#26605
    }; //#26605
    $_.outline = $a($_.rows * $_.columns); //#26608
    for (var _MZ = 0, _MY = $_.rows - 1; _MZ <= _MY; _MZ += 1) { //#26615
        $_.y = _MZ; //#26610
        for (var _Mc = 0, _Mb = $_.columns - 1; _Mc <= _Mb; _Mc += 1) { //#26614
            $_.x = _Mc; //#26612
            $k[$j++] = $_.outline; //#26613
            $k[$j++] = $_.x; //#26613
            $k[$j++] = $_.y; //#26613
            $_.dmv(); //#26613
            var _Mi = $k[--$j]; //#26613
            $put($k[--$j], _Mi, (($_.x + $_.y) % 2) - 1); //#26613
        } //#26613
    } //#26613
    var _Mk = $_.sixedges; //#26616
    for (var _Ml = 0, _Mm = _Mk.length; _Ml < _Mm; _Ml++) { //#26618
        $k[$j++] = $_.outline; //#26617
        $aload($get(_Mk, _Ml)); //#26617
        $_.dmv(); //#26617
        var _Mp = $k[--$j]; //#26617
        $put($k[--$j], _Mp, 1); //#26617
    } //#26617
    $_.clearcol = function() {
        $_.x = $k[--$j]; //#26621
        $k[$j++] = true; //#26625
        for (var _Mv = $_.x & 1, _Mu = $_.rows - 1; _Mv <= _Mu; _Mv += 2) { //#26625
            $k[$j++] = $_.x; //#26624
            $k[$j++] = _Mv; //#26624
            $_.dmv(); //#26624
            if ($get($_.sym, $k[--$j]) == 1) { //#26624
                $k[$j - 1] = false; //#26624
                break; //#26624
            } //#26624
        } //#26624
    }; //#26624
    $_.clearrow = function() {
        $_.y = $k[--$j]; //#26629
        $k[$j++] = true; //#26633
        for (var _N4 = $_.y & 1, _N3 = $_.columns - 1; _N4 <= _N3; _N4 += 2) { //#26633
            $k[$j++] = _N4; //#26632
            $k[$j++] = $_.y; //#26632
            $_.dmv(); //#26632
            if ($get($_.sym, $k[--$j]) == 1) { //#26632
                $k[$j - 1] = false; //#26632
                break; //#26632
            } //#26632
        } //#26632
    }; //#26632
    $_.evalsymbol = function() {
        $_.sym = $k[--$j]; //#26638
        $_.worst = 9999999; //#26641
        var _NE = $a([$a(['x', 0]), $a(['x', 1]), $a(['y', 0]), $a(['y', 1])]); //#26642
        for (var _NF = 0, _NG = _NE.length; _NF < _NG; _NF++) { //#26660
            $aload($get(_NE, _NF)); //#26643
            $_.fl = $k[--$j]; //#26643
            $_.dir = $k[--$j]; //#26643
            $_.sum = 0; //#26644
            $_.first = -1; //#26644
            $_.last = -1; //#26644
            var _NL = $eq($_.dir, 'x') ? $_.columns : $_.rows; //#26645
            for (var _NN = 0, _NM = _NL - 1; _NN <= _NM; _NN += 1) { //#26656
                $_[$_.dir] = _NN; //#26646
                var _NP = $_.sym; //#26647
                var _NR = $_[$_.dir]; //#26648
                var _NT = $eq($_.dir, 'x') ? $_.rows : $_.columns; //#26649
                var _NW = (_NT - 1) * $_.fl; //#26650
                if ($eq($_.dir, 'y')) { //#26650
                    var _ = _NW; //#26650
                    _NW = _NR; //#26650
                    _NR = _; //#26650
                } //#26650
                $k[$j++] = _NP; //#26651
                $k[$j++] = _NR; //#26651
                $k[$j++] = _NW; //#26651
                $_.dmv(); //#26651
                var _NX = $k[--$j]; //#26651
                if ($get($k[--$j], _NX) == 1) { //#26655
                    if ($_.first == -1) { //#26652
                        $_.first = $_[$_.dir]; //#26652
                    } //#26652
                    $_.last = $_[$_.dir]; //#26653
                    $_.sum = $_.sum + 1; //#26654
                } //#26654
            } //#26654
            var _Nk = $eq($_.dir, 'x') ? $_.rows : $_.columns; //#26658
            var _Nl = $f($_.sum + $_.last - $_.first) * _Nk;; //#26659
            $k[$j++] = _Nl; //#26659
            if (_Nl < $_.worst) { //#26659
                $_.worst = $k[--$j]; //#26659
            } else { //#26659
                $j--; //#26659
            } //#26659
        } //#26659
        $_.pen = 0; //#26662
        if ((($_.rows % 2) == 1) || ($_.rows <= 12)) { //#26680
            $_.sum = 0; //#26668
            $_.p = 0; //#26668
            for (var _Ns = 1, _Nr = $_.columns - 2; _Ns <= _Nr; _Ns += 1) { //#26678
                $k[$j++] = _Ns; //#26670
                $_.clearcol(); //#26670
                if ($k[--$j]) { //#26676
                    $_.sum = $_.sum + 1; //#26671
                    $k[$j++] = 'p'; //#26672
                    if ($_.sum == 1) { //#26672
                        $k[$j++] = $_.rows; //#26672
                    } else { //#26672
                        $k[$j++] = $_.p * $_.rows; //#26672
                    } //#26672
                    var _Nz = $k[--$j]; //#26672
                    $_[$k[--$j]] = _Nz; //#26672
                } else { //#26676
                    $_.sum = 0; //#26674
                    $_.pen = $_.pen + $_.p; //#26675
                    $_.p = 0; //#26676
                } //#26676
            } //#26676
            $_.pen = $_.pen + $_.p; //#26679
        } //#26679
        if ((($_.rows % 2) == 0) || ($_.columns <= 12)) { //#26698
            $_.sum = 0; //#26686
            $_.p = 0; //#26686
            for (var _O9 = 1, _O8 = $_.rows - 2; _O9 <= _O8; _O9 += 1) { //#26696
                $k[$j++] = _O9; //#26688
                $_.clearrow(); //#26688
                if ($k[--$j]) { //#26694
                    $_.sum = $_.sum + 1; //#26689
                    $k[$j++] = 'p'; //#26690
                    if ($_.sum == 1) { //#26690
                        $k[$j++] = $_.columns; //#26690
                    } else { //#26690
                        $k[$j++] = $_.p * $_.columns; //#26690
                    } //#26690
                    var _OG = $k[--$j]; //#26690
                    $_[$k[--$j]] = _OG; //#26690
                } else { //#26694
                    $_.sum = 0; //#26692
                    $_.pen = $_.pen + $_.p; //#26693
                    $_.p = 0; //#26694
                } //#26694
            } //#26694
            $_.pen = $_.pen + $_.p; //#26697
        } //#26697
        $k[$j++] = Infinity; //#26701
        for (var _ON = 0, _OO = ($_.columns + 4) * 2; _ON < _OO; _ON++) { //#26702
            $k[$j++] = 0; //#26702
        } //#26702
        for (var _OS = 0, _OT = $_.columns, _OR = $_.sym.length - 1; _OT < 0 ? _OS >= _OR : _OS <= _OR; _OS += _OT) { //#26707
            $k[$j++] = 0; //#26705
            $k[$j++] = 0; //#26705
            $aload($geti($_.sym, _OS, $_.columns)); //#26705
            $k[$j++] = 0; //#26706
            $k[$j++] = 0; //#26706
        } //#26706
        for (var _OY = 0, _OZ = ($_.columns + 4) * 2; _OY < _OZ; _OY++) { //#26708
            $k[$j++] = 0; //#26708
        } //#26708
        $_.symp = $a(); //#26708
        $_.columns = $_.columns + 4; //#26712
        $_.rows = $_.rows + 4; //#26713
        $_.sum = 0; //#26714
        for (var _Of = 2, _Oe = $_.rows - 3; _Of <= _Oe; _Of += 1) { //#26732
            $_.y = _Of; //#26716
            for (var _Oj = ($_.y & 1) + 2, _Oi = $_.columns - 3; _Oj <= _Oi; _Oj += 2) { //#26731
                $_.x = _Oj; //#26718
                for (var _Ok = 0; _Ok < 1; _Ok++) { //#26730
                    $k[$j++] = $_.symp; //#26720
                    $k[$j++] = $_.x - 1; //#26720
                    $k[$j++] = $_.y - 1; //#26720
                    $_.dmv(); //#26720
                    var _Oo = $k[--$j]; //#26720
                    if ($get($k[--$j], _Oo) == 1) { //#26720
                        break; //#26720
                    } //#26720
                    $k[$j++] = $_.symp; //#26721
                    $k[$j++] = $_.x + 1; //#26721
                    $k[$j++] = $_.y - 1; //#26721
                    $_.dmv(); //#26721
                    var _Ou = $k[--$j]; //#26721
                    if ($get($k[--$j], _Ou) == 1) { //#26721
                        break; //#26721
                    } //#26721
                    $k[$j++] = $_.symp; //#26722
                    $k[$j++] = $_.x - 1; //#26722
                    $k[$j++] = $_.y + 1; //#26722
                    $_.dmv(); //#26722
                    var _P0 = $k[--$j]; //#26722
                    if ($get($k[--$j], _P0) == 1) { //#26722
                        break; //#26722
                    } //#26722
                    $k[$j++] = $_.symp; //#26723
                    $k[$j++] = $_.x + 1; //#26723
                    $k[$j++] = $_.y + 1; //#26723
                    $_.dmv(); //#26723
                    var _P6 = $k[--$j]; //#26723
                    if ($get($k[--$j], _P6) == 1) { //#26723
                        break; //#26723
                    } //#26723
                    $k[$j++] = $_.symp; //#26724
                    $k[$j++] = $_.x; //#26724
                    $k[$j++] = $_.y; //#26724
                    $_.dmv(); //#26724
                    var _PC = $k[--$j]; //#26724
                    if ($get($k[--$j], _PC) == 0) { //#26724
                        $_.sum = $_.sum + 1; //#26724
                        break; //#26724
                    } //#26724
                    $k[$j++] = $_.symp; //#26725
                    $k[$j++] = $_.x - 2; //#26725
                    $k[$j++] = $_.y; //#26725
                    $_.dmv(); //#26725
                    var _PJ = $k[--$j]; //#26725
                    if ($get($k[--$j], _PJ) == 1) { //#26725
                        break; //#26725
                    } //#26725
                    $k[$j++] = $_.symp; //#26726
                    $k[$j++] = $_.x; //#26726
                    $k[$j++] = $_.y - 2; //#26726
                    $_.dmv(); //#26726
                    var _PP = $k[--$j]; //#26726
                    if ($get($k[--$j], _PP) == 1) { //#26726
                        break; //#26726
                    } //#26726
                    $k[$j++] = $_.symp; //#26727
                    $k[$j++] = $_.x + 2; //#26727
                    $k[$j++] = $_.y; //#26727
                    $_.dmv(); //#26727
                    var _PV = $k[--$j]; //#26727
                    if ($get($k[--$j], _PV) == 1) { //#26727
                        break; //#26727
                    } //#26727
                    $k[$j++] = $_.symp; //#26728
                    $k[$j++] = $_.x; //#26728
                    $k[$j++] = $_.y + 2; //#26728
                    $_.dmv(); //#26728
                    var _Pb = $k[--$j]; //#26728
                    if ($get($k[--$j], _Pb) == 1) { //#26728
                        break; //#26728
                    } //#26728
                    $_.sum = $_.sum + 1; //#26729
                } //#26729
            } //#26729
        } //#26729
        $_.columns = $_.columns - 4; //#26733
        $_.rows = $_.rows - 4; //#26734
        if ($_.worst == 0) { //#26739
            $k[$j++] = -99999; //#26737
        } else { //#26739
            $k[$j++] = $f($_.worst - $_.sum * $_.sum - $_.pen); //#26739
        } //#26739
    }; //#26739
    $k[$j++] = Infinity; //#26746
    $k[$j++] = 1; //#26746
    for (var _Pm = 0; _Pm < 112; _Pm++) { //#26746
        var _Pn = $k[$j - 1]; //#26746
        $k[$j++] = (_Pn * 3) % 113; //#26746
    } //#26746
    $_.rsalog = $a(); //#26746
    $_.step = (~~($_.nw / 112)) + 1; //#26748
    $_.offset = function() {
        var _Ps = $k[--$j]; //#26749
        $k[$j++] = $f((_Ps * $_.step) + $_.start); //#26749
    }; //#26749
    $_.bestscore = -99999999; //#26757
    $k[$j++] = 'masks'; //#26762
    if ($_.mask != -1) { //#26761
        $k[$j++] = $a([$_.mask]); //#26759
    } else { //#26761
        if ($_.fast) { //#26761
            $k[$j++] = $a([3, 2, 1, 0]); //#26761
        } else { //#26761
            $k[$j++] = $a([0, 1, 2, 3]); //#26761
        } //#26761
    } //#26761
    var _Q0 = $k[--$j]; //#26762
    $_[$k[--$j]] = _Q0; //#26762
    $_.litmasks = $a(4); //#26763
    $forall($_.masks, function() { //#26865
        $_.mask = $k[--$j]; //#26766
        $k[$j++] = Infinity; //#26769
        var _Q9 = $_.cws; //#26771
        $k[$j++] = $_.mask; //#26771
        $k[$j++] = $get($a([0, 3, 7, 17]), $_.mask); //#26771
        $k[$j++] = 0; //#26771
        for (var _QA = 0, _QB = _Q9.length; _QA < _QB; _QA++) { //#26771
            var _QD = $k[--$j]; //#26771
            var _QE = $k[--$j]; //#26771
            $k[$j++] = $f($get(_Q9, _QA) + _QD) % 113; //#26771
            $k[$j++] = _QE; //#26771
            $k[$j++] = $f(_QD + _QE); //#26771
        } //#26771
        $j -= 2; //#26771
        for (var _QG = 0, _QH = $_.nc; _QG < _QH; _QG++) { //#26772
            $k[$j++] = 0; //#26772
        } //#26772
        $_.rscws = $a(); //#26772
        for (var _QL = 0, _QK = $_.step - 1; _QL <= _QK; _QL += 1) { //#26796
            $_.start = _QL; //#26775
            $_.ND = ~~((((($_.nd + 1) - $_.start) + $_.step) - 1) / $_.step); //#26776
            $_.NW = ~~((((($_.nw + 1) - $_.start) + $_.step) - 1) / $_.step); //#26777
            $_.NC = $_.NW - $_.ND; //#26778
            $k[$j++] = Infinity; //#26779
            $k[$j++] = 1; //#26779
            for (var _QX = 0, _QY = $_.NC; _QX < _QY; _QX++) { //#26779
                $k[$j++] = 0; //#26779
            } //#26779
            $_.coeffs = $a(); //#26779
            for (var _Qc = 1, _Qb = $_.NC; _Qc <= _Qb; _Qc += 1) { //#26786
                $_.i = _Qc; //#26781
                for (var _Qe = $_.NC; _Qe >= 1; _Qe -= 1) { //#26785
                    $_.j = _Qe; //#26783
                    $put($_.coeffs, $_.j, ($f(($get($_.coeffs, $_.j) + 113) - (($get($_.rsalog, $_.i) * $get($_.coeffs, $_.j - 1)) % 113))) % 113); //#26784
                } //#26784
            } //#26784
            for (var _Qs = 0, _Qr = $_.ND - 1; _Qs <= _Qr; _Qs += 1) { //#26794
                $k[$j++] = 't'; //#26788
                $k[$j++] = $_.rscws; //#26788
                $k[$j++] = _Qs; //#26788
                $_.offset(); //#26788
                var _Qu = $k[--$j]; //#26788
                var _Qw = $get($k[--$j], _Qu); //#26788
                $k[$j++] = _Qw; //#26788
                $k[$j++] = $_.rscws; //#26788
                $k[$j++] = $_.ND; //#26788
                $_.offset(); //#26788
                var _Qz = $k[--$j]; //#26788
                var _R1 = $get($k[--$j], _Qz); //#26788
                var _R2 = $k[--$j]; //#26788
                $_[$k[--$j]] = $f(_R2 + _R1) % 113; //#26788
                for (var _R6 = 0, _R5 = $_.NC - 2; _R6 <= _R5; _R6 += 1) { //#26792
                    $_.j = _R6; //#26790
                    $k[$j++] = $_.rscws; //#26791
                    $k[$j++] = $_.ND + $_.j; //#26791
                    $_.offset(); //#26791
                    $k[$j++] = $_.rscws; //#26791
                    $k[$j++] = ($_.ND + $_.j) + 1; //#26791
                    $_.offset(); //#26791
                    var _RD = $k[--$j]; //#26791
                    var _RF = $get($k[--$j], _RD); //#26791
                    var _RK = $k[--$j]; //#26791
                    $put($k[--$j], _RK, ($f((_RF + 113) - (($_.t * $get($_.coeffs, $_.j + 1)) % 113))) % 113); //#26791
                } //#26791
                $k[$j++] = $_.rscws; //#26793
                $k[$j++] = ($_.ND + $_.NC) - 1; //#26793
                $_.offset(); //#26793
                var _RT = $k[--$j]; //#26793
                $put($k[--$j], _RT, (113 - (($_.t * $get($_.coeffs, $_.NC)) % 113)) % 113); //#26793
            } //#26793
            for (var _RY = $_.ND, _RX = $_.NW - 1; _RY <= _RX; _RY += 1) { //#26795
                $k[$j++] = _RY; //#26795
                $k[$j++] = $_.rscws; //#26795
                $k[$j++] = _RY; //#26795
                $_.offset(); //#26795
                $k[$j++] = 113; //#26795
                $k[$j++] = $_.rscws; //#26795
                $r(5, -1); //#26795
                $_.offset(); //#26795
                var _Rb = $k[--$j]; //#26795
                var _Rd = $get($k[--$j], _Rb); //#26795
                var _Re = $k[--$j]; //#26795
                var _Rf = $k[--$j]; //#26795
                $put($k[--$j], _Rf, $f(_Re - _Rd) % 113); //#26795
            } //#26795
        } //#26795
        $_.bits = $s($_.ndots); //#26799
        $puti($_.bits, 0, $get($a(["00", "01", "10", "11"]), $_.mask)); //#26800
        for (var _Rp = 1, _Ro = $_.nw; _Rp <= _Ro; _Rp += 1) { //#26804
            $_.i = _Rp; //#26802
            $puti($_.bits, (($_.i - 1) * 9) + 2, $get($_.encs, $get($_.rscws, $_.i))); //#26803
        } //#26803
        if ($_.rembits > 0) { //#26807
            $puti($_.bits, ($_.nw * 9) + 2, $geti("11111111111111111", 0, $_.rembits)); //#26806
        } //#26806
        var _S2 = $_.outline; //#26810
        $_.pixs = $arrcpy($a(_S2.length), _S2); //#26810
        $_.posx = 0; //#26811
        $k[$j++] = 'posy'; //#26812
        if (($_.rows % 2) == 0) { //#26812
            $k[$j++] = 0; //#26812
        } else { //#26812
            $k[$j++] = $_.rows - 1; //#26812
        } //#26812
        var _S7 = $k[--$j]; //#26812
        $_[$k[--$j]] = _S7; //#26812
        var _SB = $geti($_.bits, 0, $_.bits.length - 6); //#26813
        for (var _SC = 0, _SD = _SB.length; _SC < _SD; _SC++) { //#26831
            $k[$j++] = $get(_SB, _SC); //#26829
            for (;;) { //#26829
                $k[$j++] = $_.pixs; //#26815
                $k[$j++] = $_.posx; //#26815
                $k[$j++] = $_.posy; //#26815
                $_.dmv(); //#26815
                var _SI = $k[--$j]; //#26815
                if ($get($k[--$j], _SI) == -1) { //#26815
                    break; //#26815
                } //#26815
                if (($_.rows % 2) == 0) { //#26826
                    $_.posy = $_.posy + 1; //#26817
                    if ($_.posy == $_.rows) { //#26821
                        $_.posy = 0; //#26819
                        $_.posx = $_.posx + 1; //#26820
                    } //#26820
                } else { //#26826
                    $_.posx = $_.posx + 1; //#26823
                    if ($_.posx == $_.columns) { //#26827
                        $_.posx = 0; //#26825
                        $_.posy = $_.posy - 1; //#26826
                    } //#26826
                } //#26826
            } //#26826
            $k[$j++] = $_.pixs; //#26830
            $k[$j++] = $_.posx; //#26830
            $k[$j++] = $_.posy; //#26830
            $_.dmv(); //#26830
            var _SX = $k[$j - 3]; //#26830
            var _SY = $k[$j - 1]; //#26830
            $put($k[$j - 2], _SY, _SX - 48); //#26830
            $j -= 3; //#26830
        } //#26830
        for (var _Sa = 0; _Sa <= 5; _Sa += 1) { //#26836
            $_.i = _Sa; //#26833
            $k[$j++] = $_.pixs; //#26834
            $aload($get($_.sixedges, $_.i)); //#26834
            $_.dmv(); //#26834
            var _Sj = $k[--$j]; //#26835
            $put($k[--$j], _Sj, $get($_.bits, ($_.bits.length - 6) + $_.i) - 48); //#26835
        } //#26835
        $k[$j++] = 'score'; //#26839
        $k[$j++] = $_.pixs; //#26839
        $_.evalsymbol(); //#26839
        var _Sm = $k[--$j]; //#26839
        $_[$k[--$j]] = _Sm; //#26839
        if ($_.score > $_.bestscore) { //#26844
            $_.bestsym = $_.pixs; //#26841
            $_.bestscore = $_.score; //#26842
            if ($_.fast && ($_.bestscore > (~~(($_.rows * $_.columns) / 2)))) { //#26843
                return true; //#26843
            } //#26843
        } //#26843
        var _Sw = $_.pixs; //#26847
        $_.litmask = $arrcpy($a(_Sw.length), _Sw); //#26847
        for (var _Sz = 0; _Sz <= 5; _Sz += 1) { //#26852
            $_.i = _Sz; //#26849
            $k[$j++] = $_.litmask; //#26850
            $aload($get($_.sixedges, $_.i)); //#26850
            $_.dmv(); //#26850
            var _T4 = $k[--$j]; //#26851
            $put($k[--$j], _T4, 1); //#26851
        } //#26851
        $put($_.litmasks, $_.mask, $_.litmask); //#26853
        if ($_.fast) { //#26863
            $k[$j++] = 'score'; //#26857
            $k[$j++] = $_.litmask; //#26857
            $_.evalsymbol(); //#26857
            var _TB = $k[--$j]; //#26857
            $_[$k[--$j]] = _TB; //#26857
            if ($gt($_.score, $_.bestscore)) { //#26862
                $_.bestsym = $_.litmask; //#26859
                $_.bestscore = $_.score; //#26860
                if ($_.bestscore > (~~(($_.rows * $_.columns) / 2))) { //#26861
                    return true; //#26861
                } //#26861
            } //#26861
        } //#26861
    }); //#26861
    $_.pixs = $_.bestsym; //#26866
    if ((!$_.fast) && ($_.bestscore <= (~~(($_.rows * $_.columns) / 2)))) { //#26880
        $_.bestscore = -99999999; //#26870
        $forall($_.masks, function() { //#26878
            $_.litmask = $get($_.litmasks, $k[--$j]); //#26872
            $k[$j++] = 'score'; //#26873
            $k[$j++] = $_.litmask; //#26873
            $_.evalsymbol(); //#26873
            var _TU = $k[--$j]; //#26873
            $_[$k[--$j]] = _TU; //#26873
            if ($_.score > $_.bestscore) { //#26877
                $_.bestsym = $_.litmask; //#26875
                $_.bestscore = $_.score; //#26876
            } //#26876
        }); //#26876
        $_.pixs = $_.bestsym; //#26879
    } //#26879
    var _Th = new Map([
        ["ren", 'renmatrix'],
        ["dotty", true],
        ["pixs", $_.pixs],
        ["pixx", $_.columns],
        ["pixy", $_.rows],
        ["height", ($_.rows * 2) / 72],
        ["width", ($_.columns * 2) / 72],
        ["borderleft", 3],
        ["borderright", 3],
        ["bordertop", 3],
        ["borderbottom", 3],
        ["opt", $_.options]
    ]); //#26895
    $k[$j++] = _Th; //#26898
    if (!$_.dontdraw) { //#26898
        bwipp_renmatrix(); //#26898
    } //#26898
    $_ = $__; //#26902
} //bwipp_dotcode
function bwipp_ultracode() {
    var $__ = $_; //#26933
    $_ = Object.assign({}, $_); //#26933
    $_.dontdraw = false; //#26936
    $_.eclevel = "EC2"; //#26937
    $_.parse = false; //#26938
    $_.parsefnc = false; //#26939
    $_.start = 257; //#26940
    $_.link1 = 0; //#26941
    $_.raw = false; //#26942
    $_.rev = 2; //#26943
    $k[$j++] = $_; //#26945
    bwipp_processoptions(); //#26945
    $_.options = $k[--$j]; //#26945
    $_.barcode = $k[--$j]; //#26946
    var _2 = $_.rev; //#26948
    if ((_2 != 1) && (_2 != 2)) { //#26950
        $k[$j++] = 'bwipp.ultracodeInvalidRevision#26949'; //#26949
        $k[$j++] = "Valid revisions are 1 and 2"; //#26949
        bwipp_raiseerror(); //#26949
    } //#26949
    var _4 = $_.eclevel.length == 3; //#26952
    $k[$j++] = _4; //#26956
    if (_4) { //#26956
        $j--; //#26953
        var _7 = $eq($geti($_.eclevel, 0, 2), "EC"); //#26953
        $k[$j++] = _7; //#26955
        if (_7) { //#26955
            $j--; //#26954
            var _A = $get($_.eclevel, 2) - 48; //#26954
            var _C = ($_.rev == 2) ? 1 : 0; //#26954
            $k[$j++] = (_A >= _C) && (_A <= 5); //#26954
        } //#26954
    } //#26954
    if (!$k[--$j]) { //#26959
        $k[$j++] = 'bwipp.ultracodeInvalidErrorCorrectionLevel#26958'; //#26958
        $k[$j++] = "Valid error correction levels are EC1 to EC5, and EC0 for legacy revision 1"; //#26958
        bwipp_raiseerror(); //#26958
    } //#26958
    if ($_.raw) { //#26998
        $_.dcws = $a($_.barcode.length); //#26965
        $_.i = 0; //#26966
        $_.j = 0; //#26966
        for (;;) { //#26973
            if ($_.i == $_.barcode.length) { //#26968
                break; //#26968
            } //#26968
            $_.cw = $cvi($geti($_.barcode, $_.i + 1, 3)); //#26969
            $put($_.dcws, $_.j, $_.cw); //#26970
            $_.i = $_.i + 4; //#26971
            $_.j = $_.j + 1; //#26972
        } //#26972
        $_.dcws = $geti($_.dcws, 0, $_.j); //#26974
    } else { //#26998
        $_.fn1 = -1; //#26979
        $_.fn3 = -2; //#26979
        var _Y = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["FNC1", $_.fn1],
            ["FNC3", $_.fn3]
        ]); //#26984
        $_.fncvals = _Y; //#26985
        $k[$j++] = 'msg'; //#26986
        $k[$j++] = $_.barcode; //#26986
        $k[$j++] = $_.fncvals; //#26986
        bwipp_parseinput(); //#26986
        var _b = $k[--$j]; //#26986
        $_[$k[--$j]] = _b; //#26986
        $_.msglen = $_.msg.length; //#26987
        $_.scr = $a([]); //#26989
        $_.scp = $a([]); //#26990
        $k[$j++] = Infinity; //#26991
        $aload($_.scr); //#26992
        $aload($_.scp); //#26993
        $forall($_.msg, function() { //#26997
            var _j = $k[$j - 1]; //#26995
            if (_j == $_.fn1) { //#26995
                $k[$j - 1] = 268; //#26995
            } //#26995
            var _l = $k[$j - 1]; //#26996
            if (_l == $_.fn3) { //#26996
                $k[$j - 1] = 269; //#26996
            } //#26996
        }); //#26996
        $_.dcws = $a(); //#26996
    } //#26998
    var _p = $get($_.options, 'debugcws') !== undefined; //#27002
    if (_p) { //#27002
        $k[$j++] = 'bwipp.debugcws#27002'; //#27002
        $k[$j++] = $_.dcws; //#27002
        bwipp_raiseerror(); //#27002
    } //#27002
    $_.mcc = $_.dcws.length + 3; //#27004
    $_.eclval = $get($_.eclevel, 2) - 48; //#27006
    if ($_.eclval != 0) { //#27010
        $k[$j++] = 'qcc'; //#27008
        $k[$j++] = $get($a([0, 1, 2, 4, 6, 8]), $_.eclval); //#27008
        $k[$j++] = ~~($_.mcc / 25); //#27008
        if (($_.mcc % 25) != 0) { //#27008
            var _10 = $k[--$j]; //#27008
            $k[$j++] = _10 + 1; //#27008
        } //#27008
        var _11 = $k[--$j]; //#27008
        var _12 = $k[--$j]; //#27008
        $_[$k[--$j]] = (_12 * _11) + 5; //#27008
    } else { //#27010
        $_.qcc = 3; //#27010
    } //#27010
    $_.acc = ($_.qcc - 3) + (78 * $_.link1); //#27012
    $_.tcc = $_.mcc + $_.qcc; //#27013
    $_.metrics = $a([$a([2, 7, 37, 5]), $a([3, 36, 84, 13]), $a([4, 85, 161, 22]), $a([5, 142, 282, 29])]); //#27023
    var _1E = $_.metrics; //#27026
    for (var _1F = 0, _1G = _1E.length; _1F < _1G; _1F++) { //#27035
        $_.m = $get(_1E, _1F); //#27027
        $_.rows = $get($_.m, 0); //#27028
        $_.minc = $get($_.m, 1); //#27029
        $_.maxc = $get($_.m, 2); //#27030
        $_.mcol = $get($_.m, 3); //#27031
        $_.okay = true; //#27032
        if (($_.tcc < $_.minc) || ($_.tcc > $_.maxc)) { //#27033
            $_.okay = false; //#27033
        } //#27033
        if ($_.okay) { //#27034
            break; //#27034
        } //#27034
    } //#27034
    if (!$_.okay) { //#27039
        $k[$j++] = 'bwipp.ultracodeNoValidSymbol#27038'; //#27038
        $k[$j++] = "Maximum length exceeded or invalid content"; //#27038
        bwipp_raiseerror(); //#27038
    } //#27038
    for (var _1X = $_.mcol; _1X <= 61; _1X += 1) { //#27053
        $_.columns = _1X; //#27043
        $k[$j++] = $_.columns; //#27045
        if ($_.columns >= 15) { //#27045
            var _1a = $k[--$j]; //#27045
            $k[$j++] = _1a - 1; //#27045
        } //#27045
        if ($_.columns >= 31) { //#27046
            var _1c = $k[--$j]; //#27046
            $k[$j++] = _1c - 1; //#27046
        } //#27046
        if ($_.columns >= 47) { //#27047
            var _1e = $k[--$j]; //#27047
            $k[$j++] = _1e - 1; //#27047
        } //#27047
        var _1i = $f((($k[--$j] * $_.rows) - 3) - $_.tcc); //#27048
        $k[$j++] = _1i; //#27051
        if (_1i >= 0) { //#27051
            $_.pads = $k[--$j]; //#27049
            break; //#27050
        } //#27050
        $j--; //#27052
    } //#27052
    $_.dcc = $f($_.columns - $_.mcol); //#27054
    $k[$j++] = Infinity; //#27057
    $k[$j++] = $_.start; //#27061
    $k[$j++] = $_.mcc; //#27061
    $k[$j++] = $_.acc; //#27061
    $aload($_.dcws); //#27061
    for (var _1r = 0, _1s = $_.qcc; _1r < _1s; _1r++) { //#27062
        $k[$j++] = 0; //#27062
    } //#27062
    $k[$j++] = 0; //#27063
    $_.rsseq = $a(); //#27063
    $k[$j++] = Infinity; //#27068
    $k[$j++] = 1; //#27068
    for (var _1u = 0; _1u < 282; _1u++) { //#27068
        var _1v = $k[$j - 1]; //#27068
        $k[$j++] = (_1v * 3) % 283; //#27068
    } //#27068
    $_.rsalog = $a(); //#27068
    $_.rslog = $a(283); //#27069
    for (var _1y = 1; _1y <= 282; _1y += 1) { //#27070
        $put($_.rslog, $get($_.rsalog, _1y), _1y); //#27070
    } //#27070
    $_.rsprod = function() {
        var _23 = $k[$j - 1]; //#27075
        var _24 = $k[$j - 2]; //#27075
        if ((_23 != 0) && (_24 != 0)) { //#27078
            var _27 = $get($_.rslog, $k[--$j]); //#27076
            var _2C = $get($_.rsalog, $f(_27 + $get($_.rslog, $k[--$j])) % 282); //#27076
            $k[$j++] = _2C; //#27076
        } else { //#27078
            $j -= 2; //#27078
            $k[$j++] = 0; //#27078
        } //#27078
    }; //#27078
    $_.n = $_.mcc; //#27083
    $_.k = $_.qcc; //#27083
    $k[$j++] = Infinity; //#27084
    $k[$j++] = 1; //#27084
    for (var _2G = 0, _2H = $_.k; _2G < _2H; _2G++) { //#27084
        $k[$j++] = 0; //#27084
    } //#27084
    $_.coeffs = $a(); //#27084
    for (var _2L = 1, _2K = $_.k; _2L <= _2K; _2L += 1) { //#27093
        $_.i = _2L; //#27086
        $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#27087
        for (var _2S = $_.i - 1; _2S >= 1; _2S -= 1) { //#27091
            $_.j = _2S; //#27089
            $k[$j++] = $_.coeffs; //#27090
            $k[$j++] = $_.j; //#27090
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#27090
            $k[$j++] = $get($_.coeffs, $_.j); //#27090
            $k[$j++] = $get($_.rsalog, $_.i); //#27090
            $_.rsprod(); //#27090
            var _2e = $k[--$j]; //#27090
            var _2f = $k[--$j]; //#27090
            var _2g = $k[--$j]; //#27090
            $put($k[--$j], _2g, $f(_2f + _2e) % 283); //#27090
        } //#27090
        $k[$j++] = $_.coeffs; //#27092
        $k[$j++] = 0; //#27092
        $k[$j++] = $get($_.coeffs, 0); //#27092
        $k[$j++] = $get($_.rsalog, $_.i); //#27092
        $_.rsprod(); //#27092
        var _2o = $k[--$j]; //#27092
        var _2p = $k[--$j]; //#27092
        $put($k[--$j], _2p, _2o); //#27092
    } //#27092
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#27094
    for (var _2v = $_.coeffs.length - 1; _2v >= 0; _2v -= 2) { //#27095
        var _2w = $_.coeffs; //#27095
        $put(_2w, _2v, 283 - $get(_2w, _2v)); //#27095
    } //#27095
    for (var _30 = 0, _2z = $_.n - 1; _30 <= _2z; _30 += 1) { //#27104
        $_.t = $f($get($_.rsseq, _30) + $get($_.rsseq, $_.n)) % 283; //#27099
        for (var _38 = 0, _37 = $_.k - 1; _38 <= _37; _38 += 1) { //#27103
            $_.j = _38; //#27101
            $put($_.rsseq, $_.n + $_.j, ($f($get($_.rsseq, ($_.n + $_.j) + 1) + (283 - (($_.t * $get($_.coeffs, ($_.k - $_.j) - 1)) % 283)))) % 283); //#27102
        } //#27102
    } //#27102
    for (var _3P = $_.n, _3O = $_.n + $_.k; _3P <= _3O; _3P += 1) { //#27105
        $put($_.rsseq, _3P, (283 - $get($_.rsseq, _3P)) % 283); //#27105
    } //#27105
    $_.ecws = $geti($_.rsseq, $_.n, $_.k); //#27106
    var _3Y = $get($_.options, 'debugecc') !== undefined; //#27108
    if (_3Y) { //#27108
        $k[$j++] = 'bwipp.debugecc#27108'; //#27108
        $k[$j++] = $_.ecws; //#27108
        bwipp_raiseerror(); //#27108
    } //#27108
    $_.tiles = $a([13135, 13136, 13153, 13156, 13163, 13165, 13513, 13515, 13516, 13531, 13535, 13536, 13561, 13563, 13565, 13613, 13615, 13616, 13631, 13635, 13636, 13651, 13653, 13656, 15135, 15136, 15153, 15163, 15165, 15313, 15315, 15316, 15351, 15353, 15356, 15361, 15363, 15365, 15613, 15615, 15616, 15631, 15635, 15636, 15651, 15653, 15656, 16135, 16136, 16153, 16156, 16165, 16313, 16315, 16316, 16351, 16353, 16356, 16361, 16363, 16365, 16513, 16515, 16516, 16531, 16535, 16536, 16561, 16563, 16565, 31315, 31316, 31351, 31356, 31361, 31365, 31513, 31515, 31516, 31531, 31535, 31536, 31561, 31563, 31565, 31613, 31615, 31631, 31635, 31636, 31651, 31653, 31656, 35131, 35135, 35136, 35151, 35153, 35156, 35161, 35163, 35165, 35315, 35316, 35351, 35356, 35361, 35365, 35613, 35615, 35616, 35631, 35635, 35636, 35651, 35653, 35656, 36131, 36135, 36136, 36151, 36153, 36156, 36163, 36165, 36315, 36316, 36351, 36356, 36361, 36365, 36513, 36515, 36516, 36531, 36535, 36536, 36561, 36563, 36565, 51313, 51315, 51316, 51351, 51353, 51356, 51361, 51363, 51365, 51513, 51516, 51531, 51536, 51561, 51563, 51613, 51615, 51616, 51631, 51635, 51636, 51651, 51653, 51656, 53131, 53135, 53136, 53151, 53153, 53156, 53161, 53163, 53165, 53513, 53516, 53531, 53536, 53561, 53563, 53613, 53615, 53616, 53631, 53635, 53636, 53651, 53653, 53656, 56131, 56135, 56136, 56151, 56153, 56156, 56161, 56163, 56165, 56313, 56315, 56316, 56351, 56353, 56356, 56361, 56363, 56365, 56513, 56516, 56531, 56536, 56561, 56563, 61313, 61315, 61316, 61351, 61353, 61356, 61361, 61363, 61365, 61513, 61515, 61516, 61531, 61535, 61536, 61561, 61563, 61565, 61615, 61631, 61635, 61651, 61653, 63131, 63135, 63136, 63151, 63153, 63156, 63161, 63163, 63165, 63513, 63515, 63516, 63531, 63535, 63536, 63561, 63563, 63565, 63613, 63615, 63631, 63635, 63651, 63653, 65131, 65135, 65136, 65151, 65153, 65156, 65161, 65163, 65165, 65313, 65315, 65316, 65351, 65353, 65356, 65361, 65363, 65365, 65613, 65615, 65631, 65635, 65651, 65653, 56565, 51515]); //#27141
    $_.dccurev1 = $a([51363, 51563, 51653, 53153, 53163, 53513, 53563, 53613, 53653, 56153, 56163, 56313, 56353, 56363, 56513, 56563, 51316, 51356, 51536, 51616, 53156, 53516, 53536, 53616, 53636, 53656, 56136, 56156, 56316, 56356, 56516, 56536]); //#27148
    $_.dcclrev1 = $a([61351, 61361, 61531, 61561, 61631, 61651, 63131, 63151, 63161, 63531, 63561, 63631, 65131, 65161, 65351, 65631, 31351, 31361, 31531, 31561, 31631, 31651, 35131, 35151, 35161, 35361, 35631, 35651, 36131, 36151, 36351, 36531]); //#27154
    $_.dccurev2 = $a([15316, 16316, 13516, 16516, 13616, 15616, 13136, 15136, 16136, 13536, 16536, 13636, 13156, 16156, 15356, 13656, 15313, 16313, 13513, 16513, 13613, 15613, 13153, 15153, 16153, 16353, 13653, 15653, 13163, 15163, 15363, 13563]); //#27160
    $_.dcclrev2 = $a([36315, 36515, 35615, 35135, 36135, 31535, 36535, 31635, 35635, 35165, 36165, 31365, 35365, 36365, 31565, 36565, 61315, 65315, 63515, 61615, 65135, 61535, 63535, 61635, 63635, 65635, 63165, 65165, 61365, 65365, 61565, 63565]); //#27166
    $k[$j++] = 'dccu'; //#27169
    if ($_.rev == 1) { //#27169
        $k[$j++] = $_.dccurev1; //#27169
    } else { //#27169
        $k[$j++] = $_.dccurev2; //#27169
    } //#27169
    var _3j = $k[--$j]; //#27169
    $_[$k[--$j]] = _3j; //#27169
    $k[$j++] = 'dccl'; //#27170
    if ($_.rev == 1) { //#27170
        $k[$j++] = $_.dcclrev1; //#27170
    } else { //#27170
        $k[$j++] = $_.dcclrev2; //#27170
    } //#27170
    var _3o = $k[--$j]; //#27170
    $_[$k[--$j]] = _3o; //#27170
    $_.rows = ($_.rows * 6) + 1; //#27173
    $_.columns = $_.columns + 6; //#27174
    $k[$j++] = Infinity; //#27175
    for (var _3u = 0, _3v = $_.rows * $_.columns; _3u < _3v; _3u++) { //#27175
        $k[$j++] = -1; //#27175
    } //#27175
    $_.pixs = $a(); //#27175
    $_.qmv = function() {
        var _3y = $k[--$j]; //#27176
        var _3z = $k[--$j]; //#27176
        $k[$j++] = $f(_3z + (_3y * $_.columns)); //#27176
    }; //#27176
    for (var _42 = 0, _41 = $_.columns - 1; _42 <= _41; _42 += 1) { //#27185
        $_.i = _42; //#27178
        for (var _45 = 0, _44 = $_.rows - 1; _45 <= _44; _45 += 6) { //#27182
            $_.j = _45; //#27180
            if ($_.i >= 5) { //#27181
                $k[$j++] = $_.pixs; //#27181
                $k[$j++] = $_.i; //#27181
                $k[$j++] = $_.j; //#27181
                $_.qmv(); //#27181
                var _4B = $k[--$j]; //#27181
                $put($k[--$j], _4B, ($_.i % 2) * 9); //#27181
            } //#27181
        } //#27181
        $k[$j++] = $_.pixs; //#27183
        $k[$j++] = $_.i; //#27183
        $k[$j++] = 0; //#27183
        $_.qmv(); //#27183
        var _4F = $k[--$j]; //#27183
        $put($k[--$j], _4F, 9); //#27183
        $k[$j++] = $_.pixs; //#27184
        $k[$j++] = $_.i; //#27184
        $k[$j++] = $_.rows - 1; //#27184
        $_.qmv(); //#27184
        var _4K = $k[--$j]; //#27184
        $put($k[--$j], _4K, 9); //#27184
    } //#27184
    for (var _4O = 1, _4N = $_.rows - 2; _4O <= _4N; _4O += 1) { //#27198
        $_.i = _4O; //#27187
        for (var _4R = 3, _4Q = $_.columns - 1; _4R <= _4Q; _4R += 16) { //#27191
            $_.j = _4R; //#27189
            $k[$j++] = $_.pixs; //#27190
            $k[$j++] = $_.j; //#27190
            $k[$j++] = $_.i; //#27190
            $_.qmv(); //#27190
            var _4W = $k[--$j]; //#27190
            $put($k[--$j], _4W, (1 - ($_.i % 2)) * 9); //#27190
        } //#27190
        $k[$j++] = $_.pixs; //#27192
        $k[$j++] = 0; //#27192
        $k[$j++] = $_.i; //#27192
        $_.qmv(); //#27192
        var _4a = $k[--$j]; //#27192
        $put($k[--$j], _4a, 9); //#27192
        $k[$j++] = $_.pixs; //#27193
        $k[$j++] = 1; //#27193
        $k[$j++] = $_.i; //#27193
        $_.qmv(); //#27193
        var _4f = $k[--$j]; //#27193
        $put($k[--$j], _4f, (1 - ($_.i % 2)) * 9); //#27193
        $k[$j++] = $_.pixs; //#27194
        $k[$j++] = 2; //#27194
        $k[$j++] = $_.i; //#27194
        $_.qmv(); //#27194
        var _4j = $k[--$j]; //#27194
        $put($k[--$j], _4j, 0); //#27194
        $k[$j++] = $_.pixs; //#27195
        $k[$j++] = 3; //#27195
        $k[$j++] = $_.i; //#27195
        $_.qmv(); //#27195
        var _4n = $k[--$j]; //#27195
        $put($k[--$j], _4n, 9); //#27195
        $k[$j++] = $_.pixs; //#27196
        $k[$j++] = 4; //#27196
        $k[$j++] = $_.i; //#27196
        $_.qmv(); //#27196
        var _4r = $k[--$j]; //#27196
        $put($k[--$j], _4r, 0); //#27196
        $k[$j++] = $_.pixs; //#27197
        $k[$j++] = $_.columns - 1; //#27197
        $k[$j++] = $_.i; //#27197
        $_.qmv(); //#27197
        var _4w = $k[--$j]; //#27197
        $put($k[--$j], _4w, 9); //#27197
    } //#27197
    $_.i = (~~($_.rows / 2)) - 5; //#27201
    $k[$j++] = Infinity; //#27202
    var _53 = $cvrs($s(5), $get($_.dccu, $_.dcc), 10); //#27203
    for (var _54 = 0, _55 = _53.length; _54 < _55; _54++) { //#27203
        $k[$j++] = $get(_53, _54) - 48; //#27203
    } //#27203
    var _5B = $cvrs($s(5), $get($_.dccl, $_.dcc), 10); //#27205
    $k[$j++] = 0; //#27205
    for (var _5C = 0, _5D = _5B.length; _5C < _5D; _5C++) { //#27205
        $k[$j++] = $get(_5B, _5C) - 48; //#27205
    } //#27205
    var _5F = $a(); //#27205
    for (var _5G = 0, _5H = _5F.length; _5G < _5H; _5G++) { //#27209
        $k[$j++] = $get(_5F, _5G); //#27207
        $k[$j++] = $_.pixs; //#27207
        $k[$j++] = 2; //#27207
        $k[$j++] = $_.i; //#27207
        $_.qmv(); //#27207
        var _5L = $k[$j - 3]; //#27207
        var _5M = $k[$j - 1]; //#27207
        $put($k[$j - 2], _5M, _5L); //#27207
        $j -= 3; //#27207
        $_.i = $_.i + 1; //#27208
    } //#27208
    $k[$j++] = Infinity; //#27212
    $k[$j++] = $_.start; //#27215
    $k[$j++] = $_.mcc; //#27215
    $aload($_.ecws); //#27215
    $k[$j++] = $_.tcc; //#27219
    $k[$j++] = 283; //#27219
    $k[$j++] = $_.acc; //#27219
    $aload($_.dcws); //#27219
    for (var _5W = 0, _5X = $_.pads; _5W < _5X; _5W++) { //#27220
        $k[$j++] = 284; //#27220
    } //#27220
    $k[$j++] = $_.qcc; //#27221
    $_.tileseq = $a(); //#27221
    $_.x = 5; //#27224
    $_.y = 1; //#27224
    var _5a = $_.tileseq; //#27225
    for (var _5b = 0, _5c = _5a.length; _5b < _5c; _5b++) { //#27238
        var _5h = $cvrs($s(5), $get($_.tiles, $get(_5a, _5b)), 10); //#27226
        for (var _5i = 0, _5j = _5h.length; _5i < _5j; _5i++) { //#27229
            $k[$j++] = $get(_5h, _5i); //#27227
            $k[$j++] = $_.pixs; //#27227
            $k[$j++] = $_.x; //#27227
            $k[$j++] = $_.y; //#27227
            $_.qmv(); //#27227
            var _5o = $k[$j - 3]; //#27227
            var _5p = $k[$j - 1]; //#27227
            $put($k[$j - 2], _5p, _5o - 48); //#27227
            $j -= 3; //#27227
            $_.y = $_.y + 1; //#27228
        } //#27228
        if ($_.y != ($_.rows - 1)) { //#27235
            $_.y = $_.y + 1; //#27231
        } else { //#27235
            $_.x = $_.x + 1; //#27233
            $_.y = 1; //#27233
            $k[$j++] = $_.pixs; //#27234
            $k[$j++] = $_.x; //#27234
            $k[$j++] = $_.y; //#27234
            $_.qmv(); //#27234
            var _5z = $k[--$j]; //#27234
            if ($get($k[--$j], _5z) != -1) { //#27236
                $_.x = $_.x + 1; //#27235
            } //#27235
        } //#27235
    } //#27235
    var _63 = new Map([
        [0, "FFFFFF"],
        [9, "000000"],
        [1, "00FFFF"],
        [3, "FF00FF"],
        [5, "FFFF00"],
        [6, "00FF00"]
    ]); //#27247
    $_.colormap = _63; //#27248
    var _6C = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.columns],
        ["pixy", $_.rows],
        ["height", ($_.rows / 72) * 2],
        ["width", ($_.columns / 72) * 2],
        ["colormap", $_.colormap],
        ["borderleft", 1],
        ["borderright", 1],
        ["bordertop", 1],
        ["borderbottom", 1],
        ["opt", $_.options]
    ]); //#27264
    $k[$j++] = _6C; //#27267
    if (!$_.dontdraw) { //#27267
        bwipp_renmatrix(); //#27267
    } //#27267
    $_ = $__; //#27271
} //bwipp_ultracode
function bwipp_jabcode() {
    var $__ = $_; //#27300
    $_ = Object.assign({}, $_); //#27300
    $_.dontdraw = false; //#27303
    $_.rows = -1; //#27304
    $_.columns = -1; //#27305
    $_.slave = false; //#27306
    $_.colors = 16; //#27307
    $_.eclevel = 6; //#27308
    $_.raw = false; //#27309
    $_.parse = false; //#27310
    $_.parsefnc = false; //#27311
    $_.mask = -1; //#27312
    $k[$j++] = $_; //#27314
    bwipp_processoptions(); //#27314
    $_.options = $k[--$j]; //#27314
    $_.barcode = $k[--$j]; //#27315
    $_.databpm = ~~($round($log($_.colors) / $log(2))); //#27317
    var _3 = $_.colors; //#27318
    $k[$j++] = 'metabpm'; //#27318
    $k[$j++] = _3; //#27318
    if (_3 > 8) { //#27318
        $k[$j - 1] = 8; //#27318
    } //#27318
    var _4 = $k[--$j]; //#27318
    $_[$k[--$j]] = ~~($round($log(_4) / $log(2))); //#27318
    $_.fn1 = -1; //#27321
    var _9 = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["FNC1", $_.fn1]
    ]); //#27325
    $_.fncvals = _9; //#27326
    $k[$j++] = 'msg'; //#27327
    $k[$j++] = $_.barcode; //#27327
    $k[$j++] = $_.fncvals; //#27327
    bwipp_parseinput(); //#27327
    var _C = $k[--$j]; //#27327
    $_[$k[--$j]] = _C; //#27327
    $_.msglen = $_.msg.length; //#27328
    $_.addtobits = function() {
        var _F = $k[--$j]; //#27349
        $puti($_.bits, $_.j, _F); //#27349
        $_.j = _F.length + $_.j; //#27350
    }; //#27350
    $_.tofixedbits = function() {
        var _K = $strcpy($s(13), "0000000000000"); //#27354
        $k[$j++] = _K; //#27354
        $k[$j++] = _K; //#27354
        $r(4, -1); //#27354
        var _N = $cvrs($s(13), $k[--$j], 2); //#27354
        var _O = $k[--$j]; //#27355
        var _P = $k[--$j]; //#27355
        var _Q = $k[--$j]; //#27355
        $puti(_O, $f(_Q - _N.length), _N); //#27355
        $k[$j++] = $geti(_P, 0, _Q); //#27356
    }; //#27356
    var _T = ($_.msglen <= 15) ? 4 : 17; //#27360
    $_.bits = $s(((7 + _T) + ($_.msglen * 8)) + 12); //#27360
    $_.j = 0; //#27361
    $k[$j++] = 31; //#27362
    $k[$j++] = 5; //#27362
    $_.tofixedbits(); //#27362
    $_.addtobits(); //#27362
    $k[$j++] = "00"; //#27363
    $_.addtobits(); //#27363
    if ($_.msglen <= 15) { //#27368
        $k[$j++] = $_.msglen; //#27365
        $k[$j++] = 4; //#27365
        $_.tofixedbits(); //#27365
        $_.addtobits(); //#27365
    } else { //#27368
        $k[$j++] = "0000"; //#27367
        $_.addtobits(); //#27367
        $k[$j++] = $_.msglen - 16; //#27368
        $k[$j++] = 13; //#27368
        $_.tofixedbits(); //#27368
        $_.addtobits(); //#27368
    } //#27368
    for (var _b = 0, _a = $_.msglen - 1; _b <= _a; _b += 1) { //#27372
        $k[$j++] = $get($_.msg, _b); //#27371
        $k[$j++] = 8; //#27371
        $_.tofixedbits(); //#27371
        $_.addtobits(); //#27371
    } //#27371
    $k[$j++] = 28; //#27373
    $k[$j++] = 5; //#27373
    $_.tofixedbits(); //#27373
    $_.addtobits(); //#27373
    $k[$j++] = 31; //#27374
    $k[$j++] = 5; //#27374
    $_.tofixedbits(); //#27374
    $_.addtobits(); //#27374
    $k[$j++] = "11"; //#27375
    $_.addtobits(); //#27375
    $_.diffside = 21; //#27378
    $_.sameshape = false; //#27379
    $_.sameecc = false; //#27380
    $_.hasslaves = false; //#27381
    $_.metrics = function() {
        $_.mc = $k[--$j]; //#27385
        $_.mr = $k[--$j]; //#27385
        var _g = $_.mc; //#27386
        var _h = $_.mr; //#27386
        var _i = $_.mc; //#27387
        var _j = $_.mr; //#27387
        var _k = $_.colors; //#27389
        var _l = 64; //#27389
        if (64 > _k) { //#27389
            var _ = _k; //#27389
            _k = _l; //#27389
            _l = _; //#27389
        } //#27389
        var _n = $_.slave ? 7 : 17; //#27390
        $k[$j++] = _g * _h; //#27418
        $k[$j++] = ((((~~((_i - 25) / 16)) + 2) * ((~~((_j - 25) / 16)) + 2)) - 4) * 7; //#27418
        $k[$j++] = _l * 2; //#27418
        $k[$j++] = _n * 4; //#27418
        if (!$_.slave) { //#27417
            var _r = $eq($_.mr, $_.mc) ? 0 : 1; //#27394
            $_.metass = _r; //#27394
            var _s = $_.mr; //#27395
            var _t = $_.mc; //#27395
            if ($lt(_s, _t)) { //#27395
                var _ = _t; //#27395
                _t = _s; //#27395
                _s = _; //#27395
            } //#27395
            $_.metavf = $get($a([0, 1, 2, 2, 3, 3, 3, 3]), ~~((_s - 21) / 16)); //#27396
            $k[$j++] = 'metavlen'; //#27397
            if ($_.metass == 0) { //#27397
                $k[$j++] = $a([2, 2, 3, 4]); //#27397
            } else { //#27397
                $k[$j++] = $a([4, 6, 8, 10]); //#27397
            } //#27397
            var _11 = $get($k[--$j], $_.metavf); //#27397
            $_[$k[--$j]] = _11; //#27397
            $_.metaelen = ($_.metavf * 2) + 10; //#27398
            $k[$j++] = $f((7 + $_.metavlen) + $_.metaelen); //#27401
            if ($_.hasslaves) { //#27401
                var _17 = $k[--$j]; //#27401
                $k[$j++] = _17 + 4; //#27401
            } //#27401
            var _1A = ~~($ceil(($k[--$j] * 2) / $_.metabpm)); //#27404
            $_.nummetabits = (_1A * $_.metabpm) + 6; //#27404
            $k[$j++] = _1A + 6; //#27405
        } else { //#27417
            $k[$j++] = 3; //#27408
            if (!$_.sameshape) { //#27408
                var _1D = $k[--$j]; //#27408
                $k[$j++] = _1D + 5; //#27408
            } //#27408
            if ($_.hasslaves) { //#27409
                var _1F = $k[--$j]; //#27409
                $k[$j++] = _1F + 3; //#27409
            } //#27409
            if (!$_.sameecc) { //#27414
                var _1H = $_.mr; //#27411
                var _1I = $_.mc; //#27411
                if ($lt(_1H, _1I)) { //#27411
                    var _ = _1I; //#27411
                    _1I = _1H; //#27411
                    _1H = _; //#27411
                } //#27411
                var _1L = $k[--$j]; //#27413
                $k[$j++] = $f(_1L + $get($a([10, 12, 14, 14, 16, 16, 16, 16]), ~~((_1H - 21) / 16))); //#27413
            } //#27413
            var _1O = ~~($ceil(($k[--$j] * 2) / $_.metabpm)); //#27417
            $_.nummetabits = _1O * $_.metabpm; //#27417
            $k[$j++] = _1O; //#27417
        } //#27417
        var _1Q = $k[--$j]; //#27420
        $_.nummetamodules = _1Q; //#27420
        var _1R = $k[--$j]; //#27421
        var _1S = $k[--$j]; //#27421
        var _1T = $k[--$j]; //#27421
        $_.numdatamodules = $f($k[--$j] - (_1T + (_1S + (_1R + _1Q)))); //#27421
        $_.numdatabits = $_.numdatamodules * $_.databpm; //#27422
    }; //#27422
    $_.coderate = $get($a([0.67, 0.63, 0.57, 0.55, 0.5, 0.43, 0.34, 0.25, 0.2, 0.17, 0.14]), $_.eclevel); //#27426
    $_.grosslen = ~~$ceil($_.bits.length / $_.coderate); //#27427
    $_.snapsize = function() {
        var _1d = (~~$ceil($k[--$j])) - 18; //#27428
        $k[$j++] = _1d; //#27428
        if (_1d < 0) { //#27428
            $k[$j - 1] = 0; //#27428
        } //#27428
        var _1e = $k[--$j]; //#27428
        $k[$j++] = ((~~(_1e / 4)) * 4) + 21; //#27428
    }; //#27428
    if (($_.rows == -1) && ($_.columns == -1)) { //#27457
        $k[$j++] = 'size'; //#27431
        $k[$j++] = $sqrt($_.grosslen); //#27431
        $_.snapsize(); //#27431
        var _1i = $k[--$j]; //#27431
        $_[$k[--$j]] = _1i; //#27431
        for (;;) { //#27436
            $k[$j++] = $_.size; //#27433
            $k[$j++] = $_.size; //#27433
            $_.metrics(); //#27433
            if ($_.grosslen <= $_.numdatabits) { //#27434
                break; //#27434
            } //#27434
            $_.size = $_.size + 4; //#27435
        } //#27435
        $_.rows = $_.size; //#27437
        $_.columns = $_.size; //#27438
    } else { //#27457
        if (($_.columns == -1) && ($_.rows != -1)) { //#27447
            $k[$j++] = 'columns'; //#27441
            $k[$j++] = $_.grosslen / $_.rows; //#27441
            $_.snapsize(); //#27441
            var _1v = $k[--$j]; //#27441
            $_[$k[--$j]] = _1v; //#27441
            for (;;) { //#27446
                $k[$j++] = $_.rows; //#27443
                $k[$j++] = $_.columns; //#27443
                $_.metrics(); //#27443
                if ($_.grosslen <= $_.numdatabits) { //#27444
                    break; //#27444
                } //#27444
                $_.columns = $_.columns + 4; //#27445
            } //#27445
        } //#27445
        if (($_.rows == -1) && ($_.columns != -1)) { //#27455
            $k[$j++] = 'rows'; //#27449
            $k[$j++] = $_.grosslen / $_.columns; //#27449
            $_.snapsize(); //#27449
            var _26 = $k[--$j]; //#27449
            $_[$k[--$j]] = _26; //#27449
            for (;;) { //#27454
                $k[$j++] = $_.rows; //#27451
                $k[$j++] = $_.columns; //#27451
                $_.metrics(); //#27451
                if ($_.grosslen <= $_.numdatabits) { //#27452
                    break; //#27452
                } //#27452
                $_.rows = $_.rows + 4; //#27453
            } //#27453
        } //#27453
        if (($_.rows != -1) && ($_.columns != -1)) { //#27458
            $k[$j++] = $_.rows; //#27457
            $k[$j++] = $_.columns; //#27457
            $_.metrics(); //#27457
        } //#27457
    } //#27457
    $_.C = $_.numdatabits; //#27460
    $_.cols = $_.columns; //#27461
    if (($_.rows > 145) || ($_.cols > 145)) { //#27466
        $k[$j++] = 'bwipp.jabcodeNoValidSymbol#27465'; //#27465
        $k[$j++] = "Maximum length exceeded or invalid content"; //#27465
        bwipp_raiseerror(); //#27465
    } //#27465
    $_.min = $_.C; //#27469
    for (var _2M = 3; _2M <= 8; _2M += 1) { //#27481
        $_.i = _2M; //#27471
        for (var _2O = $_.i + 1; _2O <= 9; _2O += 1) { //#27480
            $_.j = _2O; //#27473
            $_.dist = (((~~($_.C / $_.j)) * $_.j) - ((~~($_.C / $_.j)) * $_.i)) - $_.bits.length; //#27474
            if (($_.dist < $_.min) && ($_.dist >= 0)) { //#27479
                $_.datawc = $_.i; //#27476
                $_.datawr = $_.j; //#27477
                $_.min = $_.dist; //#27478
            } //#27478
        } //#27478
    } //#27478
    $_.tmpbits = $s(((~~($_.C / $_.datawr)) * $_.datawr) - ((~~($_.C / $_.datawr)) * $_.datawc)); //#27484
    $puti($_.tmpbits, 0, $_.bits); //#27485
    for (var _2o = $_.bits.length, _2n = $_.tmpbits.length - 1; _2o <= _2n; _2o += 1) { //#27489
        var _2q = $get($_.tmpbits, _2o - 1); //#27487
        $k[$j++] = _2o; //#27487
        $k[$j++] = _2q; //#27487
        if ((_2q % 2) == 0) { //#27487
            var _2r = $k[--$j]; //#27487
            $k[$j++] = _2r + 1; //#27487
        } else { //#27487
            var _2s = $k[--$j]; //#27487
            $k[$j++] = _2s - 1; //#27487
        } //#27487
        $k[$j++] = $_.tmpbits; //#27488
        var _2u = $k[$j - 2]; //#27488
        var _2v = $k[$j - 3]; //#27488
        $put($k[$j - 1], _2v, _2u); //#27488
        $j -= 3; //#27488
    } //#27488
    $_.bits = $_.tmpbits; //#27490
    $_.m0 = 22609 + 1; //#27494
    $_.m1 = 62509 - 65536; //#27494
    $_.m2 = 19605; //#27494
    $_.m3 = 32557; //#27494
    $_.lcg64_temper = function() {
        $_.p00 = $_.m0 * $_.s0; //#27500
        $_.p01 = $_.m0 * $_.s1; //#27500
        $_.p02 = $_.m0 * $_.s2; //#27500
        $_.p03 = $_.m0 * $_.s3; //#27500
        $_.p10 = $_.m1 * $_.s0; //#27501
        $_.p11 = $_.m1 * $_.s1; //#27501
        $_.p12 = $_.m1 * $_.s2; //#27501
        $_.p13 = $_.m1 * $_.s3; //#27501
        $_.p20 = $_.m2 * $_.s0; //#27502
        $_.p21 = $_.m2 * $_.s1; //#27502
        $_.p22 = $_.m2 * $_.s2; //#27502
        $_.p23 = $_.m2 * $_.s3; //#27502
        $_.p30 = $_.m3 * $_.s0; //#27503
        $_.p31 = $_.m3 * $_.s1; //#27503
        $_.p32 = $_.m3 * $_.s2; //#27503
        $_.p33 = $_.m3 * $_.s3; //#27503
        $_.s3 = ($_.p33 % 65536) + 1; //#27505
        $_.s2 = (($_.p32 % 65536) + (~~($_.p33 / 65536))) + ($_.p23 % 65536); //#27507
        $_.s1 = ((($_.p31 % 65536) + (~~($_.p32 / 65536))) + (($_.p22 % 65536) + (~~($_.p23 / 65536)))) + ($_.p13 % 65536); //#27510
        $_.s0 = (((($_.p30 % 65536) + (~~($_.p31 / 65536))) + (($_.p21 % 65536) + (~~($_.p22 / 65536)))) + (($_.p12 % 65536) + (~~($_.p13 / 65536)))) + ($_.p03 % 65536); //#27514
        $_.s3 = $_.s3 + 65536; //#27517
        $_.s2 = $_.s2 + 65535; //#27518
        $_.s1 = $_.s1 + 65535; //#27519
        $_.s0 = $_.s0 + 65535; //#27520
        $_.s2 = (~~($_.s3 / 65536)) + $_.s2; //#27523
        $_.s3 = $_.s3 % 65536; //#27523
        $_.s1 = (~~($_.s2 / 65536)) + $_.s1; //#27524
        $_.s2 = $_.s2 % 65536; //#27524
        $_.s0 = (~~($_.s1 / 65536)) + $_.s0; //#27525
        $_.s1 = $_.s1 % 65536; //#27525
        $_.s0 = $_.s0 % 65536; //#27526
        var _40 = (((($_.s0 - 32768) * 65536) + $_.s1) ^ 2147483648) & 4294967295; //#27531
        var _41 = _40 ^ (_40 >>> 11); //#27532
        var _42 = _41 ^ ((_41 << 7) & -1658038656); //#27533
        var _43 = (_42 ^ ((_42 << 15) & -272236544)) & 4294967295; //#27535
        $k[$j++] = _43 ^ (_43 >>> 18); //#27535
    }; //#27535
    $_.createMatrixA = function() {
        $k[$j++] = 'nb_pcb'; //#27541
        if ($_.wr < 4) { //#27541
            $k[$j++] = ~~($_.Pg_sub_block / 2); //#27541
        } else { //#27541
            $k[$j++] = (~~($_.Pg_sub_block / $_.wr)) * $_.wc; //#27541
        } //#27541
        var _49 = $k[--$j]; //#27541
        $_[$k[--$j]] = _49; //#27541
        $_.offset = ~~$ceil($_.Pg_sub_block / 32); //#27542
        $_.effwidth = $_.offset * 32; //#27543
        $_.matrixA = $a($_.offset * $_.nb_pcb); //#27544
        for (var _4J = 0, _4I = ($_.offset * $_.nb_pcb) - 1; _4J <= _4I; _4J += 1) { //#27545
            $put($_.matrixA, _4J, 0); //#27545
        } //#27545
        $_.permutation = $a($_.Pg_sub_block); //#27546
        for (var _4P = 0, _4O = $_.Pg_sub_block - 1; _4P <= _4O; _4P += 1) { //#27547
            $put($_.permutation, _4P, _4P); //#27547
        } //#27547
        for (var _4U = 0, _4T = (~~($_.Pg_sub_block / $_.wr)) - 1; _4U <= _4T; _4U += 1) { //#27556
            $_.i = _4U; //#27550
            for (var _4X = 0, _4W = $_.wr - 1; _4X <= _4W; _4X += 1) { //#27555
                $_.j = _4X; //#27552
                var _4Y = $_.matrixA; //#27553
                var _4Z = $_.i; //#27553
                var _4a = $_.effwidth; //#27553
                var _4b = $_.wr; //#27553
                var _4c = $_.j; //#27553
                var _4i = 31 - $f($_.i * ($_.effwidth + $_.wr) + $_.j) % 32;; //#27554
                $put(_4Y, ~~($f(_4Z * (_4a + _4b) + _4c) / 32), $get(_4Y, ~~($f(_4Z * (_4a + _4b) + _4c) / 32)) | (_4i < 0 ? 1 >>> -_4i : 1 << _4i)); //#27554
            } //#27554
        } //#27554
        $_.s0 = 0; //#27559
        $_.s1 = 0; //#27559
        $_.s2 = 11; //#27559
        $_.s3 = 64569; //#27559
        for (var _4l = 1, _4k = $_.wc - 1; _4l <= _4k; _4l += 1) { //#27582
            $_.i = _4l; //#27561
            $_.off_index = (~~($_.Pg_sub_block / $_.wr)) * $_.i; //#27562
            for (var _4r = 0, _4q = $_.Pg_sub_block - 1; _4r <= _4q; _4r += 1) { //#27581
                $_.j = _4r; //#27564
                $_.lcg64_temper(); //#27565
                var _4s = $k[$j - 1]; //#27566
                if (_4s < 0) { //#27566
                    var _4t = $k[--$j]; //#27566
                    $k[$j++] = (_4t ^ 2147483648) + 2147483648; //#27566
                } //#27566
                $_.pos = ~~(($k[--$j] / 4294967296) * ($_.Pg_sub_block - $_.j)); //#27568
                for (var _50 = 0, _4z = (~~($_.Pg_sub_block / $_.wr)) - 1; _50 <= _4z; _50 += 1) { //#27577
                    $_.k = _50; //#27570
                    var _51 = $_.matrixA; //#27571
                    var _52 = $_.off_index; //#27571
                    var _53 = $_.k; //#27571
                    var _54 = $_.offset; //#27571
                    var _55 = $_.j; //#27571
                    var _5D = $get($_.matrixA, (~~($get($_.permutation, $_.pos) / 32)) + ($_.k * $_.offset)); //#27573
                    var _5H = -(31 - ($get($_.permutation, $_.pos) % 32)); //#27574
                    var _5J = 31 - ($_.j % 32); //#27575
                    $put(_51, ((_52 + _53) * _54) + (~~(_55 / 32)), $get(_51, ((_52 + _53) * _54) + (~~(_55 / 32))) | ((_5J < 0 ? (((_5H < 0 ? _5D >>> -_5H : _5D << _5H)) & 1) >>> -_5J : (((_5H < 0 ? _5D >>> -_5H : _5D << _5H)) & 1) << _5J))); //#27576
                } //#27576
                var _5M = $_.permutation; //#27578
                var _5N = $_.Pg_sub_block; //#27578
                var _5O = $_.j; //#27578
                $put(_5M, (_5N - 1) - _5O, $get($_.permutation, $_.pos)); //#27580
                $put($_.permutation, $_.pos, $get(_5M, (_5N - 1) - _5O)); //#27580
            } //#27580
        } //#27580
    }; //#27580
    $_.createMetadataMatrixA = function() {
        $_.nb_pcb = ~~($_.Pg_sub_block / 2); //#27588
        $_.offset = ~~$ceil($_.Pg_sub_block / 32); //#27589
        $_.matrixA = $a($_.offset * $_.nb_pcb); //#27590
        for (var _5b = 0, _5a = ($_.offset * $_.nb_pcb) - 1; _5b <= _5a; _5b += 1) { //#27591
            $put($_.matrixA, _5b, 0); //#27591
        } //#27591
        $_.permutation = $a($_.Pg_sub_block); //#27592
        for (var _5h = 0, _5g = $_.Pg_sub_block - 1; _5h <= _5g; _5h += 1) { //#27593
            $put($_.permutation, _5h, _5h); //#27593
        } //#27593
        $_.s0 = 0; //#27596
        $_.s1 = 0; //#27596
        $_.s2 = 0; //#27596
        $_.s3 = 38545; //#27596
        $_.nb_once = ~~((~~((($_.nb_pcb / $_.wc) * $_.Pg_sub_block) + 3)) / $_.nb_pcb); //#27597
        for (var _5p = 0, _5o = $_.nb_pcb - 1; _5p <= _5o; _5p += 1) { //#27612
            $_.i = _5p; //#27599
            for (var _5s = 0, _5r = $_.nb_once - 1; _5s <= _5r; _5s += 1) { //#27611
                $_.j = _5s; //#27601
                $_.lcg64_temper(); //#27602
                var _5t = $k[$j - 1]; //#27603
                if (_5t < 0) { //#27603
                    var _5u = $k[--$j]; //#27603
                    $k[$j++] = (_5u ^ 2147483648) + 2147483648; //#27603
                } //#27603
                $_.pos = ~~(($k[--$j] / 4294967296) * ($_.Pg_sub_block - $_.j)); //#27605
                var _5y = $_.matrixA; //#27606
                var _5z = $_.i; //#27606
                var _60 = $_.offset; //#27606
                var _63 = $get($_.permutation, $_.pos); //#27606
                var _68 = 31 - ($get($_.permutation, $_.pos) % 32); //#27607
                $put(_5y, (_5z * _60) + (~~(_63 / 32)), $get(_5y, (_5z * _60) + (~~(_63 / 32))) | ((_68 < 0 ? 1 >>> -_68 : 1 << _68))); //#27607
                var _6B = $_.permutation; //#27608
                var _6C = $_.Pg_sub_block; //#27608
                var _6D = $_.j; //#27608
                $put(_6B, (_6C - 1) - _6D, $get($_.permutation, $_.pos)); //#27610
                $put($_.permutation, $_.pos, $get(_6B, (_6C - 1) - _6D)); //#27610
            } //#27610
        } //#27610
    }; //#27610
    $_.GaussJordan = function() {
        $k[$j++] = 'nb_pcb'; //#27618
        if ($_.wr < 4) { //#27618
            $k[$j++] = ~~($_.Pg_sub_block / 2); //#27618
        } else { //#27618
            $k[$j++] = (~~($_.Pg_sub_block / $_.wr)) * $_.wc; //#27618
        } //#27618
        var _6N = $k[--$j]; //#27618
        $_[$k[--$j]] = _6N; //#27618
        $_.offset = ~~$ceil($_.Pg_sub_block / 32); //#27619
        var _6Q = $_.matrixA; //#27620
        $_.matrixH = $arrcpy($a(_6Q.length), _6Q); //#27620
        $k[$j++] = Infinity; //#27621
        for (var _6U = 0, _6V = $_.Pg_sub_block; _6U < _6V; _6U++) { //#27621
            $k[$j++] = 0; //#27621
        } //#27621
        $_.column_arrangement = $a(); //#27621
        $k[$j++] = Infinity; //#27622
        for (var _6Y = 0, _6Z = $_.Pg_sub_block; _6Y < _6Z; _6Y++) { //#27622
            $k[$j++] = false; //#27622
        } //#27622
        $_.processed_column = $a(); //#27622
        $k[$j++] = Infinity; //#27623
        for (var _6c = 0, _6d = $_.nb_pcb; _6c < _6d; _6c++) { //#27623
            $k[$j++] = 0; //#27623
        } //#27623
        $_.zero_lines_nb = $a(); //#27623
        $k[$j++] = Infinity; //#27624
        for (var _6g = 0, _6h = $_.Pg_sub_block * 2; _6g < _6h; _6g++) { //#27624
            $k[$j++] = 0; //#27624
        } //#27624
        $_.swap_col = $a(); //#27624
        $_.zero_lines = 0; //#27625
        $_.loop0 = 0; //#27627
        for (var _6l = 0, _6k = $_.nb_pcb - 1; _6l <= _6k; _6l += 1) { //#27665
            $_.i = _6l; //#27629
            $_.pivot_column = $_.Pg_sub_block + 1; //#27630
            for (var _6p = 0, _6o = $_.Pg_sub_block - 1; _6p <= _6o; _6p += 1) { //#27638
                $_.j = _6p; //#27632
                var _6u = $get($_.matrixH, ~~(((($_.offset * 32) * $_.i) + $_.j) / 32)); //#27633
                var _6y = -(31 - (((($_.offset * 32) * $_.i) + $_.j) % 32)); //#27634
                if ((((_6y < 0 ? _6u >>> -_6y : _6u << _6y)) & 1) == 1) { //#27637
                    $_.pivot_column = $_.j; //#27635
                    break; //#27636
                } //#27636
            } //#27636
            if ($_.pivot_column < $_.Pg_sub_block) { //#27663
                $put($_.processed_column, $_.pivot_column, true); //#27640
                $put($_.column_arrangement, $_.pivot_column, $_.i); //#27641
                if ($_.pivot_column >= $_.nb_pcb) { //#27645
                    $put($_.swap_col, $_.loop0 * 2, $_.pivot_column); //#27643
                    $_.loop0 = $_.loop0 + 1; //#27644
                } //#27644
                $_.off_index = ~~($_.pivot_column / 32); //#27646
                $_.off_index1 = $_.pivot_column % 32; //#27647
                for (var _7H = 0, _7G = $_.nb_pcb - 1; _7H <= _7G; _7H += 1) { //#27660
                    $_.j = _7H; //#27649
                    if ($_.i != $_.j) { //#27659
                        var _7O = $get($_.matrixH, $_.off_index + ($_.j * $_.offset)); //#27651
                        var _7Q = -(31 - $_.off_index1); //#27652
                        if ((((_7Q < 0 ? _7O >>> -_7Q : _7O << _7Q)) & 1) == 1) { //#27658
                            for (var _7T = 0, _7S = $_.offset - 1; _7T <= _7S; _7T += 1) { //#27657
                                $_.k = _7T; //#27654
                                var _7U = $_.matrixH; //#27655
                                var _7V = $_.offset; //#27655
                                var _7W = $_.j; //#27655
                                var _7X = $_.k; //#27655
                                $put(_7U, (_7V * _7W) + _7X, $xo($get(_7U, (_7V * _7W) + _7X), $get($_.matrixH, ($_.offset * $_.i) + $_.k))); //#27656
                            } //#27656
                        } //#27656
                    } //#27656
                } //#27656
            } else { //#27663
                $put($_.zero_lines_nb, $_.zero_lines, $_.i); //#27662
                $_.zero_lines = $_.zero_lines + 1; //#27663
            } //#27663
        } //#27663
        $_.matrix_rank = $_.nb_pcb - $_.zero_lines; //#27667
        $_.loop2 = 0; //#27668
        for (var _7n = $_.matrix_rank, _7m = $_.nb_pcb - 1; _7n <= _7m; _7n += 1) { //#27688
            $_.i = _7n; //#27670
            if ($get($_.column_arrangement, $_.i) > 0) { //#27687
                for (var _7t = 0, _7s = $_.nb_pcb - 1; _7t <= _7s; _7t += 1) { //#27686
                    $_.j = _7t; //#27673
                    if (!$get($_.processed_column, $_.j)) { //#27685
                        $put($_.column_arrangement, $_.j, $get($_.column_arrangement, $_.i)); //#27675
                        $put($_.column_arrangement, $_.i, 0); //#27676
                        $put($_.processed_column, $_.j, true); //#27677
                        $put($_.processed_column, $_.i, false); //#27678
                        $put($_.swap_col, $_.loop0 * 2, $_.i); //#27679
                        $put($_.swap_col, ($_.loop0 * 2) + 1, $_.j); //#27680
                        $put($_.column_arrangement, $_.i, $_.j); //#27681
                        $_.loop0 = $_.loop0 + 1; //#27682
                        $_.loop2 = $_.loop2 + 1; //#27683
                        break; //#27684
                    } //#27684
                } //#27684
            } //#27684
        } //#27684
        $_.loop1 = 0; //#27690
        for (var _8L = 0, _8K = $_.nb_pcb - 1; _8L <= _8K; _8L += 1) { //#27699
            $_.kl = _8L; //#27692
            if (!$get($_.processed_column, $_.kl) && $_.loop1 < $_.loop0 - $_.loop2) { //#27698
                $put($_.column_arrangement, $_.kl, $get($_.column_arrangement, $get($_.swap_col, $_.loop1 * 2))); //#27694
                $put($_.processed_column, $_.kl, true); //#27695
                $put($_.swap_col, ($_.loop1 * 2) + 1, $_.kl); //#27696
                $_.loop1 = $_.loop1 + 1; //#27697
            } //#27697
        } //#27697
        $_.loop1 = 0; //#27701
        for (var _8h = 0, _8g = $_.nb_pcb - 1; _8h <= _8g; _8h += 1) { //#27708
            $_.kl = _8h; //#27703
            if (!$get($_.processed_column, $_.kl)) { //#27707
                $put($_.column_arrangement, $_.kl, $get($_.zero_lines_nb, $_.loop1)); //#27705
                $_.loop1 = $_.loop1 + 1; //#27706
            } //#27706
        } //#27706
        for (var _8t = 0, _8s = $_.nb_pcb - 1; _8t <= _8s; _8t += 1) { //#27717
            $_.i = _8t; //#27711
            for (var _8w = 0, _8v = $_.offset - 1; _8w <= _8v; _8w += 1) { //#27716
                $_.j = _8w; //#27713
                $put($_.matrixA, ($_.i * $_.offset) + $_.j, $get($_.matrixH, $f(($get($_.column_arrangement, $_.i) * $_.offset) + $_.j))); //#27715
            } //#27715
        } //#27715
        $_.tmp = 0; //#27719
        for (var _9A = 0, _99 = $_.loop0 - 1; _9A <= _99; _9A += 1) { //#27741
            $_.i = _9A; //#27721
            for (var _9D = 0, _9C = $_.nb_pcb - 1; _9D <= _9C; _9D += 1) { //#27740
                $_.j = _9D; //#27723
                var _9K = $get($_.matrixA, (~~($get($_.swap_col, $_.i * 2) / 32)) + ($_.j * $_.offset)); //#27724
                var _9O = -(31 - ($get($_.swap_col, $_.i * 2) % 32)); //#27725
                $_.tmp = (((-(((_9O < 0 ? _9K >>> -_9O : _9K << _9O)) & 1)) ^ $_.tmp) & 1) ^ $_.tmp; //#27726
                var _9R = $_.matrixA; //#27727
                var _9U = $get($_.swap_col, $_.i * 2); //#27727
                var _9V = $_.j; //#27727
                var _9W = $_.offset; //#27727
                var _9e = $get($_.matrixA, (~~($get($_.swap_col, ($_.i * 2) + 1) / 32)) + ($_.j * $_.offset)); //#27729
                var _9i = -(31 - ($get($_.swap_col, ($_.i * 2) + 1) % 32)); //#27730
                var _9t = 31 - ($get($_.swap_col, $_.i * 2) % 32); //#27732
                $put(_9R, (~~(_9U / 32)) + (_9V * _9W), $get(_9R, (~~(_9U / 32)) + (_9V * _9W)) ^ (((-(((_9i < 0 ? _9e >>> -_9i : _9e << _9i)) & 1)) ^ $get($_.matrixA, (~~($get($_.swap_col, $_.i * 2) / 32)) + ($_.j * $_.offset))) & ((_9t < 0 ? 1 >>> -_9t : 1 << _9t)))); //#27733
                var _9u = $_.matrixA; //#27734
                var _9x = $get($_.swap_col, ($_.i * 2) + 1); //#27734
                var _9y = $_.j; //#27734
                var _9z = $_.offset; //#27734
                var _AC = 31 - ($get($_.swap_col, ($_.i * 2) + 1) % 32); //#27738
                $put(_9u, (~~(_9x / 32)) + (_9y * _9z), $get(_9u, (~~(_9x / 32)) + (_9y * _9z)) ^ (((-($_.tmp & 1)) ^ $get($_.matrixA, (~~($get($_.swap_col, ($_.i * 2) + 1) / 32)) + ($_.j * $_.offset))) & ((_AC < 0 ? 1 >>> -_AC : 1 << _AC)))); //#27739
            } //#27739
        } //#27739
    }; //#27739
    $_.createGeneratorMatrix = function() {
        $_.pn = $_.Pg_sub_block - $_.matrix_rank; //#27747
        $_.offset = ~~$ceil($_.pn / 32); //#27748
        $_.effwidth = $_.offset * 32; //#27749
        $_.offset_cap = ~~$ceil($_.Pg_sub_block / 32); //#27750
        $_.G = $a($_.offset * $_.Pg_sub_block); //#27751
        for (var _AO = 0, _AN = ($_.offset * $_.Pg_sub_block) - 1; _AO <= _AN; _AO += 1) { //#27754
            $put($_.G, _AO, 0); //#27753
        } //#27753
        for (var _AS = 0, _AR = $_.pn - 1; _AS <= _AR; _AS += 1) { //#27759
            $_.i = _AS; //#27756
            var _AT = $_.G; //#27757
            var _AU = $_.Pg_sub_block; //#27757
            var _AV = $_.pn; //#27757
            var _AW = $_.i; //#27757
            var _AX = $_.offset; //#27757
            var _AY = $_.i; //#27757
            var _Ab = 31 - ($_.i % 32); //#27758
            $put(_AT, (((_AU - _AV) + _AW) * _AX) + (~~(_AY / 32)), $get(_AT, (((_AU - _AV) + _AW) * _AX) + (~~(_AY / 32))) | ((_Ab < 0 ? 1 >>> -_Ab : 1 << _Ab))); //#27758
        } //#27758
        $_.matrix_index = $_.Pg_sub_block - $_.pn; //#27760
        $_.loop0 = 0; //#27761
        for (var _Ai = 0, _Ah = (($_.Pg_sub_block - $_.pn) * $_.effwidth) - 1; _Ai <= _Ah; _Ai += 1) { //#27778
            $_.i = _Ai; //#27763
            if ($_.matrix_index >= $_.Pg_sub_block) { //#27767
                $_.loop0 = $_.loop0 + 1; //#27765
                $_.matrix_index = $_.Pg_sub_block - $_.pn; //#27766
            } //#27766
            if (($_.i % $_.effwidth) < $_.pn) { //#27777
                var _Ar = $_.G; //#27769
                var _As = $_.i; //#27769
                var _Ay = $get($_.matrixA, (~~($_.matrix_index / 32)) + ($_.offset_cap * $_.loop0)); //#27771
                var _B0 = -(31 - ($_.matrix_index % 32)); //#27772
                var _B5 = 31 - ($_.i % 32); //#27774
                $put(_Ar, ~~(_As / 32), $get(_Ar, ~~(_As / 32)) ^ (((-(((_B0 < 0 ? _Ay >>> -_B0 : _Ay << _B0)) & 1)) ^ $get($_.G, ~~($_.i / 32))) & ((_B5 < 0 ? 1 >>> -_B5 : 1 << _B5)))); //#27775
                $_.matrix_index = $_.matrix_index + 1; //#27776
            } //#27776
        } //#27776
    }; //#27776
    $_.ldpc = function() {
        $_.wr = $k[--$j]; //#27784
        $_.wc = $k[--$j]; //#27785
        $k[$j++] = Infinity; //#27786
        var _B9 = $k[--$j]; //#27786
        var _BA = $k[--$j]; //#27786
        $k[$j++] = _B9; //#27786
        $forall(_BA, function() { //#27786
            var _BB = $k[--$j]; //#27786
            $k[$j++] = _BB - 48; //#27786
        }); //#27786
        $_.data = $a(); //#27786
        $_.Pn = $_.data.length; //#27788
        if ($_.wr != -1) { //#27803
            $_.Pg = ~~(($ceil(($ceil(($_.Pn * $_.wr) / $f($_.wr - $_.wc))) / $_.wr)) * $_.wr); //#27790
            $_.nb_sub_blocks = (~~($_.Pg / 2700)) + 1; //#27791
            $_.Pg_sub_block = (~~((~~($_.Pg / $_.nb_sub_blocks)) / $_.wr)) * $_.wr; //#27792
            $_.Pn_sub_block = ~~(($_.Pg_sub_block * $f($_.wr - $_.wc)) / $_.wr); //#27793
            $_.nb_sub_blocks = ~~($_.Pg / $_.Pg_sub_block); //#27794
            $k[$j++] = 'encoding_iterations'; //#27795
            $k[$j++] = ~~($_.Pg / $_.Pg_sub_block); //#27795
            if (($_.Pn_sub_block * $_.nb_sub_blocks) < $_.Pn) { //#27795
                var _Bb = $k[--$j]; //#27795
                $k[$j++] = _Bb - 1; //#27795
            } //#27795
            var _Bc = $k[--$j]; //#27795
            $_[$k[--$j]] = _Bc; //#27795
            $_.createMatrixA(); //#27796
        } else { //#27803
            $_.Pg = $_.Pn * 2; //#27798
            $_.nb_sub_blocks = 1; //#27799
            $_.Pg_sub_block = $_.Pg; //#27800
            $_.Pn_sub_block = $_.Pn; //#27801
            $_.encoding_iterations = 1; //#27802
            $_.createMetadataMatrixA(); //#27803
        } //#27803
        $_.GaussJordan(); //#27805
        $_.createGeneratorMatrix(); //#27806
        $_.ecc_encoded_data = $a($_.Pg); //#27808
        $_.offset = ~~($ceil(($_.Pg_sub_block - $_.matrix_rank) / 32)); //#27810
        for (var _Bn = 0, _Bm = $_.encoding_iterations - 1; _Bn <= _Bm; _Bn += 1) { //#27826
            $_.iter = _Bn; //#27812
            for (var _Bq = 0, _Bp = $_.Pg_sub_block - 1; _Bq <= _Bp; _Bq += 1) { //#27825
                $_.i = _Bq; //#27814
                $_.temp = 0; //#27815
                $_.loop0 = 0; //#27816
                $_.offset_index = $_.offset * $_.i; //#27817
                for (var _By = $_.iter * $_.Pn_sub_block, _Bx = (($_.iter + 1) * $_.Pn_sub_block) - 1; _By <= _Bx; _By += 1) { //#27823
                    var _C4 = $get($_.G, $_.offset_index + (~~($_.loop0 / 32))); //#27820
                    var _C6 = -(31 - ($_.loop0 % 32)); //#27820
                    $_.temp = ($get($_.data, _By) & (((_C6 < 0 ? _C4 >>> -_C6 : _C4 << _C6)) & 1)) ^ $_.temp; //#27821
                    $_.loop0 = $_.loop0 + 1; //#27822
                } //#27822
                $put($_.ecc_encoded_data, $_.i + ($_.iter * $_.Pg_sub_block), $_.temp); //#27824
            } //#27824
        } //#27824
        if ($_.encoding_iterations != $_.nb_sub_blocks) { //#27850
            $_.start = $_.encoding_iterations * $_.Pn_sub_block; //#27829
            $_.last_index = $_.encoding_iterations * $_.Pg_sub_block; //#27830
            $_.Pg_sub_block = $_.Pg - ($_.encoding_iterations * $_.Pg_sub_block); //#27831
            $_.Pn_sub_block = ~~(($_.Pg_sub_block * $f($_.wr - $_.wc)) / $_.wr); //#27832
            $_.createMatrixA(); //#27833
            $_.GaussJordan(); //#27834
            $_.createGeneratorMatrix(); //#27835
            $_.offset = ~~($ceil(($_.Pg_sub_block - $_.matrix_rank) / 32)); //#27836
            for (var _CV = 0, _CU = $_.Pg_sub_block - 1; _CV <= _CU; _CV += 1) { //#27849
                $_.i = _CV; //#27838
                $_.temp = 0; //#27839
                $_.loop0 = 0; //#27840
                $_.offset_index = $_.offset * $_.i; //#27841
                for (var _Cb = $_.start, _Ca = $_.Pn - 1; _Cb <= _Ca; _Cb += 1) { //#27847
                    var _Ch = $get($_.G, $_.offset_index + (~~($_.loop0 / 32))); //#27844
                    var _Cj = -(31 - ($_.loop0 % 32)); //#27844
                    $_.temp = ($get($_.data, _Cb) & (((_Cj < 0 ? _Ch >>> -_Cj : _Ch << _Cj)) & 1)) ^ $_.temp; //#27845
                    $_.loop0 = $_.loop0 + 1; //#27846
                } //#27846
                $put($_.ecc_encoded_data, $_.i + $_.last_index, $_.temp); //#27848
            } //#27848
        } //#27848
        $_.out = $s($_.Pg); //#27852
        for (var _Cu = 0, _Ct = $_.Pg - 1; _Cu <= _Ct; _Cu += 1) { //#27856
            $put($_.out, _Cu, $get($_.ecc_encoded_data, _Cu) + 48); //#27855
        } //#27855
        $k[$j++] = $_.out; //#27857
    }; //#27857
    $k[$j++] = 'bits'; //#27862
    $k[$j++] = $_.bits; //#27862
    $k[$j++] = $_.datawc; //#27862
    $k[$j++] = $_.datawr; //#27862
    $_.ldpc(); //#27862
    var _D2 = $k[--$j]; //#27862
    $_[$k[--$j]] = _D2; //#27862
    $_.s0 = 0; //#27865
    $_.s1 = 0; //#27865
    $_.s2 = 3; //#27865
    $_.s3 = 30151; //#27865
    for (var _D5 = $_.bits.length - 1; _D5 >= 1; _D5 -= 1) { //#27875
        $_.l = _D5; //#27867
        $_.lcg64_temper(); //#27868
        var _D6 = $k[$j - 1]; //#27869
        if (_D6 < 0) { //#27869
            var _D7 = $k[--$j]; //#27869
            $k[$j++] = (_D7 ^ 2147483648) + 2147483648; //#27869
        } //#27869
        $_.r = ~~(($k[--$j] / 4294967296) * ($_.l + 1)); //#27871
        $put($_.bits, $_.l, $get($_.bits, $_.r)); //#27873
        $put($_.bits, $_.r, $get($_.bits, $_.l)); //#27874
    } //#27874
    $_.tmpbits = $s($_.C); //#27878
    $puti($_.tmpbits, 0, $_.bits); //#27879
    $_.j = $_.bits.length; //#27880
    for (var _DR = 0, _DS = ~~(($f($_.C - $_.j) + 1) / 2); _DR < _DS; _DR++) { //#27885
        $put($_.tmpbits, $_.j, 48); //#27882
        if (($_.j + 1) < $_.C) { //#27883
            $put($_.tmpbits, $_.j + 1, 49); //#27883
        } //#27883
        $_.j = $_.j + 2; //#27884
    } //#27884
    $_.bits = $_.tmpbits; //#27886
    if ($_.colors == 4) { //#27951
        $_.bi = 0; //#27890
        $_.gi = 1; //#27890
        $_.mi = 2; //#27890
        $_.yi = 3; //#27890
        $_.ki = 4; //#27891
        $_.wi = 5; //#27891
        $k[$j++] = Infinity; //#27892
        $k[$j++] = $_.bi; //#27894
        $k[$j++] = "0000FF"; //#27894
        $k[$j++] = $_.gi; //#27894
        $k[$j++] = "00FF00"; //#27894
        $k[$j++] = $_.mi; //#27894
        $k[$j++] = "FF00FF"; //#27894
        $k[$j++] = $_.yi; //#27894
        $k[$j++] = "FFFF00"; //#27894
        $k[$j++] = $_.ki; //#27894
        $k[$j++] = "000000"; //#27894
        $k[$j++] = $_.wi; //#27894
        $k[$j++] = "FFFFFF"; //#27894
        $_.palette = $d(); //#27895
        $_.metacolorindex = $a([$_.bi, $_.gi, $_.mi, $_.yi]); //#27896
        $_.palettelayout = $a([$_.bi, $_.gi, $_.mi, $_.yi]); //#27897
    } else { //#27951
        var _Dz = new Map([
            [8, $a([2, 2, 2])],
            [16, $a([4, 2, 2])],
            [32, $a([4, 4, 2])],
            [64, $a([4, 4, 4])],
            [128, $a([8, 4, 4])],
            [256, $a([8, 8, 4])]
        ]); //#27906
        $_.rgbres = $get(_Dz, $_.colors); //#27907
        $k[$j++] = 'rvals'; //#27909
        $k[$j++] = $get($_.rgbres, 0); //#27909
        $k[$j++] = Infinity; //#27909
        var _E4 = $k[--$j]; //#27909
        var _E6 = $k[--$j] - 1; //#27909
        $k[$j++] = _E4; //#27909
        $k[$j++] = _E6; //#27909
        for (var _E8 = 0, _E7 = _E6; _E8 <= _E7; _E8 += 1) { //#27909
            var _E9 = $k[--$j]; //#27909
            $k[$j++] = ~~($round(_E8 * (255 / _E9))); //#27909
            $k[$j++] = _E9; //#27909
        } //#27909
        $j--; //#27909
        var _EA = $a(); //#27909
        $_[$k[--$j]] = _EA; //#27909
        $k[$j++] = 'gvals'; //#27910
        $k[$j++] = $get($_.rgbres, 1); //#27910
        $k[$j++] = Infinity; //#27910
        var _EE = $k[--$j]; //#27910
        var _EG = $k[--$j] - 1; //#27910
        $k[$j++] = _EE; //#27910
        $k[$j++] = _EG; //#27910
        for (var _EI = 0, _EH = _EG; _EI <= _EH; _EI += 1) { //#27910
            var _EJ = $k[--$j]; //#27910
            $k[$j++] = ~~($round(_EI * (255 / _EJ))); //#27910
            $k[$j++] = _EJ; //#27910
        } //#27910
        $j--; //#27910
        var _EK = $a(); //#27910
        $_[$k[--$j]] = _EK; //#27910
        $k[$j++] = 'bvals'; //#27911
        $k[$j++] = $get($_.rgbres, 2); //#27911
        $k[$j++] = Infinity; //#27911
        var _EO = $k[--$j]; //#27911
        var _EQ = $k[--$j] - 1; //#27911
        $k[$j++] = _EO; //#27911
        $k[$j++] = _EQ; //#27911
        for (var _ES = 0, _ER = _EQ; _ES <= _ER; _ES += 1) { //#27911
            var _ET = $k[--$j]; //#27911
            $k[$j++] = ~~($round(_ES * (255 / _ET))); //#27911
            $k[$j++] = _ET; //#27911
        } //#27911
        $j--; //#27911
        var _EU = $a(); //#27911
        $_[$k[--$j]] = _EU; //#27911
        var _EW = $_.colors; //#27913
        $_.palette = new Map; //#27913
        var _EX = $_.colors; //#27914
        var _EY = 64; //#27914
        if (64 > _EX) { //#27914
            var _ = _EX; //#27914
            _EX = _EY; //#27914
            _EY = _; //#27914
        } //#27914
        $_.palettelayout = $a(_EY); //#27914
        $_.i = 0; //#27915
        $_.j = 8; //#27915
        $forall($_.rvals, function() { //#27949
            $_.r = $k[--$j]; //#27917
            $forall($_.gvals, function() { //#27948
                $_.g = $k[--$j]; //#27919
                $forall($_.bvals, function() { //#27947
                    $_.b = $k[--$j]; //#27921
                    var _Ek = $strcpy($s(6), "000000"); //#27923
                    var _Em = $cvrs($s(6), (($_.r << 16) | ($_.g << 8)) | $_.b, 16); //#27923
                    $puti(_Ek, 6 - _Em.length, _Em); //#27923
                    $k[$j++] = _Ek; //#27925
                    $k[$j++] = false; //#27925
                    if ($eq(_Ek, "000000")) { //#27925
                        $_.ki = $_.i; //#27925
                        $k[$j - 1] = true; //#27925
                    } //#27925
                    var _Ep = $k[$j - 2]; //#27926
                    if ($eq(_Ep, "0000FF")) { //#27926
                        $_.bi = $_.i; //#27926
                        $k[$j - 1] = true; //#27926
                    } //#27926
                    var _Es = $k[$j - 2]; //#27927
                    if ($eq(_Es, "00FF00")) { //#27927
                        $_.gi = $_.i; //#27927
                        $k[$j - 1] = true; //#27927
                    } //#27927
                    var _Ev = $k[$j - 2]; //#27928
                    if ($eq(_Ev, "00FFFF")) { //#27928
                        $_.ci = $_.i; //#27928
                        $k[$j - 1] = true; //#27928
                    } //#27928
                    var _Ey = $k[$j - 2]; //#27929
                    if ($eq(_Ey, "FF0000")) { //#27929
                        $_.ri = $_.i; //#27929
                        $k[$j - 1] = true; //#27929
                    } //#27929
                    var _F1 = $k[$j - 2]; //#27930
                    if ($eq(_F1, "FF00FF")) { //#27930
                        $_.mi = $_.i; //#27930
                        $k[$j - 1] = true; //#27930
                    } //#27930
                    var _F4 = $k[$j - 2]; //#27931
                    if ($eq(_F4, "FFFF00")) { //#27931
                        $_.yi = $_.i; //#27931
                        $k[$j - 1] = true; //#27931
                    } //#27931
                    var _F7 = $k[$j - 2]; //#27932
                    if ($eq(_F7, "FFFFFF")) { //#27932
                        $_.wi = $_.i; //#27932
                        $k[$j - 1] = true; //#27932
                    } //#27932
                    if (!$k[--$j]) { //#27944
                        if (($_.colors <= 64) || ((($_.colors == 128) && (((($_.r == 0) || ($_.r == 73)) || ($_.r == 182)) || ($_.r == 255))) || ((($_.colors == 256) && (((($_.r == 0) || ($_.r == 73)) || ($_.r == 182)) || ($_.r == 255))) && (((($_.g == 0) || ($_.g == 73)) || ($_.g == 182)) || ($_.g == 255))))) { //#27943
                            $put($_.palettelayout, $_.j, $_.i); //#27941
                            $_.j = $_.j + 1; //#27942
                        } //#27942
                    } //#27942
                    $put($_.palette, $_.i, $k[--$j]); //#27945
                    $_.i = $_.i + 1; //#27946
                }); //#27946
            }); //#27946
        }); //#27946
        $puti($_.palettelayout, 0, $a([$_.ki, $_.bi, $_.gi, $_.ci, $_.ri, $_.mi, $_.yi, $_.wi])); //#27950
        $_.metacolorindex = $a([$_.ki, $_.bi, $_.gi, $_.ci, $_.ri, $_.mi, $_.yi, $_.wi]); //#27951
    } //#27951
    $k[$j++] = Infinity; //#27955
    for (var _Fs = 0, _Ft = $_.rows * $_.cols; _Fs < _Ft; _Fs++) { //#27955
        $k[$j++] = -1; //#27955
    } //#27955
    $_.pixs = $a(); //#27955
    $_.jmv = function() {
        var _Fw = $k[--$j]; //#27956
        var _Fx = $k[--$j]; //#27956
        $k[$j++] = $f(_Fx + (_Fw * $_.cols)); //#27956
    }; //#27956
    if (!$_.slave) { //#27986
        $_.fpat = $a([$a([1, 1, 1, 0, 0]), $a([1, 2, 2, 0, 0]), $a([1, 2, 1, 2, 1]), $a([0, 0, 2, 2, 1]), $a([0, 0, 1, 1, 1])]); //#27966
        $_.fmap = $a([$a([-1, $_.bi, $_.yi]), $a([-1, $_.yi, $_.bi]), $a([-1, $_.gi, $_.mi]), $a([-1, $_.mi, $_.gi])]); //#27972
    } else { //#27986
        $_.fpat = $a([$a([0, 0, 0, 0, 0]), $a([0, 2, 2, 0, 0]), $a([0, 2, 1, 2, 0]), $a([0, 0, 2, 2, 0]), $a([0, 0, 0, 0, 0])]); //#27980
        $_.fmap = $a([$a([-1, $_.ki, $_.wi]), $a([-1, $_.ki, $_.wi]), $a([-1, $_.ki, $_.wi]), $a([-1, $_.ki, $_.wi])]); //#27986
    } //#27986
    for (var _Gb = 0; _Gb <= 4; _Gb += 1) { //#27998
        $_.y = _Gb; //#27989
        for (var _Gc = 0; _Gc <= 4; _Gc += 1) { //#27997
            $_.x = _Gc; //#27991
            $_.fpb = $get($get($_.fpat, $_.y), $_.x); //#27992
            $k[$j++] = $_.pixs; //#27993
            $k[$j++] = $_.x + 1; //#27993
            $k[$j++] = $_.y + 1; //#27993
            $_.jmv(); //#27993
            var _Gp = $k[--$j]; //#27993
            $put($k[--$j], _Gp, $get($get($_.fmap, 0), $_.fpb)); //#27993
            $k[$j++] = $_.pixs; //#27994
            $k[$j++] = $_.x + 1; //#27994
            $k[$j++] = $f($_.rows - $_.y) - 2; //#27994
            $_.jmv(); //#27994
            var _Gz = $k[--$j]; //#27994
            $put($k[--$j], _Gz, $get($get($_.fmap, 1), $_.fpb)); //#27994
            $k[$j++] = $_.pixs; //#27995
            $k[$j++] = $f($_.x + $_.cols) - 6; //#27995
            $k[$j++] = $_.y + 1; //#27995
            $_.jmv(); //#27995
            var _H9 = $k[--$j]; //#27995
            $put($k[--$j], _H9, $get($get($_.fmap, 2), $_.fpb)); //#27995
            $k[$j++] = $_.pixs; //#27996
            $k[$j++] = $f($_.x + $_.cols) - 6; //#27996
            $k[$j++] = $f($_.rows - $_.y) - 2; //#27996
            $_.jmv(); //#27996
            var _HK = $k[--$j]; //#27996
            $put($k[--$j], _HK, $get($get($_.fmap, 3), $_.fpb)); //#27996
        } //#27996
    } //#27996
    $_.algnpat0 = $a([$a([$_.ki, $_.ki, -1]), $a([$_.ki, $_.wi, $_.ki]), $a([-1, $_.ki, $_.ki])]); //#28005
    $_.algnpat1 = $a([$a([-1, $_.ki, $_.ki]), $a([$_.ki, $_.wi, $_.ki]), $a([$_.ki, $_.ki, -1])]); //#28010
    $_.num = (~~$round($_.cols / 16)) - 1; //#28011
    $_.algnrpos = $a([3, 17]); //#28012
    if ($_.num > 0) { //#28015
        $k[$j++] = Infinity; //#28014
        for (var _Hn = 0, _Hm = $_.num; _Hn <= _Hm; _Hn += 1) { //#28014
            $k[$j++] = (~~(_Hn * (($_.cols - 7) / $_.num))) + 3; //#28014
        } //#28014
        $_.algnrpos = $a(); //#28014
    } //#28014
    $_.num = (~~$round($_.rows / 16)) - 1; //#28016
    $_.algncpos = $a([3, 17]); //#28017
    if ($_.num > 0) { //#28020
        $k[$j++] = Infinity; //#28019
        for (var _Hw = 0, _Hv = $_.num; _Hw <= _Hv; _Hw += 1) { //#28019
            $k[$j++] = (~~(_Hw * (($_.rows - 7) / $_.num))) + 3; //#28019
        } //#28019
        $_.algncpos = $a(); //#28019
    } //#28019
    $_.putalgnpat = function() {
        $_.pp = $k[--$j]; //#28022
        $_.py = $k[--$j]; //#28023
        $_.px = $k[--$j]; //#28024
        for (var _I3 = 0; _I3 <= 2; _I3 += 1) { //#28031
            $_.pb = _I3; //#28026
            for (var _I4 = 0; _I4 <= 2; _I4 += 1) { //#28030
                $_.pa = _I4; //#28028
                $k[$j++] = $_.pixs; //#28029
                $k[$j++] = $f($_.px + $_.pa); //#28029
                $k[$j++] = $f($_.py + $_.pb); //#28029
                $_.jmv(); //#28029
                var _IF = $k[--$j]; //#28029
                $put($k[--$j], _IF, $get($get($_.pp, $_.pb), $_.pa)); //#28029
            } //#28029
        } //#28029
    }; //#28029
    for (var _IJ = 0, _II = $_.algncpos.length - 1; _IJ <= _II; _IJ += 1) { //#28043
        $_.j = _IJ; //#28034
        $_.y = $get($_.algncpos, $_.j); //#28035
        for (var _IP = 0, _IO = $_.algnrpos.length - 1; _IP <= _IO; _IP += 1) { //#28042
            $_.i = _IP; //#28037
            $_.x = $get($_.algnrpos, $_.i); //#28038
            $k[$j++] = $_.pixs; //#28039
            $k[$j++] = $_.x; //#28039
            $k[$j++] = $_.y; //#28039
            $_.jmv(); //#28039
            var _IW = $k[--$j]; //#28039
            if ($get($k[--$j], _IW) == -1) { //#28041
                $k[$j++] = $_.x - 1; //#28040
                $k[$j++] = $_.y - 1; //#28040
                if ((($_.i + $_.j) % 2) == 0) { //#28040
                    $k[$j++] = $_.algnpat0; //#28040
                } else { //#28040
                    $k[$j++] = $_.algnpat1; //#28040
                } //#28040
                $_.putalgnpat(); //#28040
            } //#28040
        } //#28040
    } //#28040
    if (!$_.slave) { //#28095
        var _JO = $a([$a([6, 1]), $a([6, 2]), $a([6, 3]), $a([6, 4]), $a([6, 5]), $a([6, 6]), $a([5, 6]), $a([4, 6]), $a([3, 6]), $a([2, 6]), $a([1, 6]), $a([7, 1]), $a([7, 2]), $a([7, 3]), $a([7, 4]), $a([7, 5]), $a([7, 6]), $a([7, 7]), $a([6, 7]), $a([5, 7]), $a([4, 7]), $a([3, 7]), $a([2, 7]), $a([1, 7]), $a([8, 1]), $a([8, 2]), $a([8, 3]), $a([8, 4]), $a([8, 5]), $a([8, 6]), $a([8, 7]), $a([8, 8]), $a([7, 8]), $a([6, 8]), $a([5, 8]), $a([4, 8]), $a([3, 8]), $a([2, 8]), $a([1, 8]), $a([9, 1]), $a([9, 2]), $a([9, 3]), $a([9, 4]), $a([9, 5])]); //#28054
        for (var _JP = 0, _JQ = _JO.length; _JP < _JQ; _JP++) { //#28058
            $aload($get(_JO, _JP)); //#28056
            $_.y = $k[--$j]; //#28056
            $_.x = $k[--$j]; //#28056
            $k[$j++] = $a([$_.x, $_.y]); //#28057
            $k[$j++] = $a([-$_.x, $_.y]); //#28057
            $k[$j++] = $a([-$_.x, -$_.y]); //#28057
            $k[$j++] = $a([$_.x, -$_.y]); //#28057
        } //#28057
        $astore($a(176)); //#28059
        $_.metadatamap = $k[--$j]; //#28059
        $_.palettemap1 = $a([$a([4, 1]), $a([4, 2]), $a([5, 1]), $a([5, 2]), $a([2, 4]), $a([2, 5]), $a([1, 4]), $a([1, 5]), $a([-2, 1]), $a([-2, 2]), $a([-1, 1]), $a([-1, 2]), $a([-4, 4]), $a([-4, 5]), $a([-5, 4]), $a([-5, 5])]); //#28064
        $_.palettemap2 = $a([$a([-4, -5]), $a([-4, -4]), $a([-5, -5]), $a([-5, -4]), $a([-2, -2]), $a([-2, -1]), $a([-1, -2]), $a([-1, -1]), $a([2, -5]), $a([2, -4]), $a([1, -5]), $a([1, -4]), $a([4, -2]), $a([4, -1]), $a([5, -2]), $a([5, -1])]); //#28069
    } else { //#28095
        $k[$j++] = Infinity; //#28075
        for (var _KG = 1; _KG <= 19; _KG += 1) { //#28079
            $_.i = _KG; //#28077
            $k[$j++] = $a([0, $_.i]); //#28078
            $k[$j++] = $a([1, $_.i]); //#28078
        } //#28078
        for (var _KL = 5; _KL <= 12; _KL += 1) { //#28083
            $_.i = _KL; //#28081
            $k[$j++] = $a([2, $_.i]); //#28082
            $k[$j++] = $a([3, $_.i]); //#28082
        } //#28082
        $_.metadatamap = $a(); //#28082
        $k[$j++] = Infinity; //#28086
        for (var _KR = 5; _KR <= 12; _KR += 1) { //#28087
            var _KS = Infinity; //#28087
            var _KT = _KR; //#28087
            $k[$j++] = _KS; //#28087
            $k[$j++] = 4; //#28087
            $k[$j++] = _KT; //#28087
            var _KU = $a(); //#28087
            $k[$j++] = _KU; //#28087
        } //#28087
        for (var _KV = 12; _KV >= 5; _KV -= 1) { //#28088
            var _KW = Infinity; //#28088
            var _KX = _KV; //#28088
            $k[$j++] = _KW; //#28088
            $k[$j++] = 5; //#28088
            $k[$j++] = _KX; //#28088
            var _KY = $a(); //#28088
            $k[$j++] = _KY; //#28088
        } //#28088
        for (var _KZ = 5; _KZ <= 12; _KZ += 1) { //#28089
            var _Ka = Infinity; //#28089
            var _Kb = _KZ; //#28089
            $k[$j++] = _Ka; //#28089
            $k[$j++] = 6; //#28089
            $k[$j++] = _Kb; //#28089
            var _Kc = $a(); //#28089
            $k[$j++] = _Kc; //#28089
        } //#28089
        for (var _Kd = 12; _Kd >= 5; _Kd -= 1) { //#28090
            var _Ke = Infinity; //#28090
            var _Kf = _Kd; //#28090
            $k[$j++] = _Ke; //#28090
            $k[$j++] = 7; //#28090
            $k[$j++] = _Kf; //#28090
            var _Kg = $a(); //#28090
            $k[$j++] = _Kg; //#28090
        } //#28090
        $_.palettemap1 = $a(); //#28090
        $k[$j++] = Infinity; //#28093
        var _Ki = $_.palettemap1; //#28094
        for (var _Kj = 0, _Kk = _Ki.length; _Kj < _Kk; _Kj++) { //#28094
            var _Km = Infinity; //#28094
            var _Kn = $get(_Ki, _Kj); //#28094
            $k[$j++] = _Km; //#28094
            $aload(_Kn); //#28094
            var _Ko = $k[--$j]; //#28094
            var _Kp = $k[--$j]; //#28094
            $k[$j++] = -_Kp; //#28094
            $k[$j++] = -_Ko; //#28094
            var _Kq = $a(); //#28094
            $k[$j++] = _Kq; //#28094
        } //#28094
        $_.palettemap2 = $a(); //#28094
    } //#28095
    var _Ks = $_.metadatamap; //#28100
    for (var _Kt = 0, _Ku = _Ks.length; _Kt < _Ku; _Kt++) { //#28104
        var _Kv = $get(_Ks, _Kt); //#28104
        var _Kw = $get(_Kv, 0); //#28101
        $k[$j++] = _Kv; //#28101
        $k[$j++] = _Kw; //#28101
        if (_Kw < 0) { //#28101
            var _Ky = $k[--$j]; //#28101
            var _Kz = $k[$j - 1]; //#28101
            $put(_Kz, 0, $f(_Ky + $_.cols) - 1); //#28101
        } else { //#28101
            $j--; //#28101
        } //#28101
        var _L0 = $k[$j - 1]; //#28102
        var _L1 = $get(_L0, 1); //#28102
        $k[$j++] = _L1; //#28102
        if (_L1 < 0) { //#28102
            var _L3 = $k[--$j]; //#28102
            var _L4 = $k[$j - 1]; //#28102
            $put(_L4, 1, $f(_L3 + $_.rows) - 1); //#28102
        } else { //#28102
            $j--; //#28102
        } //#28102
        $j--; //#28103
    } //#28103
    var _L5 = $_.palettemap1; //#28105
    for (var _L6 = 0, _L7 = _L5.length; _L6 < _L7; _L6++) { //#28109
        var _L8 = $get(_L5, _L6); //#28109
        var _L9 = $get(_L8, 0); //#28106
        $k[$j++] = _L8; //#28106
        $k[$j++] = _L9; //#28106
        if (_L9 < 0) { //#28106
            var _LB = $k[--$j]; //#28106
            var _LC = $k[$j - 1]; //#28106
            $put(_LC, 0, $f(_LB + $_.cols) - 1); //#28106
        } else { //#28106
            $j--; //#28106
        } //#28106
        var _LD = $k[$j - 1]; //#28107
        var _LE = $get(_LD, 1); //#28107
        $k[$j++] = _LE; //#28107
        if (_LE < 0) { //#28107
            var _LG = $k[--$j]; //#28107
            var _LH = $k[$j - 1]; //#28107
            $put(_LH, 1, $f(_LG + $_.rows) - 1); //#28107
        } else { //#28107
            $j--; //#28107
        } //#28107
        $j--; //#28108
    } //#28108
    var _LI = $_.palettemap2; //#28110
    for (var _LJ = 0, _LK = _LI.length; _LJ < _LK; _LJ++) { //#28114
        var _LL = $get(_LI, _LJ); //#28114
        var _LM = $get(_LL, 0); //#28111
        $k[$j++] = _LL; //#28111
        $k[$j++] = _LM; //#28111
        if (_LM < 0) { //#28111
            var _LO = $k[--$j]; //#28111
            var _LP = $k[$j - 1]; //#28111
            $put(_LP, 0, $f(_LO + $_.cols) - 1); //#28111
        } else { //#28111
            $j--; //#28111
        } //#28111
        var _LQ = $k[$j - 1]; //#28112
        var _LR = $get(_LQ, 1); //#28112
        $k[$j++] = _LR; //#28112
        if (_LR < 0) { //#28112
            var _LT = $k[--$j]; //#28112
            var _LU = $k[$j - 1]; //#28112
            $put(_LU, 1, $f(_LT + $_.rows) - 1); //#28112
        } else { //#28112
            $j--; //#28112
        } //#28112
        $j--; //#28113
    } //#28113
    for (var _LX = 0, _LW = $_.nummetamodules - 1; _LX <= _LW; _LX += 1) { //#28119
        $k[$j++] = $_.pixs; //#28118
        $aload($get($_.metadatamap, _LX)); //#28118
        $_.jmv(); //#28118
        var _Lb = $k[--$j]; //#28118
        $put($k[--$j], _Lb, 0); //#28118
    } //#28118
    if (!$_.slave) { //#28132
        var _Le = $_.colors; //#28124
        var _Lf = 16; //#28124
        if (16 > _Le) { //#28124
            var _ = _Le; //#28124
            _Le = _Lf; //#28124
            _Lf = _; //#28124
        } //#28124
        for (var _Lh = 0, _Lg = _Lf - 1; _Lh <= _Lg; _Lh += 1) { //#28129
            $_.i = _Lh; //#28125
            var _Lk = $get($_.palettelayout, $_.i); //#28126
            $k[$j++] = _Lk; //#28127
            $k[$j++] = $_.pixs; //#28127
            $k[$j++] = _Lk; //#28127
            $aload($get($_.palettemap1, $_.i)); //#28127
            $_.jmv(); //#28127
            var _Lp = $k[--$j]; //#28127
            var _Lq = $k[--$j]; //#28127
            $put($k[--$j], _Lp, _Lq); //#28127
            var _Lt = $k[--$j]; //#28128
            $k[$j++] = $_.pixs; //#28128
            $k[$j++] = _Lt; //#28128
            $aload($get($_.palettemap2, $_.i)); //#28128
            $_.jmv(); //#28128
            var _Lx = $k[--$j]; //#28128
            var _Ly = $k[--$j]; //#28128
            $put($k[--$j], _Lx, _Ly); //#28128
        } //#28128
        $_.i = 16; //#28130
    } else { //#28132
        $_.i = 0; //#28132
    } //#28132
    $_.j = $_.nummetamodules; //#28136
    for (var _M4 = $_.i, _M3 = $_.palettelayout.length - 1; _M4 <= _M3; _M4 += 2) { //#28146
        $_.i = _M4; //#28138
        var _M7 = $get($_.palettelayout, $_.i); //#28139
        $k[$j++] = _M7; //#28140
        $k[$j++] = $_.pixs; //#28140
        $k[$j++] = _M7; //#28140
        $aload($get($_.metadatamap, $_.j)); //#28140
        $_.jmv(); //#28140
        var _MC = $k[--$j]; //#28140
        var _MD = $k[--$j]; //#28140
        $put($k[--$j], _MC, _MD); //#28140
        var _MG = $k[--$j]; //#28141
        $k[$j++] = $_.pixs; //#28141
        $k[$j++] = _MG; //#28141
        $aload($get($_.metadatamap, $_.j + 2)); //#28141
        $_.jmv(); //#28141
        var _MK = $k[--$j]; //#28141
        var _ML = $k[--$j]; //#28141
        $put($k[--$j], _MK, _ML); //#28141
        var _MP = $get($_.palettelayout, $_.i + 1); //#28142
        $k[$j++] = _MP; //#28143
        $k[$j++] = $_.pixs; //#28143
        $k[$j++] = _MP; //#28143
        $aload($get($_.metadatamap, $_.j + 1)); //#28143
        $_.jmv(); //#28143
        var _MU = $k[--$j]; //#28143
        var _MV = $k[--$j]; //#28143
        $put($k[--$j], _MU, _MV); //#28143
        var _MY = $k[--$j]; //#28144
        $k[$j++] = $_.pixs; //#28144
        $k[$j++] = _MY; //#28144
        $aload($get($_.metadatamap, $_.j + 3)); //#28144
        $_.jmv(); //#28144
        var _Mc = $k[--$j]; //#28144
        var _Md = $k[--$j]; //#28144
        $put($k[--$j], _Mc, _Md); //#28144
        $_.j = $_.j + 4; //#28145
    } //#28145
    var _N5 = $a([function() {
        var _Mg = $k[--$j]; //#28150
        var _Mh = $k[--$j]; //#28150
        $k[$j++] = $f(_Mh + _Mg) % $_.colors; //#28150
    }, function() {
        $j--; //#28151
        var _Mk = $k[--$j]; //#28151
        $k[$j++] = _Mk % $_.colors; //#28151
    }, function() {
        var _Ml = $k[--$j]; //#28152
        $k[$j - 1] = _Ml; //#28152
        var _Mo = $k[--$j]; //#28152
        $k[$j++] = _Mo % $_.colors; //#28152
    }, function() {
        var _Mp = $k[--$j]; //#28153
        var _Mq = $k[--$j]; //#28153
        $k[$j++] = ((~~(_Mp / 3)) + (~~(_Mq / 2))) % $_.colors; //#28153
    }, function() {
        var _Ms = $k[--$j]; //#28154
        var _Mt = $k[--$j]; //#28154
        $k[$j++] = ((~~(_Ms / 2)) + (~~(_Mt / 3))) % $_.colors; //#28154
    }, function() {
        var _Mv = $k[--$j]; //#28155
        var _Mx = $f($k[--$j] + _Mv); //#28155
        $k[$j++] = ((~~(_Mx / 2)) + (~~(_Mx / 3))) % $_.colors; //#28155
    }, function() {
        var _Mz = $k[--$j]; //#28156
        var _N0 = $k[--$j]; //#28156
        $k[$j++] = $f(_Mz * (_N0 * _N0) % 7 + (_Mz + _N0 * _N0) * 2 % 19) % $_.colors; //#28156
    }, function() {
        var _N2 = $k[--$j]; //#28157
        var _N3 = $k[--$j]; //#28157
        $k[$j++] = $f(_N3 * (_N2 * _N2) % 5 + (_N2 * _N2 + _N3 * 2) % 13) % $_.colors; //#28157
    }]); //#28157
    $_.maskfuncs = _N5; //#28158
    if ($_.mask != -1) { //#28162
        $_.maskfuncs = $a([$get($_.maskfuncs, $_.mask)]); //#28160
        $_.bestmaskval = $_.mask; //#28161
    } //#28161
    $_.masks = $a($_.maskfuncs.length); //#28163
    for (var _NG = 0, _NF = $_.masks.length - 1; _NG <= _NF; _NG += 1) { //#28176
        $_.m = _NG; //#28165
        $_.mask = $a($_.rows * $_.cols); //#28166
        for (var _NM = 0, _NL = $_.rows - 1; _NM <= _NL; _NM += 1) { //#28174
            $_.j = _NM; //#28168
            for (var _NP = 0, _NO = $_.cols - 1; _NP <= _NO; _NP += 1) { //#28173
                $_.i = _NP; //#28170
                $k[$j++] = $_.pixs; //#28171
                $k[$j++] = $_.i; //#28171
                $k[$j++] = $_.j; //#28171
                $_.jmv(); //#28171
                var _NT = $k[--$j]; //#28171
                if ($get($k[--$j], _NT) == -1) { //#28171
                    $k[$j++] = $_.i; //#28171
                    $k[$j++] = $_.j; //#28171
                    if ($get($_.maskfuncs, $_.m)() === true) {
                        break;
                    } //#28171
                } else { //#28171
                    $k[$j++] = 0; //#28171
                } //#28171
                $k[$j++] = $_.mask; //#28172
                $k[$j++] = $_.i; //#28172
                $k[$j++] = $_.j; //#28172
                $_.jmv(); //#28172
                var _Ne = $k[$j - 3]; //#28172
                var _Nf = $k[$j - 1]; //#28172
                $put($k[$j - 2], _Nf, _Ne); //#28172
                $j -= 3; //#28172
            } //#28172
        } //#28172
        $put($_.masks, $_.m, $_.mask); //#28175
    } //#28175
    $_.posx = 0; //#28179
    $_.posy = 0; //#28179
    $_.i = 0; //#28180
    for (;;) { //#28190
        if ($_.posx == $_.cols) { //#28182
            break; //#28182
        } //#28182
        $k[$j++] = $_.pixs; //#28183
        $k[$j++] = $_.posx; //#28183
        $k[$j++] = $_.posy; //#28183
        $_.jmv(); //#28183
        var _Np = $k[--$j]; //#28183
        if ($get($k[--$j], _Np) == -1) { //#28187
            var _Nv = $geti($_.bits, $_.i, $_.databpm); //#28184
            $k[$j++] = 0; //#28184
            for (var _Nw = 0, _Nx = _Nv.length; _Nw < _Nx; _Nw++) { //#28184
                var _Nz = $k[--$j]; //#28184
                $k[$j++] = ($f(_Nz + ($get(_Nv, _Nw) - 48))) * 2; //#28184
            } //#28184
            var _O0 = $k[--$j]; //#28184
            $k[$j++] = ~~(_O0 / 2); //#28185
            $k[$j++] = $_.pixs; //#28185
            $k[$j++] = $_.posx; //#28185
            $k[$j++] = $_.posy; //#28185
            $_.jmv(); //#28185
            var _O4 = $k[$j - 3]; //#28185
            var _O5 = $k[$j - 1]; //#28185
            $put($k[$j - 2], _O5, _O4); //#28185
            $j -= 3; //#28185
            $_.i = $_.i + $_.databpm; //#28186
        } //#28186
        $_.posy = $_.posy + 1; //#28188
        if ($_.posy == $_.rows) { //#28189
            $_.posy = 0; //#28189
            $_.posx = $_.posx + 1; //#28189
        } //#28189
    } //#28189
    $_.evalrle = function() {
        $_.scrle = $k[--$j]; //#28194
        $_.scr1 = 0; //#28195
        $_.scr3 = 0; //#28195
        for (var _OG = 0, _OF = $_.scrle.length - 2; _OG <= _OF; _OG += 2) { //#28217
            $_.j = _OG; //#28197
            if ($get($_.scrle, $_.j + 1) != -1) { //#28216
                var _OM = $get($_.scrle, $_.j); //#28200
                $k[$j++] = _OM; //#28200
                if (_OM >= 5) { //#28200
                    $_.scr1 = $f(($k[--$j] - 2) + $_.scr1); //#28200
                } else { //#28200
                    $j--; //#28200
                } //#28200
                if (($_.j >= 4) && ($_.j <= ($_.scrle.length - 5))) { //#28215
                    var _OU = $geti($_.scrle, $_.j - 4, 10); //#28203
                    $k[$j++] = _OU; //#28204
                    for (var _OV = 0, _OW = _OU.length; _OV < _OW; _OV++) { //#28204
                        $k[$j++] = $get(_OU, _OV) == 1; //#28204
                    } //#28204
                    $j--; //#28204
                    for (var _OY = 0; _OY < 4; _OY++) { //#28204
                        var _OZ = $k[--$j]; //#28204
                        $k[$j - 1] = _OZ; //#28204
                        var _Ob = $k[--$j]; //#28204
                        var _Oc = $k[--$j]; //#28204
                        $k[$j++] = $an(_Oc, _Ob); //#28204
                    } //#28204
                    if ($k[--$j]) { //#28214
                        $k[$j++] = Infinity; //#28205
                        var _Oe = $k[--$j]; //#28205
                        var _Of = $k[--$j]; //#28205
                        $k[$j++] = _Oe; //#28205
                        $aload(_Of); //#28205
                        var _Og = $k[$j - 1]; //#28206
                        var _Oi = $k[$j - 3]; //#28206
                        var _Ok = $k[$j - 5]; //#28206
                        var _Om = $k[$j - 7]; //#28206
                        var _Oo = $k[$j - 9]; //#28206
                        if (($eq(_Oo, _Ok) && $eq(_Oo, _Og)) && $eq(_Om, _Oi)) { //#28212
                            var _Op = $k[--$j]; //#28208
                            var _Oq = $k[--$j]; //#28208
                            var _Or = $k[--$j]; //#28208
                            $_.c4 = _Or; //#28208
                            $_.c5 = _Op; //#28208
                            $k[$j++] = _Or; //#28211
                            $k[$j++] = _Oq; //#28211
                            if ((($_.c4 == $_.bi) && ($_.c5 == $_.yi)) || ((($_.c4 == $_.yi) && ($_.c5 == $_.bi)) || ((($_.c4 == $_.gi) && ($_.c5 == $_.mi)) || (($_.c4 == $_.mi) && ($_.c5 == $_.gi))))) { //#28211
                                $_.scr3 = $_.scr3 + 100; //#28211
                            } //#28211
                        } //#28211
                        $cleartomark(); //#28213
                    } else { //#28214
                        $j--; //#28214
                    } //#28214
                } //#28214
            } //#28214
        } //#28214
        $k[$j++] = $_.scr1; //#28218
        $k[$j++] = $_.scr3; //#28218
    }; //#28218
    $_.evalmask = function() {
        $_.sym = $k[--$j]; //#28222
        $_.n1 = 0; //#28224
        $_.n2 = 0; //#28224
        $_.n3 = 0; //#28224
        var _PC = $_.rows; //#28225
        var _PD = $_.cols; //#28225
        if (_PC < _PD) { //#28225
            var _ = _PD; //#28225
            _PD = _PC; //#28225
            _PC = _; //#28225
        } //#28225
        $_.rle = $a((_PC * 2) + 2); //#28225
        $_.lastpairs = $a($_.cols); //#28226
        $_.thispairs = $a($_.cols); //#28227
        for (var _PL = 0, _PK = $_.cols - 1; _PL <= _PK; _PL += 1) { //#28239
            $_.i = _PL; //#28231
            $k[$j++] = Infinity; //#28232
            $k[$j++] = 0; //#28235
            $k[$j++] = -1; //#28235
            for (var _PR = $_.i, _PS = $_.cols, _PQ = ($_.rows * $_.cols) - 1; _PS < 0 ? _PR >= _PQ : _PR <= _PQ; _PR += _PS) { //#28235
                var _PU = $get($_.sym, _PR); //#28234
                var _PV = $k[$j - 1]; //#28234
                $k[$j++] = _PU; //#28234
                if ($eq(_PV, _PU)) { //#28234
                    $j--; //#28234
                    var _PW = $k[--$j]; //#28234
                    var _PX = $k[--$j]; //#28234
                    $k[$j++] = _PX + 1; //#28234
                    $k[$j++] = _PW; //#28234
                } else { //#28234
                    var _PY = $k[--$j]; //#28234
                    $k[$j++] = 1; //#28234
                    $k[$j++] = _PY; //#28234
                } //#28234
            } //#28234
            var _Pa = $counttomark() + 2; //#28236
            $astore($geti($_.rle, 0, _Pa - 2)); //#28236
            $_.evalrle(); //#28237
            $_.n3 = $f($k[--$j] + $_.n3); //#28237
            $_.n1 = $f($k[--$j] + $_.n1); //#28237
            $j--; //#28238
        } //#28238
        for (var _Pi = 0, _Ph = $_.rows - 1; _Pi <= _Ph; _Pi += 1) { //#28266
            $_.i = _Pi; //#28242
            $_.symrow = $geti($_.sym, $_.i * $_.cols, $_.cols); //#28245
            $k[$j++] = Infinity; //#28246
            var _Po = $_.symrow; //#28247
            $k[$j++] = 0; //#28249
            $k[$j++] = -1; //#28249
            for (var _Pp = 0, _Pq = _Po.length; _Pp < _Pq; _Pp++) { //#28249
                var _Pr = $get(_Po, _Pp); //#28249
                var _Ps = $k[$j - 1]; //#28248
                $k[$j++] = _Pr; //#28248
                if ($eq(_Ps, _Pr)) { //#28248
                    $j--; //#28248
                    var _Pt = $k[--$j]; //#28248
                    var _Pu = $k[--$j]; //#28248
                    $k[$j++] = _Pu + 1; //#28248
                    $k[$j++] = _Pt; //#28248
                } else { //#28248
                    var _Pv = $k[--$j]; //#28248
                    $k[$j++] = 1; //#28248
                    $k[$j++] = _Pv; //#28248
                } //#28248
            } //#28248
            var _Px = $counttomark() + 2; //#28250
            $astore($geti($_.rle, 0, _Px - 2)); //#28250
            $_.evalrle(); //#28251
            $_.n3 = $f($k[--$j] + $_.n3); //#28251
            $_.n1 = $f($k[--$j] + $_.n1); //#28251
            $j--; //#28252
            var _Q3 = $_.thispairs; //#28255
            $_.thispairs = $_.lastpairs; //#28255
            $_.lastpairs = _Q3; //#28255
            var _Q5 = $_.symrow; //#28256
            $k[$j++] = -1; //#28256
            for (var _Q6 = 0, _Q7 = _Q5.length; _Q6 < _Q7; _Q6++) { //#28256
                var _Q8 = $get(_Q5, _Q6); //#28256
                var _Q9 = $k[--$j]; //#28256
                $k[$j++] = _Q8; //#28256
                $k[$j++] = _Q9; //#28256
                if ($ne(_Q8, _Q9)) { //#28256
                    $j--; //#28256
                    var _QA = $k[--$j]; //#28256
                    $k[$j++] = -1; //#28256
                    $k[$j++] = _QA; //#28256
                } //#28256
            } //#28256
            $j--; //#28257
            $astore($_.thispairs); //#28258
            $j--; //#28258
            if ($_.i > 0) { //#28265
                $k[$j++] = Infinity; //#28260
                $aload($_.lastpairs); //#28261
                $aload($_.thispairs); //#28261
                $k[$j++] = $_.n2; //#28262
                for (var _QH = 0, _QI = $_.cols; _QH < _QI; _QH++) { //#28262
                    var _QJ = $k[--$j]; //#28262
                    var _QK = $k[--$j]; //#28262
                    $k[$j++] = _QJ; //#28262
                    $k[$j++] = _QK; //#28262
                    if (_QK != -1) { //#28262
                        var _QM = $k[$j - 1 - ($_.cols + 1)]; //#28262
                        if ($eq($k[--$j], _QM)) { //#28262
                            var _QO = $k[--$j]; //#28262
                            $k[$j++] = _QO + 3; //#28262
                        } //#28262
                    } else { //#28262
                        $j--; //#28262
                    } //#28262
                } //#28262
                $_.n2 = $k[--$j]; //#28263
                $cleartomark(); //#28264
            } //#28264
        } //#28264
        $k[$j++] = $f($_.n1 + $_.n2 + $_.n3); //#28268
    }; //#28268
    $_.bestscore = 999999999; //#28272
    for (var _QV = 0, _QU = $_.masks.length - 1; _QV <= _QU; _QV += 1) { //#28290
        $_.m = _QV; //#28274
        $_.masksym = $a($_.rows * $_.cols); //#28275
        for (var _Qc = 0, _Qb = ($_.rows * $_.cols) - 1; _Qc <= _Qb; _Qc += 1) { //#28279
            $_.i = _Qc; //#28277
            $put($_.masksym, $_.i, $xo($get($_.pixs, $_.i), $get($get($_.masks, $_.m), $_.i))); //#28278
        } //#28278
        if ($_.masks.length != 1) { //#28288
            $k[$j++] = $_.masksym; //#28281
            $_.evalmask(); //#28281
            $_.score = $k[--$j]; //#28281
            if ($_.score < $_.bestscore) { //#28286
                $_.bestsym = $_.masksym; //#28283
                $_.bestmaskval = $_.m; //#28284
                $_.bestscore = $_.score; //#28285
            } //#28285
        } else { //#28288
            $_.bestsym = $_.masksym; //#28288
        } //#28288
    } //#28288
    $_.pixs = $_.bestsym; //#28291
    $_.metamask = $_.bestmaskval; //#28292
    $_.addtometapart = function() {
        var _Qy = $k[--$j]; //#28296
        $puti($_.metapart, $_.p, _Qy); //#28296
        $_.p = _Qy.length + $_.p; //#28297
    }; //#28297
    $_.addtometabits = function() {
        var _R2 = $k[--$j]; //#28301
        $puti($_.metabits, $_.q, _R2); //#28301
        $_.q = _R2.length + $_.q; //#28302
    }; //#28302
    $_.metapart = $s(40); //#28305
    $_.metabits = $s($_.nummetabits); //#28306
    $_.p = 0; //#28307
    $_.q = 0; //#28307
    if (!$_.slave) { //#28362
        $k[$j++] = (~~($round($log($_.colors) / $log(2)))) - 1; //#28312
        $k[$j++] = 3; //#28312
        $_.tofixedbits(); //#28312
        $_.addtometapart(); //#28312
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#28313
        $k[$j++] = 2; //#28313
        $k[$j++] = -1; //#28313
        $_.ldpc(); //#28313
        $_.addtometabits(); //#28313
        $_.p = 0; //#28313
        $k[$j++] = $_.metass; //#28316
        $k[$j++] = 1; //#28316
        $_.tofixedbits(); //#28316
        $_.addtometapart(); //#28316
        $k[$j++] = $_.metavf; //#28317
        $k[$j++] = 2; //#28317
        $_.tofixedbits(); //#28317
        $_.addtometapart(); //#28317
        $k[$j++] = $_.metamask; //#28318
        $k[$j++] = 3; //#28318
        $_.tofixedbits(); //#28318
        $_.addtometapart(); //#28318
        if ($_.hasslaves) { //#28319
            $k[$j++] = "1"; //#28319
        } else { //#28319
            $k[$j++] = "0"; //#28319
        } //#28319
        $_.addtometapart(); //#28319
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#28320
        $k[$j++] = 2; //#28320
        $k[$j++] = -1; //#28320
        $_.ldpc(); //#28320
        $_.addtometabits(); //#28320
        $_.p = 0; //#28320
        if ($_.metass == 0) { //#28330
            $k[$j++] = ($f((~~(($_.cols - 17) / 4)) - $get($a([0, 4, 8, 16]), $_.metavf))) - 1; //#28325
            $k[$j++] = $_.metavlen; //#28325
            $_.tofixedbits(); //#28325
            $_.addtometapart(); //#28325
        } else { //#28330
            $k[$j++] = (~~(($_.cols - 17) / 4)) - 1; //#28328
            $k[$j++] = ~~($_.metavlen / 2); //#28328
            $_.tofixedbits(); //#28328
            $_.addtometapart(); //#28328
            $k[$j++] = (~~(($_.rows - 17) / 4)) - 1; //#28330
            $k[$j++] = ~~($_.metavlen / 2); //#28330
            $_.tofixedbits(); //#28330
            $_.addtometapart(); //#28330
        } //#28330
        $k[$j++] = $_.datawc - 3; //#28332
        $k[$j++] = ~~($_.metaelen / 2); //#28332
        $_.tofixedbits(); //#28332
        $_.addtometapart(); //#28332
        $k[$j++] = $_.datawr - 4; //#28333
        $k[$j++] = ~~($_.metaelen / 2); //#28333
        $_.tofixedbits(); //#28333
        $_.addtometapart(); //#28333
        if ($_.hasslaves) { //#28336
            $k[$j++] = 0; //#28335
            $k[$j++] = 4; //#28335
            $_.tofixedbits(); //#28335
            $_.addtometapart(); //#28335
        } //#28335
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#28337
        $k[$j++] = 2; //#28337
        $k[$j++] = -1; //#28337
        $_.ldpc(); //#28337
        $_.addtometabits(); //#28337
        $_.p = 0; //#28337
    } else { //#28362
        var _Re = $_.sameshape ? 0 : 1; //#28342
        $k[$j++] = _Re; //#28342
        $k[$j++] = 1; //#28342
        $_.tofixedbits(); //#28342
        $_.addtometapart(); //#28342
        var _Rg = $_.sameecc ? 0 : 1; //#28343
        $k[$j++] = _Rg; //#28343
        $k[$j++] = 1; //#28343
        $_.tofixedbits(); //#28343
        $_.addtometapart(); //#28343
        var _Ri = $_.hasslaves ? 1 : 0; //#28344
        $k[$j++] = _Ri; //#28344
        $k[$j++] = 1; //#28344
        $_.tofixedbits(); //#28344
        $_.addtometapart(); //#28344
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#28345
        $k[$j++] = 2; //#28345
        $k[$j++] = -1; //#28345
        $_.ldpc(); //#28345
        $_.addtometabits(); //#28345
        $_.p = 0; //#28345
        if (!$_.sameshape) { //#28351
            $k[$j++] = (~~(($_.diffside - 17) / 4)) - 1; //#28350
            $k[$j++] = 5; //#28350
            $_.tofixedbits(); //#28350
            $_.addtometapart(); //#28350
        } //#28350
        if ($_.hasslaves) { //#28354
            $k[$j++] = 0; //#28353
            $k[$j++] = 3; //#28353
            $_.tofixedbits(); //#28353
            $_.addtometapart(); //#28353
        } //#28353
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#28355
        $k[$j++] = 2; //#28355
        $k[$j++] = -1; //#28355
        $_.ldpc(); //#28355
        $_.addtometabits(); //#28355
        $_.p = 0; //#28355
        if (!$_.sameecc) { //#28361
            $k[$j++] = $_.datawc - 3; //#28359
            $k[$j++] = ~~($_.metaelen / 2); //#28359
            $_.tofixedbits(); //#28359
            $_.addtometapart(); //#28359
            $k[$j++] = $_.datawr - 4; //#28360
            $k[$j++] = ~~($_.metaelen / 2); //#28360
            $_.tofixedbits(); //#28360
            $_.addtometapart(); //#28360
        } //#28360
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#28362
        $k[$j++] = 2; //#28362
        $k[$j++] = -1; //#28362
        $_.ldpc(); //#28362
        $_.addtometabits(); //#28362
        $_.p = 0; //#28362
    } //#28362
    for (var _S3 = $_.q, _S2 = $_.nummetabits - 1; _S3 <= _S2; _S3 += 1) { //#28367
        $put($_.metabits, _S3, 48); //#28366
    } //#28366
    $_.i = 0; //#28370
    $_.j = 0; //#28370
    if (!$_.slave) { //#28378
        var _S8 = $geti($_.metabits, $_.i, 6); //#28372
        for (var _S9 = 0, _SA = _S8.length; _S9 < _SA; _S9++) { //#28376
            $k[$j++] = $get(_S8, _S9); //#28373
            if ($_.colors == 4) { //#28373
                $k[$j++] = $a([$_.bi, $_.yi]); //#28373
            } else { //#28373
                $k[$j++] = $a([$_.ki, $_.wi]); //#28373
            } //#28373
            var _SJ = $k[--$j]; //#28373
            var _SL = $get(_SJ, $k[--$j] - 48); //#28373
            $k[$j++] = _SL; //#28374
            $k[$j++] = $_.pixs; //#28374
            $aload($get($_.metadatamap, $_.j)); //#28374
            $_.jmv(); //#28374
            var _SQ = $k[$j - 3]; //#28374
            var _SR = $k[$j - 1]; //#28374
            $put($k[$j - 2], _SR, _SQ); //#28374
            $j -= 3; //#28374
            $_.j = $_.j + 1; //#28375
        } //#28375
        $_.i = $_.i + 6; //#28377
    } //#28377
    for (var _SY = 0, _SZ = ~~($f($_.nummetabits - $_.i) / $_.metabpm); _SY < _SZ; _SY++) { //#28385
        var _Sd = $geti($_.metabits, $_.i, $_.metabpm); //#28380
        $k[$j++] = 0; //#28380
        for (var _Se = 0, _Sf = _Sd.length; _Se < _Sf; _Se++) { //#28380
            var _Sh = $k[--$j]; //#28380
            $k[$j++] = ($f(_Sh + ($get(_Sd, _Se) - 48))) * 2; //#28380
        } //#28380
        var _Sk = $get($_.metacolorindex, ~~($k[--$j] / 2)); //#28381
        $k[$j++] = _Sk; //#28382
        $k[$j++] = $_.pixs; //#28382
        $aload($get($_.metadatamap, $_.j)); //#28382
        $_.jmv(); //#28382
        var _Sp = $k[$j - 3]; //#28382
        var _Sq = $k[$j - 1]; //#28382
        $put($k[$j - 2], _Sq, _Sp); //#28382
        $j -= 3; //#28382
        $_.i = $f($_.i + $_.metabpm); //#28383
        $_.j = $_.j + 1; //#28384
    } //#28384
    var _T2 = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.cols],
        ["pixy", $_.rows],
        ["colormap", $_.palette],
        ["height", ($_.rows * 2) / 72],
        ["width", ($_.cols * 2) / 72],
        ["borderleft", 0],
        ["borderright", 0],
        ["bordertop", 0],
        ["borderbottom", 0],
        ["opt", $_.options]
    ]); //#28399
    $k[$j++] = _T2; //#28402
    if (!$_.dontdraw) { //#28402
        bwipp_renmatrix(); //#28402
    } //#28402
    $_ = $__; //#28404
} //bwipp_jabcode
function bwipp_gs1_cc() {
    var $__ = $_; //#28437
    $_ = Object.assign({}, $_); //#28437
    $_.parse = false; //#28440
    $_.dontlint = false; //#28441
    $_.lintreqs = false; //#28442
    $_.dontdraw = false; //#28443
    $_.ccversion = "a"; //#28444
    $_.cccolumns = -1; //#28445
    $_.lintype = ""; //#28446
    $_.linwidth = -1; //#28447
    $k[$j++] = $_; //#28449
    bwipp_processoptions(); //#28449
    $_.options = $k[--$j]; //#28449
    $_.barcode = $k[--$j]; //#28450
    if (($ne($_.ccversion, "a") && $ne($_.ccversion, "b")) && $ne($_.ccversion, "c")) { //#28456
        $k[$j++] = 'bwipp.gs1ccBadCCversion#28455'; //#28455
        $k[$j++] = "ccversion must be a, b or c"; //#28455
        bwipp_raiseerror(); //#28455
    } //#28455
    if ($_.cccolumns > 30) { //#28460
        $k[$j++] = 'bwipp.gs1ccColumnsTooBig#28459'; //#28459
        $k[$j++] = "The maximum number of composite component columns is 30"; //#28459
        bwipp_raiseerror(); //#28459
    } //#28459
    var _6 = new Map([
        ["ean13", 4],
        ["upca", 4],
        ["ean8", 3],
        ["upce", 2],
        ["gs1-128", 4],
        ["databaromni", 4],
        ["databarstacked", 2],
        ["databarstackedomni", 2],
        ["databartruncated", 4],
        ["databarlimited", 3],
        ["databarexpanded", 4],
        ["databarexpandedstacked", 4]
    ]); //#28475
    $_.lintypecccolumns = _6; //#28476
    if ($_.lintype.length != 0) { //#28483
        var _B = $get($_.lintypecccolumns, $_.lintype) !== undefined; //#28480
        if (!_B) { //#28482
            $k[$j++] = 'bwipp.gs1ccBadLinType#28481'; //#28481
            $k[$j++] = "The lintype is not recognised"; //#28481
            bwipp_raiseerror(); //#28481
        } //#28481
    } //#28481
    if ($_.cccolumns == -1) { //#28499
        if ($eq($_.lintype, "gs1-128") && $eq($_.ccversion, "c")) { //#28496
            if ($_.linwidth < 0) { //#28490
                $k[$j++] = 'bwipp.gs1ccMissingLinWidth#28489'; //#28489
                $k[$j++] = "linwidth must be set for a GS1-128 with a CC-C composite component"; //#28489
                bwipp_raiseerror(); //#28489
            } //#28489
            if ($_.linwidth < 68) { //#28493
                $k[$j++] = 'bwipp.gs1ccMinimumLinWidth#28492'; //#28492
                $k[$j++] = "Minimum linwidth for a GS1-128 with a CC-C composite component is 68"; //#28492
                bwipp_raiseerror(); //#28492
            } //#28492
            if ($_.linwidth == 68) { //#28494
                $k[$j++] = 1; //#28494
            } else { //#28494
                $k[$j++] = ~~(($_.linwidth - 52) / 17); //#28494
            } //#28494
        } else { //#28496
            if ($_.lintype.length != 0) { //#28496
                $k[$j++] = $get($_.lintypecccolumns, $_.lintype); //#28496
            } else { //#28496
                $k[$j++] = 2; //#28496
            } //#28496
        } //#28496
        $_.cccolumns = $k[--$j]; //#28498
    } //#28498
    $k[$j++] = $_.barcode; //#28501
    $k[$j++] = 'ai'; //#28501
    bwipp_gs1process(); //#28501
    $_.fncs = $k[--$j]; //#28502
    $_.vals = $k[--$j]; //#28503
    $_.ais = $k[--$j]; //#28504
    $_.isupper = function() {
        var _S = $k[--$j]; //#28507
        $k[$j++] = (_S >= 65) && (_S <= 90); //#28507
    }; //#28507
    $_.isnum0 = function() {
        var _T = $k[--$j]; //#28508
        $k[$j++] = (_T >= 48) && (_T <= 57); //#28508
    }; //#28508
    $_.isnum1 = function() {
        var _U = $k[--$j]; //#28509
        $k[$j++] = (_U >= 49) && (_U <= 57); //#28509
    }; //#28509
    for (;;) { //#28555
        if ($_.ais.length >= 1) { //#28517
            if (($eq($get($_.ais, 0), "10") || $eq($get($_.ais, 0), "11")) || $eq($get($_.ais, 0), "17")) { //#28516
                $k[$j++] = -1; //#28515
                $k[$j++] = "10"; //#28515
                break; //#28515
            } //#28515
        } //#28515
        if ($_.ais.length >= 1) { //#28550
            if ($eq($get($_.ais, 0), "90")) { //#28549
                $_.v = $get($_.vals, 0); //#28522
                if ($_.v.length >= 1) { //#28527
                    $k[$j++] = $get($_.v, 0); //#28524
                    $_.isupper(); //#28524
                    if ($k[--$j]) { //#28526
                        $k[$j++] = 0; //#28525
                        $k[$j++] = "11"; //#28525
                        break; //#28525
                    } //#28525
                } //#28525
                if ($_.v.length >= 2) { //#28533
                    $k[$j++] = $get($_.v, 0); //#28529
                    $_.isnum1(); //#28529
                    $k[$j++] = $get($_.v, 1); //#28530
                    $_.isupper(); //#28530
                    var _q = $k[--$j]; //#28530
                    if ($k[--$j] && _q) { //#28532
                        $k[$j++] = 1; //#28531
                        $k[$j++] = "11"; //#28531
                        break; //#28531
                    } //#28531
                } //#28531
                if ($_.v.length >= 3) { //#28540
                    $k[$j++] = $get($_.v, 0); //#28535
                    $_.isnum1(); //#28535
                    $k[$j++] = $get($_.v, 1); //#28536
                    $_.isnum0(); //#28536
                    var _x = $k[--$j]; //#28536
                    var _y = $k[--$j]; //#28536
                    $k[$j++] = $an(_y, _x); //#28537
                    $k[$j++] = $get($_.v, 2); //#28537
                    $_.isupper(); //#28537
                    var _11 = $k[--$j]; //#28537
                    if ($k[--$j] && _11) { //#28539
                        $k[$j++] = 2; //#28538
                        $k[$j++] = "11"; //#28538
                        break; //#28538
                    } //#28538
                } //#28538
                if ($_.v.length >= 4) { //#28548
                    $k[$j++] = $get($_.v, 0); //#28542
                    $_.isnum1(); //#28542
                    $k[$j++] = $get($_.v, 1); //#28543
                    $_.isnum0(); //#28543
                    var _18 = $k[--$j]; //#28543
                    var _19 = $k[--$j]; //#28543
                    $k[$j++] = $an(_19, _18); //#28544
                    $k[$j++] = $get($_.v, 2); //#28544
                    $_.isnum0(); //#28544
                    var _1C = $k[--$j]; //#28544
                    var _1D = $k[--$j]; //#28544
                    $k[$j++] = $an(_1D, _1C); //#28545
                    $k[$j++] = $get($_.v, 3); //#28545
                    $_.isupper(); //#28545
                    var _1G = $k[--$j]; //#28545
                    if ($k[--$j] && _1G) { //#28547
                        $k[$j++] = 3; //#28546
                        $k[$j++] = "11"; //#28546
                        break; //#28546
                    } //#28546
                } //#28546
            } //#28546
        } //#28546
        $k[$j++] = -1; //#28553
        $k[$j++] = "0"; //#28553
        break; //#28553
    } //#28553
    $_.method = $k[--$j]; //#28556
    $_.npre = $k[--$j]; //#28557
    $_.tobin = function() {
        var _1L = $s($k[--$j]); //#28560
        $k[$j++] = _1L; //#28560
        for (var _1N = 0, _1M = _1L.length - 1; _1N <= _1M; _1N += 1) { //#28560
            var _1O = $k[$j - 1]; //#28560
            $put(_1O, _1N, 48); //#28560
        } //#28560
        var _1P = $k[$j - 1]; //#28561
        $k[$j++] = _1P; //#28561
        var _1Q = $k[$j - 3]; //#28561
        var _1R = $k[$j - 1]; //#28561
        $k[$j - 3] = $k[$j - 2]; //#28561
        $j -= 2; //#28561
        var _1T = $cvrs($s(_1R.length), _1Q, 2); //#28561
        $puti(_1R, _1R.length - _1T.length, _1T); //#28561
    }; //#28561
    $_.fnc1 = -1; //#28566
    $_.lnumeric = -2; //#28566
    $_.lalphanumeric = -3; //#28566
    $_.liso646 = -4; //#28566
    $k[$j++] = Infinity; //#28568
    for (var _1U = 65; _1U <= 90; _1U += 1) { //#28569
        $k[$j++] = _1U; //#28569
        $k[$j++] = _1U - 65; //#28569
        $k[$j++] = 5; //#28569
        $_.tobin(); //#28569
    } //#28569
    for (var _1V = 48; _1V <= 57; _1V += 1) { //#28570
        $k[$j++] = _1V; //#28570
        $k[$j++] = _1V + 4; //#28570
        $k[$j++] = 6; //#28570
        $_.tobin(); //#28570
    } //#28570
    $k[$j++] = $_.fnc1; //#28571
    $k[$j++] = "11111"; //#28571
    $_.alpha = $d(); //#28572
    $k[$j++] = Infinity; //#28574
    for (var _1Y = 0; _1Y <= 119; _1Y += 1) { //#28583
        var _1a = $strcpy($s(2), "00"); //#28576
        var _1c = $cvrs($s(2), _1Y, 11); //#28576
        $puti(_1a, 2 - _1c.length, _1c); //#28577
        $k[$j++] = _1Y; //#28578
        $k[$j++] = _1a; //#28578
        if ($get(_1a, 0) == 65) { //#28578
            var _1e = $k[$j - 1]; //#28578
            $put(_1e, 0, 94); //#28578
        } //#28578
        var _1f = $k[$j - 1]; //#28579
        if ($get(_1f, 1) == 65) { //#28579
            var _1h = $k[$j - 1]; //#28579
            $put(_1h, 1, 94); //#28579
        } //#28579
        var _1i = $k[--$j]; //#28580
        var _1l = $strcpy($s(7), "0000000"); //#28581
        var _1n = $cvrs($s(7), $k[--$j] + 8, 2); //#28581
        $puti(_1l, 7 - _1n.length, _1n); //#28582
        $k[$j++] = _1i; //#28582
        $k[$j++] = _1l; //#28582
    } //#28582
    $k[$j++] = $_.lalphanumeric; //#28584
    $k[$j++] = "0000"; //#28584
    $_.numeric = $d(); //#28585
    $k[$j++] = Infinity; //#28587
    for (var _1q = 48; _1q <= 57; _1q += 1) { //#28588
        $k[$j++] = _1q; //#28588
        $k[$j++] = _1q - 43; //#28588
        $k[$j++] = 5; //#28588
        $_.tobin(); //#28588
    } //#28588
    $k[$j++] = $_.fnc1; //#28590
    $k[$j++] = "01111"; //#28590
    for (var _1s = 65; _1s <= 90; _1s += 1) { //#28590
        $k[$j++] = _1s; //#28590
        $k[$j++] = _1s - 33; //#28590
        $k[$j++] = 6; //#28590
        $_.tobin(); //#28590
    } //#28590
    $k[$j++] = 42; //#28592
    $k[$j++] = "111010"; //#28592
    for (var _1t = 44; _1t <= 47; _1t += 1) { //#28592
        $k[$j++] = _1t; //#28592
        $k[$j++] = _1t + 15; //#28592
        $k[$j++] = 6; //#28592
        $_.tobin(); //#28592
    } //#28592
    $k[$j++] = $_.lnumeric; //#28594
    $k[$j++] = "000"; //#28594
    $k[$j++] = $_.liso646; //#28594
    $k[$j++] = "00100"; //#28594
    $_.alphanumeric = $d(); //#28595
    $k[$j++] = Infinity; //#28597
    for (var _1x = 48; _1x <= 57; _1x += 1) { //#28598
        $k[$j++] = _1x; //#28598
        $k[$j++] = _1x - 43; //#28598
        $k[$j++] = 5; //#28598
        $_.tobin(); //#28598
    } //#28598
    $k[$j++] = $_.fnc1; //#28600
    $k[$j++] = "01111"; //#28600
    for (var _1z = 65; _1z <= 90; _1z += 1) { //#28600
        $k[$j++] = _1z; //#28600
        $k[$j++] = _1z - 1; //#28600
        $k[$j++] = 7; //#28600
        $_.tobin(); //#28600
    } //#28600
    for (var _20 = 97; _20 <= 122; _20 += 1) { //#28601
        $k[$j++] = _20; //#28601
        $k[$j++] = _20 - 7; //#28601
        $k[$j++] = 7; //#28601
        $_.tobin(); //#28601
    } //#28601
    $k[$j++] = 33; //#28604
    $k[$j++] = "11101000"; //#28604
    $k[$j++] = 34; //#28604
    $k[$j++] = "11101001"; //#28604
    for (var _21 = 37; _21 <= 47; _21 += 1) { //#28604
        $k[$j++] = _21; //#28604
        $k[$j++] = _21 + 197; //#28604
        $k[$j++] = 8; //#28604
        $_.tobin(); //#28604
    } //#28604
    for (var _22 = 58; _22 <= 63; _22 += 1) { //#28605
        $k[$j++] = _22; //#28605
        $k[$j++] = _22 + 187; //#28605
        $k[$j++] = 8; //#28605
        $_.tobin(); //#28605
    } //#28605
    $k[$j++] = 95; //#28609
    $k[$j++] = "11111011"; //#28609
    $k[$j++] = 32; //#28609
    $k[$j++] = "11111100"; //#28609
    $k[$j++] = $_.lnumeric; //#28609
    $k[$j++] = "000"; //#28609
    $k[$j++] = $_.lalphanumeric; //#28609
    $k[$j++] = "00100"; //#28609
    $_.iso646 = $d(); //#28610
    if ($eq($_.method, "10")) { //#28647
        if ($eq($get($_.ais, 0), "11") || $eq($get($_.ais, 0), "17")) { //#28630
            var _2D = $get($_.vals, 0); //#28616
            var _2I = $strcpy($s(16), "0000000000000000"); //#28620
            var _2K = $cvrs($s(16), ($cvi($geti(_2D, 0, 2)) * 384) + ((($cvi($geti(_2D, 2, 2)) - 1) * 32) + $cvi($geti(_2D, 4, 2))), 2); //#28620
            $puti(_2I, 16 - _2K.length, _2K); //#28621
            $k[$j++] = _2I; //#28624
            $k[$j++] = Infinity; //#28622
            $k[$j++] = 1; //#28623
            $k[$j++] = 0; //#28623
            $r(4, -1); //#28623
            $forall($k[--$j], function() { //#28623
                var _2M = $k[--$j]; //#28623
                $k[$j++] = _2M - 48; //#28623
            }); //#28623
            var _2P = $eq($get($_.ais, 0), "11") ? 0 : 1; //#28624
            $k[$j++] = _2P; //#28624
            $_.cdf = $a(); //#28625
            $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#28626
            $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#28627
            $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#28628
        } else { //#28630
            $_.cdf = $a([1, 0, 1, 1]); //#28630
        } //#28630
        if ($_.ais.length != 0) { //#28644
            if ($eq($get($_.ais, 0), "10")) { //#28640
                $k[$j++] = Infinity; //#28634
                $forall($get($_.vals, 0)); //#28634
                $_.gpf = $a(); //#28634
                if ($_.ais.length > 1) { //#28635
                    $k[$j++] = Infinity; //#28635
                    $aload($_.gpf); //#28635
                    $k[$j++] = $_.fnc1; //#28635
                    $_.gpf = $a(); //#28635
                } //#28635
                $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#28636
                $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#28637
                $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#28638
            } else { //#28640
                $_.gpf = $a([$_.fnc1]); //#28640
            } //#28640
        } else { //#28644
            $k[$j++] = Infinity; //#28643
            $aload($_.cdf); //#28643
            $k[$j++] = 0; //#28643
            $k[$j++] = 0; //#28643
            $k[$j++] = 0; //#28643
            $k[$j++] = 0; //#28643
            $k[$j++] = 0; //#28643
            $k[$j++] = 1; //#28643
            $k[$j++] = 1; //#28643
            $k[$j++] = 1; //#28643
            $k[$j++] = 1; //#28643
            $_.cdf = $a(); //#28643
            $_.gpf = $a([]); //#28644
        } //#28644
        $_.mode = "numeric"; //#28646
    } //#28646
    if ($eq($_.method, "11")) { //#28741
        $_.cdf = $a([1, 1]); //#28650
        $_.ai90 = $get($_.vals, 0); //#28651
        if (($_.npre + 1) != $_.ai90.length) { //#28655
            $k[$j++] = $geti($_.ai90, $_.npre + 1, $f($_.ai90.length - $_.npre) - 1); //#28653
        } else { //#28655
            $k[$j++] = ""; //#28655
        } //#28655
        $_.ai90rem = $k[--$j]; //#28657
        $k[$j++] = 'nalpha'; //#28658
        $k[$j++] = 0; //#28658
        $forall($_.ai90rem, function() { //#28658
            var _3C = $k[--$j]; //#28658
            if ((_3C >= 65) && (_3C <= 90)) { //#28658
                var _3D = $k[--$j]; //#28658
                $k[$j++] = _3D + 1; //#28658
            } //#28658
        }); //#28658
        var _3E = $k[--$j]; //#28658
        $_[$k[--$j]] = _3E; //#28658
        $k[$j++] = 'nnums'; //#28659
        $k[$j++] = 0; //#28659
        $forall($_.ai90rem, function() { //#28659
            var _3H = $k[--$j]; //#28659
            if ((_3H >= 48) && (_3H <= 57)) { //#28659
                var _3I = $k[--$j]; //#28659
                $k[$j++] = _3I + 1; //#28659
            } //#28659
        }); //#28659
        var _3J = $k[--$j]; //#28659
        $_[$k[--$j]] = _3J; //#28659
        $k[$j++] = 'mode'; //#28660
        if ($gt($_.nalpha, $_.nnums)) { //#28660
            $k[$j++] = "alpha"; //#28660
        } else { //#28660
            if ($_.nalpha == 0) { //#28660
                $k[$j++] = "numeric"; //#28660
            } else { //#28660
                $k[$j++] = "alphanumeric"; //#28660
            } //#28660
        } //#28660
        var _3O = $k[--$j]; //#28660
        $_[$k[--$j]] = _3O; //#28660
        if ($f($_.nalpha + $_.nnums) != $_.ai90rem.length) { //#28661
            $_.mode = "alphanumeric"; //#28661
        } //#28661
        $k[$j++] = Infinity; //#28662
        $aload($_.cdf); //#28663
        if ($eq($_.mode, "alphanumeric")) { //#28664
            $k[$j++] = 0; //#28664
        } //#28664
        if ($eq($_.mode, "numeric")) { //#28665
            $k[$j++] = 1; //#28665
            $k[$j++] = 0; //#28665
        } //#28665
        if ($eq($_.mode, "alpha")) { //#28666
            $k[$j++] = 1; //#28666
            $k[$j++] = 1; //#28666
        } //#28666
        $_.cdf = $a(); //#28666
        $k[$j++] = 'ais1'; //#28668
        if ($_.ais.length > 1) { //#28668
            $k[$j++] = $get($_.ais, 1); //#28668
        } else { //#28668
            $k[$j++] = -1; //#28668
        } //#28668
        var _3b = $k[--$j]; //#28668
        $_[$k[--$j]] = _3b; //#28668
        $k[$j++] = 'vals1'; //#28669
        if ($_.vals.length > 1) { //#28669
            $k[$j++] = $get($_.vals, 1); //#28669
        } else { //#28669
            $k[$j++] = -1; //#28669
        } //#28669
        var _3g = $k[--$j]; //#28669
        $_[$k[--$j]] = _3g; //#28669
        if ($eq($_.ais1, "21") || $eq($_.ais1, "8004")) { //#28673
            $k[$j++] = Infinity; //#28671
            $aload($_.cdf); //#28671
            if ($eq($_.ais1, "21")) { //#28671
                $k[$j++] = 1; //#28671
                $k[$j++] = 0; //#28671
            } else { //#28671
                $k[$j++] = 1; //#28671
                $k[$j++] = 1; //#28671
            } //#28671
            $_.cdf = $a(); //#28671
        } else { //#28673
            $k[$j++] = Infinity; //#28673
            $aload($_.cdf); //#28673
            $k[$j++] = 0; //#28673
            $_.cdf = $a(); //#28673
        } //#28673
        $k[$j++] = 'nval'; //#28675
        if ($_.npre != 0) { //#28675
            $k[$j++] = $cvi($geti($_.ai90, 0, $_.npre)); //#28675
        } else { //#28675
            $k[$j++] = 0; //#28675
        } //#28675
        var _3t = $k[--$j]; //#28675
        $_[$k[--$j]] = _3t; //#28675
        $search("BDHIJKLNPQRSTVXZ", $geti($_.ai90, $_.npre, 1)); //#28676
        if ($k[--$j]) { //#28680
            var _3z = $k[--$j]; //#28677
            $k[$j - 1] = _3z.length; //#28677
            var _41 = $k[--$j]; //#28677
            $k[$j - 1] = _41; //#28677
            $_.aval = $k[--$j]; //#28678
        } else { //#28680
            $j--; //#28680
            $_.aval = -1; //#28680
        } //#28680
        if (($_.nval < 31) && ($_.aval != -1)) { //#28706
            var _47 = $strcpy($s(5), "00000"); //#28683
            var _4A = $cvrs($s(5), $_.nval, 2); //#28683
            $puti(_47, 5 - _4A.length, _4A); //#28684
            var _4B = Infinity; //#28685
            var _4C = _47; //#28685
            $k[$j++] = _4B; //#28685
            $forall(_4C, function() { //#28685
                var _4D = $k[--$j]; //#28685
                $k[$j++] = _4D - 48; //#28685
            }); //#28685
            $_.nbits = $a(); //#28685
            var _4G = $strcpy($s(4), "0000"); //#28686
            var _4J = $cvrs($s(4), $_.aval, 2); //#28686
            $puti(_4G, 4 - _4J.length, _4J); //#28687
            var _4K = Infinity; //#28688
            var _4L = _4G; //#28688
            $k[$j++] = _4K; //#28688
            $forall(_4L, function() { //#28688
                var _4M = $k[--$j]; //#28688
                $k[$j++] = _4M - 48; //#28688
            }); //#28688
            $_.abits = $a(); //#28688
            $k[$j++] = Infinity; //#28689
            $aload($_.cdf); //#28690
            $aload($_.nbits); //#28691
            $aload($_.abits); //#28692
            $_.cdf = $a(); //#28692
        } else { //#28706
            var _4T = $strcpy($s(10), "0000000000"); //#28695
            var _4W = $cvrs($s(10), $_.nval, 2); //#28695
            $puti(_4T, 10 - _4W.length, _4W); //#28696
            var _4X = Infinity; //#28697
            var _4Y = _4T; //#28697
            $k[$j++] = _4X; //#28697
            $forall(_4Y, function() { //#28697
                var _4Z = $k[--$j]; //#28697
                $k[$j++] = _4Z - 48; //#28697
            }); //#28697
            $_.nbits = $a(); //#28697
            var _4c = $strcpy($s(5), "00000"); //#28698
            var _4h = $cvrs($s(5), $get($_.ai90, $_.npre) - 65, 2); //#28698
            $puti(_4c, 5 - _4h.length, _4h); //#28699
            var _4i = Infinity; //#28700
            var _4j = _4c; //#28700
            $k[$j++] = _4i; //#28700
            $forall(_4j, function() { //#28700
                var _4k = $k[--$j]; //#28700
                $k[$j++] = _4k - 48; //#28700
            }); //#28700
            $_.abits = $a(); //#28700
            $k[$j++] = Infinity; //#28701
            $aload($_.cdf); //#28702
            $k[$j++] = 1; //#28704
            $k[$j++] = 1; //#28704
            $k[$j++] = 1; //#28704
            $k[$j++] = 1; //#28704
            $k[$j++] = 1; //#28704
            $aload($_.nbits); //#28704
            $aload($_.abits); //#28705
            $_.cdf = $a(); //#28705
        } //#28706
        if ($ne($_.mode, "alpha")) { //#28724
            $k[$j++] = Infinity; //#28709
            $forall($_.ai90rem); //#28709
            if ($_.ais.length > 1) { //#28709
                $k[$j++] = $_.fnc1; //#28709
            } //#28709
            $_.gpf = $a(); //#28709
        } else { //#28724
            $k[$j++] = Infinity; //#28711
            $forall($_.ai90rem); //#28711
            if ($_.ais.length > 1) { //#28711
                $k[$j++] = $_.fnc1; //#28711
            } //#28711
            $_.in = $a(); //#28711
            $_.out = $a($_.in.length * 6); //#28712
            $_.j = 0; //#28713
            for (var _53 = 0, _52 = $_.in.length - 1; _53 <= _52; _53 += 1) { //#28718
                var _57 = $get($_.alpha, $get($_.in, _53)); //#28715
                $k[$j++] = _57; //#28716
                var _58 = Infinity; //#28716
                var _59 = _57; //#28716
                $k[$j++] = _58; //#28716
                $forall(_59, function() { //#28716
                    var _5A = $k[--$j]; //#28716
                    $k[$j++] = _5A - 48; //#28716
                }); //#28716
                $puti($_.out, $_.j, $a()); //#28716
                $_.j = $k[--$j].length + $_.j; //#28717
            } //#28717
            $k[$j++] = Infinity; //#28719
            $aload($_.cdf); //#28720
            $aload($geti($_.out, 0, $_.j)); //#28721
            $_.cdf = $a(); //#28721
            $_.gpf = $a([]); //#28723
            if ($_.ais.length > 1) { //#28724
                $_.mode = "numeric"; //#28724
            } //#28724
        } //#28724
        $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#28726
        $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#28727
        $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#28728
        if ($_.ais.length != 0) { //#28740
            if ($eq($_.ais1, "21") || $eq($_.ais1, "8004")) { //#28739
                $k[$j++] = Infinity; //#28731
                $aload($_.gpf); //#28732
                $forall($_.vals1); //#28733
                $_.gpf = $a(); //#28733
                $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#28735
                $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#28736
                $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#28737
                if ($_.ais.length != 0) { //#28738
                    $k[$j++] = Infinity; //#28738
                    $aload($_.gpf); //#28738
                    $k[$j++] = $_.fnc1; //#28738
                    $_.gpf = $a(); //#28738
                } //#28738
            } //#28738
        } //#28738
    } //#28738
    if ($eq($_.method, "0")) { //#28747
        $_.cdf = $a([0]); //#28744
        $_.gpf = $a([]); //#28745
        $_.mode = "numeric"; //#28746
    } //#28746
    for (var _5u = 0, _5t = $_.ais.length - 1; _5u <= _5t; _5u += 1) { //#28765
        $_.i = _5u; //#28751
        $_.ai = $get($_.ais, $_.i); //#28752
        $_.val = $get($_.vals, $_.i); //#28753
        var _64 = $a(($_.gpf.length + $_.ai.length) + $_.val.length); //#28754
        $puti(_64, 0, $_.gpf); //#28755
        $k[$j++] = _64; //#28756
        $k[$j++] = _64; //#28756
        $k[$j++] = $_.gpf.length; //#28756
        var _68 = Infinity; //#28756
        var _69 = $_.ai; //#28756
        $k[$j++] = _68; //#28756
        $forall(_69); //#28756
        var _6A = $a(); //#28756
        var _6B = $k[--$j]; //#28756
        $puti($k[--$j], _6B, _6A); //#28756
        var _6D = $k[$j - 1]; //#28757
        $k[$j++] = _6D; //#28757
        $k[$j++] = $_.gpf.length + $_.ai.length; //#28757
        var _6H = Infinity; //#28757
        var _6I = $_.val; //#28757
        $k[$j++] = _6H; //#28757
        $forall(_6I); //#28757
        var _6J = $a(); //#28757
        var _6K = $k[--$j]; //#28757
        $puti($k[--$j], _6K, _6J); //#28757
        $_.gpf = $k[--$j]; //#28758
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#28764
            var _6T = $a($_.gpf.length + 1); //#28760
            $puti(_6T, 0, $_.gpf); //#28761
            $put(_6T, $_.gpf.length, $_.fnc1); //#28762
            $_.gpf = _6T; //#28763
        } //#28763
    } //#28763
    var _6f = new Map([
        ["a", $a([$a([167, 138, 118, 108, 88, 78, 59]), $a([167, 138, 118, 98, 78]), $a([197, 167, 138, 108, 78])])],
        ["b", $a([$a([336, 296, 256, 208, 160, 104, 56]), $a([768, 648, 536, 416, 304, 208, 152, 112, 72, 32]), $a([1184, 1016, 840, 672, 496, 352, 264, 208, 152, 96, 56])])]
    ]); //#28778
    $_.bitcapsmaps = _6f; //#28780
    $_.rembits = function() {
        $_.used = $k[--$j]; //#28784
        if ($ne($_.ccversion, "c")) { //#28807
            $_.bitcaps = $get($get($_.bitcapsmaps, $_.ccversion), $_.cccolumns - 2); //#28786
            $k[$j++] = -1; //#28787
            $forall($_.bitcaps, function() { //#28787
                var _6p = $k[$j - 1]; //#28787
                if ($ge(_6p, $_.used)) { //#28787
                    var _6r = $k[--$j]; //#28787
                    var _6s = $k[--$j]; //#28787
                    $k[$j++] = _6r; //#28787
                    $k[$j++] = _6s; //#28787
                } //#28787
                $j--; //#28787
            }); //#28787
            var _6t = $k[$j - 1]; //#28788
            if (_6t != -1) { //#28788
                var _6v = $k[--$j]; //#28788
                $k[$j++] = $f(_6v - $_.used); //#28788
            } //#28788
        } else { //#28807
            var _6w = new Map([
                ["c", -1]
            ]); //#28790
            var _6y = $get(_6w, $_.ccversion); //#28790
            var _70 = ~~$ceil($_.used / 8); //#28791
            $_.m = ((~~(_70 / 6)) * 5) + (_70 % 6); //#28791
            if ($_.m <= 40) { //#28792
                $k[$j++] = 8; //#28792
            } //#28792
            if (($_.m >= 41) && ($_.m <= 160)) { //#28793
                $k[$j++] = 16; //#28793
            } //#28793
            if (($_.m >= 161) && ($_.m <= 320)) { //#28794
                $k[$j++] = 32; //#28794
            } //#28794
            if (($_.m >= 321) && ($_.m <= 833)) { //#28795
                $k[$j++] = 64; //#28795
            } //#28795
            if ($_.m >= 834) { //#28796
                $k[$j++] = 32; //#28796
            } //#28796
            $_.eccws = $k[--$j]; //#28797
            $_.m = $f($_.m + $_.eccws) + 3; //#28798
            if ($_.cccolumns > 30) { //#28799
                $_.cccolumns = 30; //#28799
            } //#28799
            for (;;) { //#28803
                if (((~~$ceil($_.m / $_.cccolumns)) <= 30) || ($_.cccolumns >= 30)) { //#28801
                    break; //#28801
                } //#28801
                $_.cccolumns = $_.cccolumns + 1; //#28802
            } //#28802
            $_.r = ~~$ceil($_.m / $_.cccolumns); //#28804
            if ($_.r < 3) { //#28805
                $_.r = 3; //#28805
            } //#28805
            var _7N = ($f(($_.cccolumns * $_.r) - $_.eccws)) - 3; //#28806
            $_.tgt = ($f(((~~(_7N / 5)) * 6) + (_7N % 5))) * 8; //#28806
            if ($_.used <= 8304) { //#28807
                $k[$j++] = $f($_.tgt - $_.used); //#28807
            } else { //#28807
                $k[$j++] = -1; //#28807
            } //#28807
        } //#28807
        var _7R = $k[$j - 1]; //#28809
        if (_7R == -1) { //#28822
            $j--; //#28810
            if ($eq($_.ccversion, "a")) { //#28818
                $_.ccversion = "b"; //#28812
            } else { //#28818
                if ($eq($_.ccversion, "b") && $eq($_.lintype, "gs1-128")) { //#28818
                    $_.ccversion = "c"; //#28815
                    $_.cccolumns = ~~(($_.linwidth - 52) / 17); //#28816
                } else { //#28818
                    $_.ccversion = -1; //#28818
                } //#28818
            } //#28818
            $k[$j++] = $_.used; //#28821
            $_.rembits(); //#28821
        } //#28821
    }; //#28821
    $_.encode = function() {
        var _7X = $k[$j - 1]; //#28826
        if ($ne(_7X, 'raw')) { //#28826
            var _7Y = $k[--$j]; //#28826
            var _7a = $get(_7Y, $k[--$j]); //#28826
            $k[$j++] = _7a; //#28826
        } else { //#28826
            $j--; //#28826
        } //#28826
        $k[$j++] = Infinity; //#28827
        var _7b = $k[--$j]; //#28827
        var _7c = $k[--$j]; //#28827
        $k[$j++] = _7b; //#28827
        $forall(_7c, function() { //#28827
            var _7d = $k[--$j]; //#28827
            $k[$j++] = _7d - 48; //#28827
        }); //#28827
        var _7e = $a(); //#28827
        $puti($_.gpfenc, $_.j, _7e); //#28829
        $_.j = _7e.length + $_.j; //#28830
    }; //#28830
    $k[$j++] = Infinity; //#28834
    for (var _7j = 0, _7k = $_.gpf.length; _7j < _7k; _7j++) { //#28834
        $k[$j++] = 0; //#28834
    } //#28834
    $k[$j++] = 0; //#28834
    $k[$j++] = -1; //#28834
    $_.numericruns = $a(); //#28834
    $k[$j++] = Infinity; //#28835
    for (var _7n = 0, _7o = $_.gpf.length; _7n < _7o; _7n++) { //#28835
        $k[$j++] = 0; //#28835
    } //#28835
    $k[$j++] = 0; //#28835
    $_.alphanumericruns = $a(); //#28835
    $k[$j++] = Infinity; //#28836
    for (var _7r = 0, _7s = $_.gpf.length; _7r < _7s; _7r++) { //#28836
        $k[$j++] = 0; //#28836
    } //#28836
    $k[$j++] = 9999; //#28836
    $_.nextiso646only = $a(); //#28836
    for (var _7v = $_.gpf.length - 1; _7v >= 0; _7v -= 1) { //#28858
        $_.i = _7v; //#28838
        var _80 = $strcpy($s(2), "00"); //#28840
        var _83 = $get($_.gpf, $_.i); //#28841
        $k[$j++] = $get($_.gpf, $_.i); //#28841
        $k[$j++] = _80; //#28841
        $k[$j++] = _80; //#28841
        $k[$j++] = 0; //#28841
        $k[$j++] = _83; //#28841
        if (_83 == $_.fnc1) { //#28841
            $k[$j - 1] = 94; //#28841
        } //#28841
        var _85 = $k[--$j]; //#28841
        var _86 = $k[--$j]; //#28841
        $put($k[--$j], _86, _85); //#28841
        if ($_.i < ($_.gpf.length - 1)) { //#28842
            var _8A = $k[$j - 1]; //#28842
            var _8D = $get($_.gpf, $_.i + 1); //#28842
            $k[$j++] = _8A; //#28842
            $k[$j++] = 1; //#28842
            $k[$j++] = _8D; //#28842
            if (_8D == $_.fnc1) { //#28842
                $k[$j - 1] = 94; //#28842
            } //#28842
            var _8F = $k[--$j]; //#28842
            var _8G = $k[--$j]; //#28842
            $put($k[--$j], _8G, _8F); //#28842
        } //#28842
        var _8K = $get($_.numeric, $k[--$j]) !== undefined; //#28843
        if (_8K) { //#28846
            $put($_.numericruns, $_.i, $get($_.numericruns, $_.i + 2) + 2); //#28844
        } else { //#28846
            $put($_.numericruns, $_.i, 0); //#28846
        } //#28846
        var _8S = $k[$j - 1]; //#28848
        var _8U = $get($_.alphanumeric, _8S) !== undefined; //#28848
        if (_8U) { //#28851
            $put($_.alphanumericruns, $_.i, $get($_.alphanumericruns, $_.i + 1) + 1); //#28849
        } else { //#28851
            $put($_.alphanumericruns, $_.i, 0); //#28851
        } //#28851
        var _8c = $k[--$j]; //#28853
        var _8e = $get($_.iso646, _8c) !== undefined; //#28853
        var _8g = $get($_.alphanumeric, _8c) !== undefined; //#28853
        if (_8e && (!_8g)) { //#28856
            $put($_.nextiso646only, $_.i, 0); //#28854
        } else { //#28856
            $put($_.nextiso646only, $_.i, $get($_.nextiso646only, $_.i + 1) + 1); //#28856
        } //#28856
    } //#28856
    $_.gpfenc = $a(8304); //#28861
    $_.i = 0; //#28862
    $_.j = 0; //#28862
    for (;;) { //#28952
        if ($_.i == $_.gpf.length) { //#28864
            break; //#28864
        } //#28864
        for (;;) { //#28951
            if ($eq($_.mode, "numeric")) { //#28900
                if ($_.i <= ($_.gpf.length - 2)) { //#28897
                    var _8u = $s(2); //#28869
                    var _8x = $get($_.gpf, $_.i); //#28870
                    $k[$j++] = _8u; //#28870
                    $k[$j++] = _8u; //#28870
                    $k[$j++] = 0; //#28870
                    $k[$j++] = _8x; //#28870
                    if (_8x == $_.fnc1) { //#28870
                        $k[$j - 1] = 94; //#28870
                    } //#28870
                    var _8z = $k[--$j]; //#28870
                    var _90 = $k[--$j]; //#28870
                    $put($k[--$j], _90, _8z); //#28870
                    var _92 = $k[$j - 1]; //#28871
                    var _95 = $get($_.gpf, $_.i + 1); //#28871
                    $k[$j++] = _92; //#28871
                    $k[$j++] = 1; //#28871
                    $k[$j++] = _95; //#28871
                    if (_95 == $_.fnc1) { //#28871
                        $k[$j - 1] = 94; //#28871
                    } //#28871
                    var _97 = $k[--$j]; //#28871
                    var _98 = $k[--$j]; //#28871
                    $put($k[--$j], _98, _97); //#28871
                    var _9A = $k[$j - 1]; //#28872
                    var _9C = $get($_.numeric, _9A) !== undefined; //#28872
                    if (_9C) { //#28876
                        $k[$j++] = $_.numeric; //#28873
                        $_.encode(); //#28873
                        $_.i = $_.i + 2; //#28874
                        break; //#28875
                    } //#28875
                    $k[$j - 1] = $_.lalphanumeric; //#28878
                    $k[$j++] = $_.numeric; //#28878
                    $_.encode(); //#28878
                    $_.mode = "alphanumeric"; //#28879
                    break; //#28880
                } else { //#28897
                    var _9J = $get($_.gpf, $_.i); //#28882
                    if ((_9J < 48) || (_9J > 57)) { //#28886
                        $k[$j++] = $_.lalphanumeric; //#28883
                        $k[$j++] = $_.numeric; //#28883
                        $_.encode(); //#28883
                        $_.mode = "alphanumeric"; //#28884
                        break; //#28885
                    } //#28885
                    $k[$j++] = 'rem'; //#28887
                    $k[$j++] = $_.cdf.length + $_.j; //#28887
                    $_.rembits(); //#28887
                    var _9O = $k[--$j]; //#28887
                    $_[$k[--$j]] = _9O; //#28887
                    if (($_.rem >= 4) && ($_.rem <= 6)) { //#28897
                        var _9V = $geti($strcpy($s(6), "000000"), 0, $_.rem); //#28889
                        var _9a = $cvrs($s(4), $get($_.gpf, $_.i) - 47, 2); //#28890
                        $puti(_9V, 4 - _9a.length, _9a); //#28891
                        $k[$j++] = _9V; //#28891
                        $k[$j++] = 'raw'; //#28891
                        $_.encode(); //#28891
                        $_.i = $_.i + 1; //#28892
                        break; //#28893
                    } else { //#28897
                        var _9c = $s(2); //#28895
                        $put(_9c, 0, $get($_.gpf, $_.i)); //#28895
                        $put(_9c, 1, 94); //#28895
                        $k[$j++] = _9c; //#28895
                        $k[$j++] = $_.numeric; //#28895
                        $_.encode(); //#28895
                        $_.i = $_.i + 1; //#28896
                        break; //#28897
                    } //#28897
                } //#28897
            } //#28897
            if ($eq($_.mode, "alphanumeric")) { //#28927
                if ($get($_.gpf, $_.i) == $_.fnc1) { //#28908
                    $k[$j++] = $_.fnc1; //#28904
                    $k[$j++] = $_.alphanumeric; //#28904
                    $_.encode(); //#28904
                    $_.mode = "numeric"; //#28905
                    $_.i = $_.i + 1; //#28906
                    break; //#28907
                } //#28907
                var _9s = $get($_.gpf, $_.i); //#28909
                var _9u = $get($_.iso646, _9s) !== undefined; //#28909
                var _9w = $get($_.alphanumeric, _9s) !== undefined; //#28909
                if (_9u && (!_9w)) { //#28913
                    $k[$j++] = $_.liso646; //#28910
                    $k[$j++] = $_.alphanumeric; //#28910
                    $_.encode(); //#28910
                    $_.mode = "iso646"; //#28911
                    break; //#28912
                } //#28912
                if ($get($_.numericruns, $_.i) >= 6) { //#28918
                    $k[$j++] = $_.lnumeric; //#28915
                    $k[$j++] = $_.alphanumeric; //#28915
                    $_.encode(); //#28915
                    $_.mode = "numeric"; //#28916
                    break; //#28917
                } //#28917
                var _A6 = $get($_.numericruns, $_.i); //#28919
                if ((_A6 >= 4) && ($f(_A6 + $_.i) == $_.gpf.length)) { //#28923
                    $k[$j++] = $_.lnumeric; //#28920
                    $k[$j++] = $_.alphanumeric; //#28920
                    $_.encode(); //#28920
                    $_.mode = "numeric"; //#28921
                    break; //#28922
                } //#28922
                $k[$j++] = $get($_.gpf, $_.i); //#28924
                $k[$j++] = $_.alphanumeric; //#28924
                $_.encode(); //#28924
                $_.i = $_.i + 1; //#28925
                break; //#28926
            } //#28926
            if ($eq($_.mode, "iso646")) { //#28949
                if ($get($_.gpf, $_.i) == $_.fnc1) { //#28935
                    $k[$j++] = $_.fnc1; //#28931
                    $k[$j++] = $_.iso646; //#28931
                    $_.encode(); //#28931
                    $_.mode = "numeric"; //#28932
                    $_.i = $_.i + 1; //#28933
                    break; //#28934
                } //#28934
                if (($get($_.numericruns, $_.i) >= 4) && ($get($_.nextiso646only, $_.i) >= 10)) { //#28940
                    $k[$j++] = $_.lnumeric; //#28937
                    $k[$j++] = $_.iso646; //#28937
                    $_.encode(); //#28937
                    $_.mode = "numeric"; //#28938
                    break; //#28939
                } //#28939
                if (($get($_.alphanumericruns, $_.i) >= 5) && ($get($_.nextiso646only, $_.i) >= 10)) { //#28945
                    $k[$j++] = $_.lalphanumeric; //#28942
                    $k[$j++] = $_.iso646; //#28942
                    $_.encode(); //#28942
                    $_.mode = "alphanumeric"; //#28943
                    break; //#28944
                } //#28944
                $k[$j++] = $get($_.gpf, $_.i); //#28946
                $k[$j++] = $_.iso646; //#28946
                $_.encode(); //#28946
                $_.i = $_.i + 1; //#28947
                break; //#28948
            } //#28948
        } //#28948
    } //#28948
    $_.gpf = $geti($_.gpfenc, 0, $_.j); //#28953
    $k[$j++] = 'pad'; //#28956
    $k[$j++] = $_.cdf.length + $_.gpf.length; //#28956
    $_.rembits(); //#28956
    var _Ap = $a($k[--$j]); //#28956
    $_[$k[--$j]] = _Ap; //#28956
    if ($_.pad.length > 0) { //#28968
        for (var _Au = 0, _At = $_.pad.length - 1; _Au <= _At; _Au += 5) { //#28961
            $_.i = _Au; //#28959
            var _Av = $_.pad; //#28960
            var _Aw = $_.i; //#28960
            var _Ax = $a([0, 0, 1, 0, 0]); //#28960
            var _Ay = $_.pad; //#28960
            var _Az = $_.i; //#28960
            var _B0 = 5; //#28960
            var _B1 = _Ay.length - _Az; //#28960
            if ((_Ay.length - _Az) > 5) { //#28960
                var _ = _B0; //#28960
                _B0 = _B1; //#28960
                _B1 = _; //#28960
            } //#28960
            $puti(_Av, _Aw, $geti(_Ax, 0, _B1)); //#28960
        } //#28960
        if ($eq($_.mode, "numeric")) { //#28964
            $k[$j++] = Infinity; //#28963
            $k[$j++] = 0; //#28963
            $k[$j++] = 0; //#28963
            $k[$j++] = 0; //#28963
            $k[$j++] = 0; //#28963
            $aload($_.pad); //#28963
            $_.pad = $geti($a(), 0, $_.pad.length); //#28963
        } //#28963
        if ($eq($_.mode, "alpha")) { //#28967
            $k[$j++] = Infinity; //#28966
            $k[$j++] = 1; //#28966
            $k[$j++] = 1; //#28966
            $k[$j++] = 1; //#28966
            $k[$j++] = 1; //#28966
            $k[$j++] = 1; //#28966
            $k[$j++] = 0; //#28966
            $k[$j++] = 0; //#28966
            $k[$j++] = 0; //#28966
            $k[$j++] = 0; //#28966
            $aload($_.pad); //#28966
            $_.pad = $geti($a(), 0, $_.pad.length); //#28966
        } //#28966
    } //#28966
    $k[$j++] = Infinity; //#28971
    $aload($_.cdf); //#28972
    $aload($_.gpf); //#28973
    $aload($_.pad); //#28974
    $_.bits = $a(); //#28974
    $k[$j++] = Infinity; //#28978
    $k[$j++] = $a([0, 0, 0, 0, 0, 0, 1]); //#28980
    for (var _BI = 0; _BI < 68; _BI++) { //#28980
        $k[$j++] = $a(7); //#28980
    } //#28980
    $_.pwr928 = $a(); //#28980
    for (var _BL = 1; _BL <= 68; _BL += 1) { //#28991
        $_.j = _BL; //#28983
        $_.v = 0; //#28984
        for (var _BM = 6; _BM >= 1; _BM -= 1) { //#28989
            $_.i = _BM; //#28986
            $_.v = $f(($get($get($_.pwr928, $_.j - 1), $_.i) * 2) + (~~($_.v / 928))); //#28987
            $put($get($_.pwr928, $_.j), $_.i, $_.v % 928); //#28988
        } //#28988
        $put($get($_.pwr928, $_.j), 0, $f(($get($get($_.pwr928, $_.j - 1), 0) * 2) + (~~($_.v / 928)))); //#28990
    } //#28990
    if ($_.ccversion == "a") { //#29034
        $k[$j++] = Infinity; //#28995
        for (var _Bi = 0; _Bi < 28; _Bi++) { //#28995
            $k[$j++] = 0; //#28995
        } //#28995
        $_.cws = $a(); //#28995
        $_.b = 0; //#28996
        $_.c = 0; //#28996
        for (;;) { //#29020
            if ($_.b == $_.bits.length) { //#28998
                break; //#28998
            } //#28998
            var _Bm = $_.bits; //#28999
            var _Bn = $_.b; //#28999
            var _Bo = $_.bits; //#28999
            var _Bp = $_.b; //#28999
            var _Bq = _Bo.length - _Bp; //#28999
            var _Br = 69; //#28999
            if (69 > (_Bo.length - _Bp)) { //#28999
                var _ = _Bq; //#28999
                _Bq = _Br; //#28999
                _Br = _; //#28999
            } //#28999
            $_.bs = $geti(_Bm, _Bn, _Br); //#28999
            $_.bsl = $_.bs.length; //#29000
            $_.cs = $geti($_.cws, $_.c, (~~($_.bsl / 10)) + 1); //#29001
            $_.csl = $_.cs.length; //#29002
            for (var _C1 = 0, _C0 = $_.bsl - 1; _C1 <= _C0; _C1 += 1) { //#29012
                $_.i = _C1; //#29004
                for (var _C4 = 0, _C3 = $_.csl - 1; _C4 <= _C3; _C4 += 1) { //#29011
                    $_.j = _C4; //#29006
                    var _C5 = $_.cs; //#29007
                    var _C6 = $_.j; //#29007
                    $put(_C5, _C6, $f($get(_C5, _C6) + ($get($get($_.pwr928, $_.i), ($_.j + 7) - $_.csl) * $get($_.bs, ($_.bsl - $_.i) - 1)))); //#29010
                } //#29010
            } //#29010
            for (var _CJ = $_.csl - 1; _CJ >= 1; _CJ -= 1) { //#29017
                $_.i = _CJ; //#29014
                var _CK = $_.cs; //#29015
                var _CL = $_.i; //#29015
                $put(_CK, _CL - 1, $f($get(_CK, _CL - 1) + (~~($get($_.cs, $_.i) / 928)))); //#29015
                var _CQ = $_.cs; //#29016
                var _CR = $_.i; //#29016
                $put(_CQ, _CR, $get(_CQ, _CR) % 928); //#29016
            } //#29016
            $_.b = $_.b + $_.bsl; //#29018
            $_.c = $_.c + $_.csl; //#29019
        } //#29019
        $_.cws = $geti($_.cws, 0, $_.c); //#29021
        $_.barcode = $s($_.cws.length * 4); //#29022
        for (var _Ce = 0, _Cd = $_.cws.length - 1; _Ce <= _Cd; _Ce += 1) { //#29028
            $_.i = _Ce; //#29024
            var _Cg = $strcpy($s(4), "^000"); //#29025
            var _Cl = $cvrs($s(4), $get($_.cws, $_.i), 10); //#29025
            $puti(_Cg, 4 - _Cl.length, _Cl); //#29026
            $puti($_.barcode, $_.i * 4, _Cg); //#29027
        } //#29027
        delete $_.options["parse"]; //#29029
        $put($_.options, "dontdraw", true); //#29030
        $put($_.options, "cca", true); //#29031
        $put($_.options, "columns", $_.cccolumns); //#29032
        $k[$j++] = 'args'; //#29033
        $k[$j++] = $_.barcode; //#29033
        $k[$j++] = $_.options; //#29033
        bwipp_micropdf417(); //#29033
        var _Cv = $k[--$j]; //#29033
        $_[$k[--$j]] = _Cv; //#29033
    } //#29033
    if ($_.ccversion == "b") { //#29048
        $_.barcode = $s(~~($_.bits.length / 8)); //#29037
        for (var _D2 = 0, _D1 = $_.barcode.length - 1; _D2 <= _D1; _D2 += 1) { //#29042
            $_.i = _D2; //#29039
            var _D5 = $geti($_.bits, $_.i * 8, 8); //#29040
            $k[$j++] = 0; //#29040
            for (var _D6 = 0, _D7 = _D5.length; _D6 < _D7; _D6++) { //#29040
                var _D9 = $k[--$j]; //#29040
                $k[$j++] = $f(_D9 + $get(_D5, _D6)) * 2; //#29040
            } //#29040
            $put($_.barcode, $_.i, ~~($k[--$j] / 2)); //#29041
        } //#29041
        delete $_.options["parse"]; //#29043
        $put($_.options, "dontdraw", true); //#29044
        $put($_.options, "ccb", true); //#29045
        $put($_.options, "columns", $_.cccolumns); //#29046
        $k[$j++] = 'args'; //#29047
        $k[$j++] = $_.barcode; //#29047
        $k[$j++] = $_.options; //#29047
        bwipp_micropdf417(); //#29047
        var _DK = $k[--$j]; //#29047
        $_[$k[--$j]] = _DK; //#29047
    } //#29047
    if ($_.ccversion == "c") { //#29063
        $_.barcode = $s(~~($_.bits.length / 8)); //#29051
        for (var _DR = 0, _DQ = $_.barcode.length - 1; _DR <= _DQ; _DR += 1) { //#29056
            $_.i = _DR; //#29053
            var _DU = $geti($_.bits, $_.i * 8, 8); //#29054
            $k[$j++] = 0; //#29054
            for (var _DV = 0, _DW = _DU.length; _DV < _DW; _DV++) { //#29054
                var _DY = $k[--$j]; //#29054
                $k[$j++] = $f(_DY + $get(_DU, _DV)) * 2; //#29054
            } //#29054
            $put($_.barcode, $_.i, ~~($k[--$j] / 2)); //#29055
        } //#29055
        delete $_.options["parse"]; //#29057
        $put($_.options, "dontdraw", true); //#29058
        $put($_.options, "ccc", true); //#29059
        $put($_.options, "columns", $_.cccolumns); //#29060
        $put($_.options, "eclevel", (~~($log($_.eccws) / $log(2))) - 1); //#29061
        $k[$j++] = 'args'; //#29062
        $k[$j++] = $_.barcode; //#29062
        $k[$j++] = $_.options; //#29062
        bwipp_pdf417(); //#29062
        var _Dl = $k[--$j]; //#29062
        $_[$k[--$j]] = _Dl; //#29062
    } //#29062
    $k[$j++] = $_.args; //#29066
    if (!$_.dontdraw) { //#29066
        bwipp_renmatrix(); //#29066
    } //#29066
    $_ = $__; //#29070
} //bwipp_gs1_cc
function bwipp_ean13composite() {
    var $__ = $_; //#29102
    $_ = Object.assign({}, $_); //#29102
    $_.dontdraw = false; //#29105
    $_.usematrix = false; //#29106
    $_.parse = false; //#29107
    $_.dontlint = false; //#29108
    $_.lintreqs = true; //#29109
    $k[$j++] = $_; //#29111
    bwipp_processoptions(); //#29111
    $_.options = $k[--$j]; //#29111
    $_.barcode = $k[--$j]; //#29112
    if ($_.dontdraw) { //#29114
        $_.usematrix = true; //#29114
    } //#29114
    $search($_.barcode, "|"); //#29117
    if ($k[--$j]) { //#29122
        $_.linear = $k[--$j]; //#29118
        $j--; //#29119
        $_.comp = $k[--$j]; //#29120
    } else { //#29122
        $j--; //#29122
        $k[$j++] = 'bwipp.missingCompositeComponent#29122'; //#29122
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29122
        bwipp_raiseerror(); //#29122
    } //#29122
    $put($_.options, "lintype", "ean13"); //#29125
    $put($_.options, "inkspreadv", 0); //#29126
    $put($_.options, "dontdraw", true); //#29127
    $put($_.options, "dontlint", true); //#29128
    var _C = $s($_.comp.length + 18); //#29131
    $puti(_C, 0, "(01)00000000000000"); //#29132
    $puti(_C, 18, $_.comp); //#29133
    $k[$j++] = _C; //#29134
    $k[$j++] = 'ai'; //#29134
    bwipp_gs1process(); //#29134
    $j -= 3; //#29134
    $k[$j++] = $_.linear; //#29137
    $k[$j++] = $_.options; //#29137
    bwipp_ean13(); //#29137
    if (!$_.usematrix) { //#29229
        $$.save(); //#29139
        bwipp_renlinear(); //#29141
        var _H = $$.currpos(); //#29143
        $$.rmoveto(-3, 78); //#29146
        $k[$j++] = _H.x; //#29146
        $k[$j++] = _H.y; //#29146
        $k[$j++] = $_.comp; //#29146
        $k[$j++] = $_.options; //#29146
        bwipp_gs1_cc(); //#29146
        bwipp_renmatrix(); //#29146
        var _K = $k[--$j]; //#29149
        $$.moveto($k[--$j] - 1, _K + 72); //#29149
        $k[$j++] = Infinity; //#29149
        $k[$j++] = Infinity; //#29151
        $k[$j++] = 0; //#29152
        $k[$j++] = 1; //#29152
        for (var _M = 0; _M < 93; _M++) { //#29152
            $k[$j++] = 0; //#29152
        } //#29152
        $k[$j++] = 1; //#29153
        $k[$j++] = 0; //#29153
        $k[$j++] = 1; //#29153
        $k[$j++] = 0; //#29153
        for (var _N = 0; _N < 93; _N++) { //#29153
            $k[$j++] = 0; //#29153
        } //#29153
        $k[$j++] = 0; //#29154
        $k[$j++] = 1; //#29154
        $k[$j++] = 0; //#29154
        $k[$j++] = 1; //#29154
        for (var _O = 0; _O < 93; _O++) { //#29154
            $k[$j++] = 0; //#29154
        } //#29154
        $k[$j++] = 1; //#29154
        $k[$j++] = 0; //#29154
        var _P = $a(); //#29154
        $k[$j++] = 'ren'; //#29160
        $k[$j++] = 'renmatrix'; //#29160
        $k[$j++] = 'pixs'; //#29160
        $k[$j++] = _P; //#29160
        $k[$j++] = 'pixx'; //#29160
        $k[$j++] = 97; //#29160
        $k[$j++] = 'pixy'; //#29160
        $k[$j++] = 3; //#29160
        $k[$j++] = 'height'; //#29160
        $k[$j++] = 6 / 72; //#29160
        $k[$j++] = 'width'; //#29160
        $k[$j++] = 97 / 72; //#29160
        $k[$j++] = 'opt'; //#29160
        $k[$j++] = $_.options; //#29160
        var _R = $d(); //#29160
        $k[$j++] = _R; //#29161
        bwipp_renmatrix(); //#29161
        $$.restore(); //#29163
    } else { //#29229
        $_.linsym = $k[--$j]; //#29165
        $_.sbs = $get($_.linsym, 'sbs'); //#29166
        $_.bhs = $get($_.linsym, 'bhs'); //#29167
        $_.bbs = $get($_.linsym, 'bbs'); //#29168
        $k[$j++] = 'linwidth'; //#29169
        $k[$j++] = 0; //#29169
        $forall($_.sbs, function() { //#29169
            var _a = $k[--$j]; //#29169
            var _b = $k[--$j]; //#29169
            $k[$j++] = $f(_b + $cvi(_a)); //#29169
        }); //#29169
        var _c = $k[--$j]; //#29169
        $_[$k[--$j]] = _c; //#29169
        $k[$j++] = 'compsym'; //#29171
        $k[$j++] = $_.comp; //#29171
        $k[$j++] = $_.options; //#29171
        bwipp_gs1_cc(); //#29171
        var _g = $k[--$j]; //#29171
        $_[$k[--$j]] = _g; //#29171
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29172
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29173
        $k[$j++] = Infinity; //#29175
        for (var _n = 0, _o = $_.ccpixx - 97; _n < _o; _n++) { //#29175
            $k[$j++] = 0; //#29175
        } //#29175
        $_.linpad = $a(); //#29175
        $_.diff = $f($_.linwidth + $_.linpad.length + 1 - $_.ccpixx); //#29177
        if ($_.diff > 0) { //#29183
            $k[$j++] = Infinity; //#29179
            for (var _v = 0, _w = $_.diff; _v < _w; _v++) { //#29179
                $k[$j++] = 0; //#29179
            } //#29179
            $_.ccrpad = $a(); //#29179
            $_.pixx = $f($_.ccpixx + $_.diff); //#29180
        } else { //#29183
            $_.ccrpad = $a(0); //#29182
            $_.pixx = $_.ccpixx; //#29183
        } //#29183
        $k[$j++] = Infinity; //#29186
        for (var _15 = 0, _16 = $_.ccpixx, _14 = $_.ccpixs.length - 1; _16 < 0 ? _15 >= _14 : _15 <= _14; _15 += _16) { //#29190
            $_.i = _15; //#29188
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29189
            $aload($_.ccrpad); //#29189
        } //#29189
        for (var _1C = 0; _1C < 2; _1C++) { //#29191
            $aload($_.linpad); //#29191
            $k[$j++] = 0; //#29191
            $k[$j++] = 1; //#29191
            for (var _1E = 0; _1E < 93; _1E++) { //#29191
                $k[$j++] = 0; //#29191
            } //#29191
            $k[$j++] = 1; //#29191
            $k[$j++] = 0; //#29191
            $aload($_.ccrpad); //#29191
        } //#29191
        for (var _1G = 0; _1G < 2; _1G++) { //#29192
            $aload($_.linpad); //#29192
            $k[$j++] = 1; //#29192
            $k[$j++] = 0; //#29192
            for (var _1I = 0; _1I < 93; _1I++) { //#29192
                $k[$j++] = 0; //#29192
            } //#29192
            $k[$j++] = 0; //#29192
            $k[$j++] = 1; //#29192
            $aload($_.ccrpad); //#29192
        } //#29192
        for (var _1K = 0; _1K < 2; _1K++) { //#29193
            $aload($_.linpad); //#29193
            $k[$j++] = 0; //#29193
            $k[$j++] = 1; //#29193
            for (var _1M = 0; _1M < 93; _1M++) { //#29193
                $k[$j++] = 0; //#29193
            } //#29193
            $k[$j++] = 1; //#29193
            $k[$j++] = 0; //#29193
            $aload($_.ccrpad); //#29193
        } //#29193
        for (var _1O = 71; _1O >= 0; _1O -= 1) { //#29212
            $_.y = _1O; //#29195
            $aload($_.linpad); //#29196
            $k[$j++] = 0; //#29210
            for (var _1S = 0, _1R = $_.sbs.length - 1; _1S <= _1R; _1S += 1) { //#29210
                $_.i = _1S; //#29199
                if (($_.i % 2) == 0) { //#29208
                    var _1X = $get($_.bbs, ~~($_.i / 2)) * 72; //#29202
                    if ((_1X > $_.y) || (($f(_1X + ($get($_.bhs, ~~($_.i / 2)) * 72))) < $_.y)) { //#29205
                        for (var _1g = 0, _1h = $cvi($get($_.sbs, $_.i)); _1g < _1h; _1g++) { //#29203
                            $k[$j++] = 0; //#29203
                        } //#29203
                    } else { //#29205
                        for (var _1l = 0, _1m = $cvi($get($_.sbs, $_.i)); _1l < _1m; _1l++) { //#29205
                            $k[$j++] = 1; //#29205
                        } //#29205
                    } //#29205
                } else { //#29208
                    for (var _1q = 0, _1r = $cvi($get($_.sbs, $_.i)); _1q < _1r; _1q++) { //#29208
                        $k[$j++] = 0; //#29208
                    } //#29208
                } //#29208
            } //#29208
            if ($_.diff < 0) { //#29211
                $k[$j++] = 0; //#29211
            } //#29211
        } //#29211
        $_.pixs = $a(); //#29211
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29215
        var _22 = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29223
        $k[$j++] = _22; //#29230
        if (!$_.dontdraw) { //#29230
            $$.save(); //#29227
            bwipp_renmatrix(); //#29228
            $$.restore(); //#29229
        } //#29229
    } //#29229
    $_ = $__; //#29233
} //bwipp_ean13composite
function bwipp_ean8composite() {
    var $__ = $_; //#29265
    $_ = Object.assign({}, $_); //#29265
    $_.dontdraw = false; //#29268
    $_.usematrix = false; //#29269
    $_.parse = false; //#29270
    $_.dontlint = false; //#29271
    $_.lintreqs = true; //#29272
    $k[$j++] = $_; //#29274
    bwipp_processoptions(); //#29274
    $_.options = $k[--$j]; //#29274
    $_.barcode = $k[--$j]; //#29275
    if ($_.dontdraw) { //#29277
        $_.usematrix = true; //#29277
    } //#29277
    $search($_.barcode, "|"); //#29280
    if ($k[--$j]) { //#29285
        $_.linear = $k[--$j]; //#29281
        $j--; //#29282
        $_.comp = $k[--$j]; //#29283
    } else { //#29285
        $j--; //#29285
        $k[$j++] = 'bwipp.missingCompositeComponent#29285'; //#29285
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29285
        bwipp_raiseerror(); //#29285
    } //#29285
    $put($_.options, "lintype", "ean8"); //#29289
    $put($_.options, "inkspreadv", 0); //#29290
    $put($_.options, "dontdraw", true); //#29291
    $put($_.options, "dontlint", true); //#29292
    var _C = $s($_.comp.length + 18); //#29295
    $puti(_C, 0, "(01)00000000000000"); //#29296
    $puti(_C, 18, $_.comp); //#29297
    $k[$j++] = _C; //#29298
    $k[$j++] = 'ai'; //#29298
    bwipp_gs1process(); //#29298
    $j -= 3; //#29298
    $k[$j++] = $_.linear; //#29301
    $k[$j++] = $_.options; //#29301
    bwipp_ean8(); //#29301
    if (!$_.usematrix) { //#29395
        $$.save(); //#29303
        bwipp_renlinear(); //#29305
        var _H = $$.currpos(); //#29307
        $k[$j++] = _H.x; //#29310
        $k[$j++] = _H.y; //#29310
        $k[$j++] = $_.comp; //#29310
        $k[$j++] = $_.options; //#29310
        bwipp_gs1_cc(); //#29310
        var _K = $k[--$j]; //#29311
        $$.rmoveto(70 - $get(_K, "pixx"), 78); //#29311
        $k[$j++] = _K; //#29312
        bwipp_renmatrix(); //#29312
        var _M = $k[--$j]; //#29315
        $$.moveto($k[--$j] - 1, _M + 72); //#29315
        $k[$j++] = Infinity; //#29315
        $k[$j++] = Infinity; //#29317
        $k[$j++] = 0; //#29318
        $k[$j++] = 1; //#29318
        for (var _O = 0; _O < 65; _O++) { //#29318
            $k[$j++] = 0; //#29318
        } //#29318
        $k[$j++] = 1; //#29319
        $k[$j++] = 0; //#29319
        $k[$j++] = 1; //#29319
        $k[$j++] = 0; //#29319
        for (var _P = 0; _P < 65; _P++) { //#29319
            $k[$j++] = 0; //#29319
        } //#29319
        $k[$j++] = 0; //#29320
        $k[$j++] = 1; //#29320
        $k[$j++] = 0; //#29320
        $k[$j++] = 1; //#29320
        for (var _Q = 0; _Q < 65; _Q++) { //#29320
            $k[$j++] = 0; //#29320
        } //#29320
        $k[$j++] = 1; //#29320
        $k[$j++] = 0; //#29320
        var _R = $a(); //#29320
        $k[$j++] = 'ren'; //#29326
        $k[$j++] = 'renmatrix'; //#29326
        $k[$j++] = 'pixs'; //#29326
        $k[$j++] = _R; //#29326
        $k[$j++] = 'pixx'; //#29326
        $k[$j++] = 69; //#29326
        $k[$j++] = 'pixy'; //#29326
        $k[$j++] = 3; //#29326
        $k[$j++] = 'height'; //#29326
        $k[$j++] = 6 / 72; //#29326
        $k[$j++] = 'width'; //#29326
        $k[$j++] = 69 / 72; //#29326
        $k[$j++] = 'opt'; //#29326
        $k[$j++] = $_.options; //#29326
        var _T = $d(); //#29326
        $k[$j++] = _T; //#29327
        bwipp_renmatrix(); //#29327
        $$.restore(); //#29329
    } else { //#29395
        $_.linsym = $k[--$j]; //#29331
        $_.sbs = $get($_.linsym, 'sbs'); //#29332
        $_.bhs = $get($_.linsym, 'bhs'); //#29333
        $_.bbs = $get($_.linsym, 'bbs'); //#29334
        $k[$j++] = 'linwidth'; //#29335
        $k[$j++] = 0; //#29335
        $forall($_.sbs, function() { //#29335
            var _c = $k[--$j]; //#29335
            var _d = $k[--$j]; //#29335
            $k[$j++] = $f(_d + $cvi(_c)); //#29335
        }); //#29335
        var _e = $k[--$j]; //#29335
        $_[$k[--$j]] = _e; //#29335
        var _g = $_.comp; //#29337
        $k[$j++] = 'compsym'; //#29337
        $k[$j++] = _g; //#29337
        $k[$j++] = $_.options; //#29337
        bwipp_gs1_cc(); //#29337
        var _i = $k[--$j]; //#29337
        $_[$k[--$j]] = _i; //#29337
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29338
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29339
        $k[$j++] = Infinity; //#29341
        for (var _p = 0, _q = $_.ccpixx - 69; _p < _q; _p++) { //#29341
            $k[$j++] = 0; //#29341
        } //#29341
        $_.linpad = $a(); //#29341
        $_.diff = $f($_.linwidth + $_.linpad.length + 1 - $_.ccpixx); //#29343
        if ($_.diff > 0) { //#29349
            $k[$j++] = Infinity; //#29345
            for (var _x = 0, _y = $_.diff; _x < _y; _x++) { //#29345
                $k[$j++] = 0; //#29345
            } //#29345
            $_.ccrpad = $a(); //#29345
            $_.pixx = $f($_.ccpixx + $_.diff); //#29346
        } else { //#29349
            $_.ccrpad = $a(0); //#29348
            $_.pixx = $_.ccpixx; //#29349
        } //#29349
        $k[$j++] = Infinity; //#29352
        for (var _17 = 0, _18 = $_.ccpixx, _16 = $_.ccpixs.length - 1; _18 < 0 ? _17 >= _16 : _17 <= _16; _17 += _18) { //#29356
            $_.i = _17; //#29354
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29355
            $aload($_.ccrpad); //#29355
        } //#29355
        for (var _1E = 0; _1E < 2; _1E++) { //#29357
            $aload($_.linpad); //#29357
            $k[$j++] = 0; //#29357
            $k[$j++] = 1; //#29357
            for (var _1G = 0; _1G < 65; _1G++) { //#29357
                $k[$j++] = 0; //#29357
            } //#29357
            $k[$j++] = 1; //#29357
            $k[$j++] = 0; //#29357
            $aload($_.ccrpad); //#29357
        } //#29357
        for (var _1I = 0; _1I < 2; _1I++) { //#29358
            $aload($_.linpad); //#29358
            $k[$j++] = 1; //#29358
            $k[$j++] = 0; //#29358
            for (var _1K = 0; _1K < 65; _1K++) { //#29358
                $k[$j++] = 0; //#29358
            } //#29358
            $k[$j++] = 0; //#29358
            $k[$j++] = 1; //#29358
            $aload($_.ccrpad); //#29358
        } //#29358
        for (var _1M = 0; _1M < 2; _1M++) { //#29359
            $aload($_.linpad); //#29359
            $k[$j++] = 0; //#29359
            $k[$j++] = 1; //#29359
            for (var _1O = 0; _1O < 65; _1O++) { //#29359
                $k[$j++] = 0; //#29359
            } //#29359
            $k[$j++] = 1; //#29359
            $k[$j++] = 0; //#29359
            $aload($_.ccrpad); //#29359
        } //#29359
        for (var _1Q = 71; _1Q >= 0; _1Q -= 1) { //#29378
            $_.y = _1Q; //#29361
            $aload($_.linpad); //#29362
            $k[$j++] = 0; //#29376
            for (var _1U = 0, _1T = $_.sbs.length - 1; _1U <= _1T; _1U += 1) { //#29376
                $_.i = _1U; //#29365
                if (($_.i % 2) == 0) { //#29374
                    var _1Z = $get($_.bbs, ~~($_.i / 2)) * 72; //#29368
                    if ((_1Z > $_.y) || (($f(_1Z + ($get($_.bhs, ~~($_.i / 2)) * 72))) < $_.y)) { //#29371
                        for (var _1i = 0, _1j = $cvi($get($_.sbs, $_.i)); _1i < _1j; _1i++) { //#29369
                            $k[$j++] = 0; //#29369
                        } //#29369
                    } else { //#29371
                        for (var _1n = 0, _1o = $cvi($get($_.sbs, $_.i)); _1n < _1o; _1n++) { //#29371
                            $k[$j++] = 1; //#29371
                        } //#29371
                    } //#29371
                } else { //#29374
                    for (var _1s = 0, _1t = $cvi($get($_.sbs, $_.i)); _1s < _1t; _1s++) { //#29374
                        $k[$j++] = 0; //#29374
                    } //#29374
                } //#29374
            } //#29374
            if ($_.diff < 0) { //#29377
                $k[$j++] = 0; //#29377
            } //#29377
        } //#29377
        $_.pixs = $a(); //#29377
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29381
        var _24 = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29389
        $k[$j++] = _24; //#29396
        if (!$_.dontdraw) { //#29396
            $$.save(); //#29393
            bwipp_renmatrix(); //#29394
            $$.restore(); //#29395
        } //#29395
    } //#29395
    $_ = $__; //#29399
} //bwipp_ean8composite
function bwipp_upcacomposite() {
    var $__ = $_; //#29431
    $_ = Object.assign({}, $_); //#29431
    $_.dontdraw = false; //#29434
    $_.usematrix = false; //#29435
    $_.parse = false; //#29436
    $_.dontlint = false; //#29437
    $_.lintreqs = true; //#29438
    $k[$j++] = $_; //#29440
    bwipp_processoptions(); //#29440
    $_.options = $k[--$j]; //#29440
    $_.barcode = $k[--$j]; //#29441
    if ($_.dontdraw) { //#29443
        $_.usematrix = true; //#29443
    } //#29443
    $search($_.barcode, "|"); //#29446
    if ($k[--$j]) { //#29451
        $_.linear = $k[--$j]; //#29447
        $j--; //#29448
        $_.comp = $k[--$j]; //#29449
    } else { //#29451
        $j--; //#29451
        $k[$j++] = 'bwipp.missingCompositeComponent#29451'; //#29451
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29451
        bwipp_raiseerror(); //#29451
    } //#29451
    $put($_.options, "lintype", "ean13"); //#29454
    $put($_.options, "inkspreadv", 0); //#29455
    $put($_.options, "dontdraw", true); //#29456
    $put($_.options, "dontlint", true); //#29457
    var _C = $s($_.comp.length + 18); //#29460
    $puti(_C, 0, "(01)00000000000000"); //#29461
    $puti(_C, 18, $_.comp); //#29462
    $k[$j++] = _C; //#29463
    $k[$j++] = 'ai'; //#29463
    bwipp_gs1process(); //#29463
    $j -= 3; //#29463
    $k[$j++] = $_.linear; //#29466
    $k[$j++] = $_.options; //#29466
    bwipp_upca(); //#29466
    if (!$_.usematrix) { //#29558
        $$.save(); //#29468
        bwipp_renlinear(); //#29470
        var _H = $$.currpos(); //#29472
        $$.rmoveto(-3, 78); //#29475
        $k[$j++] = _H.x; //#29475
        $k[$j++] = _H.y; //#29475
        $k[$j++] = $_.comp; //#29475
        $k[$j++] = $_.options; //#29475
        bwipp_gs1_cc(); //#29475
        bwipp_renmatrix(); //#29475
        var _K = $k[--$j]; //#29478
        $$.moveto($k[--$j] - 1, _K + 72); //#29478
        $k[$j++] = Infinity; //#29478
        $k[$j++] = Infinity; //#29480
        $k[$j++] = 0; //#29481
        $k[$j++] = 1; //#29481
        for (var _M = 0; _M < 93; _M++) { //#29481
            $k[$j++] = 0; //#29481
        } //#29481
        $k[$j++] = 1; //#29482
        $k[$j++] = 0; //#29482
        $k[$j++] = 1; //#29482
        $k[$j++] = 0; //#29482
        for (var _N = 0; _N < 93; _N++) { //#29482
            $k[$j++] = 0; //#29482
        } //#29482
        $k[$j++] = 0; //#29483
        $k[$j++] = 1; //#29483
        $k[$j++] = 0; //#29483
        $k[$j++] = 1; //#29483
        for (var _O = 0; _O < 93; _O++) { //#29483
            $k[$j++] = 0; //#29483
        } //#29483
        $k[$j++] = 1; //#29483
        $k[$j++] = 0; //#29483
        var _P = $a(); //#29483
        $k[$j++] = 'ren'; //#29489
        $k[$j++] = 'renmatrix'; //#29489
        $k[$j++] = 'pixs'; //#29489
        $k[$j++] = _P; //#29489
        $k[$j++] = 'pixx'; //#29489
        $k[$j++] = 97; //#29489
        $k[$j++] = 'pixy'; //#29489
        $k[$j++] = 3; //#29489
        $k[$j++] = 'height'; //#29489
        $k[$j++] = 6 / 72; //#29489
        $k[$j++] = 'width'; //#29489
        $k[$j++] = 97 / 72; //#29489
        $k[$j++] = 'opt'; //#29489
        $k[$j++] = $_.options; //#29489
        var _R = $d(); //#29489
        $k[$j++] = _R; //#29490
        bwipp_renmatrix(); //#29490
        $$.restore(); //#29492
    } else { //#29558
        $_.linsym = $k[--$j]; //#29494
        $_.sbs = $get($_.linsym, 'sbs'); //#29495
        $_.bhs = $get($_.linsym, 'bhs'); //#29496
        $_.bbs = $get($_.linsym, 'bbs'); //#29497
        $k[$j++] = 'linwidth'; //#29498
        $k[$j++] = 0; //#29498
        $forall($_.sbs, function() { //#29498
            var _a = $k[--$j]; //#29498
            var _b = $k[--$j]; //#29498
            $k[$j++] = $f(_b + $cvi(_a)); //#29498
        }); //#29498
        var _c = $k[--$j]; //#29498
        $_[$k[--$j]] = _c; //#29498
        $k[$j++] = 'compsym'; //#29500
        $k[$j++] = $_.comp; //#29500
        $k[$j++] = $_.options; //#29500
        bwipp_gs1_cc(); //#29500
        var _g = $k[--$j]; //#29500
        $_[$k[--$j]] = _g; //#29500
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29501
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29502
        $k[$j++] = Infinity; //#29504
        for (var _n = 0, _o = $_.ccpixx - 97; _n < _o; _n++) { //#29504
            $k[$j++] = 0; //#29504
        } //#29504
        $_.linpad = $a(); //#29504
        $_.diff = $f($_.linwidth + $_.linpad.length + 1 - $_.ccpixx); //#29506
        if ($_.diff > 0) { //#29512
            $k[$j++] = Infinity; //#29508
            for (var _v = 0, _w = $_.diff; _v < _w; _v++) { //#29508
                $k[$j++] = 0; //#29508
            } //#29508
            $_.ccrpad = $a(); //#29508
            $_.pixx = $f($_.ccpixx + $_.diff); //#29509
        } else { //#29512
            $_.ccrpad = $a(0); //#29511
            $_.pixx = $_.ccpixx; //#29512
        } //#29512
        $k[$j++] = Infinity; //#29515
        for (var _15 = 0, _16 = $_.ccpixx, _14 = $_.ccpixs.length - 1; _16 < 0 ? _15 >= _14 : _15 <= _14; _15 += _16) { //#29519
            $_.i = _15; //#29517
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29518
            $aload($_.ccrpad); //#29518
        } //#29518
        for (var _1C = 0; _1C < 2; _1C++) { //#29520
            $aload($_.linpad); //#29520
            $k[$j++] = 0; //#29520
            $k[$j++] = 1; //#29520
            for (var _1E = 0; _1E < 93; _1E++) { //#29520
                $k[$j++] = 0; //#29520
            } //#29520
            $k[$j++] = 1; //#29520
            $k[$j++] = 0; //#29520
            $aload($_.ccrpad); //#29520
        } //#29520
        for (var _1G = 0; _1G < 2; _1G++) { //#29521
            $aload($_.linpad); //#29521
            $k[$j++] = 1; //#29521
            $k[$j++] = 0; //#29521
            for (var _1I = 0; _1I < 93; _1I++) { //#29521
                $k[$j++] = 0; //#29521
            } //#29521
            $k[$j++] = 0; //#29521
            $k[$j++] = 1; //#29521
            $aload($_.ccrpad); //#29521
        } //#29521
        for (var _1K = 0; _1K < 2; _1K++) { //#29522
            $aload($_.linpad); //#29522
            $k[$j++] = 0; //#29522
            $k[$j++] = 1; //#29522
            for (var _1M = 0; _1M < 93; _1M++) { //#29522
                $k[$j++] = 0; //#29522
            } //#29522
            $k[$j++] = 1; //#29522
            $k[$j++] = 0; //#29522
            $aload($_.ccrpad); //#29522
        } //#29522
        for (var _1O = 71; _1O >= 0; _1O -= 1) { //#29541
            $_.y = _1O; //#29524
            $aload($_.linpad); //#29525
            $k[$j++] = 0; //#29539
            for (var _1S = 0, _1R = $_.sbs.length - 1; _1S <= _1R; _1S += 1) { //#29539
                $_.i = _1S; //#29528
                if (($_.i % 2) == 0) { //#29537
                    var _1X = $get($_.bbs, ~~($_.i / 2)) * 72; //#29531
                    if ((_1X > $_.y) || (($f(_1X + ($get($_.bhs, ~~($_.i / 2)) * 72))) < $_.y)) { //#29534
                        for (var _1g = 0, _1h = $cvi($get($_.sbs, $_.i)); _1g < _1h; _1g++) { //#29532
                            $k[$j++] = 0; //#29532
                        } //#29532
                    } else { //#29534
                        for (var _1l = 0, _1m = $cvi($get($_.sbs, $_.i)); _1l < _1m; _1l++) { //#29534
                            $k[$j++] = 1; //#29534
                        } //#29534
                    } //#29534
                } else { //#29537
                    for (var _1q = 0, _1r = $cvi($get($_.sbs, $_.i)); _1q < _1r; _1q++) { //#29537
                        $k[$j++] = 0; //#29537
                    } //#29537
                } //#29537
            } //#29537
            if ($_.diff < 0) { //#29540
                $k[$j++] = 0; //#29540
            } //#29540
        } //#29540
        $_.pixs = $a(); //#29540
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29544
        var _22 = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29552
        $k[$j++] = _22; //#29559
        if (!$_.dontdraw) { //#29559
            $$.save(); //#29556
            bwipp_renmatrix(); //#29557
            $$.restore(); //#29558
        } //#29558
    } //#29558
    $_ = $__; //#29562
} //bwipp_upcacomposite
function bwipp_upcecomposite() {
    var $__ = $_; //#29594
    $_ = Object.assign({}, $_); //#29594
    $_.dontdraw = false; //#29597
    $_.usematrix = false; //#29598
    $_.parse = false; //#29599
    $_.dontlint = false; //#29600
    $_.lintreqs = true; //#29601
    $k[$j++] = $_; //#29603
    bwipp_processoptions(); //#29603
    $_.options = $k[--$j]; //#29603
    $_.barcode = $k[--$j]; //#29604
    if ($_.dontdraw) { //#29606
        $_.usematrix = true; //#29606
    } //#29606
    $search($_.barcode, "|"); //#29609
    if ($k[--$j]) { //#29614
        $_.linear = $k[--$j]; //#29610
        $j--; //#29611
        $_.comp = $k[--$j]; //#29612
    } else { //#29614
        $j--; //#29614
        $k[$j++] = 'bwipp.missingCompositeComponent#29614'; //#29614
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29614
        bwipp_raiseerror(); //#29614
    } //#29614
    $put($_.options, "lintype", "upce"); //#29617
    $put($_.options, "inkspreadv", 0); //#29618
    $put($_.options, "dontdraw", true); //#29619
    $put($_.options, "dontlint", true); //#29620
    var _C = $s($_.comp.length + 18); //#29623
    $puti(_C, 0, "(01)00000000000000"); //#29624
    $puti(_C, 18, $_.comp); //#29625
    $k[$j++] = _C; //#29626
    $k[$j++] = 'ai'; //#29626
    bwipp_gs1process(); //#29626
    $j -= 3; //#29626
    $k[$j++] = $_.linear; //#29629
    $k[$j++] = $_.options; //#29629
    bwipp_upce(); //#29629
    if (!$_.usematrix) { //#29721
        $$.save(); //#29631
        bwipp_renlinear(); //#29633
        var _H = $$.currpos(); //#29635
        $$.rmoveto(-3, 78); //#29638
        $k[$j++] = _H.x; //#29638
        $k[$j++] = _H.y; //#29638
        $k[$j++] = $_.comp; //#29638
        $k[$j++] = $_.options; //#29638
        bwipp_gs1_cc(); //#29638
        bwipp_renmatrix(); //#29638
        var _K = $k[--$j]; //#29641
        $$.moveto($k[--$j] - 1, _K + 72); //#29641
        $k[$j++] = Infinity; //#29641
        $k[$j++] = Infinity; //#29643
        $k[$j++] = 0; //#29644
        $k[$j++] = 1; //#29644
        for (var _M = 0; _M < 49; _M++) { //#29644
            $k[$j++] = 0; //#29644
        } //#29644
        $k[$j++] = 1; //#29645
        $k[$j++] = 0; //#29645
        $k[$j++] = 1; //#29645
        $k[$j++] = 0; //#29645
        for (var _N = 0; _N < 49; _N++) { //#29645
            $k[$j++] = 0; //#29645
        } //#29645
        $k[$j++] = 0; //#29646
        $k[$j++] = 1; //#29646
        $k[$j++] = 0; //#29646
        $k[$j++] = 1; //#29646
        for (var _O = 0; _O < 49; _O++) { //#29646
            $k[$j++] = 0; //#29646
        } //#29646
        $k[$j++] = 1; //#29646
        $k[$j++] = 0; //#29646
        var _P = $a(); //#29646
        $k[$j++] = 'ren'; //#29652
        $k[$j++] = 'renmatrix'; //#29652
        $k[$j++] = 'pixs'; //#29652
        $k[$j++] = _P; //#29652
        $k[$j++] = 'pixx'; //#29652
        $k[$j++] = 53; //#29652
        $k[$j++] = 'pixy'; //#29652
        $k[$j++] = 3; //#29652
        $k[$j++] = 'height'; //#29652
        $k[$j++] = 6 / 72; //#29652
        $k[$j++] = 'width'; //#29652
        $k[$j++] = 53 / 72; //#29652
        $k[$j++] = 'opt'; //#29652
        $k[$j++] = $_.options; //#29652
        var _R = $d(); //#29652
        $k[$j++] = _R; //#29653
        bwipp_renmatrix(); //#29653
        $$.restore(); //#29655
    } else { //#29721
        $_.linsym = $k[--$j]; //#29657
        $_.sbs = $get($_.linsym, 'sbs'); //#29658
        $_.bhs = $get($_.linsym, 'bhs'); //#29659
        $_.bbs = $get($_.linsym, 'bbs'); //#29660
        $k[$j++] = 'linwidth'; //#29661
        $k[$j++] = 0; //#29661
        $forall($_.sbs, function() { //#29661
            var _a = $k[--$j]; //#29661
            var _b = $k[--$j]; //#29661
            $k[$j++] = $f(_b + $cvi(_a)); //#29661
        }); //#29661
        var _c = $k[--$j]; //#29661
        $_[$k[--$j]] = _c; //#29661
        $k[$j++] = 'compsym'; //#29663
        $k[$j++] = $_.comp; //#29663
        $k[$j++] = $_.options; //#29663
        bwipp_gs1_cc(); //#29663
        var _g = $k[--$j]; //#29663
        $_[$k[--$j]] = _g; //#29663
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29664
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29665
        $k[$j++] = Infinity; //#29667
        for (var _n = 0, _o = $_.ccpixx - 53; _n < _o; _n++) { //#29667
            $k[$j++] = 0; //#29667
        } //#29667
        $_.linpad = $a(); //#29667
        $_.diff = $f($_.linwidth + $_.linpad.length + 1 - $_.ccpixx); //#29669
        if ($_.diff > 0) { //#29675
            $k[$j++] = Infinity; //#29671
            for (var _v = 0, _w = $_.diff; _v < _w; _v++) { //#29671
                $k[$j++] = 0; //#29671
            } //#29671
            $_.ccrpad = $a(); //#29671
            $_.pixx = $f($_.ccpixx + $_.diff); //#29672
        } else { //#29675
            $_.ccrpad = $a(0); //#29674
            $_.pixx = $_.ccpixx; //#29675
        } //#29675
        $k[$j++] = Infinity; //#29678
        for (var _15 = 0, _16 = $_.ccpixx, _14 = $_.ccpixs.length - 1; _16 < 0 ? _15 >= _14 : _15 <= _14; _15 += _16) { //#29682
            $_.i = _15; //#29680
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29681
            $aload($_.ccrpad); //#29681
        } //#29681
        for (var _1C = 0; _1C < 2; _1C++) { //#29683
            $aload($_.linpad); //#29683
            $k[$j++] = 0; //#29683
            $k[$j++] = 1; //#29683
            for (var _1E = 0; _1E < 49; _1E++) { //#29683
                $k[$j++] = 0; //#29683
            } //#29683
            $k[$j++] = 1; //#29683
            $k[$j++] = 0; //#29683
            $aload($_.ccrpad); //#29683
        } //#29683
        for (var _1G = 0; _1G < 2; _1G++) { //#29684
            $aload($_.linpad); //#29684
            $k[$j++] = 1; //#29684
            $k[$j++] = 0; //#29684
            for (var _1I = 0; _1I < 49; _1I++) { //#29684
                $k[$j++] = 0; //#29684
            } //#29684
            $k[$j++] = 0; //#29684
            $k[$j++] = 1; //#29684
            $aload($_.ccrpad); //#29684
        } //#29684
        for (var _1K = 0; _1K < 2; _1K++) { //#29685
            $aload($_.linpad); //#29685
            $k[$j++] = 0; //#29685
            $k[$j++] = 1; //#29685
            for (var _1M = 0; _1M < 49; _1M++) { //#29685
                $k[$j++] = 0; //#29685
            } //#29685
            $k[$j++] = 1; //#29685
            $k[$j++] = 0; //#29685
            $aload($_.ccrpad); //#29685
        } //#29685
        for (var _1O = 71; _1O >= 0; _1O -= 1) { //#29704
            $_.y = _1O; //#29687
            $aload($_.linpad); //#29688
            $k[$j++] = 0; //#29702
            for (var _1S = 0, _1R = $_.sbs.length - 1; _1S <= _1R; _1S += 1) { //#29702
                $_.i = _1S; //#29691
                if (($_.i % 2) == 0) { //#29700
                    var _1X = $get($_.bbs, ~~($_.i / 2)) * 72; //#29694
                    if ((_1X > $_.y) || (($f(_1X + ($get($_.bhs, ~~($_.i / 2)) * 72))) < $_.y)) { //#29697
                        for (var _1g = 0, _1h = $cvi($get($_.sbs, $_.i)); _1g < _1h; _1g++) { //#29695
                            $k[$j++] = 0; //#29695
                        } //#29695
                    } else { //#29697
                        for (var _1l = 0, _1m = $cvi($get($_.sbs, $_.i)); _1l < _1m; _1l++) { //#29697
                            $k[$j++] = 1; //#29697
                        } //#29697
                    } //#29697
                } else { //#29700
                    for (var _1q = 0, _1r = $cvi($get($_.sbs, $_.i)); _1q < _1r; _1q++) { //#29700
                        $k[$j++] = 0; //#29700
                    } //#29700
                } //#29700
            } //#29700
            if ($_.diff < 0) { //#29703
                $k[$j++] = 0; //#29703
            } //#29703
        } //#29703
        $_.pixs = $a(); //#29703
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29707
        var _22 = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29715
        $k[$j++] = _22; //#29722
        if (!$_.dontdraw) { //#29722
            $$.save(); //#29719
            bwipp_renmatrix(); //#29720
            $$.restore(); //#29721
        } //#29721
    } //#29721
    $_ = $__; //#29725
} //bwipp_upcecomposite
function bwipp_databaromnicomposite() {
    var $__ = $_; //#29757
    $_ = Object.assign({}, $_); //#29757
    $_.dontdraw = false; //#29760
    $_.usematrix = false; //#29761
    $_.parse = false; //#29762
    $_.dontlint = false; //#29763
    $_.lintreqs = true; //#29764
    $k[$j++] = $_; //#29766
    bwipp_processoptions(); //#29766
    $_.options = $k[--$j]; //#29766
    $_.barcode = $k[--$j]; //#29767
    if ($_.dontdraw) { //#29769
        $_.usematrix = true; //#29769
    } //#29769
    $search($_.barcode, "|"); //#29772
    if ($k[--$j]) { //#29777
        $_.linear = $k[--$j]; //#29773
        $j--; //#29774
        $_.comp = $k[--$j]; //#29775
    } else { //#29777
        $j--; //#29777
        $k[$j++] = 'bwipp.missingCompositeComponent#29777'; //#29777
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29777
        bwipp_raiseerror(); //#29777
    } //#29777
    if (!$_.usematrix) { //#29780
        $$.save(); //#29780
    } //#29780
    $put($_.options, "lintype", "databaromni"); //#29782
    $put($_.options, "linkage", true); //#29783
    $put($_.options, "inkspreadv", 0); //#29784
    $put($_.options, "dontdraw", true); //#29785
    $put($_.options, "dontlint", true); //#29786
    var _F = $s($_.linear.length + $_.comp.length); //#29789
    $puti(_F, 0, $_.linear); //#29790
    $puti(_F, $_.linear.length, $_.comp); //#29791
    $k[$j++] = _F; //#29792
    $k[$j++] = 'ai'; //#29792
    bwipp_gs1process(); //#29792
    $j -= 3; //#29792
    $k[$j++] = $_.linear; //#29795
    $k[$j++] = $_.options; //#29795
    bwipp_databaromni(); //#29795
    var _L = $k[--$j]; //#29796
    $_.linsbs = $get(_L, "sbs"); //#29796
    $_.linheight = $get($get(_L, "bhs"), 0) * 72; //#29797
    $k[$j++] = _L; //#29798
    if (!$_.usematrix) { //#29798
        bwipp_renlinear(); //#29798
    } else { //#29798
        $j--; //#29798
    } //#29798
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#29802
        for (var _U = $_.fp, _T = $_.fp + 12; _U <= _T; _U += 1) { //#29815
            $_.i = _U; //#29804
            if ($get($_.bot, $_.i) == 0) { //#29812
                if ($get($_.bot, $_.i - 1) == 1) { //#29809
                    $k[$j++] = 1; //#29807
                } else { //#29809
                    var _e = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#29809
                    $k[$j++] = _e; //#29809
                } //#29809
            } else { //#29812
                $k[$j++] = 0; //#29812
            } //#29812
            $put($_.sep, $_.i, $k[--$j]); //#29814
        } //#29814
        $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#29816
        $k[$j++] = true; //#29817
        for (var _j = 0; _j <= 12; _j += 1) { //#29817
            var _p = $k[--$j]; //#29817
            $k[$j++] = _p && $eq($get($_.bot, $f(_j + $_.fp)), $get($_.f3, _j)); //#29817
        } //#29817
        if ($k[--$j]) { //#29820
            $puti($_.sep, $_.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#29819
        } //#29819
    }; //#29819
    $k[$j++] = Infinity; //#29822
    $k[$j++] = 0; //#29823
    $forall($_.linsbs, function() { //#29823
        var _v = $k[--$j]; //#29823
        var _w = $k[$j - 1]; //#29823
        var _x = (_w == 1) ? 0 : 1; //#29823
        for (var _y = 0, _z = _v; _y < _z; _y++) { //#29823
            $k[$j++] = _x //#29823
        } //#29823
    }); //#29823
    $astore($a($counttomark() - 1)); //#29824
    $_.bot = $k[--$j]; //#29824
    $j -= 2; //#29824
    $k[$j++] = Infinity; //#29825
    $forall($_.bot, function() { //#29825
        var _14 = $k[--$j]; //#29825
        $k[$j++] = 1 - _14; //#29825
    }); //#29825
    $_.sep = $a(); //#29825
    $puti($_.sep, 0, $a([0, 0, 0])); //#29826
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#29827
    $k[$j++] = 18; //#29828
    $_.sepfinder(); //#29828
    $k[$j++] = 64; //#29828
    $_.sepfinder(); //#29828
    if (!$_.usematrix) { //#29883
        var _1C = $$.currpos(); //#29832
        $$.rmoveto(-5, $_.linheight + 1); //#29835
        $k[$j++] = _1C.x; //#29835
        $k[$j++] = _1C.y; //#29835
        $k[$j++] = $_.comp; //#29835
        $k[$j++] = $_.options; //#29835
        bwipp_gs1_cc(); //#29835
        bwipp_renmatrix(); //#29835
        var _1H = $k[--$j]; //#29837
        $$.moveto($k[--$j], $f(_1H + $_.linheight)); //#29837
        var _1N = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#29844
        $k[$j++] = _1N; //#29845
        bwipp_renmatrix(); //#29845
        $$.restore(); //#29847
    } else { //#29883
        $k[$j++] = 'compsym'; //#29849
        $k[$j++] = $_.comp; //#29849
        $k[$j++] = $_.options; //#29849
        bwipp_gs1_cc(); //#29849
        var _1Q = $k[--$j]; //#29849
        $_[$k[--$j]] = _1Q; //#29849
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29850
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29851
        $k[$j++] = Infinity; //#29853
        $k[$j++] = 0; //#29854
        $forall($_.linsbs, function() { //#29854
            var _1X = $k[--$j]; //#29854
            var _1Y = $k[$j - 1]; //#29854
            var _1Z = (_1Y == 0) ? 1 : 0; //#29854
            for (var _1a = 0, _1b = $cvi(_1X); _1a < _1b; _1a++) { //#29854
                $k[$j++] = _1Z //#29854
            } //#29854
        }); //#29854
        $_.linpixs = $a(); //#29854
        $k[$j++] = Infinity; //#29856
        $k[$j++] = 0; //#29856
        $aload($_.sep); //#29856
        $_.sep = $a(); //#29856
        $_.linheight = ~~$_.linheight; //#29858
        $k[$j++] = Infinity; //#29860
        for (var _1j = 0, _1k = $_.ccpixx, _1i = $_.ccpixs.length - 1; _1k < 0 ? _1j >= _1i : _1j <= _1i; _1j += _1k) { //#29864
            $_.i = _1j; //#29862
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29863
            $k[$j++] = 0; //#29863
        } //#29863
        $k[$j++] = 0; //#29865
        $k[$j++] = 0; //#29865
        $k[$j++] = 0; //#29865
        $k[$j++] = 0; //#29865
        $aload($_.sep); //#29865
        for (var _1r = 0, _1s = $_.linheight; _1r < _1s; _1r++) { //#29865
            $k[$j++] = 0; //#29865
            $k[$j++] = 0; //#29865
            $k[$j++] = 0; //#29865
            $k[$j++] = 0; //#29865
            $aload($_.linpixs); //#29865
        } //#29865
        $_.pixs = $a(); //#29865
        $_.pixx = $_.ccpixx + 1; //#29867
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29869
        var _24 = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29877
        $k[$j++] = _24; //#29884
        if (!$_.dontdraw) { //#29884
            $$.save(); //#29881
            bwipp_renmatrix(); //#29882
            $$.restore(); //#29883
        } //#29883
    } //#29883
    $_ = $__; //#29887
} //bwipp_databaromnicomposite
function bwipp_databarstackedcomposite() {
    var $__ = $_; //#29918
    $_ = Object.assign({}, $_); //#29918
    $_.dontdraw = false; //#29921
    $_.usematrix = false; //#29922
    $_.parse = false; //#29923
    $_.dontlint = false; //#29924
    $_.lintreqs = true; //#29925
    $k[$j++] = $_; //#29927
    bwipp_processoptions(); //#29927
    $_.options = $k[--$j]; //#29927
    $_.barcode = $k[--$j]; //#29928
    if ($_.dontdraw) { //#29930
        $_.usematrix = true; //#29930
    } //#29930
    $search($_.barcode, "|"); //#29933
    if ($k[--$j]) { //#29938
        $_.linear = $k[--$j]; //#29934
        $j--; //#29935
        $_.comp = $k[--$j]; //#29936
    } else { //#29938
        $j--; //#29938
        $k[$j++] = 'bwipp.missingCompositeComponent#29938'; //#29938
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29938
        bwipp_raiseerror(); //#29938
    } //#29938
    if (!$_.usematrix) { //#29941
        $$.save(); //#29941
    } //#29941
    $put($_.options, "lintype", "databarstacked"); //#29943
    $put($_.options, "linkage", true); //#29944
    $put($_.options, "inkspreadv", 0); //#29945
    $put($_.options, "dontdraw", true); //#29946
    $put($_.options, "dontlint", true); //#29947
    var _F = $s($_.linear.length + $_.comp.length); //#29950
    $puti(_F, 0, $_.linear); //#29951
    $puti(_F, $_.linear.length, $_.comp); //#29952
    $k[$j++] = _F; //#29953
    $k[$j++] = 'ai'; //#29953
    bwipp_gs1process(); //#29953
    $j -= 3; //#29953
    $k[$j++] = $_.linear; //#29956
    $k[$j++] = $_.options; //#29956
    bwipp_databarstacked(); //#29956
    var _L = $k[--$j]; //#29957
    $_.bot = $geti($get(_L, "pixs"), 0, $get(_L, "pixx")); //#29957
    $_.linheight = $get(_L, "pixy"); //#29958
    $k[$j++] = _L; //#29959
    if (!$_.usematrix) { //#29959
        bwipp_renmatrix(); //#29959
    } else { //#29959
        $_.linpixs = $get($k[--$j], 'pixs'); //#29959
    } //#29959
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#29963
        for (var _X = $_.fp, _W = $_.fp + 12; _X <= _W; _X += 1) { //#29976
            $_.i = _X; //#29965
            if ($get($_.bot, $_.i) == 0) { //#29973
                if ($get($_.bot, $_.i - 1) == 1) { //#29970
                    $k[$j++] = 1; //#29968
                } else { //#29970
                    var _h = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#29970
                    $k[$j++] = _h; //#29970
                } //#29970
            } else { //#29973
                $k[$j++] = 0; //#29973
            } //#29973
            $put($_.sep, $_.i, $k[--$j]); //#29975
        } //#29975
        $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#29977
        $k[$j++] = true; //#29978
        for (var _m = 0; _m <= 12; _m += 1) { //#29978
            var _s = $k[--$j]; //#29978
            $k[$j++] = _s && $eq($get($_.bot, $f(_m + $_.fp)), $get($_.f3, _m)); //#29978
        } //#29978
        if ($k[--$j]) { //#29981
            $puti($_.sep, $_.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#29980
        } //#29980
    }; //#29980
    $k[$j++] = Infinity; //#29983
    var _x = $_.bot; //#29983
    for (var _y = 0, _z = _x.length; _y < _z; _y++) { //#29983
        $k[$j++] = 1 - $get(_x, _y); //#29983
    } //#29983
    $_.sep = $a(); //#29983
    $puti($_.sep, 0, $a([0, 0, 0, 0])); //#29984
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#29985
    $k[$j++] = 18; //#29986
    $_.sepfinder(); //#29986
    if (!$_.usematrix) { //#30040
        var _18 = $$.currpos(); //#29990
        $$.rmoveto(1, $_.linheight + 1); //#29993
        $k[$j++] = _18.x; //#29993
        $k[$j++] = _18.y; //#29993
        $k[$j++] = $_.comp; //#29993
        $k[$j++] = $_.options; //#29993
        bwipp_gs1_cc(); //#29993
        bwipp_renmatrix(); //#29993
        var _1D = $k[--$j]; //#29995
        $$.moveto($k[--$j], $f(_1D + $_.linheight)); //#29995
        var _1J = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#30002
        $k[$j++] = _1J; //#30003
        bwipp_renmatrix(); //#30003
        $$.restore(); //#30005
    } else { //#30040
        $k[$j++] = 'compsym'; //#30007
        $k[$j++] = $_.comp; //#30007
        $k[$j++] = $_.options; //#30007
        bwipp_gs1_cc(); //#30007
        var _1M = $k[--$j]; //#30007
        $_[$k[--$j]] = _1M; //#30007
        $_.ccpixs = $get($_.compsym, 'pixs'); //#30008
        $_.ccpixx = $get($_.compsym, 'pixx'); //#30009
        $_.linwidth = $_.sep.length; //#30011
        $k[$j++] = Infinity; //#30013
        for (var _1W = 0, _1X = $_.ccpixx, _1V = $_.ccpixs.length - 1; _1X < 0 ? _1W >= _1V : _1W <= _1V; _1W += _1X) { //#30017
            $_.i = _1W; //#30015
            $k[$j++] = 0; //#30016
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#30016
        } //#30016
        $aload($_.sep); //#30018
        $k[$j++] = 0; //#30022
        $k[$j++] = 0; //#30022
        $k[$j++] = 0; //#30022
        $k[$j++] = 0; //#30022
        $k[$j++] = 0; //#30022
        $k[$j++] = 0; //#30022
        for (var _1g = 0, _1h = $_.linwidth, _1f = $_.linpixs.length - 1; _1h < 0 ? _1g >= _1f : _1g <= _1f; _1g += _1h) { //#30022
            $_.i = _1g; //#30020
            $aload($geti($_.linpixs, $_.i, $_.linwidth)); //#30021
            $k[$j++] = 0; //#30021
            $k[$j++] = 0; //#30021
            $k[$j++] = 0; //#30021
            $k[$j++] = 0; //#30021
            $k[$j++] = 0; //#30021
            $k[$j++] = 0; //#30021
        } //#30021
        $_.pixs = $a(); //#30021
        $_.pixx = $_.ccpixx + 1; //#30024
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#30026
        var _1w = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#30034
        $k[$j++] = _1w; //#30041
        if (!$_.dontdraw) { //#30041
            $$.save(); //#30038
            bwipp_renmatrix(); //#30039
            $$.restore(); //#30040
        } //#30040
    } //#30040
    $_ = $__; //#30044
} //bwipp_databarstackedcomposite
function bwipp_databarstackedomnicomposite() {
    var $__ = $_; //#30075
    $_ = Object.assign({}, $_); //#30075
    $_.dontdraw = false; //#30078
    $_.usematrix = false; //#30079
    $_.parse = false; //#30080
    $_.dontlint = false; //#30081
    $_.lintreqs = true; //#30082
    $k[$j++] = $_; //#30084
    bwipp_processoptions(); //#30084
    $_.options = $k[--$j]; //#30084
    $_.barcode = $k[--$j]; //#30085
    if ($_.dontdraw) { //#30087
        $_.usematrix = true; //#30087
    } //#30087
    $search($_.barcode, "|"); //#30090
    if ($k[--$j]) { //#30095
        $_.linear = $k[--$j]; //#30091
        $j--; //#30092
        $_.comp = $k[--$j]; //#30093
    } else { //#30095
        $j--; //#30095
        $k[$j++] = 'bwipp.missingCompositeComponent#30095'; //#30095
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#30095
        bwipp_raiseerror(); //#30095
    } //#30095
    if (!$_.usematrix) { //#30098
        $$.save(); //#30098
    } //#30098
    $put($_.options, "lintype", "databarstackedomni"); //#30100
    $put($_.options, "linkage", true); //#30101
    $put($_.options, "inkspreadv", 0); //#30102
    $put($_.options, "dontdraw", true); //#30103
    $put($_.options, "dontlint", true); //#30104
    var _F = $s($_.linear.length + $_.comp.length); //#30107
    $puti(_F, 0, $_.linear); //#30108
    $puti(_F, $_.linear.length, $_.comp); //#30109
    $k[$j++] = _F; //#30110
    $k[$j++] = 'ai'; //#30110
    bwipp_gs1process(); //#30110
    $j -= 3; //#30110
    $k[$j++] = $_.linear; //#30113
    $k[$j++] = $_.options; //#30113
    bwipp_databarstackedomni(); //#30113
    var _L = $k[--$j]; //#30114
    $_.bot = $geti($get(_L, "pixs"), 0, $get(_L, "pixx")); //#30114
    $_.linheight = $get(_L, "pixy"); //#30115
    $k[$j++] = _L; //#30116
    if (!$_.usematrix) { //#30116
        bwipp_renmatrix(); //#30116
    } else { //#30116
        $_.linpixs = $get($k[--$j], 'pixs'); //#30116
    } //#30116
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#30120
        for (var _X = $_.fp, _W = $_.fp + 12; _X <= _W; _X += 1) { //#30133
            $_.i = _X; //#30122
            if ($get($_.bot, $_.i) == 0) { //#30130
                if ($get($_.bot, $_.i - 1) == 1) { //#30127
                    $k[$j++] = 1; //#30125
                } else { //#30127
                    var _h = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#30127
                    $k[$j++] = _h; //#30127
                } //#30127
            } else { //#30130
                $k[$j++] = 0; //#30130
            } //#30130
            $put($_.sep, $_.i, $k[--$j]); //#30132
        } //#30132
        $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#30134
        $k[$j++] = true; //#30135
        for (var _m = 0; _m <= 12; _m += 1) { //#30135
            var _s = $k[--$j]; //#30135
            $k[$j++] = _s && $eq($get($_.bot, $f(_m + $_.fp)), $get($_.f3, _m)); //#30135
        } //#30135
        if ($k[--$j]) { //#30138
            $puti($_.sep, $_.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#30137
        } //#30137
    }; //#30137
    $k[$j++] = Infinity; //#30140
    var _x = $_.bot; //#30140
    for (var _y = 0, _z = _x.length; _y < _z; _y++) { //#30140
        $k[$j++] = 1 - $get(_x, _y); //#30140
    } //#30140
    $_.sep = $a(); //#30140
    $puti($_.sep, 0, $a([0, 0, 0, 0])); //#30141
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#30142
    $k[$j++] = 18; //#30143
    $_.sepfinder(); //#30143
    if (!$_.usematrix) { //#30197
        var _18 = $$.currpos(); //#30147
        $$.rmoveto(1, $_.linheight + 1); //#30150
        $k[$j++] = _18.x; //#30150
        $k[$j++] = _18.y; //#30150
        $k[$j++] = $_.comp; //#30150
        $k[$j++] = $_.options; //#30150
        bwipp_gs1_cc(); //#30150
        bwipp_renmatrix(); //#30150
        var _1D = $k[--$j]; //#30152
        $$.moveto($k[--$j], $f(_1D + $_.linheight)); //#30152
        var _1J = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#30159
        $k[$j++] = _1J; //#30160
        bwipp_renmatrix(); //#30160
        $$.restore(); //#30162
    } else { //#30197
        $k[$j++] = 'compsym'; //#30164
        $k[$j++] = $_.comp; //#30164
        $k[$j++] = $_.options; //#30164
        bwipp_gs1_cc(); //#30164
        var _1M = $k[--$j]; //#30164
        $_[$k[--$j]] = _1M; //#30164
        $_.ccpixs = $get($_.compsym, 'pixs'); //#30165
        $_.ccpixx = $get($_.compsym, 'pixx'); //#30166
        $_.linwidth = $_.sep.length; //#30168
        $k[$j++] = Infinity; //#30170
        for (var _1W = 0, _1X = $_.ccpixx, _1V = $_.ccpixs.length - 1; _1X < 0 ? _1W >= _1V : _1W <= _1V; _1W += _1X) { //#30174
            $_.i = _1W; //#30172
            $k[$j++] = 0; //#30173
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#30173
        } //#30173
        $aload($_.sep); //#30175
        $k[$j++] = 0; //#30179
        $k[$j++] = 0; //#30179
        $k[$j++] = 0; //#30179
        $k[$j++] = 0; //#30179
        $k[$j++] = 0; //#30179
        $k[$j++] = 0; //#30179
        for (var _1g = 0, _1h = $_.linwidth, _1f = $_.linpixs.length - 1; _1h < 0 ? _1g >= _1f : _1g <= _1f; _1g += _1h) { //#30179
            $_.i = _1g; //#30177
            $aload($geti($_.linpixs, $_.i, $_.linwidth)); //#30178
            $k[$j++] = 0; //#30178
            $k[$j++] = 0; //#30178
            $k[$j++] = 0; //#30178
            $k[$j++] = 0; //#30178
            $k[$j++] = 0; //#30178
            $k[$j++] = 0; //#30178
        } //#30178
        $_.pixs = $a(); //#30178
        $_.pixx = $_.ccpixx + 1; //#30181
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#30183
        var _1w = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#30191
        $k[$j++] = _1w; //#30198
        if (!$_.dontdraw) { //#30198
            $$.save(); //#30195
            bwipp_renmatrix(); //#30196
            $$.restore(); //#30197
        } //#30197
    } //#30197
    $_ = $__; //#30201
} //bwipp_databarstackedomnicomposite
function bwipp_databartruncatedcomposite() {
    var $__ = $_; //#30233
    $_ = Object.assign({}, $_); //#30233
    $_.dontdraw = false; //#30236
    $_.usematrix = false; //#30237
    $_.parse = false; //#30238
    $_.dontlint = false; //#30239
    $_.lintreqs = true; //#30240
    $k[$j++] = $_; //#30242
    bwipp_processoptions(); //#30242
    $_.options = $k[--$j]; //#30242
    $_.barcode = $k[--$j]; //#30243
    if ($_.dontdraw) { //#30245
        $_.usematrix = true; //#30245
    } //#30245
    $search($_.barcode, "|"); //#30248
    if ($k[--$j]) { //#30253
        $_.linear = $k[--$j]; //#30249
        $j--; //#30250
        $_.comp = $k[--$j]; //#30251
    } else { //#30253
        $j--; //#30253
        $k[$j++] = 'bwipp.missingCompositeComponent#30253'; //#30253
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#30253
        bwipp_raiseerror(); //#30253
    } //#30253
    if (!$_.usematrix) { //#30256
        $$.save(); //#30256
    } //#30256
    $put($_.options, "lintype", "databartruncated"); //#30258
    $put($_.options, "linkage", true); //#30259
    $put($_.options, "inkspreadv", 0); //#30260
    $put($_.options, "dontdraw", true); //#30261
    $put($_.options, "dontlint", true); //#30262
    var _F = $s($_.linear.length + $_.comp.length); //#30265
    $puti(_F, 0, $_.linear); //#30266
    $puti(_F, $_.linear.length, $_.comp); //#30267
    $k[$j++] = _F; //#30268
    $k[$j++] = 'ai'; //#30268
    bwipp_gs1process(); //#30268
    $j -= 3; //#30268
    $k[$j++] = $_.linear; //#30271
    $k[$j++] = $_.options; //#30271
    bwipp_databartruncated(); //#30271
    var _L = $k[--$j]; //#30272
    $_.linsbs = $get(_L, "sbs"); //#30272
    $_.linheight = $get($get(_L, "bhs"), 0) * 72; //#30273
    $k[$j++] = _L; //#30274
    if (!$_.usematrix) { //#30274
        bwipp_renlinear(); //#30274
    } else { //#30274
        $j--; //#30274
    } //#30274
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#30278
        for (var _U = $_.fp, _T = $_.fp + 12; _U <= _T; _U += 1) { //#30291
            $_.i = _U; //#30280
            if ($get($_.bot, $_.i) == 0) { //#30288
                if ($get($_.bot, $_.i - 1) == 1) { //#30285
                    $k[$j++] = 1; //#30283
                } else { //#30285
                    var _e = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#30285
                    $k[$j++] = _e; //#30285
                } //#30285
            } else { //#30288
                $k[$j++] = 0; //#30288
            } //#30288
            $put($_.sep, $_.i, $k[--$j]); //#30290
        } //#30290
        $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#30292
        $k[$j++] = true; //#30293
        for (var _j = 0; _j <= 12; _j += 1) { //#30293
            var _p = $k[--$j]; //#30293
            $k[$j++] = _p && $eq($get($_.bot, $f(_j + $_.fp)), $get($_.f3, _j)); //#30293
        } //#30293
        if ($k[--$j]) { //#30296
            $puti($_.sep, $_.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#30295
        } //#30295
    }; //#30295
    $k[$j++] = Infinity; //#30298
    $k[$j++] = 0; //#30299
    $forall($_.linsbs, function() { //#30299
        var _v = $k[--$j]; //#30299
        var _w = $k[$j - 1]; //#30299
        var _x = (_w == 1) ? 0 : 1; //#30299
        for (var _y = 0, _z = _v; _y < _z; _y++) { //#30299
            $k[$j++] = _x //#30299
        } //#30299
    }); //#30299
    $astore($a($counttomark() - 1)); //#30300
    $_.bot = $k[--$j]; //#30300
    $j -= 2; //#30300
    $k[$j++] = Infinity; //#30301
    $forall($_.bot, function() { //#30301
        var _14 = $k[--$j]; //#30301
        $k[$j++] = 1 - _14; //#30301
    }); //#30301
    $_.sep = $a(); //#30301
    $puti($_.sep, 0, $a([0, 0, 0])); //#30302
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#30303
    $k[$j++] = 18; //#30304
    $_.sepfinder(); //#30304
    $k[$j++] = 64; //#30304
    $_.sepfinder(); //#30304
    if (!$_.usematrix) { //#30359
        var _1C = $$.currpos(); //#30308
        $$.rmoveto(-5, $_.linheight + 1); //#30311
        $k[$j++] = _1C.x; //#30311
        $k[$j++] = _1C.y; //#30311
        $k[$j++] = $_.comp; //#30311
        $k[$j++] = $_.options; //#30311
        bwipp_gs1_cc(); //#30311
        bwipp_renmatrix(); //#30311
        var _1H = $k[--$j]; //#30313
        $$.moveto($k[--$j], $f(_1H + $_.linheight)); //#30313
        var _1N = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#30320
        $k[$j++] = _1N; //#30321
        bwipp_renmatrix(); //#30321
        $$.restore(); //#30323
    } else { //#30359
        $k[$j++] = 'compsym'; //#30325
        $k[$j++] = $_.comp; //#30325
        $k[$j++] = $_.options; //#30325
        bwipp_gs1_cc(); //#30325
        var _1Q = $k[--$j]; //#30325
        $_[$k[--$j]] = _1Q; //#30325
        $_.ccpixs = $get($_.compsym, 'pixs'); //#30326
        $_.ccpixx = $get($_.compsym, 'pixx'); //#30327
        $k[$j++] = Infinity; //#30329
        $k[$j++] = 0; //#30330
        $forall($_.linsbs, function() { //#30330
            var _1X = $k[--$j]; //#30330
            var _1Y = $k[$j - 1]; //#30330
            var _1Z = (_1Y == 0) ? 1 : 0; //#30330
            for (var _1a = 0, _1b = $cvi(_1X); _1a < _1b; _1a++) { //#30330
                $k[$j++] = _1Z //#30330
            } //#30330
        }); //#30330
        $_.linpixs = $a(); //#30330
        $k[$j++] = Infinity; //#30332
        $k[$j++] = 0; //#30332
        $aload($_.sep); //#30332
        $_.sep = $a(); //#30332
        $_.linheight = ~~$_.linheight; //#30334
        $k[$j++] = Infinity; //#30336
        for (var _1j = 0, _1k = $_.ccpixx, _1i = $_.ccpixs.length - 1; _1k < 0 ? _1j >= _1i : _1j <= _1i; _1j += _1k) { //#30340
            $_.i = _1j; //#30338
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#30339
            $k[$j++] = 0; //#30339
        } //#30339
        $k[$j++] = 0; //#30341
        $k[$j++] = 0; //#30341
        $k[$j++] = 0; //#30341
        $k[$j++] = 0; //#30341
        $aload($_.sep); //#30341
        for (var _1r = 0, _1s = $_.linheight; _1r < _1s; _1r++) { //#30341
            $k[$j++] = 0; //#30341
            $k[$j++] = 0; //#30341
            $k[$j++] = 0; //#30341
            $k[$j++] = 0; //#30341
            $aload($_.linpixs); //#30341
        } //#30341
        $_.pixs = $a(); //#30341
        $_.pixx = $_.ccpixx + 1; //#30343
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#30345
        var _24 = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#30353
        $k[$j++] = _24; //#30360
        if (!$_.dontdraw) { //#30360
            $$.save(); //#30357
            bwipp_renmatrix(); //#30358
            $$.restore(); //#30359
        } //#30359
    } //#30359
    $_ = $__; //#30363
} //bwipp_databartruncatedcomposite
function bwipp_databarlimitedcomposite() {
    var $__ = $_; //#30395
    $_ = Object.assign({}, $_); //#30395
    $_.dontdraw = false; //#30398
    $_.usematrix = false; //#30399
    $_.parse = false; //#30400
    $_.dontlint = false; //#30401
    $_.lintreqs = true; //#30402
    $k[$j++] = $_; //#30404
    bwipp_processoptions(); //#30404
    $_.options = $k[--$j]; //#30404
    $_.barcode = $k[--$j]; //#30405
    if ($_.dontdraw) { //#30407
        $_.usematrix = true; //#30407
    } //#30407
    $search($_.barcode, "|"); //#30410
    if ($k[--$j]) { //#30415
        $_.linear = $k[--$j]; //#30411
        $j--; //#30412
        $_.comp = $k[--$j]; //#30413
    } else { //#30415
        $j--; //#30415
        $k[$j++] = 'bwipp.missingCompositeComponent#30415'; //#30415
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#30415
        bwipp_raiseerror(); //#30415
    } //#30415
    if (!$_.usematrix) { //#30418
        $$.save(); //#30418
    } //#30418
    $put($_.options, "lintype", "databarlimited"); //#30420
    $put($_.options, "linkage", true); //#30421
    $put($_.options, "inkspreadv", 0); //#30422
    $put($_.options, "dontdraw", true); //#30423
    $put($_.options, "dontlint", true); //#30424
    var _F = $s($_.linear.length + $_.comp.length); //#30427
    $puti(_F, 0, $_.linear); //#30428
    $puti(_F, $_.linear.length, $_.comp); //#30429
    $k[$j++] = _F; //#30430
    $k[$j++] = 'ai'; //#30430
    bwipp_gs1process(); //#30430
    $j -= 3; //#30430
    $k[$j++] = $_.linear; //#30433
    $k[$j++] = $_.options; //#30433
    bwipp_databarlimited(); //#30433
    var _L = $k[--$j]; //#30434
    $_.linsbs = $get(_L, "sbs"); //#30434
    $_.linheight = $get($get(_L, "bhs"), 0) * 72; //#30435
    $k[$j++] = _L; //#30436
    if (!$_.usematrix) { //#30436
        bwipp_renlinear(); //#30436
    } else { //#30436
        $j--; //#30436
    } //#30436
    $k[$j++] = Infinity; //#30439
    $k[$j++] = 1; //#30440
    $forall($_.linsbs, function() { //#30440
        var _R = $k[--$j]; //#30440
        var _S = $k[$j - 1]; //#30440
        var _T = (_S == 0) ? 1 : 0; //#30440
        for (var _U = 0, _V = _R; _U < _V; _U++) { //#30440
            $k[$j++] = _T //#30440
        } //#30440
    }); //#30440
    $astore($a($counttomark() - 1)); //#30441
    $_.sep = $k[--$j]; //#30441
    $j -= 2; //#30441
    $puti($_.sep, 0, $a([0, 0, 0])); //#30442
    var _c = $_.sep; //#30443
    $puti($_.sep, _c.length - 9, $a([0, 0, 0, 0, 0, 0, 0, 0, 0])); //#30443
    if (!$_.usematrix) { //#30511
        var _f = $$.currpos(); //#30447
        var _g = $_.comp; //#30450
        $k[$j++] = _f.x; //#30450
        $k[$j++] = _f.y; //#30450
        $k[$j++] = _g; //#30450
        $k[$j++] = $_.options; //#30450
        bwipp_gs1_cc(); //#30450
        var _i = $k[--$j]; //#30451
        $$.rmoveto(72 - $get(_i, "pixx"), $_.linheight + 1); //#30451
        $k[$j++] = _i; //#30452
        bwipp_renmatrix(); //#30452
        var _m = $k[--$j]; //#30454
        $$.moveto($k[--$j], $f(_m + $_.linheight)); //#30454
        var _r = $_.options; //#30461
        var _s = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", _r]
        ]); //#30461
        $k[$j++] = _s; //#30462
        bwipp_renmatrix(); //#30462
        $$.restore(); //#30464
    } else { //#30511
        $k[$j++] = 'compsym'; //#30466
        $k[$j++] = $_.comp; //#30466
        $k[$j++] = $_.options; //#30466
        bwipp_gs1_cc(); //#30466
        var _v = $k[--$j]; //#30466
        $_[$k[--$j]] = _v; //#30466
        $_.ccpixs = $get($_.compsym, 'pixs'); //#30467
        $_.ccpixx = $get($_.compsym, 'pixx'); //#30468
        $k[$j++] = Infinity; //#30470
        $k[$j++] = 0; //#30471
        $forall($_.linsbs, function() { //#30471
            var _12 = $k[--$j]; //#30471
            var _13 = $k[$j - 1]; //#30471
            var _14 = (_13 == 0) ? 1 : 0; //#30471
            for (var _15 = 0, _16 = $cvi(_12); _15 < _16; _15++) { //#30471
                $k[$j++] = _14 //#30471
            } //#30471
        }); //#30471
        $_.linpixs = $a(); //#30471
        $k[$j++] = Infinity; //#30473
        $k[$j++] = 0; //#30473
        $aload($_.sep); //#30473
        $_.sep = $a(); //#30473
        $_.linheight = ~~$_.linheight; //#30475
        if ($_.ccpixx == 72) { //#30494
            $k[$j++] = Infinity; //#30478
            for (var _1F = 0, _1G = $_.ccpixx, _1E = $_.ccpixs.length - 1; _1G < 0 ? _1F >= _1E : _1F <= _1E; _1F += _1G) { //#30482
                $_.i = _1F; //#30480
                $k[$j++] = 0; //#30481
                $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#30481
                $k[$j++] = 0; //#30481
                $k[$j++] = 0; //#30481
                $k[$j++] = 0; //#30481
                $k[$j++] = 0; //#30481
                $k[$j++] = 0; //#30481
                $k[$j++] = 0; //#30481
            } //#30481
            $aload($_.sep); //#30483
            for (var _1N = 0, _1O = $_.linheight; _1N < _1O; _1N++) { //#30483
                $aload($_.linpixs); //#30483
            } //#30483
            $_.pixs = $a(); //#30483
            $_.pixx = $_.linpixs.length; //#30485
        } else { //#30494
            $k[$j++] = Infinity; //#30487
            for (var _1V = 0, _1W = $_.ccpixx, _1U = $_.ccpixs.length - 1; _1W < 0 ? _1V >= _1U : _1V <= _1U; _1V += _1W) { //#30491
                $_.i = _1V; //#30489
                $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#30490
                $k[$j++] = 0; //#30490
                $k[$j++] = 0; //#30490
                $k[$j++] = 0; //#30490
                $k[$j++] = 0; //#30490
                $k[$j++] = 0; //#30490
                $k[$j++] = 0; //#30490
            } //#30490
            $k[$j++] = 0; //#30492
            $k[$j++] = 0; //#30492
            $k[$j++] = 0; //#30492
            $k[$j++] = 0; //#30492
            $k[$j++] = 0; //#30492
            $k[$j++] = 0; //#30492
            $k[$j++] = 0; //#30492
            $k[$j++] = 0; //#30492
            $k[$j++] = 0; //#30492
            $aload($_.sep); //#30492
            for (var _1d = 0, _1e = $_.linheight; _1d < _1e; _1d++) { //#30492
                $k[$j++] = 0; //#30492
                $k[$j++] = 0; //#30492
                $k[$j++] = 0; //#30492
                $k[$j++] = 0; //#30492
                $k[$j++] = 0; //#30492
                $k[$j++] = 0; //#30492
                $k[$j++] = 0; //#30492
                $k[$j++] = 0; //#30492
                $k[$j++] = 0; //#30492
                $aload($_.linpixs); //#30492
            } //#30492
            $_.pixs = $a(); //#30492
            $_.pixx = $_.ccpixx + 6; //#30494
        } //#30494
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#30497
        var _1q = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#30505
        $k[$j++] = _1q; //#30512
        if (!$_.dontdraw) { //#30512
            $$.save(); //#30509
            bwipp_renmatrix(); //#30510
            $$.restore(); //#30511
        } //#30511
    } //#30511
    $_ = $__; //#30515
} //bwipp_databarlimitedcomposite
function bwipp_databarexpandedcomposite() {
    var $__ = $_; //#30547
    $_ = Object.assign({}, $_); //#30547
    $_.dontdraw = false; //#30550
    $_.usematrix = false; //#30551
    $_.parse = false; //#30552
    $_.dontlint = false; //#30553
    $_.lintreqs = true; //#30554
    $k[$j++] = $_; //#30556
    bwipp_processoptions(); //#30556
    $_.options = $k[--$j]; //#30556
    $_.barcode = $k[--$j]; //#30557
    if ($_.dontdraw) { //#30559
        $_.usematrix = true; //#30559
    } //#30559
    $search($_.barcode, "|"); //#30562
    if ($k[--$j]) { //#30567
        $_.linear = $k[--$j]; //#30563
        $j--; //#30564
        $_.comp = $k[--$j]; //#30565
    } else { //#30567
        $j--; //#30567
        $k[$j++] = 'bwipp.missingCompositeComponent#30567'; //#30567
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#30567
        bwipp_raiseerror(); //#30567
    } //#30567
    if (!$_.usematrix) { //#30570
        $$.save(); //#30570
    } //#30570
    $put($_.options, "lintype", "databarexpanded"); //#30572
    $put($_.options, "linkage", true); //#30573
    $put($_.options, "inkspreadv", 0); //#30574
    $put($_.options, "dontdraw", true); //#30575
    $put($_.options, "dontlint", true); //#30576
    var _F = $s($_.linear.length + $_.comp.length); //#30579
    $puti(_F, 0, $_.linear); //#30580
    $puti(_F, $_.linear.length, $_.comp); //#30581
    $k[$j++] = _F; //#30582
    $k[$j++] = 'ai'; //#30582
    bwipp_gs1process(); //#30582
    $j -= 3; //#30582
    $k[$j++] = $_.linear; //#30585
    $k[$j++] = $_.options; //#30585
    bwipp_databarexpanded(); //#30585
    var _L = $k[--$j]; //#30586
    $_.linsbs = $get(_L, "sbs"); //#30586
    $_.linheight = $get($get(_L, "bhs"), 0) * 72; //#30587
    $k[$j++] = _L; //#30588
    if (!$_.usematrix) { //#30588
        bwipp_renlinear(); //#30588
    } else { //#30588
        $j--; //#30588
    } //#30588
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#30592
        for (var _U = $_.fp, _T = $_.fp + 12; _U <= _T; _U += 1) { //#30605
            $_.i = _U; //#30594
            if ($get($_.bot, $_.i) == 0) { //#30602
                if ($get($_.bot, $_.i - 1) == 1) { //#30599
                    $k[$j++] = 1; //#30597
                } else { //#30599
                    var _e = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#30599
                    $k[$j++] = _e; //#30599
                } //#30599
            } else { //#30602
                $k[$j++] = 0; //#30602
            } //#30602
            $put($_.sep, $_.i, $k[--$j]); //#30604
        } //#30604
    }; //#30604
    $k[$j++] = Infinity; //#30607
    $k[$j++] = 0; //#30608
    $forall($_.linsbs, function() { //#30608
        var _j = $k[--$j]; //#30608
        var _k = $k[$j - 1]; //#30608
        var _l = (_k == 1) ? 0 : 1; //#30608
        for (var _m = 0, _n = _j; _m < _n; _m++) { //#30608
            $k[$j++] = _l //#30608
        } //#30608
    }); //#30608
    $astore($a($counttomark() - 1)); //#30609
    $_.bot = $k[--$j]; //#30609
    $j -= 2; //#30609
    $k[$j++] = Infinity; //#30610
    $forall($_.bot, function() { //#30610
        var _s = $k[--$j]; //#30610
        $k[$j++] = 1 - _s; //#30610
    }); //#30610
    $_.sep = $a(); //#30610
    $puti($_.sep, 0, $a([0, 0, 0])); //#30611
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#30612
    $k[$j++] = Infinity; //#30613
    for (var _11 = 18, _10 = $_.bot.length - 13; _11 <= _10; _11 += 98) { //#30614
        $k[$j++] = _11; //#30614
    } //#30614
    for (var _14 = 69, _13 = $_.bot.length - 13; _14 <= _13; _14 += 98) { //#30615
        $k[$j++] = _14; //#30615
    } //#30615
    var _15 = $a(); //#30615
    for (var _16 = 0, _17 = _15.length; _16 < _17; _16++) { //#30616
        $k[$j++] = $get(_15, _16); //#30616
        $_.sepfinder(); //#30616
    } //#30616
    if (!$_.usematrix) { //#30672
        var _1A = $$.currpos(); //#30620
        $$.rmoveto(1, $_.linheight + 1); //#30623
        $k[$j++] = _1A.x; //#30623
        $k[$j++] = _1A.y; //#30623
        $k[$j++] = $_.comp; //#30623
        $k[$j++] = $_.options; //#30623
        bwipp_gs1_cc(); //#30623
        bwipp_renmatrix(); //#30623
        var _1F = $k[--$j]; //#30625
        $$.moveto($k[--$j], $f(_1F + $_.linheight)); //#30625
        var _1L = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#30632
        $k[$j++] = _1L; //#30633
        bwipp_renmatrix(); //#30633
        $$.restore(); //#30635
    } else { //#30672
        $k[$j++] = 'compsym'; //#30637
        $k[$j++] = $_.comp; //#30637
        $k[$j++] = $_.options; //#30637
        bwipp_gs1_cc(); //#30637
        var _1O = $k[--$j]; //#30637
        $_[$k[--$j]] = _1O; //#30637
        $_.ccpixs = $get($_.compsym, 'pixs'); //#30638
        $_.ccpixx = $get($_.compsym, 'pixx'); //#30639
        $k[$j++] = Infinity; //#30641
        $k[$j++] = 0; //#30642
        $forall($_.linsbs, function() { //#30642
            var _1V = $k[--$j]; //#30642
            var _1W = $k[$j - 1]; //#30642
            var _1X = (_1W == 0) ? 1 : 0; //#30642
            for (var _1Y = 0, _1Z = $cvi(_1V); _1Y < _1Z; _1Y++) { //#30642
                $k[$j++] = _1X //#30642
            } //#30642
        }); //#30642
        $_.linpixs = $a(); //#30642
        $k[$j++] = Infinity; //#30644
        $k[$j++] = 0; //#30644
        $aload($_.sep); //#30644
        $_.sep = $a(); //#30644
        $_.linheight = ~~$_.linheight; //#30646
        $_.diff = $f($_.linpixs.length - $_.ccpixx); //#30647
        $k[$j++] = Infinity; //#30648
        for (var _1h = 0, _1i = $_.diff - 2; _1h < _1i; _1h++) { //#30648
            $k[$j++] = 0; //#30648
        } //#30648
        $_.ccrpad = $a(); //#30648
        $k[$j++] = Infinity; //#30649
        for (var _1n = 0, _1o = $_.ccpixx, _1m = $_.ccpixs.length - 1; _1o < 0 ? _1n >= _1m : _1n <= _1m; _1n += _1o) { //#30653
            $_.i = _1n; //#30651
            $k[$j++] = 0; //#30652
            $k[$j++] = 0; //#30652
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#30652
            $aload($_.ccrpad); //#30652
        } //#30652
        $aload($_.sep); //#30654
        for (var _1w = 0, _1x = $_.linheight; _1w < _1x; _1w++) { //#30654
            $aload($_.linpixs); //#30654
        } //#30654
        $_.pixs = $a(); //#30654
        $_.pixx = $_.linpixs.length; //#30657
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#30658
        var _29 = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#30666
        $k[$j++] = _29; //#30673
        if (!$_.dontdraw) { //#30673
            $$.save(); //#30670
            bwipp_renmatrix(); //#30671
            $$.restore(); //#30672
        } //#30672
    } //#30672
    $_ = $__; //#30676
} //bwipp_databarexpandedcomposite
function bwipp_databarexpandedstackedcomposite() {
    var $__ = $_; //#30707
    $_ = Object.assign({}, $_); //#30707
    $_.dontdraw = false; //#30710
    $_.usematrix = false; //#30711
    $_.parse = false; //#30712
    $_.dontlint = false; //#30713
    $_.lintreqs = true; //#30714
    $k[$j++] = $_; //#30716
    bwipp_processoptions(); //#30716
    $_.options = $k[--$j]; //#30716
    $_.barcode = $k[--$j]; //#30717
    if ($_.dontdraw) { //#30719
        $_.usematrix = true; //#30719
    } //#30719
    $search($_.barcode, "|"); //#30722
    if ($k[--$j]) { //#30727
        $_.linear = $k[--$j]; //#30723
        $j--; //#30724
        $_.comp = $k[--$j]; //#30725
    } else { //#30727
        $j--; //#30727
        $k[$j++] = 'bwipp.missingCompositeComponent#30727'; //#30727
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#30727
        bwipp_raiseerror(); //#30727
    } //#30727
    if (!$_.usematrix) { //#30730
        $$.save(); //#30730
    } //#30730
    $put($_.options, "lintype", "databarexpandedstacked"); //#30732
    $put($_.options, "linkage", true); //#30733
    $put($_.options, "inkspreadv", 0); //#30734
    $put($_.options, "dontdraw", true); //#30735
    $put($_.options, "dontlint", true); //#30736
    var _F = $s($_.linear.length + $_.comp.length); //#30739
    $puti(_F, 0, $_.linear); //#30740
    $puti(_F, $_.linear.length, $_.comp); //#30741
    $k[$j++] = _F; //#30742
    $k[$j++] = 'ai'; //#30742
    bwipp_gs1process(); //#30742
    $j -= 3; //#30742
    $k[$j++] = $_.linear; //#30745
    $k[$j++] = $_.options; //#30745
    bwipp_databarexpandedstacked(); //#30745
    var _L = $k[--$j]; //#30746
    $_.bot = $geti($get(_L, "pixs"), 0, $get(_L, "pixx")); //#30746
    $_.linheight = $get(_L, "pixy"); //#30747
    $k[$j++] = _L; //#30748
    if (!$_.usematrix) { //#30748
        bwipp_renmatrix(); //#30748
    } else { //#30748
        $_.linpixs = $get($k[--$j], 'pixs'); //#30748
    } //#30748
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#30752
        for (var _X = $_.fp, _W = $_.fp + 12; _X <= _W; _X += 1) { //#30765
            $_.i = _X; //#30754
            if ($get($_.bot, $_.i) == 0) { //#30762
                if ($get($_.bot, $_.i - 1) == 1) { //#30759
                    $k[$j++] = 1; //#30757
                } else { //#30759
                    var _h = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#30759
                    $k[$j++] = _h; //#30759
                } //#30759
            } else { //#30762
                $k[$j++] = 0; //#30762
            } //#30762
            $put($_.sep, $_.i, $k[--$j]); //#30764
        } //#30764
    }; //#30764
    $k[$j++] = Infinity; //#30767
    var _l = $_.bot; //#30767
    for (var _m = 0, _n = _l.length; _m < _n; _m++) { //#30767
        $k[$j++] = 1 - $get(_l, _m); //#30767
    } //#30767
    $_.sep = $a(); //#30767
    $puti($_.sep, 0, $a([0, 0, 0, 0])); //#30768
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#30769
    $k[$j++] = Infinity; //#30770
    for (var _x = 19, _w = $_.bot.length - 13; _x <= _w; _x += 98) { //#30771
        $k[$j++] = _x; //#30771
    } //#30771
    for (var _10 = 70, _z = $_.bot.length - 13; _10 <= _z; _10 += 98) { //#30772
        $k[$j++] = _10; //#30772
    } //#30772
    var _11 = $a(); //#30772
    for (var _12 = 0, _13 = _11.length; _12 < _13; _12++) { //#30773
        $k[$j++] = $get(_11, _12); //#30773
        $_.sepfinder(); //#30773
    } //#30773
    if (!$_.usematrix) { //#30824
        var _16 = $$.currpos(); //#30777
        var _19 = ($get($_.bot, 0) == 0) ? 2 : 0; //#30780
        $$.rmoveto(_19, $_.linheight + 1); //#30780
        $k[$j++] = _16.x; //#30781
        $k[$j++] = _16.y; //#30781
        $k[$j++] = $_.comp; //#30781
        $k[$j++] = $_.options; //#30781
        bwipp_gs1_cc(); //#30781
        bwipp_renmatrix(); //#30781
        var _1E = $k[--$j]; //#30783
        $$.moveto($k[--$j], $f(_1E + $_.linheight)); //#30783
        var _1K = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#30790
        $k[$j++] = _1K; //#30791
        bwipp_renmatrix(); //#30791
        $$.restore(); //#30793
    } else { //#30824
        $k[$j++] = 'compsym'; //#30795
        $k[$j++] = $_.comp; //#30795
        $k[$j++] = $_.options; //#30795
        bwipp_gs1_cc(); //#30795
        var _1N = $k[--$j]; //#30795
        $_[$k[--$j]] = _1N; //#30795
        $_.ccpixs = $get($_.compsym, 'pixs'); //#30796
        $_.ccpixx = $get($_.compsym, 'pixx'); //#30797
        $_.pixx = $_.sep.length; //#30799
        $k[$j++] = Infinity; //#30800
        for (var _1W = 0, _1X = ~~(($f($_.pixx - $_.ccpixx) + 1) / 2); _1W < _1X; _1W++) { //#30800
            $k[$j++] = 0; //#30800
        } //#30800
        $_.cclpad = $a(); //#30800
        $k[$j++] = Infinity; //#30801
        for (var _1b = 0, _1c = ~~($f($_.pixx - $_.ccpixx) / 2); _1b < _1c; _1b++) { //#30801
            $k[$j++] = 0; //#30801
        } //#30801
        $_.ccrpad = $a(); //#30801
        $k[$j++] = Infinity; //#30802
        for (var _1h = 0, _1i = $_.ccpixx, _1g = $_.ccpixs.length - 1; _1i < 0 ? _1h >= _1g : _1h <= _1g; _1h += _1i) { //#30806
            $_.i = _1h; //#30804
            $aload($_.cclpad); //#30805
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#30805
            $aload($_.ccrpad); //#30805
        } //#30805
        $aload($_.sep); //#30807
        $aload($_.linpixs); //#30807
        $_.pixs = $a(); //#30807
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#30810
        var _20 = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#30818
        $k[$j++] = _20; //#30825
        if (!$_.dontdraw) { //#30825
            $$.save(); //#30822
            bwipp_renmatrix(); //#30823
            $$.restore(); //#30824
        } //#30824
    } //#30824
    $_ = $__; //#30828
} //bwipp_databarexpandedstackedcomposite
function bwipp_gs1_128composite() {
    var $__ = $_; //#30860
    $_ = Object.assign({}, $_); //#30860
    $_.dontdraw = false; //#30863
    $_.usematrix = false; //#30864
    $_.parse = false; //#30865
    $_.dontlint = false; //#30866
    $_.lintreqs = true; //#30867
    $k[$j++] = $_; //#30869
    bwipp_processoptions(); //#30869
    $_.options = $k[--$j]; //#30869
    $_.barcode = $k[--$j]; //#30870
    if ($_.dontdraw) { //#30872
        $_.usematrix = true; //#30872
    } //#30872
    $search($_.barcode, "|"); //#30875
    if ($k[--$j]) { //#30880
        $_.linear = $k[--$j]; //#30876
        $j--; //#30877
        $_.comp = $k[--$j]; //#30878
    } else { //#30880
        $j--; //#30880
        $k[$j++] = 'bwipp.missingCompositeComponent#30880'; //#30880
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#30880
        bwipp_raiseerror(); //#30880
    } //#30880
    if (!$_.usematrix) { //#30883
        $$.save(); //#30883
    } //#30883
    $put($_.options, "inkspreadv", 0); //#30885
    $put($_.options, "dontdraw", true); //#30886
    $put($_.options, "dontlint", true); //#30887
    var _D = $s($_.linear.length + $_.comp.length); //#30890
    $puti(_D, 0, $_.linear); //#30891
    $puti(_D, $_.linear.length, $_.comp); //#30892
    $k[$j++] = _D; //#30893
    $k[$j++] = 'ai'; //#30893
    bwipp_gs1process(); //#30893
    $j -= 3; //#30893
    $put($_.options, "linkagea", true); //#30896
    $k[$j++] = $_.linear; //#30897
    $k[$j++] = Infinity; //#30897
    $forall($_.options); //#30897
    var _K = $d(); //#30897
    $k[$j++] = _K; //#30897
    bwipp_gs1_128(); //#30897
    var _M = $get($k[--$j], "sbs"); //#30898
    $k[$j++] = 0; //#30898
    $forall(_M, function() { //#30898
        var _N = $k[--$j]; //#30898
        var _O = $k[--$j]; //#30898
        $k[$j++] = $f(_O + _N); //#30898
    }); //#30898
    $_.linwidth = $k[--$j]; //#30898
    $put($_.options, "lintype", "gs1-128"); //#30901
    $put($_.options, "linwidth", $_.linwidth); //#30902
    $k[$j++] = $_.comp; //#30903
    $k[$j++] = Infinity; //#30903
    $forall($_.options); //#30903
    var _V = $d(); //#30903
    $k[$j++] = _V; //#30903
    bwipp_gs1_cc(); //#30903
    $_.compsym = $k[--$j]; //#30903
    if ($get($_.compsym, "pixx") == 99) { //#30904
        $k[$j++] = "a"; //#30904
    } else { //#30904
        $k[$j++] = "c"; //#30904
    } //#30904
    $_.linktype = $k[--$j]; //#30904
    $put($_.compsym, "borderbottom", 0); //#30905
    if ($eq($_.linktype, "a")) { //#30913
        $put($_.options, "linkagea", true); //#30909
        $put($_.options, "linkagec", false); //#30910
    } else { //#30913
        $put($_.options, "linkagea", false); //#30912
        $put($_.options, "linkagec", true); //#30913
    } //#30913
    var _g = $_.linear; //#30915
    $k[$j++] = _g; //#30915
    $k[$j++] = Infinity; //#30915
    $forall($_.options); //#30915
    var _i = $d(); //#30915
    $k[$j++] = _i; //#30915
    bwipp_gs1_128(); //#30915
    var _j = $k[--$j]; //#30916
    $_.linsbs = $get(_j, "sbs"); //#30916
    $_.linheight = $get($get(_j, "bhs"), 0) * 72; //#30917
    $k[$j++] = _j; //#30918
    if (!$_.usematrix) { //#30918
        bwipp_renlinear(); //#30918
    } else { //#30918
        $j--; //#30918
    } //#30918
    $k[$j++] = Infinity; //#30921
    $k[$j++] = 1; //#30922
    $forall($_.linsbs, function() { //#30922
        var _p = $k[--$j]; //#30922
        var _q = $k[$j - 1]; //#30922
        var _r = (_q == 0) ? 1 : 0; //#30922
        for (var _s = 0, _t = _p; _s < _t; _s++) { //#30922
            $k[$j++] = _r //#30922
        } //#30922
    }); //#30922
    $astore($a($counttomark() - 1)); //#30923
    $_.sep = $k[--$j]; //#30923
    $j -= 2; //#30923
    if ($eq($_.linktype, "a")) { //#30931
        $_.s = ~~(($_.linwidth - 2) / 11); //#30927
        $_.p = ~~(($_.s - 9) / 2); //#30928
        $k[$j++] = 'x'; //#30929
        $k[$j++] = ((($_.s - $_.p) - 1) * 11) + 10; //#30929
        if ($_.p == 0) { //#30929
            var _13 = $k[--$j]; //#30929
            $k[$j++] = _13 + 2; //#30929
        } //#30929
        var _14 = $k[--$j]; //#30929
        $_[$k[--$j]] = _14 - 99; //#30929
    } else { //#30931
        $_.x = -7; //#30931
    } //#30931
    if (!$_.usematrix) { //#31001
        var _17 = $$.currpos(); //#30936
        $$.rmoveto($_.x, $_.linheight + 1); //#30938
        $k[$j++] = _17.x; //#30938
        $k[$j++] = _17.y; //#30938
        $k[$j++] = $_.compsym; //#30938
        bwipp_renmatrix(); //#30938
        var _1C = $k[--$j]; //#30940
        $$.moveto($k[--$j], $f(_1C + $_.linheight)); //#30940
        var _1I = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#30947
        $k[$j++] = _1I; //#30948
        bwipp_renmatrix(); //#30948
        $$.restore(); //#30950
    } else { //#31001
        $_.ccpixs = $get($_.compsym, 'pixs'); //#30952
        $_.ccpixx = $get($_.compsym, 'pixx'); //#30953
        $k[$j++] = Infinity; //#30955
        $forall($_.linsbs, function() { //#30956
            var _1O = $k[--$j]; //#30956
            var _1P = $k[$j - 1]; //#30956
            var _1Q = (_1P == 1) ? 0 : 1; //#30956
            for (var _1R = 0, _1S = _1O; _1R < _1S; _1R++) { //#30956
                $k[$j++] = _1Q //#30956
            } //#30956
        }); //#30956
        $_.linpixs = $a(); //#30956
        if ($_.x > 0) { //#30964
            $k[$j++] = Infinity; //#30960
            for (var _1W = 0, _1X = $_.x; _1W < _1X; _1W++) { //#30960
                $k[$j++] = 0; //#30960
            } //#30960
            $_.cclpad = $a(); //#30960
            $_.linlpad = $a(0); //#30961
        } else { //#30964
            $_.cclpad = $a(0); //#30963
            $k[$j++] = Infinity; //#30964
            for (var _1c = 0, _1d = -$_.x; _1c < _1d; _1c++) { //#30964
                $k[$j++] = 0; //#30964
            } //#30964
            $_.linlpad = $a(); //#30964
        } //#30964
        $_.diff = $f($_.linwidth - ($_.ccpixx + $_.x)); //#30967
        if ($_.diff > 0) { //#30973
            $k[$j++] = Infinity; //#30969
            for (var _1k = 0, _1l = $_.diff; _1k < _1l; _1k++) { //#30969
                $k[$j++] = 0; //#30969
            } //#30969
            $_.ccrpad = $a(); //#30969
            $_.linrpad = $a(0); //#30970
        } else { //#30973
            $_.ccrpad = $a(0); //#30972
            $k[$j++] = Infinity; //#30973
            for (var _1q = 0, _1r = -$_.diff; _1q < _1r; _1q++) { //#30973
                $k[$j++] = 0; //#30973
            } //#30973
            $_.linrpad = $a(); //#30973
        } //#30973
        $_.linheight = ~~$_.linheight; //#30976
        $k[$j++] = Infinity; //#30977
        for (var _1x = 0, _1y = $_.ccpixx, _1w = $_.ccpixs.length - 1; _1y < 0 ? _1x >= _1w : _1x <= _1w; _1x += _1y) { //#30981
            $_.i = _1x; //#30979
            $aload($_.cclpad); //#30980
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#30980
            $aload($_.ccrpad); //#30980
        } //#30980
        $aload($_.linlpad); //#30982
        $aload($_.sep); //#30982
        $aload($_.linrpad); //#30982
        for (var _29 = 0, _2A = $_.linheight; _29 < _2A; _29++) { //#30983
            $aload($_.linlpad); //#30983
            $aload($_.linpixs); //#30983
            $aload($_.linrpad); //#30983
        } //#30983
        $_.pixs = $a(); //#30983
        $_.pixx = $f($_.cclpad.length + $_.ccpixx + $_.ccrpad.length); //#30986
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#30987
        var _2Q = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#30995
        $k[$j++] = _2Q; //#31002
        if (!$_.dontdraw) { //#31002
            $$.save(); //#30999
            bwipp_renmatrix(); //#31000
            $$.restore(); //#31001
        } //#31001
    } //#31001
    $_ = $__; //#31005
} //bwipp_gs1_128composite
function bwipp_gs1datamatrix() {
    var $__ = $_; //#31035
    $_ = Object.assign({}, $_); //#31035
    $_.dontdraw = false; //#31038
    $_.parse = false; //#31039
    $_.dontlint = false; //#31040
    $_.lintreqs = true; //#31041
    $_.gssep = false; //#31042
    $k[$j++] = $_; //#31044
    bwipp_processoptions(); //#31044
    $_.options = $k[--$j]; //#31044
    $_.barcode = $k[--$j]; //#31045
    $k[$j++] = $_.barcode; //#31047
    $k[$j++] = 'ai'; //#31047
    bwipp_gs1process(); //#31047
    $_.fncs = $k[--$j]; //#31048
    $_.vals = $k[--$j]; //#31049
    $_.ais = $k[--$j]; //#31050
    $_.fnc1 = -1; //#31053
    $_.dmtx = $a([$_.fnc1]); //#31054
    for (var _A = 0, _9 = $_.ais.length - 1; _A <= _9; _A += 1) { //#31070
        $_.i = _A; //#31056
        $_.ai = $get($_.ais, $_.i); //#31057
        $_.val = $get($_.vals, $_.i); //#31058
        var _K = $a(($_.dmtx.length + $_.ai.length) + $_.val.length); //#31059
        $puti(_K, 0, $_.dmtx); //#31060
        $k[$j++] = _K; //#31061
        $k[$j++] = _K; //#31061
        $k[$j++] = $_.dmtx.length; //#31061
        var _O = Infinity; //#31061
        var _P = $_.ai; //#31061
        $k[$j++] = _O; //#31061
        $forall(_P); //#31061
        var _Q = $a(); //#31061
        var _R = $k[--$j]; //#31061
        $puti($k[--$j], _R, _Q); //#31061
        var _T = $k[$j - 1]; //#31062
        $k[$j++] = _T; //#31062
        $k[$j++] = $_.dmtx.length + $_.ai.length; //#31062
        var _X = Infinity; //#31062
        var _Y = $_.val; //#31062
        $k[$j++] = _X; //#31062
        $forall(_Y); //#31062
        var _Z = $a(); //#31062
        var _a = $k[--$j]; //#31062
        $puti($k[--$j], _a, _Z); //#31062
        $_.dmtx = $k[--$j]; //#31063
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#31069
            var _j = $a($_.dmtx.length + 1); //#31065
            $puti(_j, 0, $_.dmtx); //#31066
            $k[$j++] = _j; //#31067
            $k[$j++] = _j; //#31067
            $k[$j++] = $_.dmtx.length; //#31067
            if ($_.gssep) { //#31067
                $k[$j++] = 29; //#31067
            } else { //#31067
                $k[$j++] = $_.fnc1; //#31067
            } //#31067
            var _o = $k[--$j]; //#31067
            var _p = $k[--$j]; //#31067
            $put($k[--$j], _p, _o); //#31067
            $_.dmtx = $k[--$j]; //#31068
        } //#31068
    } //#31068
    $_.barcode = $s(($_.dmtx.length + 1) * 5); //#31073
    $_.i = 0; //#31074
    $_.j = 0; //#31074
    for (;;) { //#31084
        if ($_.i == $_.dmtx.length) { //#31075
            break; //#31075
        } //#31075
        var _y = $get($_.dmtx, $_.i); //#31076
        $k[$j++] = _y; //#31081
        if (_y == $_.fnc1) { //#31080
            $j--; //#31077
            $puti($_.barcode, $_.j, "^FNC1"); //#31077
            $_.j = $_.j + 4; //#31078
        } else { //#31080
            $put($_.barcode, $_.j, $k[--$j]); //#31080
        } //#31080
        $_.i = $_.i + 1; //#31082
        $_.j = $_.j + 1; //#31083
    } //#31083
    $_.barcode = $geti($_.barcode, 0, $_.j); //#31085
    delete $_.options["parse"]; //#31088
    $put($_.options, "dontdraw", true); //#31089
    $put($_.options, "parsefnc", true); //#31090
    $k[$j++] = 'args'; //#31091
    $k[$j++] = $_.barcode; //#31091
    $k[$j++] = $_.options; //#31091
    bwipp_datamatrix(); //#31091
    var _1G = $k[--$j]; //#31091
    $_[$k[--$j]] = _1G; //#31091
    $put($_.args, "opt", $_.options); //#31093
    $k[$j++] = $_.args; //#31096
    if (!$_.dontdraw) { //#31096
        bwipp_renmatrix(); //#31096
    } //#31096
    $_ = $__; //#31098
} //bwipp_gs1datamatrix
function bwipp_gs1datamatrixrectangular() {
    var $__ = $_; //#31128
    $_ = Object.assign({}, $_); //#31128
    $_.parse = false; //#31131
    $_.dontlint = false; //#31132
    $_.lintreqs = true; //#31133
    $_.dontdraw = false; //#31134
    $_.gssep = false; //#31135
    $k[$j++] = $_; //#31137
    bwipp_processoptions(); //#31137
    $_.options = $k[--$j]; //#31137
    $_.barcode = $k[--$j]; //#31138
    $k[$j++] = $_.barcode; //#31140
    $k[$j++] = 'ai'; //#31140
    bwipp_gs1process(); //#31140
    $_.fncs = $k[--$j]; //#31141
    $_.vals = $k[--$j]; //#31142
    $_.ais = $k[--$j]; //#31143
    $_.fnc1 = -1; //#31146
    $_.dmtx = $a([$_.fnc1]); //#31147
    for (var _A = 0, _9 = $_.ais.length - 1; _A <= _9; _A += 1) { //#31163
        $_.i = _A; //#31149
        $_.ai = $get($_.ais, $_.i); //#31150
        $_.val = $get($_.vals, $_.i); //#31151
        var _K = $a(($_.dmtx.length + $_.ai.length) + $_.val.length); //#31152
        $puti(_K, 0, $_.dmtx); //#31153
        $k[$j++] = _K; //#31154
        $k[$j++] = _K; //#31154
        $k[$j++] = $_.dmtx.length; //#31154
        var _O = Infinity; //#31154
        var _P = $_.ai; //#31154
        $k[$j++] = _O; //#31154
        $forall(_P); //#31154
        var _Q = $a(); //#31154
        var _R = $k[--$j]; //#31154
        $puti($k[--$j], _R, _Q); //#31154
        var _T = $k[$j - 1]; //#31155
        $k[$j++] = _T; //#31155
        $k[$j++] = $_.dmtx.length + $_.ai.length; //#31155
        var _X = Infinity; //#31155
        var _Y = $_.val; //#31155
        $k[$j++] = _X; //#31155
        $forall(_Y); //#31155
        var _Z = $a(); //#31155
        var _a = $k[--$j]; //#31155
        $puti($k[--$j], _a, _Z); //#31155
        $_.dmtx = $k[--$j]; //#31156
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#31162
            var _j = $a($_.dmtx.length + 1); //#31158
            $puti(_j, 0, $_.dmtx); //#31159
            $k[$j++] = _j; //#31160
            $k[$j++] = _j; //#31160
            $k[$j++] = $_.dmtx.length; //#31160
            if ($_.gssep) { //#31160
                $k[$j++] = 29; //#31160
            } else { //#31160
                $k[$j++] = $_.fnc1; //#31160
            } //#31160
            var _o = $k[--$j]; //#31160
            var _p = $k[--$j]; //#31160
            $put($k[--$j], _p, _o); //#31160
            $_.dmtx = $k[--$j]; //#31161
        } //#31161
    } //#31161
    $_.barcode = $s(($_.dmtx.length + 1) * 5); //#31166
    $_.i = 0; //#31167
    $_.j = 0; //#31167
    for (;;) { //#31177
        if ($_.i == $_.dmtx.length) { //#31168
            break; //#31168
        } //#31168
        var _y = $get($_.dmtx, $_.i); //#31169
        $k[$j++] = _y; //#31174
        if (_y == $_.fnc1) { //#31173
            $j--; //#31170
            $puti($_.barcode, $_.j, "^FNC1"); //#31170
            $_.j = $_.j + 4; //#31171
        } else { //#31173
            $put($_.barcode, $_.j, $k[--$j]); //#31173
        } //#31173
        $_.i = $_.i + 1; //#31175
        $_.j = $_.j + 1; //#31176
    } //#31176
    $_.barcode = $geti($_.barcode, 0, $_.j); //#31178
    delete $_.options["parse"]; //#31181
    $put($_.options, "dontdraw", true); //#31182
    $put($_.options, "parsefnc", true); //#31183
    $put($_.options, "format", "rectangle"); //#31184
    $k[$j++] = 'args'; //#31185
    $k[$j++] = $_.barcode; //#31185
    $k[$j++] = $_.options; //#31185
    bwipp_datamatrix(); //#31185
    var _1H = $k[--$j]; //#31185
    $_[$k[--$j]] = _1H; //#31185
    $put($_.args, "opt", $_.options); //#31187
    $k[$j++] = $_.args; //#31190
    if (!$_.dontdraw) { //#31190
        bwipp_renmatrix(); //#31190
    } //#31190
    $_ = $__; //#31192
} //bwipp_gs1datamatrixrectangular
function bwipp_gs1dldatamatrix() {
    var $__ = $_; //#31222
    $_ = Object.assign({}, $_); //#31222
    $_.parse = false; //#31225
    $_.dontlint = false; //#31226
    $_.lintreqs = true; //#31227
    $_.dontdraw = false; //#31228
    $k[$j++] = $_; //#31230
    bwipp_processoptions(); //#31230
    $_.options = $k[--$j]; //#31230
    $_.barcode = $k[--$j]; //#31231
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#31237
    $_.fncvals = _3; //#31238
    $k[$j++] = 'barcode'; //#31239
    $k[$j++] = $_.barcode; //#31239
    $k[$j++] = $_.fncvals; //#31239
    bwipp_parseinput(); //#31239
    var _6 = $k[--$j]; //#31239
    $_[$k[--$j]] = _6; //#31239
    $k[$j++] = $_.barcode; //#31241
    $k[$j++] = 'dl'; //#31241
    bwipp_gs1process(); //#31241
    $j--; //#31241
    $_.val = $get($k[--$j], 0); //#31242
    $_.key = $get($k[--$j], 0); //#31243
    $_.hri = $s(($_.key.length + $_.val.length) + 2); //#31245
    $put($_.hri, 0, 40); //#31246
    $puti($_.hri, 1, $_.key); //#31247
    $put($_.hri, $_.key.length + 1, 41); //#31248
    $puti($_.hri, $_.key.length + 2, $_.val); //#31249
    delete $_.options["parse"]; //#31252
    $put($_.options, "dontdraw", true); //#31253
    $k[$j++] = 'args'; //#31254
    $k[$j++] = $_.barcode; //#31254
    $k[$j++] = $_.options; //#31254
    bwipp_datamatrix(); //#31254
    var _S = $k[--$j]; //#31254
    $_[$k[--$j]] = _S; //#31254
    $put($_.args, "opt", $_.options); //#31256
    $put($_.args, "alttext", $_.hri); //#31257
    $put($_.args, "textyoffset", 1); //#31258
    $put($_.args, "textfont", "OCR-B"); //#31259
    $put($_.args, "textsize", 5); //#31260
    $k[$j++] = $_.args; //#31263
    if (!$_.dontdraw) { //#31263
        bwipp_renmatrix(); //#31263
    } //#31263
    $_ = $__; //#31265
} //bwipp_gs1dldatamatrix
function bwipp_gs1qrcode() {
    var $__ = $_; //#31294
    $_ = Object.assign({}, $_); //#31294
    $_.parse = false; //#31297
    $_.dontlint = false; //#31298
    $_.lintreqs = true; //#31299
    $_.dontdraw = false; //#31300
    $k[$j++] = $_; //#31302
    bwipp_processoptions(); //#31302
    $_.options = $k[--$j]; //#31302
    $_.barcode = $k[--$j]; //#31303
    $k[$j++] = $_.barcode; //#31305
    $k[$j++] = 'ai'; //#31305
    bwipp_gs1process(); //#31305
    $_.fncs = $k[--$j]; //#31306
    $_.vals = $k[--$j]; //#31307
    $_.ais = $k[--$j]; //#31308
    $_.fnc1 = -1; //#31311
    $_.qrc = $a([$_.fnc1]); //#31312
    for (var _A = 0, _9 = $_.ais.length - 1; _A <= _9; _A += 1) { //#31328
        $_.i = _A; //#31314
        $_.ai = $get($_.ais, $_.i); //#31315
        $_.val = $get($_.vals, $_.i); //#31316
        var _K = $a(($_.qrc.length + $_.ai.length) + $_.val.length); //#31317
        $puti(_K, 0, $_.qrc); //#31318
        $k[$j++] = _K; //#31319
        $k[$j++] = _K; //#31319
        $k[$j++] = $_.qrc.length; //#31319
        var _O = Infinity; //#31319
        var _P = $_.ai; //#31319
        $k[$j++] = _O; //#31319
        $forall(_P); //#31319
        var _Q = $a(); //#31319
        var _R = $k[--$j]; //#31319
        $puti($k[--$j], _R, _Q); //#31319
        var _T = $k[$j - 1]; //#31320
        $k[$j++] = _T; //#31320
        $k[$j++] = $_.qrc.length + $_.ai.length; //#31320
        var _X = Infinity; //#31320
        var _Y = $_.val; //#31320
        $k[$j++] = _X; //#31320
        $forall(_Y); //#31320
        var _Z = $a(); //#31320
        var _a = $k[--$j]; //#31320
        $puti($k[--$j], _a, _Z); //#31320
        $_.qrc = $k[--$j]; //#31321
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#31327
            var _j = $a($_.qrc.length + 1); //#31323
            $puti(_j, 0, $_.qrc); //#31324
            $put(_j, $_.qrc.length, $_.fnc1); //#31325
            $_.qrc = _j; //#31326
        } //#31326
    } //#31326
    $_.barcode = $s(($_.qrc.length + 1) * 5); //#31331
    $_.i = 0; //#31332
    $_.j = 0; //#31332
    for (;;) { //#31342
        if ($_.i == $_.qrc.length) { //#31333
            break; //#31333
        } //#31333
        var _t = $get($_.qrc, $_.i); //#31334
        $k[$j++] = _t; //#31339
        if (_t == $_.fnc1) { //#31338
            $j--; //#31335
            $puti($_.barcode, $_.j, "^FNC1"); //#31335
            $_.j = $_.j + 4; //#31336
        } else { //#31338
            $put($_.barcode, $_.j, $k[--$j]); //#31338
        } //#31338
        $_.i = $_.i + 1; //#31340
        $_.j = $_.j + 1; //#31341
    } //#31341
    $_.barcode = $geti($_.barcode, 0, $_.j); //#31343
    delete $_.options["parse"]; //#31346
    $put($_.options, "dontdraw", true); //#31347
    $put($_.options, "parsefnc", true); //#31348
    $k[$j++] = 'args'; //#31349
    $k[$j++] = $_.barcode; //#31349
    $k[$j++] = $_.options; //#31349
    bwipp_qrcode(); //#31349
    var _1B = $k[--$j]; //#31349
    $_[$k[--$j]] = _1B; //#31349
    $put($_.args, "opt", $_.options); //#31351
    $k[$j++] = $_.args; //#31354
    if (!$_.dontdraw) { //#31354
        bwipp_renmatrix(); //#31354
    } //#31354
    $_ = $__; //#31356
} //bwipp_gs1qrcode
function bwipp_gs1dlqrcode() {
    var $__ = $_; //#31386
    $_ = Object.assign({}, $_); //#31386
    $_.parse = false; //#31389
    $_.dontlint = false; //#31390
    $_.lintreqs = true; //#31391
    $_.dontdraw = false; //#31392
    $k[$j++] = $_; //#31394
    bwipp_processoptions(); //#31394
    $_.options = $k[--$j]; //#31394
    $_.barcode = $k[--$j]; //#31395
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#31401
    $_.fncvals = _3; //#31402
    $k[$j++] = 'barcode'; //#31403
    $k[$j++] = $_.barcode; //#31403
    $k[$j++] = $_.fncvals; //#31403
    bwipp_parseinput(); //#31403
    var _6 = $k[--$j]; //#31403
    $_[$k[--$j]] = _6; //#31403
    $k[$j++] = $_.barcode; //#31405
    $k[$j++] = 'dl'; //#31405
    bwipp_gs1process(); //#31405
    $j--; //#31405
    $_.val = $get($k[--$j], 0); //#31406
    $_.key = $get($k[--$j], 0); //#31407
    $_.hri = $s(($_.key.length + $_.val.length) + 2); //#31409
    $put($_.hri, 0, 40); //#31410
    $puti($_.hri, 1, $_.key); //#31411
    $put($_.hri, $_.key.length + 1, 41); //#31412
    $puti($_.hri, $_.key.length + 2, $_.val); //#31413
    delete $_.options["parse"]; //#31416
    $put($_.options, "dontdraw", true); //#31417
    $k[$j++] = 'args'; //#31418
    $k[$j++] = $_.barcode; //#31418
    $k[$j++] = $_.options; //#31418
    bwipp_qrcode(); //#31418
    var _S = $k[--$j]; //#31418
    $_[$k[--$j]] = _S; //#31418
    $put($_.args, "opt", $_.options); //#31420
    $put($_.args, "alttext", $_.hri); //#31421
    $put($_.args, "textyoffset", 4); //#31422
    $put($_.args, "textfont", "OCR-B"); //#31423
    $put($_.args, "textsize", 5); //#31424
    $k[$j++] = $_.args; //#31427
    if (!$_.dontdraw) { //#31427
        bwipp_renmatrix(); //#31427
    } //#31427
    $_ = $__; //#31429
} //bwipp_gs1dlqrcode
function bwipp_gs1dotcode() {
    var $__ = $_; //#31459
    $_ = Object.assign({}, $_); //#31459
    $_.dontdraw = false; //#31462
    $_.parse = false; //#31463
    $_.dontlint = false; //#31464
    $_.lintreqs = true; //#31465
    $k[$j++] = $_; //#31467
    bwipp_processoptions(); //#31467
    $_.options = $k[--$j]; //#31467
    $_.barcode = $k[--$j]; //#31468
    $k[$j++] = $_.barcode; //#31470
    $k[$j++] = 'ai'; //#31470
    bwipp_gs1process(); //#31470
    $_.fncs = $k[--$j]; //#31471
    $_.vals = $k[--$j]; //#31472
    $_.ais = $k[--$j]; //#31473
    $_.fnc1 = -1; //#31476
    $_.dmtx = $a([$_.fnc1]); //#31477
    for (var _A = 0, _9 = $_.ais.length - 1; _A <= _9; _A += 1) { //#31493
        $_.i = _A; //#31479
        $_.ai = $get($_.ais, $_.i); //#31480
        $_.val = $get($_.vals, $_.i); //#31481
        var _K = $a(($_.dmtx.length + $_.ai.length) + $_.val.length); //#31482
        $puti(_K, 0, $_.dmtx); //#31483
        $k[$j++] = _K; //#31484
        $k[$j++] = _K; //#31484
        $k[$j++] = $_.dmtx.length; //#31484
        var _O = Infinity; //#31484
        var _P = $_.ai; //#31484
        $k[$j++] = _O; //#31484
        $forall(_P); //#31484
        var _Q = $a(); //#31484
        var _R = $k[--$j]; //#31484
        $puti($k[--$j], _R, _Q); //#31484
        var _T = $k[$j - 1]; //#31485
        $k[$j++] = _T; //#31485
        $k[$j++] = $_.dmtx.length + $_.ai.length; //#31485
        var _X = Infinity; //#31485
        var _Y = $_.val; //#31485
        $k[$j++] = _X; //#31485
        $forall(_Y); //#31485
        var _Z = $a(); //#31485
        var _a = $k[--$j]; //#31485
        $puti($k[--$j], _a, _Z); //#31485
        $_.dmtx = $k[--$j]; //#31486
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#31492
            var _j = $a($_.dmtx.length + 1); //#31488
            $puti(_j, 0, $_.dmtx); //#31489
            $put(_j, $_.dmtx.length, $_.fnc1); //#31490
            $_.dmtx = _j; //#31491
        } //#31491
    } //#31491
    $_.barcode = $s(($_.dmtx.length + 1) * 5); //#31496
    $_.i = 0; //#31497
    $_.j = 0; //#31497
    for (;;) { //#31507
        if ($_.i == $_.dmtx.length) { //#31498
            break; //#31498
        } //#31498
        var _t = $get($_.dmtx, $_.i); //#31499
        $k[$j++] = _t; //#31504
        if (_t == $_.fnc1) { //#31503
            $j--; //#31500
            $puti($_.barcode, $_.j, "^FNC1"); //#31500
            $_.j = $_.j + 4; //#31501
        } else { //#31503
            $put($_.barcode, $_.j, $k[--$j]); //#31503
        } //#31503
        $_.i = $_.i + 1; //#31505
        $_.j = $_.j + 1; //#31506
    } //#31506
    $_.barcode = $geti($_.barcode, 0, $_.j); //#31508
    delete $_.options["parse"]; //#31511
    $put($_.options, "dontdraw", true); //#31512
    $put($_.options, "parsefnc", true); //#31513
    $k[$j++] = 'args'; //#31514
    $k[$j++] = $_.barcode; //#31514
    $k[$j++] = $_.options; //#31514
    bwipp_dotcode(); //#31514
    var _1B = $k[--$j]; //#31514
    $_[$k[--$j]] = _1B; //#31514
    $put($_.args, "opt", $_.options); //#31516
    $k[$j++] = $_.args; //#31519
    if (!$_.dontdraw) { //#31519
        bwipp_renmatrix(); //#31519
    } //#31519
    $_ = $__; //#31521
} //bwipp_gs1dotcode
function bwipp_hibccode39() {
    var $__ = $_; //#31552
    $_ = Object.assign({}, $_); //#31552
    $_.dontdraw = false; //#31555
    $_.textfont = "OCR-B"; //#31556
    $_.textsize = 10; //#31557
    $_.textyoffset = -8; //#31558
    $_.textxoffset = 0; //#31559
    $_.validatecheck = false; //#31560
    $k[$j++] = $_; //#31562
    bwipp_processoptions(); //#31562
    $_.options = $k[--$j]; //#31562
    $_.barcode = $k[--$j]; //#31563
    if ($_.barcode.length == 0) { //#31567
        $k[$j++] = 'bwipp.hibccode39emptyData#31566'; //#31566
        $k[$j++] = "The data must not be empty"; //#31566
        bwipp_raiseerror(); //#31566
    } //#31566
    $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#31573
    $_.charvals = new Map; //#31574
    for (var _3 = 0; _3 <= 42; _3 += 1) { //#31575
        $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#31575
    } //#31575
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#31583
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#31580
        if (!_E) { //#31582
            $k[$j++] = 'bwipp.hibccode39badCharacter#31581'; //#31581
            $k[$j++] = "HIBC Code 39 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#31581
            bwipp_raiseerror(); //#31581
        } //#31581
    } //#31581
    $k[$j++] = 'barlen'; //#31585
    $k[$j++] = $_.barcode.length; //#31585
    if ($_.validatecheck) { //#31585
        var _H = $k[--$j]; //#31585
        $k[$j++] = _H - 1; //#31585
    } //#31585
    var _I = $k[--$j]; //#31585
    $_[$k[--$j]] = _I; //#31585
    $_.checksum = 41; //#31587
    for (var _M = 0, _L = $_.barlen - 1; _M <= _L; _M += 1) { //#31591
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#31590
    } //#31590
    $_.checksum = $_.checksum % 43; //#31592
    if ($_.validatecheck) { //#31598
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31596
            $k[$j++] = 'bwipp.hibccode39badCheckDigit#31595'; //#31595
            $k[$j++] = "Incorrect HIBC Code 39 check digit provided"; //#31595
            bwipp_raiseerror(); //#31595
        } //#31595
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31597
    } //#31597
    var _e = $s($_.barlen + 2); //#31600
    $puti(_e, 1, $_.barcode); //#31600
    $_.barcode = _e; //#31600
    $put($_.barcode, 0, 43); //#31601
    $put($_.barcode, $_.barlen + 1, $get($_.barchars, $_.checksum)); //#31602
    $_.text = $s($_.barlen + 4); //#31604
    $put($_.text, 0, 42); //#31605
    $puti($_.text, 1, $_.barcode); //#31606
    var _v = $get($_.barcode, $_.barlen + 1); //#31607
    $k[$j++] = $_.text; //#31607
    $k[$j++] = $_.barlen + 2; //#31607
    $k[$j++] = _v; //#31607
    if (_v == 32) { //#31607
        $k[$j - 1] = 95; //#31607
    } //#31607
    var _w = $k[--$j]; //#31607
    var _x = $k[--$j]; //#31607
    $put($k[--$j], _x, _w); //#31607
    $put($_.text, $_.barlen + 3, 42); //#31608
    $put($_.options, "dontdraw", true); //#31611
    $put($_.options, "includecheck", false); //#31612
    $put($_.options, "validatecheck", false); //#31613
    $k[$j++] = 'args'; //#31614
    $k[$j++] = $_.barcode; //#31614
    $k[$j++] = $_.options; //#31614
    bwipp_code39(); //#31614
    var _16 = $k[--$j]; //#31614
    $_[$k[--$j]] = _16; //#31614
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#31616
    $put($_.args, "textxalign", "center"); //#31617
    $put($_.args, "opt", $_.options); //#31618
    $k[$j++] = $_.args; //#31621
    if (!$_.dontdraw) { //#31621
        bwipp_renlinear(); //#31621
    } //#31621
    $_ = $__; //#31625
} //bwipp_hibccode39
function bwipp_hibccode128() {
    var $__ = $_; //#31656
    $_ = Object.assign({}, $_); //#31656
    $_.dontdraw = false; //#31659
    $_.textfont = "OCR-B"; //#31660
    $_.textsize = 10; //#31661
    $_.textyoffset = -8; //#31662
    $_.textxoffset = 0; //#31663
    $_.validatecheck = false; //#31664
    $k[$j++] = $_; //#31666
    bwipp_processoptions(); //#31666
    $_.options = $k[--$j]; //#31666
    $_.barcode = $k[--$j]; //#31667
    if ($_.barcode.length == 0) { //#31671
        $k[$j++] = 'bwipp.hibccode128emptyData#31670'; //#31670
        $k[$j++] = "The data must not be empty"; //#31670
        bwipp_raiseerror(); //#31670
    } //#31670
    $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#31677
    $_.charvals = new Map; //#31678
    for (var _3 = 0; _3 <= 42; _3 += 1) { //#31679
        $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#31679
    } //#31679
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#31687
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#31684
        if (!_E) { //#31686
            $k[$j++] = 'bwipp.hibccode128badCharacter#31685'; //#31685
            $k[$j++] = "HIBC Code 128 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#31685
            bwipp_raiseerror(); //#31685
        } //#31685
    } //#31685
    $k[$j++] = 'barlen'; //#31689
    $k[$j++] = $_.barcode.length; //#31689
    if ($_.validatecheck) { //#31689
        var _H = $k[--$j]; //#31689
        $k[$j++] = _H - 1; //#31689
    } //#31689
    var _I = $k[--$j]; //#31689
    $_[$k[--$j]] = _I; //#31689
    $_.checksum = 41; //#31691
    for (var _M = 0, _L = $_.barlen - 1; _M <= _L; _M += 1) { //#31695
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#31694
    } //#31694
    $_.checksum = $_.checksum % 43; //#31696
    if ($_.validatecheck) { //#31702
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31700
            $k[$j++] = 'bwipp.hibccode128badCheckDigit#31699'; //#31699
            $k[$j++] = "Incorrect HIBC Code 128 check digit provided"; //#31699
            bwipp_raiseerror(); //#31699
        } //#31699
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31701
    } //#31701
    var _e = $s($_.barlen + 2); //#31704
    $puti(_e, 1, $_.barcode); //#31704
    $_.barcode = _e; //#31704
    $put($_.barcode, 0, 43); //#31705
    $put($_.barcode, $_.barlen + 1, $get($_.barchars, $_.checksum)); //#31706
    $_.text = $s($_.barlen + 4); //#31708
    $put($_.text, 0, 42); //#31709
    $puti($_.text, 1, $_.barcode); //#31710
    var _v = $get($_.barcode, $_.barlen + 1); //#31711
    $k[$j++] = $_.text; //#31711
    $k[$j++] = $_.barlen + 2; //#31711
    $k[$j++] = _v; //#31711
    if (_v == 32) { //#31711
        $k[$j - 1] = 95; //#31711
    } //#31711
    var _w = $k[--$j]; //#31711
    var _x = $k[--$j]; //#31711
    $put($k[--$j], _x, _w); //#31711
    $put($_.text, $_.barlen + 3, 42); //#31712
    $put($_.options, "dontdraw", true); //#31715
    $put($_.options, "validatecheck", false); //#31716
    $k[$j++] = 'args'; //#31717
    $k[$j++] = $_.barcode; //#31717
    $k[$j++] = $_.options; //#31717
    bwipp_code128(); //#31717
    var _15 = $k[--$j]; //#31717
    $_[$k[--$j]] = _15; //#31717
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#31719
    $put($_.args, "textxalign", "center"); //#31720
    $put($_.args, "opt", $_.options); //#31721
    $k[$j++] = $_.args; //#31724
    if (!$_.dontdraw) { //#31724
        bwipp_renlinear(); //#31724
    } //#31724
    $_ = $__; //#31728
} //bwipp_hibccode128
function bwipp_hibcdatamatrix() {
    var $__ = $_; //#31759
    $_ = Object.assign({}, $_); //#31759
    $_.dontdraw = false; //#31762
    $_.validatecheck = false; //#31763
    $k[$j++] = $_; //#31765
    bwipp_processoptions(); //#31765
    $_.options = $k[--$j]; //#31765
    $_.barcode = $k[--$j]; //#31766
    if ($_.barcode.length == 0) { //#31770
        $k[$j++] = 'bwipp.hibcdatamatrixEmptyData#31769'; //#31769
        $k[$j++] = "The data must not be empty"; //#31769
        bwipp_raiseerror(); //#31769
    } //#31769
    $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#31776
    $_.charvals = new Map; //#31777
    for (var _3 = 0; _3 <= 42; _3 += 1) { //#31778
        $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#31778
    } //#31778
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#31786
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#31783
        if (!_E) { //#31785
            $k[$j++] = 'bwipp.hibcdatamatrixBadCharacter#31784'; //#31784
            $k[$j++] = "HIBC Data Matrix must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#31784
            bwipp_raiseerror(); //#31784
        } //#31784
    } //#31784
    $k[$j++] = 'barlen'; //#31788
    $k[$j++] = $_.barcode.length; //#31788
    if ($_.validatecheck) { //#31788
        var _H = $k[--$j]; //#31788
        $k[$j++] = _H - 1; //#31788
    } //#31788
    var _I = $k[--$j]; //#31788
    $_[$k[--$j]] = _I; //#31788
    $_.checksum = 41; //#31790
    for (var _M = 0, _L = $_.barlen - 1; _M <= _L; _M += 1) { //#31794
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#31793
    } //#31793
    $_.checksum = $_.checksum % 43; //#31795
    if ($_.validatecheck) { //#31801
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31799
            $k[$j++] = 'bwipp.hibcdatamatrixBadCheckDigit#31798'; //#31798
            $k[$j++] = "Incorrect HIBC Data Matrix check digit provided"; //#31798
            bwipp_raiseerror(); //#31798
        } //#31798
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31800
    } //#31800
    var _d = $_.barlen; //#31803
    var _e = $s(_d + 2); //#31803
    $puti(_e, 1, $_.barcode); //#31803
    $_.barcode = _e; //#31803
    $put($_.barcode, 0, 43); //#31804
    $put($_.barcode, $_.barlen + 1, $get($_.barchars, $_.checksum)); //#31805
    $put($_.options, "dontdraw", true); //#31808
    $put($_.options, "validatecheck", false); //#31809
    $k[$j++] = 'args'; //#31810
    $k[$j++] = $_.barcode; //#31810
    $k[$j++] = $_.options; //#31810
    bwipp_datamatrix(); //#31810
    var _q = $k[--$j]; //#31810
    var _r = $k[--$j]; //#31810
    $_[_r] = _q; //#31810
    $put($_.args, "opt", $_.options); //#31812
    $k[$j++] = $_.args; //#31815
    if (!$_.dontdraw) { //#31815
        bwipp_renmatrix(); //#31815
    } //#31815
    $_ = $__; //#31819
} //bwipp_hibcdatamatrix
function bwipp_hibcdatamatrixrectangular() {
    var $__ = $_; //#31850
    $_ = Object.assign({}, $_); //#31850
    $_.dontdraw = false; //#31853
    $_.validatecheck = false; //#31854
    $k[$j++] = $_; //#31856
    bwipp_processoptions(); //#31856
    $_.options = $k[--$j]; //#31856
    $_.barcode = $k[--$j]; //#31857
    if ($_.barcode.length == 0) { //#31861
        $k[$j++] = 'bwipp.hibcdatamatrixrectangularEmptyData#31860'; //#31860
        $k[$j++] = "The data must not be empty"; //#31860
        bwipp_raiseerror(); //#31860
    } //#31860
    $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#31867
    $_.charvals = new Map; //#31868
    for (var _3 = 0; _3 <= 42; _3 += 1) { //#31869
        $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#31869
    } //#31869
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#31877
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#31874
        if (!_E) { //#31876
            $k[$j++] = 'bwipp.hibcdatamatrixrectangularBadCharacter#31875'; //#31875
            $k[$j++] = "HIBC Data Matrix Rectangular must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#31875
            bwipp_raiseerror(); //#31875
        } //#31875
    } //#31875
    $k[$j++] = 'barlen'; //#31879
    $k[$j++] = $_.barcode.length; //#31879
    if ($_.validatecheck) { //#31879
        var _H = $k[--$j]; //#31879
        $k[$j++] = _H - 1; //#31879
    } //#31879
    var _I = $k[--$j]; //#31879
    $_[$k[--$j]] = _I; //#31879
    $_.checksum = 41; //#31881
    for (var _M = 0, _L = $_.barlen - 1; _M <= _L; _M += 1) { //#31885
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#31884
    } //#31884
    $_.checksum = $_.checksum % 43; //#31886
    if ($_.validatecheck) { //#31892
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31890
            $k[$j++] = 'bwipp.hibcdatamatrixrectangularBadCheckDigit#31889'; //#31889
            $k[$j++] = "Incorrect HIBC Data Matrix Rectangular check digit provided"; //#31889
            bwipp_raiseerror(); //#31889
        } //#31889
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31891
    } //#31891
    var _d = $_.barlen; //#31894
    var _e = $s(_d + 2); //#31894
    $puti(_e, 1, $_.barcode); //#31894
    $_.barcode = _e; //#31894
    $put($_.barcode, 0, 43); //#31895
    $put($_.barcode, $_.barlen + 1, $get($_.barchars, $_.checksum)); //#31896
    $put($_.options, "dontdraw", true); //#31899
    $put($_.options, "validatecheck", false); //#31900
    $put($_.options, "format", "rectangle"); //#31901
    $k[$j++] = 'args'; //#31902
    $k[$j++] = $_.barcode; //#31902
    $k[$j++] = $_.options; //#31902
    bwipp_datamatrix(); //#31902
    var _r = $k[--$j]; //#31902
    $_[$k[--$j]] = _r; //#31902
    $put($_.args, "opt", $_.options); //#31904
    $k[$j++] = $_.args; //#31907
    if (!$_.dontdraw) { //#31907
        bwipp_renmatrix(); //#31907
    } //#31907
    $_ = $__; //#31911
} //bwipp_hibcdatamatrixrectangular
function bwipp_hibcpdf417() {
    var $__ = $_; //#31942
    $_ = Object.assign({}, $_); //#31942
    $_.dontdraw = false; //#31945
    $_.columns = 2; //#31946
    $_.validatecheck = false; //#31947
    $k[$j++] = $_; //#31949
    bwipp_processoptions(); //#31949
    $_.options = $k[--$j]; //#31949
    $_.barcode = $k[--$j]; //#31950
    if ($_.barcode.length == 0) { //#31954
        $k[$j++] = 'bwipp.hibcpdf417EmptyData#31953'; //#31953
        $k[$j++] = "The data must not be empty"; //#31953
        bwipp_raiseerror(); //#31953
    } //#31953
    $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#31960
    $_.charvals = new Map; //#31961
    for (var _3 = 0; _3 <= 42; _3 += 1) { //#31962
        $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#31962
    } //#31962
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#31970
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#31967
        if (!_E) { //#31969
            $k[$j++] = 'bwipp.hibcpdf417BadCharacter#31968'; //#31968
            $k[$j++] = "HIBC PDF417 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#31968
            bwipp_raiseerror(); //#31968
        } //#31968
    } //#31968
    $k[$j++] = 'barlen'; //#31972
    $k[$j++] = $_.barcode.length; //#31972
    if ($_.validatecheck) { //#31972
        var _H = $k[--$j]; //#31972
        $k[$j++] = _H - 1; //#31972
    } //#31972
    var _I = $k[--$j]; //#31972
    $_[$k[--$j]] = _I; //#31972
    $_.checksum = 41; //#31974
    for (var _M = 0, _L = $_.barlen - 1; _M <= _L; _M += 1) { //#31978
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#31977
    } //#31977
    $_.checksum = $_.checksum % 43; //#31979
    if ($_.validatecheck) { //#31985
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31983
            $k[$j++] = 'bwipp.hibcpdf417BadCheckDigit#31982'; //#31982
            $k[$j++] = "Incorrect HIBC PDF417 check digit provided"; //#31982
            bwipp_raiseerror(); //#31982
        } //#31982
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31984
    } //#31984
    var _e = $s($_.barlen + 2); //#31987
    $puti(_e, 1, $_.barcode); //#31987
    $_.barcode = _e; //#31987
    $put($_.barcode, 0, 43); //#31988
    $put($_.barcode, $_.barlen + 1, $get($_.barchars, $_.checksum)); //#31989
    $put($_.options, "dontdraw", true); //#31992
    $put($_.options, "columns", $_.columns); //#31993
    var _p = $_.options; //#31994
    $put(_p, "validatecheck", false); //#31994
    var _r = $_.options; //#31995
    $k[$j++] = 'args'; //#31995
    $k[$j++] = $_.barcode; //#31995
    $k[$j++] = _r; //#31995
    bwipp_pdf417(); //#31995
    var _s = $k[--$j]; //#31995
    $_[$k[--$j]] = _s; //#31995
    $put($_.args, "opt", $_.options); //#31997
    $k[$j++] = $_.args; //#32000
    if (!$_.dontdraw) { //#32000
        bwipp_renmatrix(); //#32000
    } //#32000
    $_ = $__; //#32004
} //bwipp_hibcpdf417
function bwipp_hibcmicropdf417() {
    var $__ = $_; //#32035
    $_ = Object.assign({}, $_); //#32035
    $_.dontdraw = false; //#32038
    $_.columns = 2; //#32039
    $_.validatecheck = false; //#32040
    $k[$j++] = $_; //#32042
    bwipp_processoptions(); //#32042
    $_.options = $k[--$j]; //#32042
    $_.barcode = $k[--$j]; //#32043
    if ($_.barcode.length == 0) { //#32047
        $k[$j++] = 'bwipp.hibcmicropdf417EmptyData#32046'; //#32046
        $k[$j++] = "The data must not be empty"; //#32046
        bwipp_raiseerror(); //#32046
    } //#32046
    $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#32053
    $_.charvals = new Map; //#32054
    for (var _3 = 0; _3 <= 42; _3 += 1) { //#32055
        $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#32055
    } //#32055
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#32063
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#32060
        if (!_E) { //#32062
            $k[$j++] = 'bwipp.hibcmicropdf417BadCharacter#32061'; //#32061
            $k[$j++] = "HIBC MicroPDF417 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#32061
            bwipp_raiseerror(); //#32061
        } //#32061
    } //#32061
    $k[$j++] = 'barlen'; //#32065
    $k[$j++] = $_.barcode.length; //#32065
    if ($_.validatecheck) { //#32065
        var _H = $k[--$j]; //#32065
        $k[$j++] = _H - 1; //#32065
    } //#32065
    var _I = $k[--$j]; //#32065
    $_[$k[--$j]] = _I; //#32065
    $_.checksum = 41; //#32067
    for (var _M = 0, _L = $_.barlen - 1; _M <= _L; _M += 1) { //#32071
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#32070
    } //#32070
    $_.checksum = $_.checksum % 43; //#32072
    if ($_.validatecheck) { //#32078
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#32076
            $k[$j++] = 'bwipp.hibcmicropdf417BadCheckDigit#32075'; //#32075
            $k[$j++] = "Incorrect HIBC MicroPDF417 check digit provided"; //#32075
            bwipp_raiseerror(); //#32075
        } //#32075
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#32077
    } //#32077
    var _e = $s($_.barlen + 2); //#32080
    $puti(_e, 1, $_.barcode); //#32080
    $_.barcode = _e; //#32080
    $put($_.barcode, 0, 43); //#32081
    $put($_.barcode, $_.barlen + 1, $get($_.barchars, $_.checksum)); //#32082
    var _m = $_.options; //#32085
    $put(_m, "dontdraw", true); //#32085
    $put($_.options, "columns", $_.columns); //#32086
    $put($_.options, "validatecheck", false); //#32087
    var _r = $_.options; //#32088
    $k[$j++] = 'args'; //#32088
    $k[$j++] = $_.barcode; //#32088
    $k[$j++] = _r; //#32088
    bwipp_micropdf417(); //#32088
    var _s = $k[--$j]; //#32088
    $_[$k[--$j]] = _s; //#32088
    $put($_.args, "opt", $_.options); //#32090
    $k[$j++] = $_.args; //#32093
    if (!$_.dontdraw) { //#32093
        bwipp_renmatrix(); //#32093
    } //#32093
    $_ = $__; //#32097
} //bwipp_hibcmicropdf417
function bwipp_hibcqrcode() {
    var $__ = $_; //#32128
    $_ = Object.assign({}, $_); //#32128
    $_.dontdraw = false; //#32131
    $_.validatecheck = false; //#32132
    $k[$j++] = $_; //#32134
    bwipp_processoptions(); //#32134
    $_.options = $k[--$j]; //#32134
    $_.barcode = $k[--$j]; //#32135
    if ($_.barcode.length == 0) { //#32139
        $k[$j++] = 'bwipp.hibcqrcodeEmptyData#32138'; //#32138
        $k[$j++] = "The data must not be empty"; //#32138
        bwipp_raiseerror(); //#32138
    } //#32138
    $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#32145
    $_.charvals = new Map; //#32146
    for (var _3 = 0; _3 <= 42; _3 += 1) { //#32147
        $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#32147
    } //#32147
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#32155
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#32152
        if (!_E) { //#32154
            $k[$j++] = 'bwipp.hibcqrcodeBadCharacter#32153'; //#32153
            $k[$j++] = "HIBC QR Code must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#32153
            bwipp_raiseerror(); //#32153
        } //#32153
    } //#32153
    $k[$j++] = 'barlen'; //#32157
    $k[$j++] = $_.barcode.length; //#32157
    if ($_.validatecheck) { //#32157
        var _H = $k[--$j]; //#32157
        $k[$j++] = _H - 1; //#32157
    } //#32157
    var _I = $k[--$j]; //#32157
    $_[$k[--$j]] = _I; //#32157
    $_.checksum = 41; //#32159
    for (var _M = 0, _L = $_.barlen - 1; _M <= _L; _M += 1) { //#32163
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#32162
    } //#32162
    $_.checksum = $_.checksum % 43; //#32164
    if ($_.validatecheck) { //#32170
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#32168
            $k[$j++] = 'bwipp.hibcqrcodeBadCheckDigit#32167'; //#32167
            $k[$j++] = "Incorrect HIBC QR Code check digit provided"; //#32167
            bwipp_raiseerror(); //#32167
        } //#32167
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#32169
    } //#32169
    var _e = $s($_.barlen + 2); //#32172
    $puti(_e, 1, $_.barcode); //#32172
    $_.barcode = _e; //#32172
    $put($_.barcode, 0, 43); //#32173
    $put($_.barcode, $_.barlen + 1, $get($_.barchars, $_.checksum)); //#32174
    $put($_.options, "dontdraw", true); //#32177
    $put($_.options, "validatecheck", false); //#32178
    $k[$j++] = 'args'; //#32179
    $k[$j++] = $_.barcode; //#32179
    $k[$j++] = $_.options; //#32179
    bwipp_qrcode(); //#32179
    var _q = $k[--$j]; //#32179
    var _r = $k[--$j]; //#32179
    $_[_r] = _q; //#32179
    $put($_.args, "opt", $_.options); //#32181
    $k[$j++] = $_.args; //#32184
    if (!$_.dontdraw) { //#32184
        bwipp_renmatrix(); //#32184
    } //#32184
    $_ = $__; //#32188
} //bwipp_hibcqrcode
function bwipp_hibccodablockf() {
    var $__ = $_; //#32219
    $_ = Object.assign({}, $_); //#32219
    $_.dontdraw = false; //#32222
    $_.validatecheck = false; //#32223
    $k[$j++] = $_; //#32225
    bwipp_processoptions(); //#32225
    $_.options = $k[--$j]; //#32225
    $_.barcode = $k[--$j]; //#32226
    if ($_.barcode.length == 0) { //#32230
        $k[$j++] = 'bwipp.hibccodablockfEmptyData#32229'; //#32229
        $k[$j++] = "The data must not be empty"; //#32229
        bwipp_raiseerror(); //#32229
    } //#32229
    $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#32236
    $_.charvals = new Map; //#32237
    for (var _3 = 0; _3 <= 42; _3 += 1) { //#32238
        $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#32238
    } //#32238
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#32246
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#32243
        if (!_E) { //#32245
            $k[$j++] = 'bwipp.hibccodablockfBadCharacter#32244'; //#32244
            $k[$j++] = "HIBC Codablock F must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#32244
            bwipp_raiseerror(); //#32244
        } //#32244
    } //#32244
    $k[$j++] = 'barlen'; //#32248
    $k[$j++] = $_.barcode.length; //#32248
    if ($_.validatecheck) { //#32248
        var _H = $k[--$j]; //#32248
        $k[$j++] = _H - 1; //#32248
    } //#32248
    var _I = $k[--$j]; //#32248
    $_[$k[--$j]] = _I; //#32248
    $_.checksum = 41; //#32250
    for (var _M = 0, _L = $_.barlen - 1; _M <= _L; _M += 1) { //#32254
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#32253
    } //#32253
    $_.checksum = $_.checksum % 43; //#32255
    if ($_.validatecheck) { //#32261
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#32259
            $k[$j++] = 'bwipp.hibccodablockfBadCheckDigit#32258'; //#32258
            $k[$j++] = "Incorrect HIBC Codablock F check digit provided"; //#32258
            bwipp_raiseerror(); //#32258
        } //#32258
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#32260
    } //#32260
    var _e = $s($_.barlen + 2); //#32263
    $puti(_e, 1, $_.barcode); //#32263
    $_.barcode = _e; //#32263
    $put($_.barcode, 0, 43); //#32264
    $put($_.barcode, $_.barlen + 1, $get($_.barchars, $_.checksum)); //#32265
    $put($_.options, "dontdraw", true); //#32268
    $put($_.options, "validatecheck", false); //#32269
    $k[$j++] = 'args'; //#32270
    $k[$j++] = $_.barcode; //#32270
    $k[$j++] = $_.options; //#32270
    bwipp_codablockf(); //#32270
    var _q = $k[--$j]; //#32270
    var _r = $k[--$j]; //#32270
    $_[_r] = _q; //#32270
    $put($_.args, "opt", $_.options); //#32272
    $k[$j++] = $_.args; //#32275
    if (!$_.dontdraw) { //#32275
        bwipp_renmatrix(); //#32275
    } //#32275
    $_ = $__; //#32279
} //bwipp_hibccodablockf
function bwipp_hibcazteccode() {
    var $__ = $_; //#32310
    $_ = Object.assign({}, $_); //#32310
    $_.dontdraw = false; //#32313
    $_.validatecheck = false; //#32314
    $k[$j++] = $_; //#32316
    bwipp_processoptions(); //#32316
    $_.options = $k[--$j]; //#32316
    $_.barcode = $k[--$j]; //#32317
    if ($_.barcode.length == 0) { //#32321
        $k[$j++] = 'bwipp.hibcazteccodeEmptyData#32320'; //#32320
        $k[$j++] = "The data must not be empty"; //#32320
        bwipp_raiseerror(); //#32320
    } //#32320
    $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#32327
    $_.charvals = new Map; //#32328
    for (var _3 = 0; _3 <= 42; _3 += 1) { //#32329
        $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#32329
    } //#32329
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#32337
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#32334
        if (!_E) { //#32336
            $k[$j++] = 'bwipp.hibcazteccodeBadCharacter#32335'; //#32335
            $k[$j++] = "HIBC Aztec Code must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#32335
            bwipp_raiseerror(); //#32335
        } //#32335
    } //#32335
    $k[$j++] = 'barlen'; //#32339
    $k[$j++] = $_.barcode.length; //#32339
    if ($_.validatecheck) { //#32339
        var _H = $k[--$j]; //#32339
        $k[$j++] = _H - 1; //#32339
    } //#32339
    var _I = $k[--$j]; //#32339
    $_[$k[--$j]] = _I; //#32339
    $_.checksum = 41; //#32341
    for (var _M = 0, _L = $_.barlen - 1; _M <= _L; _M += 1) { //#32345
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#32344
    } //#32344
    $_.checksum = $_.checksum % 43; //#32346
    if ($_.validatecheck) { //#32352
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#32350
            $k[$j++] = 'bwipp.hibcazteccodeBadCheckDigit#32349'; //#32349
            $k[$j++] = "Incorrect HIBC Aztec Code check digit provided"; //#32349
            bwipp_raiseerror(); //#32349
        } //#32349
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#32351
    } //#32351
    var _e = $s($_.barlen + 2); //#32354
    $puti(_e, 1, $_.barcode); //#32354
    $_.barcode = _e; //#32354
    $put($_.barcode, 0, 43); //#32355
    $put($_.barcode, $_.barlen + 1, $get($_.barchars, $_.checksum)); //#32356
    $put($_.options, "dontdraw", true); //#32359
    $put($_.options, "validatecheck", false); //#32360
    $k[$j++] = 'args'; //#32361
    $k[$j++] = $_.barcode; //#32361
    $k[$j++] = $_.options; //#32361
    bwipp_azteccode(); //#32361
    var _q = $k[--$j]; //#32361
    var _r = $k[--$j]; //#32361
    $_[_r] = _q; //#32361
    $put($_.args, "opt", $_.options); //#32363
    $k[$j++] = $_.args; //#32366
    if (!$_.dontdraw) { //#32366
        bwipp_renmatrix(); //#32366
    } //#32366
    $_ = $__; //#32370
} //bwipp_hibcazteccode
function bwipp_channelcode() {
    var $__ = $_; //#32398
    $_ = Object.assign({}, $_); //#32398
    $_.options = $k[--$j]; //#32400
    $_.barcode = $k[--$j]; //#32401
    $_.dontdraw = false; //#32403
    $_.shortfinder = false; //#32404
    $_.includetext = false; //#32405
    $_.includecheck = false; //#32406
    $_.height = 1; //#32407
    $forall($_.options, function() { //#32418
        var _3 = $k[--$j]; //#32418
        $_[$k[--$j]] = _3; //#32418
    }); //#32418
    $_.height = +$_.height; //#32420
    if (($_.barcode.length < 2) || ($_.barcode.length > 7)) { //#32425
        $k[$j++] = 'bwipp.channelcodeBadLength#32424'; //#32424
        $k[$j++] = "Channel Code must be 2 to 7 digits"; //#32424
        bwipp_raiseerror(); //#32424
    } //#32424
    $forall($_.barcode, function() { //#32430
        var _9 = $k[--$j]; //#32427
        if ((_9 < 48) || (_9 > 57)) { //#32429
            $k[$j++] = 'bwipp.channelcodeBadCharacter#32428'; //#32428
            $k[$j++] = "Channel Code must contain only digits"; //#32428
            bwipp_raiseerror(); //#32428
        } //#32428
    }); //#32428
    if ($cvi($_.barcode) > $get($a([26, 292, 3493, 44072, 576688, 7742862]), $_.barcode.length - 2)) { //#32433
        $k[$j++] = 'bwipp.channelcodeTooBig#32432'; //#32432
        $k[$j++] = "The Channel Code value is too big for the number of channels"; //#32432
        bwipp_raiseerror(); //#32432
    } //#32432
    $_.nextb = function() {
        var _E = $k[$j - 1]; //#32436
        var _N = $f($get($_.s, _E) + ($get($_.b, _E - 1) + ($get($_.b, _E - 2) + $get($_.s, _E - 1)))) > 4 ? 1 : 2;; //#32441
        $k[$j++] = _N; //#32457
        if (_E < ($_.chan + 2)) { //#32455
            var _P = $k[$j - 1]; //#32443
            var _R = $k[$j - 3]; //#32443
            for (var _T = _P, _S = _R; _T <= _S; _T += 1) { //#32446
                var _W = $k[$j - 2]; //#32444
                $put($_.b, _W, _T); //#32444
                var _X = $k[$j - 3]; //#32445
                var _Y = $k[$j - 4]; //#32445
                $k[$j++] = $f(_X - _T) + 1; //#32445
                $k[$j++] = _Y; //#32445
                $k[$j++] = _W + 1; //#32445
                $_.nexts(); //#32445
            } //#32445
        } else { //#32455
            var _Z = $k[$j - 1]; //#32448
            var _b = $k[$j - 3]; //#32448
            if ($le(_Z, _b)) { //#32456
                var _e = $k[$j - 2]; //#32449
                var _f = $k[$j - 3]; //#32449
                $put($_.b, _e, _f); //#32449
                if ($_.value == $_.target) { //#32454
                    $k[$j++] = Infinity; //#32451
                    for (var _i = 3; _i <= 10; _i += 1) { //#32452
                        $k[$j++] = $get($_.s, _i); //#32452
                        $k[$j++] = $get($_.b, _i); //#32452
                    } //#32452
                    $_.out = $geti($a(), 0, $_.chan * 2); //#32453
                } //#32453
                $_.value = $_.value + 1; //#32455
            } //#32455
        } //#32455
        $j -= 4; //#32458
    }; //#32459
    $_.nexts = function() {
        var _r = $k[$j - 1]; //#32462
        if (_r < ($_.chan + 2)) { //#32462
            $k[$j++] = 1; //#32462
        } else { //#32462
            var _u = $k[$j - 2]; //#32462
            $k[$j++] = _u; //#32462
        } //#32462
        var _v = $k[--$j]; //#32462
        var _x = $k[$j - 2]; //#32462
        for (var _z = _v, _y = _x; _z <= _y; _z += 1) { //#32465
            var _11 = $k[$j - 1]; //#32463
            $put($_.s, _11, _z); //#32463
            var _12 = $k[$j - 2]; //#32464
            var _13 = $k[$j - 3]; //#32464
            $k[$j++] = $f(_12 - _z) + 1; //#32464
            $k[$j++] = _13; //#32464
            $k[$j++] = _11; //#32464
            $_.nextb(); //#32464
        } //#32464
        $j -= 3; //#32466
    }; //#32467
    $_.encode = function() {
        $_.chan = $k[--$j]; //#32470
        $_.target = $k[--$j]; //#32471
        $_.value = 0; //#32472
        $_.out = -1; //#32473
        $_.b = $a([1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]); //#32474
        $_.s = $a([0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]); //#32475
        var _18 = $_.chan; //#32476
        $k[$j++] = _18; //#32476
        $k[$j++] = _18; //#32476
        $k[$j++] = 3; //#32476
        $_.nexts(); //#32476
        $k[$j++] = $_.out; //#32477
    }; //#32478
    $_.barlen = $_.barcode.length; //#32480
    $k[$j++] = 'finder'; //#32483
    if ($_.shortfinder) { //#32483
        $k[$j++] = $a([1, 1, 1, 1, 1]); //#32483
    } else { //#32483
        $k[$j++] = $a([1, 1, 1, 1, 1, 1, 1, 1, 1]); //#32483
    } //#32483
    var _1E = $k[--$j]; //#32483
    $_[$k[--$j]] = _1E; //#32483
    $k[$j++] = 'data'; //#32486
    $k[$j++] = $cvi($_.barcode); //#32486
    $k[$j++] = $_.barlen + 1; //#32486
    $_.encode(); //#32486
    var _1I = $k[--$j]; //#32486
    $_[$k[--$j]] = _1I; //#32486
    $_.check = $a([]); //#32489
    if ($_.includecheck) { //#32505
        $_.mod23 = $get($a([$a([]), $a([]), $a([13, 12, 4, 9, 3, 1]), $a([13, 2, 12, 3, 18, 16, 4, 1]), $a([11, 16, 17, 8, 20, 4, 10, 2, 5, 1]), $a([1, 4, 16, 18, 3, 12, 2, 8, 9, 13, 6, 1]), $a([20, 16, 22, 13, 15, 12, 5, 4, 8, 9, 21, 3, 7, 1]), $a([2, 6, 18, 8, 1, 3, 9, 4, 12, 13, 16, 2, 6, 18, 8, 1])]), $_.barlen); //#32499
        $k[$j++] = 0; //#32503
        for (var _1Z = 0, _1Y = $_.data.length - 1; _1Z <= _1Y; _1Z += 1) { //#32503
            var _1e = $k[--$j]; //#32502
            $k[$j++] = $f(_1e + (($get($_.data, _1Z) - 1) * $get($_.mod23, _1Z))); //#32502
        } //#32502
        var _1f = $k[--$j]; //#32504
        $k[$j++] = _1f % 23; //#32504
        $k[$j++] = 3; //#32504
        $_.encode(); //#32504
        $_.check = $k[--$j]; //#32504
    } //#32504
    $k[$j++] = Infinity; //#32508
    $aload($_.finder); //#32509
    $aload($_.data); //#32510
    $aload($_.check); //#32511
    $_.sbs = $a(); //#32511
    $_.txt = $a($_.barlen); //#32515
    for (var _1p = 0, _1o = $_.barlen - 1; _1p <= _1o; _1p += 1) { //#32519
        $_.i = _1p; //#32517
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#32518
    } //#32518
    $k[$j++] = Infinity; //#32522
    var _1w = $_.sbs; //#32524
    $k[$j++] = Infinity; //#32525
    for (var _1y = 0, _1z = ~~(($_.sbs.length + 1) / 2); _1y < _1z; _1y++) { //#32525
        $k[$j++] = $_.height; //#32525
    } //#32525
    var _21 = $a(); //#32525
    $k[$j++] = Infinity; //#32526
    for (var _23 = 0, _24 = ~~(($_.sbs.length + 1) / 2); _23 < _24; _23++) { //#32526
        $k[$j++] = 0; //#32526
    } //#32526
    var _25 = $a(); //#32526
    $k[$j++] = 'ren'; //#32529
    $k[$j++] = bwipp_renlinear; //#32529
    $k[$j++] = 'sbs'; //#32529
    $k[$j++] = _1w; //#32529
    $k[$j++] = 'bhs'; //#32529
    $k[$j++] = _21; //#32529
    $k[$j++] = 'bbs'; //#32529
    $k[$j++] = _25; //#32529
    $k[$j++] = 'txt'; //#32529
    $k[$j++] = $_.txt; //#32529
    $k[$j++] = 'textxalign'; //#32529
    $k[$j++] = "center"; //#32529
    $k[$j++] = 'opt'; //#32529
    $k[$j++] = $_.options; //#32529
    var _28 = $d(); //#32529
    $k[$j++] = _28; //#32532
    if (!$_.dontdraw) { //#32532
        bwipp_renlinear(); //#32532
    } //#32532
    $_ = $__; //#32534
} //bwipp_channelcode
function bwipp_renlinear() {
    if ($_.bwipjs_dontdraw) { //#32561
        return; //#32561
    } //#32561
    var $__ = $_; //#32562
    $_ = Object.assign({}, $_); //#32562
    $_.sbs = $a([]); //#32567
    $_.bhs = $a([]); //#32568
    $_.bbs = $a([]); //#32569
    $_.txt = $a([]); //#32570
    $_.barcolor = "unset"; //#32571
    $_.includetext = false; //#32572
    $_.textcolor = "unset"; //#32573
    $_.textxalign = "unset"; //#32574
    $_.textyalign = "unset"; //#32575
    $_.textfont = "OCR-B"; //#32576
    $_.textsize = 10; //#32577
    $_.textxoffset = 0; //#32578
    $_.textyoffset = 0; //#32579
    $_.textgaps = 0; //#32580
    $_.alttext = ""; //#32581
    $_.extratext = ""; //#32582
    $_.extratextcolor = "unset"; //#32583
    $_.extratextxalign = "left"; //#32584
    $_.extratextyalign = "above"; //#32585
    $_.extratextfont = "OCR-B"; //#32586
    $_.extratextsize = 10; //#32587
    $_.extratextxoffset = 0; //#32588
    $_.extratextyoffset = 0; //#32589
    $_.extratextgaps = 0; //#32590
    $_.bordercolor = "unset"; //#32591
    $_.inkspread = 0; //#32593
    $_.width = 0; //#32594
    $_.barratio = 1; //#32595
    $_.spaceratio = 1; //#32596
    $_.showborder = false; //#32597
    $_.showbearer = false; //#32598
    $_.borderleft = 10; //#32599
    $_.borderright = 10; //#32600
    $_.bordertop = 1; //#32601
    $_.borderbottom = 1; //#32602
    $_.borderwidth = 0.5; //#32603
    $_.guardwhitespace = false; //#32604
    $_.guardleftpos = 0; //#32605
    $_.guardleftypos = 0; //#32606
    $_.guardrightpos = 0; //#32607
    $_.guardrightypos = 0; //#32608
    $_.guardwidth = 7; //#32609
    $_.guardheight = 7; //#32610
    $forall($k[--$j], function() { //#32612
        var _6 = $k[--$j]; //#32612
        $_[$k[--$j]] = _6; //#32612
    }); //#32612
    $k[$j++] = $_.opt; //#32613
    delete $_['opt']; //#32613
    $k[$j++] = $_; //#32613
    bwipp_processoptions(); //#32613
    $j--; //#32613
    if ($_.textsize <= 0) { //#32617
        $k[$j++] = 'bwipp.renlinearBadTextsize#32616'; //#32616
        $k[$j++] = "The font size must be greater than zero"; //#32616
        bwipp_raiseerror(); //#32616
    } //#32616
    $_.bars = $a(~~(($_.sbs.length + 1) / 2)); //#32620
    $_.pixx = 0; //#32621
    $_.pixy = 0; //#32621
    for (var _E = 0, _D = ((~~(($_.sbs.length + 1) / 2)) * 2) - 2; _E <= _D; _E += 1) { //#32640
        $_.i = _E; //#32623
        if (($_.i % 2) == 0) { //#32637
            $_.d = ($f(($get($_.sbs, $_.i) * $_.barratio) - $_.barratio)) + 1; //#32625
            if ($get($_.sbs, $_.i) != 0) { //#32634
                $_.h = $get($_.bhs, ~~($_.i / 2)) * 72; //#32627
                $_.c = $f(($_.d / 2) + $_.pixx); //#32628
                $_.y = $get($_.bbs, ~~($_.i / 2)) * 72; //#32629
                $_.w = $f($_.d - $_.inkspread); //#32630
                $put($_.bars, ~~($_.i / 2), $a([$_.h, $_.c, $_.y, $_.w])); //#32631
                if ($f($_.h + $_.y) > $_.pixy) { //#32632
                    $_.pixy = $f($_.h + $_.y); //#32632
                } //#32632
            } else { //#32634
                $put($_.bars, ~~($_.i / 2), -1); //#32634
            } //#32634
        } else { //#32637
            $_.d = ($f(($get($_.sbs, $_.i) * $_.spaceratio) - $_.spaceratio)) + 1; //#32637
        } //#32637
        $_.pixx = $f($_.pixx + $_.d); //#32639
    } //#32639
    $$.save(); //#32642
    var _t = $$.currpos(); //#32644
    $$.translate(_t.x, _t.y); //#32644
    if ($_.width != 0) { //#32649
        $$.scale(($_.width * 72) / $_.pixx, 1); //#32648
    } //#32648
    $_.tl = $a([-$f($_.borderleft + $_.borderwidth / 2), $f($_.pixy + $_.bordertop + $_.borderwidth / 2)]); //#32659
    $_.tr = $a([$f($_.pixx + $_.borderright + $_.borderwidth / 2), $f($_.pixy + $_.bordertop + $_.borderwidth / 2)]); //#32660
    $_.bl = $a([-$f($_.borderleft + $_.borderwidth / 2), -$f($_.borderbottom + $_.borderwidth / 2)]); //#32661
    $_.br = $a([$f($_.pixx + $_.borderright + $_.borderwidth / 2), -$f($_.borderbottom + $_.borderwidth / 2)]); //#32662
    if ($_.showbearer) { //#32687
        $$.save(); //#32664
        $$.newpath(); //#32665
        $aload($_.bl); //#32666
        var _1N = $k[--$j]; //#32666
        $$.moveto($k[--$j], _1N); //#32666
        $aload($_.br); //#32666
        var _1Q = $k[--$j]; //#32666
        $$.lineto($k[--$j], _1Q); //#32666
        $aload($_.tl); //#32667
        var _1T = $k[--$j]; //#32667
        $$.moveto($k[--$j], _1T); //#32667
        $aload($_.tr); //#32667
        var _1W = $k[--$j]; //#32667
        $$.lineto($k[--$j], _1W); //#32667
        if ($ne($_.bordercolor, "unset")) { //#32668
            $$.setcolor($_.bordercolor); //#32668
        } //#32668
        $$.setlinewidth($f($_.borderwidth - ($_.inkspread * 2))); //#32669
        $$.stroke(); //#32669
        $$.restore(); //#32670
    } else { //#32687
        if ($_.showborder) { //#32688
            $$.save(); //#32683
            $$.newpath(); //#32684
            $aload($_.bl); //#32684
            var _1e = $k[--$j]; //#32684
            $$.moveto($k[--$j], _1e); //#32684
            var _1j = $a([$_.br, $_.tr, $_.tl]); //#32684
            for (var _1k = 0, _1l = _1j.length; _1k < _1l; _1k++) { //#32684
                $aload($get(_1j, _1k)); //#32684
                var _1n = $k[--$j]; //#32684
                $$.lineto($k[--$j], _1n); //#32684
            } //#32684
            $$.closepath(); //#32684
            if ($ne($_.bordercolor, "unset")) { //#32685
                $$.setcolor($_.bordercolor); //#32685
            } //#32685
            $$.setlinewidth($_.borderwidth); //#32686
            $$.stroke(); //#32686
            $$.restore(); //#32687
        } //#32687
    } //#32687
    $$.save(); //#32691
    if ($ne($_.barcolor, "unset")) { //#32693
        $$.setcolor($_.barcolor); //#32693
    } //#32693
    var _1u = $_.bars; //#32694
    for (var _1v = 0, _1w = _1u.length; _1v < _1w; _1v++) { //#32700
        var _1x = $get(_1u, _1v); //#32700
        $k[$j++] = _1x; //#32699
        if (_1x != -1) { //#32698
            $aload($k[--$j]); //#32696
            $$.newpath(); //#32696
            $$.setlinewidth($k[--$j]); //#32696
            var _20 = $k[--$j]; //#32696
            $$.moveto($k[--$j], _20); //#32696
            $$.rlineto(0, $k[--$j]); //#32696
            $$.stroke(); //#32696
        } else { //#32698
            $j--; //#32698
        } //#32698
    } //#32698
    $$.restore(); //#32701
    if ($ne($_.textcolor, "unset")) { //#32704
        $$.setcolor($_.textcolor); //#32704
    } //#32704
    if ($_.includetext) { //#32761
        if (($eq($_.textxalign, "unset") && $eq($_.textyalign, "unset")) && ($_.alttext.length == 0)) { //#32759
            $_.s = 0; //#32707
            $_.fn = ""; //#32707
            var _29 = $_.txt; //#32708
            for (var _2A = 0, _2B = _29.length; _2A < _2B; _2A++) { //#32717
                $forall($get(_29, _2A)); //#32709
                var _2D = $k[$j - 1]; //#32710
                var _2E = $k[$j - 2]; //#32710
                if ((_2D != $_.s) || $ne(_2E, $_.fn)) { //#32714
                    var _2H = $k[--$j]; //#32711
                    var _2I = $k[--$j]; //#32711
                    $_.s = _2H; //#32711
                    $_.fn = _2I; //#32711
                    $$.selectfont(_2I, _2H); //#32712
                } else { //#32714
                    $j -= 2; //#32714
                } //#32714
                var _2J = $k[--$j]; //#32716
                $$.moveto($k[--$j], _2J); //#32716
                $$.show($k[--$j], 0, 0); //#32716
            } //#32716
        } else { //#32759
            $$.selectfont($_.textfont, $_.textsize); //#32719
            if ($_.alttext.length == 0) { //#32725
                $k[$j++] = Infinity; //#32721
                var _2P = $_.txt; //#32721
                for (var _2Q = 0, _2R = _2P.length; _2Q < _2R; _2Q++) { //#32721
                    $forall($get($get(_2P, _2Q), 0)); //#32721
                } //#32721
                $_.txt = $a(); //#32721
                $_.tstr = $s($_.txt.length); //#32722
                for (var _2Z = 0, _2Y = $_.txt.length - 1; _2Z <= _2Y; _2Z += 1) { //#32723
                    $put($_.tstr, _2Z, $get($_.txt, _2Z)); //#32723
                } //#32723
            } else { //#32725
                $_.tstr = $_.alttext; //#32725
            } //#32725
            if ($_.tstr.length == 0) { //#32735
                $k[$j++] = 0; //#32730
            } else { //#32735
                $$.save(); //#32732
                $$.newpath(); //#32733
                $$.moveto(0, 0); //#32733
                $$.charpath("0", false); //#32733
                var _2f = $$.pathbbox(); //#32733
                $$.restore(); //#32735
                $k[$j++] = _2f.ury; //#32735
            } //#32735
            $_.textascent = $k[--$j]; //#32744
            var _2i = $$.stringwidth($_.tstr); //#32745
            $_.textwidth = $f(_2i.w + (($_.tstr.length - 1) * $_.textgaps)); //#32745
            $_.textxpos = $f($_.textxoffset + ($_.pixx - $_.textwidth) / 2); //#32747
            if ($eq($_.textxalign, "left")) { //#32748
                $_.textxpos = $_.textxoffset; //#32748
            } //#32748
            if ($eq($_.textxalign, "right")) { //#32749
                $_.textxpos = $f($_.pixx - $_.textxoffset - $_.textwidth); //#32749
            } //#32749
            if ($eq($_.textxalign, "offleft")) { //#32750
                $_.textxpos = -$f($_.textwidth + $_.textxoffset); //#32750
            } //#32750
            if ($eq($_.textxalign, "offright")) { //#32751
                $_.textxpos = $f($_.pixx + $_.textxoffset); //#32751
            } //#32751
            if ($eq($_.textxalign, "justify") && ($_.textwidth < $_.pixx)) { //#32755
                $_.textxpos = 0; //#32753
                $_.textgaps = $f($_.pixx - $_.textwidth) / ($_.tstr.length - 1); //#32754
            } //#32754
            $_.textypos = -($f($_.textyoffset + $_.textascent) + 1); //#32756
            if ($eq($_.textyalign, "above")) { //#32757
                $_.textypos = $f($_.textyoffset + $_.pixy) + 1; //#32757
            } //#32757
            if ($eq($_.textyalign, "center")) { //#32758
                $_.textypos = $f($_.textyoffset + ($_.pixy - $_.textascent) / 2); //#32758
            } //#32758
            $$.moveto($_.textxpos, $_.textypos); //#32759
            $$.show($_.tstr, $_.textgaps, 0); //#32759
        } //#32759
    } //#32759
    if ($_.guardwhitespace) { //#32774
        $$.selectfont("OCR-B", $_.guardheight * 2); //#32765
        if ($_.guardleftpos != 0) { //#32769
            $$.moveto(-$_.guardleftpos - 2, $f($_.guardleftypos - $_.guardheight / 2 - 1.25)); //#32767
            $$.show("<", 0, 0); //#32768
        } //#32768
        if ($_.guardrightpos != 0) { //#32773
            $$.moveto($f($_.guardrightpos + $_.pixx - $_.guardwidth) + 1, $f($_.guardrightypos - $_.guardheight / 2 - 1.25)); //#32771
            $$.show(">", 0, 0); //#32772
        } //#32772
    } //#32772
    if ($_.extratext.length != 0) { //#32809
        if ($ne($_.extratextcolor, "unset")) { //#32778
            $$.setcolor($_.extratextcolor); //#32778
        } //#32778
        $$.selectfont($_.extratextfont, $_.extratextsize); //#32779
        $$.save(); //#32782
        $$.newpath(); //#32783
        $$.moveto(0, 0); //#32783
        $$.charpath("0", false); //#32783
        var _3a = $$.pathbbox(); //#32783
        $$.restore(); //#32785
        $_.textascent = _3a.ury; //#32793
        var _3c = $$.stringwidth($_.extratext); //#32794
        $_.textwidth = $f(_3c.w + (($_.extratext.length - 1) * $_.extratextgaps)); //#32794
        $_.extratextxpos = $f($_.extratextxoffset + ($_.pixx - $_.textwidth) / 2); //#32796
        if ($eq($_.extratextxalign, "left")) { //#32797
            $_.textxpos = $_.extratextxoffset; //#32797
        } //#32797
        if ($eq($_.extratextxalign, "right")) { //#32798
            $_.textxpos = $f($_.pixx - $_.extratextxoffset - $_.textwidth); //#32798
        } //#32798
        if ($eq($_.extratextxalign, "offleft")) { //#32799
            $_.textxpos = -$f($_.textwidth + $_.extratextxoffset); //#32799
        } //#32799
        if ($eq($_.extratextxalign, "offright")) { //#32800
            $_.textxpos = $f($_.pixx + $_.extratextxoffset); //#32800
        } //#32800
        if ($eq($_.extratextxalign, "justify") && ($_.textwidth < $_.pixx)) { //#32804
            $_.textxpos = 0; //#32802
            $_.extratextgaps = $f($_.pixx - $_.textwidth) / ($_.extratext.length - 1); //#32803
        } //#32803
        $_.textypos = -($f($_.extratextyoffset + $_.textascent) + 1); //#32805
        if ($eq($_.extratextyalign, "above")) { //#32806
            $_.textypos = $f($_.extratextyoffset + $_.pixy) + 1; //#32806
        } //#32806
        if ($eq($_.extratextyalign, "center")) { //#32807
            $_.textypos = $f($_.extratextyoffset + ($_.pixy - $_.textascent) / 2); //#32807
        } //#32807
        $$.moveto($_.textxpos, $_.textypos); //#32808
        $$.show($_.extratext, $_.extratextgaps, 0); //#32808
    } //#32808
    $$.restore(); //#32811
    $_ = $__; //#32813
} //bwipp_renlinear
function bwipp_renmatrix() {
    if ($_.bwipjs_dontdraw) { //#32832
        return; //#32832
    } //#32832
    var $__ = $_; //#32834
    $_ = Object.assign({}, $_); //#32834
    $_.width = 1; //#32837
    $_.height = 1; //#32838
    $_.barcolor = "unset"; //#32839
    $_.bordercolor = "unset"; //#32841
    $_.colormap = "unset"; //#32842
    $_.dotty = false; //#32843
    $_.inkspread = 0; //#32844
    $_.inkspreadh = null; //#32845
    $_.inkspreadv = null; //#32846
    $_.txt = $a([]); //#32847
    $_.includetext = false; //#32848
    $_.textcolor = "unset"; //#32849
    $_.textxalign = "unset"; //#32850
    $_.textyalign = "unset"; //#32851
    $_.textfont = "OCR-B"; //#32852
    $_.textsize = 10; //#32853
    $_.textxoffset = 0; //#32854
    $_.textyoffset = 0; //#32855
    $_.textgaps = 0; //#32856
    $_.alttext = ""; //#32857
    $_.extratext = ""; //#32858
    $_.extratextcolor = "unset"; //#32859
    $_.extratextxalign = "left"; //#32860
    $_.extratextyalign = "above"; //#32861
    $_.extratextfont = "OCR-B"; //#32862
    $_.extratextsize = 10; //#32863
    $_.extratextxoffset = 0; //#32864
    $_.extratextyoffset = 0; //#32865
    $_.extratextgaps = 0; //#32866
    $_.showborder = false; //#32867
    $_.borderleft = 0; //#32868
    $_.borderright = 0; //#32869
    $_.bordertop = 0; //#32870
    $_.borderbottom = 0; //#32871
    $_.borderwidth = 0.25; //#32872
    $forall($k[--$j], function() { //#32874
        var _3 = $k[--$j]; //#32874
        $_[$k[--$j]] = _3; //#32874
    }); //#32874
    $k[$j++] = $_.opt; //#32875
    delete $_['opt']; //#32875
    $k[$j++] = $_; //#32875
    bwipp_processoptions(); //#32875
    $j--; //#32875
    if ($_.inkspreadh == null) { //#32877
        $_.inkspreadh = $_.inkspread; //#32877
    } //#32877
    if ($_.inkspreadv == null) { //#32878
        $_.inkspreadv = $_.inkspread; //#32878
    } //#32878
    $_.xyget = function() {
        var _B = $k[--$j]; //#33055
        var _E = $get($_.pixs, $f($k[--$j] + (_B * $_.pixx))); //#33055
        $k[$j++] = _E; //#33055
    }; //#33055
    $_.drawlayerdots = function() {
        $_.pixsorig = $_.pixs; //#33058
        $_.pixs = $k[--$j]; //#33059
        $$.newpath(); //#33061
        for (var _J = 0, _I = $_.pixs.length - 1; _J <= _I; _J += 1) { //#33069
            $_.x = _J % $_.pixx; //#33063
            $_.y = ~~(_J / $_.pixx); //#33064
            $k[$j++] = $_.x; //#33065
            $k[$j++] = $_.y; //#33065
            $_.xyget(); //#33065
            if ($k[--$j] == 1) { //#33068
                $$.moveto($f($_.x + 0.5), $f($_.pixy - $_.y - 0.5)); //#33066
                $$.arc($f($_.x + 0.5), $f($_.pixy - $_.y - 0.5), $f(0.5 - $_.inkspread), 0, 360, 1); //#33067
            } //#33067
        } //#33067
        $$.fill(); //#33070
        $_.pixs = $_.pixsorig; //#33072
    }; //#33072
    $$.save(); //#33076
    var _X = $$.currpos(); //#33078
    $$.translate(_X.x, _X.y); //#33078
    $_.inkspread = $_.inkspread / 2; //#33080
    $_.inkspreadh = $_.inkspreadh / 2; //#33081
    $_.inkspreadv = $_.inkspreadv / 2; //#33082
    $$.scale(($_.width / $_.pixx) * 72, ($_.height / $_.pixy) * 72); //#33085
    if ($_.showborder) { //#33097
        $_.tl = $a([-$f($_.borderleft + $_.borderwidth / 2), $f($_.pixy + $_.bordertop + $_.borderwidth / 2)]); //#33089
        $_.tr = $a([$f($_.pixx + $_.borderright + $_.borderwidth / 2), $f($_.pixy + $_.bordertop + $_.borderwidth / 2)]); //#33090
        $_.bl = $a([-$f($_.borderleft + $_.borderwidth / 2), -$f($_.borderbottom + $_.borderwidth / 2)]); //#33091
        $_.br = $a([$f($_.pixx + $_.borderright + $_.borderwidth / 2), -$f($_.borderbottom + $_.borderwidth / 2)]); //#33092
    } else { //#33097
        $_.tl = $a([$f(-$_.borderleft + $_.inkspread), $f($_.pixy + $_.bordertop - $_.inkspread)]); //#33094
        $_.tr = $a([$f($_.pixx + $_.borderright - $_.inkspread), $f($_.pixy + $_.bordertop - $_.inkspread)]); //#33095
        $_.bl = $a([$f(-$_.borderleft + $_.inkspread), $f(-$_.borderbottom + $_.inkspread)]); //#33096
        $_.br = $a([$f($_.pixx + $_.borderright - $_.inkspread), $f(-$_.borderbottom + $_.inkspread)]); //#33097
    } //#33097
    if ($_.showborder) { //#33111
        $$.save(); //#33106
        $$.newpath(); //#33107
        $aload($_.bl); //#33107
        var _1U = $k[--$j]; //#33107
        $$.moveto($k[--$j], _1U); //#33107
        var _1Z = $a([$_.br, $_.tr, $_.tl]); //#33107
        for (var _1a = 0, _1b = _1Z.length; _1a < _1b; _1a++) { //#33107
            $aload($get(_1Z, _1a)); //#33107
            var _1d = $k[--$j]; //#33107
            $$.lineto($k[--$j], _1d); //#33107
        } //#33107
        $$.closepath(); //#33107
        if ($ne($_.bordercolor, "unset")) { //#33108
            $$.setcolor($_.bordercolor); //#33108
        } //#33108
        $$.setlinewidth($f($_.borderwidth - ($_.inkspread * 2))); //#33109
        $$.stroke(); //#33109
        $$.restore(); //#33110
    } //#33110
    if ($eq($_.colormap, "unset")) { //#33116
        var _1l = new Map([
            [1, $_.barcolor]
        ]); //#33115
        $_.colormap = _1l; //#33115
    } //#33115
    var _1m = $_.colormap; //#33118
    for (var _1r = _1m.size, _1q = _1m.keys(), _1p = 0; _1p < _1r; _1p++) { //#33124
        var _1n = _1q.next().value; //#33124
        var _1o = _1m.get(_1n); //#33124
        $k[$j++] = _1n; //#33119
        $k[$j++] = _1o; //#33119
        if ($ne(_1o, "unset")) { //#33119
            $$.setcolor($k[--$j]); //#33119
        } else { //#33119
            $j--; //#33119
        } //#33119
        $_.key = $k[--$j]; //#33120
        $k[$j++] = Infinity; //#33121
        var _1u = $_.pixs; //#33122
        for (var _1v = 0, _1w = _1u.length; _1v < _1w; _1v++) { //#33122
            var _1z = $eq($get(_1u, _1v), $_.key) ? 1 : 0; //#33122
            $k[$j++] = _1z; //#33122
        } //#33122
        var _20 = $a(); //#33122
        $k[$j++] = _20; //#33123
        if ($_.dotty) { //#33123
            $_.drawlayerdots(); //#33123
        } else { //#33123
            $$.drawlayer($k[--$j], $_.pixx, $_.pixy, $_.inkspreadh, $_.inkspreadv); //#33123
        } //#33123
    } //#33123
    if ($_.includetext) { //#33188
        if ($ne($_.textcolor, "unset")) { //#33128
            $$.setcolor($_.textcolor); //#33128
        } //#33128
        if (($eq($_.textxalign, "unset") && $eq($_.textyalign, "unset")) && ($_.alttext.length == 0)) { //#33186
            $_.s = 0; //#33130
            $_.fn = ""; //#33130
            var _29 = $_.txt; //#33131
            for (var _2A = 0, _2B = _29.length; _2A < _2B; _2A++) { //#33144
                $aload($get(_29, _2A)); //#33132
                var _2D = $k[$j - 1]; //#33133
                var _2E = $k[$j - 2]; //#33133
                if ((_2D != $_.s) || $ne(_2E, $_.fn)) { //#33141
                    var _2H = $k[$j - 1]; //#33134
                    if (_2H <= 0) { //#33137
                        $j -= 5; //#33135
                        $k[$j++] = 'bwipp.renmatrixFontTooSmall#33136'; //#33136
                        $k[$j++] = "The font size is too small"; //#33136
                        bwipp_raiseerror(); //#33136
                    } //#33136
                    var _2I = $k[--$j]; //#33138
                    var _2J = $k[--$j]; //#33138
                    $_.s = _2I; //#33138
                    $_.fn = _2J; //#33138
                    $$.selectfont(_2J, _2I); //#33139
                } else { //#33141
                    $j -= 2; //#33141
                } //#33141
                var _2K = $k[--$j]; //#33143
                $$.moveto($k[--$j], _2K); //#33143
                $$.show($k[--$j], 0, 0); //#33143
            } //#33143
        } else { //#33186
            $$.selectfont($_.textfont, $_.textsize); //#33146
            if ($_.alttext.length == 0) { //#33152
                $k[$j++] = Infinity; //#33148
                var _2Q = $_.txt; //#33148
                for (var _2R = 0, _2S = _2Q.length; _2R < _2S; _2R++) { //#33148
                    $forall($get($get(_2Q, _2R), 0)); //#33148
                } //#33148
                $_.txt = $a(); //#33148
                $_.tstr = $s($_.txt.length); //#33149
                for (var _2a = 0, _2Z = $_.txt.length - 1; _2a <= _2Z; _2a += 1) { //#33150
                    $put($_.tstr, _2a, $get($_.txt, _2a)); //#33150
                } //#33150
            } else { //#33152
                $_.tstr = $_.alttext; //#33152
            } //#33152
            if ($_.tstr.length == 0) { //#33162
                $k[$j++] = 0; //#33157
            } else { //#33162
                $$.save(); //#33159
                $$.newpath(); //#33160
                $$.moveto(0, 0); //#33160
                $$.charpath("0", false); //#33160
                var _2g = $$.pathbbox(); //#33160
                $$.restore(); //#33162
                $k[$j++] = _2g.ury; //#33162
            } //#33162
            $_.textascent = $k[--$j]; //#33171
            var _2j = $$.stringwidth($_.tstr); //#33172
            $_.textwidth = $f(_2j.w + (($_.tstr.length - 1) * $_.textgaps)); //#33172
            $_.textxpos = $f($_.textxoffset + ($_.pixx - $_.textwidth) / 2); //#33174
            if ($eq($_.textxalign, "left")) { //#33175
                $_.textxpos = $_.textxoffset; //#33175
            } //#33175
            if ($eq($_.textxalign, "right")) { //#33176
                $_.textxpos = $f(($_.pixx - $_.textxoffset) - $_.textwidth); //#33176
            } //#33176
            if ($eq($_.textxalign, "offleft")) { //#33177
                $_.textxpos = -$f($_.textwidth + $_.textxoffset); //#33177
            } //#33177
            if ($eq($_.textxalign, "offright")) { //#33178
                $_.textxpos = $_.pixx + $_.textxoffset; //#33178
            } //#33178
            if ($eq($_.textxalign, "justify") && ($_.textwidth < $_.pixx)) { //#33182
                $_.textxpos = 0; //#33180
                $_.textgaps = $f($_.pixx - $_.textwidth) / ($_.tstr.length - 1); //#33181
            } //#33181
            $_.textypos = -($f($_.textyoffset + $_.textascent) + 1); //#33183
            if ($eq($_.textyalign, "above")) { //#33184
                $_.textypos = ($_.textyoffset + $_.pixy) + 1; //#33184
            } //#33184
            if ($eq($_.textyalign, "center")) { //#33185
                $_.textypos = $f($_.textyoffset + ($_.pixy - $_.textascent) / 2); //#33185
            } //#33185
            $$.moveto($_.textxpos, $_.textypos); //#33186
            $$.show($_.tstr, $_.textgaps, 0); //#33186
        } //#33186
    } //#33186
    if ($_.extratext.length != 0) { //#33223
        if ($ne($_.extratextcolor, "unset")) { //#33192
            $$.setcolor($_.extratextcolor); //#33192
        } //#33192
        $$.selectfont($_.extratextfont, $_.extratextsize); //#33193
        $$.save(); //#33196
        $$.newpath(); //#33197
        $$.moveto(0, 0); //#33197
        $$.charpath("0", false); //#33197
        var _3P = $$.pathbbox(); //#33197
        $$.restore(); //#33199
        $_.textascent = _3P.ury; //#33207
        var _3R = $$.stringwidth($_.extratext); //#33208
        $_.textwidth = $f(_3R.w + (($_.extratext.length - 1) * $_.extratextgaps)); //#33208
        $_.extratextxpos = $f($_.extratextxoffset + ($_.pixx - $_.textwidth) / 2); //#33210
        if ($eq($_.extratextxalign, "left")) { //#33211
            $_.textxpos = $_.extratextxoffset; //#33211
        } //#33211
        if ($eq($_.extratextxalign, "right")) { //#33212
            $_.textxpos = $f(($_.pixx - $_.extratextxoffset) - $_.textwidth); //#33212
        } //#33212
        if ($eq($_.extratextxalign, "offleft")) { //#33213
            $_.textxpos = -$f($_.textwidth + $_.extratextxoffset); //#33213
        } //#33213
        if ($eq($_.extratextxalign, "offright")) { //#33214
            $_.textxpos = $_.pixx + $_.extratextxoffset; //#33214
        } //#33214
        if ($eq($_.extratextxalign, "justify") && ($_.textwidth < $_.pixx)) { //#33218
            $_.textxpos = 0; //#33216
            $_.extratextgaps = $f($_.pixx - $_.textwidth) / ($_.extratext.length - 1); //#33217
        } //#33217
        $_.textypos = -($f($_.extratextyoffset + $_.textascent) + 1); //#33219
        if ($eq($_.extratextyalign, "above")) { //#33220
            $_.textypos = ($_.extratextyoffset + $_.pixy) + 1; //#33220
        } //#33220
        if ($eq($_.extratextyalign, "center")) { //#33221
            $_.textypos = $f($_.extratextyoffset + ($_.pixy - $_.textascent) / 2); //#33221
        } //#33221
        $$.moveto($_.textxpos, $_.textypos); //#33222
        $$.show($_.extratext, $_.extratextgaps, 0); //#33222
    } //#33222
    $$.restore(); //#33225
    $_ = $__; //#33227
} //bwipp_renmatrix
function bwipp_renmaximatrix() {
    if ($_.bwipjs_dontdraw) { //#33247
        return; //#33247
    } //#33247
    var $__ = $_; //#33249
    $_ = Object.assign({}, $_); //#33249
    $_.barcolor = "unset"; //#33252
    $_.bordercolor = "unset"; //#33254
    $_.inkspread = 0; //#33255
    $_.showborder = false; //#33256
    $_.borderleft = 0; //#33257
    $_.borderright = 0; //#33258
    $_.bordertop = 0; //#33259
    $_.borderbottom = 0; //#33260
    $_.borderwidth = 0.25; //#33261
    $forall($k[--$j], function() { //#33263
        var _2 = $k[--$j]; //#33263
        $_[$k[--$j]] = _2; //#33263
    }); //#33263
    $k[$j++] = $_.opt; //#33264
    delete $_['opt']; //#33264
    $k[$j++] = $_; //#33264
    bwipp_processoptions(); //#33264
    $j--; //#33264
    $$.save(); //#33266
    if ($_.showborder) { //#33278
        $_.tl = $a([-$f($_.borderleft + $_.borderwidth / 2), $f(29 + $_.bordertop + $_.borderwidth / 2)]); //#33270
        $_.tr = $a([$f(30 + $_.borderright + $_.borderwidth / 2), $f(29 + $_.bordertop + $_.borderwidth / 2)]); //#33271
        $_.bl = $a([-$f($_.borderleft + $_.borderwidth / 2), -$f($_.borderbottom + $_.borderwidth / 2)]); //#33272
        $_.br = $a([$f(30 + $_.borderright + $_.borderwidth / 2), -$f($_.borderbottom + $_.borderwidth / 2)]); //#33273
    } else { //#33278
        $_.tl = $a([(-$_.borderleft) + $_.inkspread, (29 + $_.bordertop) - $_.inkspread]); //#33275
        $_.tr = $a([(30 + $_.borderright) - $_.inkspread, (29 + $_.bordertop) - $_.inkspread]); //#33276
        $_.bl = $a([(-$_.borderleft) + $_.inkspread, (-$_.borderbottom) + $_.inkspread]); //#33277
        $_.br = $a([(30 + $_.borderright) - $_.inkspread, (-$_.borderbottom) + $_.inkspread]); //#33278
    } //#33278
    if ($_.showborder) { //#33292
        $$.save(); //#33287
        $$.newpath(); //#33288
        $aload($_.bl); //#33288
        var _m = $k[--$j]; //#33288
        $$.moveto($k[--$j], _m); //#33288
        var _r = $a([$_.br, $_.tr, $_.tl]); //#33288
        for (var _s = 0, _t = _r.length; _s < _t; _s++) { //#33288
            $aload($get(_r, _s)); //#33288
            var _v = $k[--$j]; //#33288
            $$.lineto($k[--$j], _v); //#33288
        } //#33288
        $$.closepath(); //#33288
        if ($ne($_.bordercolor, "unset")) { //#33289
            $$.setcolor($_.bordercolor); //#33289
        } //#33289
        $$.setlinewidth($f($_.borderwidth - ($_.inkspread * 2))); //#33290
        $$.stroke(); //#33290
        $$.restore(); //#33291
    } //#33291
    if ($ne($_.barcolor, "unset")) { //#33294
        $$.setcolor($_.barcolor); //#33294
    } //#33294
    $$.showmaxicode($_.pixs); //#33296
    $$.restore(); //#33298
    $_ = $__; //#33300
} //bwipp_renmaximatrix
// bwip-js/barcode-ftr.js
//
// This code is injected below the cross-compiled barcode.js.

// `encoder` is one of the bwipp_ functions
function bwipp_encode(bwipjs, encoder, text, opts, dontdraw) {
    if (typeof text !== 'string') {
        throw new Error('bwipp.typeError: barcode text not a string (' +
            text + ')');
    }
    opts = opts || {};
    if (typeof opts === 'string') {
        var tmp = opts.split(' ');
        opts = {};
        for (var i = 0; i < tmp.length; i++) {
            if (!tmp[i]) {
                continue;
            }
            var eq = tmp[i].indexOf('=');
            if (eq == -1) {
                if (tmp[i][0] == '!') {
                    // boolean !name
                    opts[tmp[i].substr(1)] = false;
                } else {
                    // boolean name
                    opts[tmp[i]] = true;
                }
            } else {
                opts[tmp[i].substr(0, eq)] = tmp[i].substr(eq + 1);
            }
        }
    } else if (typeof opts !== 'object' || opts.constructor !== Object) {
        throw new Error('bwipp.typeError: options not an object');
    }

    // Convert utf-16 to utf-8 unless caller has pre-encoded the text.
    if (opts.binarytext) {
        // No 16-bit chars allowed.
        if (/[\u0100-\uffff]/.test(text)) {
            throw new Error('bwip-js: 16-bit chars not allowed with binarytext');
        }
    } else if (/[\u0080-\uffff]/.test(text)) {
        text = unescape(encodeURIComponent(text));
    }

    // Convert opts to a Map
    var map = new Map;
    for (var id in opts) {
        if (opts.hasOwnProperty(id)) {
            map.set(id, opts[id]);
        }
    }

    // Set up the initial postscript state and invoke the encoder
    $$ = bwipjs;
    $k = [text, map];
    $j = 2;
    $_ = {
        bwipjs_dontdraw: opts.dontdraw || dontdraw || false
    };
    encoder();

    // Return what is left on the stack.  This branch should only be taken
    // when running with the dontdraw option.
    if ($j) {
        return $k.splice(0, $j);
    }

    return true;
}

function bwipp_lookup(symbol) {
    if (!symbol) {
        throw new Error("bwipp.undefinedEncoder: bcid is not defined");
    }
    switch (symbol.replace(/-/g, "_")) {
        case "auspost":
            return bwipp_auspost;
        case "azteccode":
            return bwipp_azteccode;
        case "azteccodecompact":
            return bwipp_azteccodecompact;
        case "aztecrune":
            return bwipp_aztecrune;
        case "bc412":
            return bwipp_bc412;
        case "channelcode":
            return bwipp_channelcode;
        case "codablockf":
            return bwipp_codablockf;
        case "code11":
            return bwipp_code11;
        case "code128":
            return bwipp_code128;
        case "code16k":
            return bwipp_code16k;
        case "code2of5":
            return bwipp_code2of5;
        case "code32":
            return bwipp_code32;
        case "code39":
            return bwipp_code39;
        case "code39ext":
            return bwipp_code39ext;
        case "code49":
            return bwipp_code49;
        case "code93":
            return bwipp_code93;
        case "code93ext":
            return bwipp_code93ext;
        case "codeone":
            return bwipp_codeone;
        case "coop2of5":
            return bwipp_coop2of5;
        case "daft":
            return bwipp_daft;
        case "databarexpanded":
            return bwipp_databarexpanded;
        case "databarexpandedcomposite":
            return bwipp_databarexpandedcomposite;
        case "databarexpandedstacked":
            return bwipp_databarexpandedstacked;
        case "databarexpandedstackedcomposite":
            return bwipp_databarexpandedstackedcomposite;
        case "databarlimited":
            return bwipp_databarlimited;
        case "databarlimitedcomposite":
            return bwipp_databarlimitedcomposite;
        case "databaromni":
            return bwipp_databaromni;
        case "databaromnicomposite":
            return bwipp_databaromnicomposite;
        case "databarstacked":
            return bwipp_databarstacked;
        case "databarstackedcomposite":
            return bwipp_databarstackedcomposite;
        case "databarstackedomni":
            return bwipp_databarstackedomni;
        case "databarstackedomnicomposite":
            return bwipp_databarstackedomnicomposite;
        case "databartruncated":
            return bwipp_databartruncated;
        case "databartruncatedcomposite":
            return bwipp_databartruncatedcomposite;
        case "datalogic2of5":
            return bwipp_datalogic2of5;
        case "datamatrix":
            return bwipp_datamatrix;
        case "datamatrixrectangular":
            return bwipp_datamatrixrectangular;
        case "datamatrixrectangularextension":
            return bwipp_datamatrixrectangularextension;
        case "dotcode":
            return bwipp_dotcode;
        case "ean13":
            return bwipp_ean13;
        case "ean13composite":
            return bwipp_ean13composite;
        case "ean14":
            return bwipp_ean14;
        case "ean2":
            return bwipp_ean2;
        case "ean5":
            return bwipp_ean5;
        case "ean8":
            return bwipp_ean8;
        case "ean8composite":
            return bwipp_ean8composite;
        case "flattermarken":
            return bwipp_flattermarken;
        case "gs1_128":
            return bwipp_gs1_128;
        case "gs1_128composite":
            return bwipp_gs1_128composite;
        case "gs1_cc":
            return bwipp_gs1_cc;
        case "gs1datamatrix":
            return bwipp_gs1datamatrix;
        case "gs1datamatrixrectangular":
            return bwipp_gs1datamatrixrectangular;
        case "gs1dldatamatrix":
            return bwipp_gs1dldatamatrix;
        case "gs1dlqrcode":
            return bwipp_gs1dlqrcode;
        case "gs1dotcode":
            return bwipp_gs1dotcode;
        case "gs1northamericancoupon":
            return bwipp_gs1northamericancoupon;
        case "gs1qrcode":
            return bwipp_gs1qrcode;
        case "hanxin":
            return bwipp_hanxin;
        case "hibcazteccode":
            return bwipp_hibcazteccode;
        case "hibccodablockf":
            return bwipp_hibccodablockf;
        case "hibccode128":
            return bwipp_hibccode128;
        case "hibccode39":
            return bwipp_hibccode39;
        case "hibcdatamatrix":
            return bwipp_hibcdatamatrix;
        case "hibcdatamatrixrectangular":
            return bwipp_hibcdatamatrixrectangular;
        case "hibcmicropdf417":
            return bwipp_hibcmicropdf417;
        case "hibcpdf417":
            return bwipp_hibcpdf417;
        case "hibcqrcode":
            return bwipp_hibcqrcode;
        case "iata2of5":
            return bwipp_iata2of5;
        case "identcode":
            return bwipp_identcode;
        case "industrial2of5":
            return bwipp_industrial2of5;
        case "interleaved2of5":
            return bwipp_interleaved2of5;
        case "isbn":
            return bwipp_isbn;
        case "ismn":
            return bwipp_ismn;
        case "issn":
            return bwipp_issn;
        case "itf14":
            return bwipp_itf14;
        case "jabcode":
            return bwipp_jabcode;
        case "japanpost":
            return bwipp_japanpost;
        case "kix":
            return bwipp_kix;
        case "leitcode":
            return bwipp_leitcode;
        case "mailmark":
            return bwipp_mailmark;
        case "mands":
            return bwipp_mands;
        case "matrix2of5":
            return bwipp_matrix2of5;
        case "maxicode":
            return bwipp_maxicode;
        case "micropdf417":
            return bwipp_micropdf417;
        case "microqrcode":
            return bwipp_microqrcode;
        case "msi":
            return bwipp_msi;
        case "onecode":
            return bwipp_onecode;
        case "pdf417":
            return bwipp_pdf417;
        case "pdf417compact":
            return bwipp_pdf417compact;
        case "pharmacode":
            return bwipp_pharmacode;
        case "pharmacode2":
            return bwipp_pharmacode2;
        case "planet":
            return bwipp_planet;
        case "plessey":
            return bwipp_plessey;
        case "posicode":
            return bwipp_posicode;
        case "postnet":
            return bwipp_postnet;
        case "pzn":
            return bwipp_pzn;
        case "qrcode":
            return bwipp_qrcode;
        case "rationalizedCodabar":
            return bwipp_rationalizedCodabar;
        case "raw":
            return bwipp_raw;
        case "rectangularmicroqrcode":
            return bwipp_rectangularmicroqrcode;
        case "royalmail":
            return bwipp_royalmail;
        case "sscc18":
            return bwipp_sscc18;
        case "swissqrcode":
            return bwipp_swissqrcode;
        case "symbol":
            return bwipp_symbol;
        case "telepen":
            return bwipp_telepen;
        case "telepennumeric":
            return bwipp_telepennumeric;
        case "ultracode":
            return bwipp_ultracode;
        case "upca":
            return bwipp_upca;
        case "upcacomposite":
            return bwipp_upcacomposite;
        case "upce":
            return bwipp_upce;
        case "upcecomposite":
            return bwipp_upcecomposite;
    }
    throw new Error("bwipp.unknownEncoder: unknown encoder name: " + symbol);
}
var BWIPP_VERSION = '2025-04-19';
// file : bwipjs.js
//
// Graphics-context interface to the BWIPP cross-compiled code

var BWIPJS = (function() {

// Math.floor(), etc. are notoriously slow.  Caching seems to help.
var floor = Math.floor;
var round = Math.round;
var ceil  = Math.ceil;
var min   = Math.min;
var max   = Math.max;

function BWIPJS(drawing) {
    if (this.constructor !== BWIPJS) {
        return new BWIPJS(drawing);
    }
    this.gstk    = [];      // Graphics save/restore stack
    this.cmds    = [];      // Graphics primitives to replay when rendering
    this.drawing = drawing; // Drawing interface

    this.reset();

    // Drawing surface bounding box
    this.minx = this.miny = Infinity;
    this.maxx = this.maxy = -Infinity;
};

// All graphics state that must be saved/restored is given a prefix of g_
BWIPJS.prototype.reset = function() {
    // Current Transform Matrix - since we don't do rotation, we can fake
    // the matrix math
    this.g_tdx  = 0;        // CTM x-offset
    this.g_tdy  = 0;        // CTM y-offset
    this.g_tsx  = 1;        // CTM x-scale factor
    this.g_tsy  = 1;        // CTM y-scale factor

    this.g_posx = 0;        // current x position
    this.g_posy = 0;        // current y position
    this.g_penw = 1;        // current line/pen width
    this.g_path = [];       // current path
    this.g_font = null;     // current font object
    this.g_rgb  = [0,0,0];  // current color (black)
    this.g_clip = false;    // clip region active
};
BWIPJS.prototype.save = function() {
    // clone all g_ properties
    var ctx = {};
    for (var id in this) {
        if (id.indexOf('g_') == 0) {
            ctx[id] = clone(this[id]);
        }
    }
    this.gstk.push(ctx);

    // Perform a deep clone of the graphics state properties
    function clone(v) {
        if (v instanceof Array) {
            var t = [];
            for (var i = 0; i < v.length; i++)
                t[i] = clone(v[i]);
            return t;
        }
        if (v instanceof Object) {
            var t = {};
            for (var id in v)
                t[id] = clone(v[id]);
            return t;
        }
        return v;
    }
};
BWIPJS.prototype.restore = function() {
    if (!this.gstk.length) {
        throw new Error('grestore: stack underflow');
    }
    var ctx  = this.gstk.pop();
    var self = this;
    if (this.g_clip && !ctx.g_clip) {
        this.cmds.push(function() {
                self.drawing.unclip();
            });
    }
    for (var id in ctx) {
        this[id] = ctx[id];
    }
};
// Per the postscript spec:
//  As discussed in Section 4.4.1, Current Path, points entered into a path
//  are immediately converted to device coordinates by the current
//  transformation matrix (CTM); subsequent modifications to the CTM do not
//  affect existing points.  `currentpoint` computes the user space
//  coordinates corresponding to the current point according to the current
//  value of the CTM. Thus, if a current point is set and then the CTM is
//  changed, the coordinates returned by currentpoint will be different
//  from those that were originally specified for the point.
BWIPJS.prototype.currpos = function() {
    return { x:(this.g_posx-this.g_tdx)/this.g_tsx,
             y:(this.g_posy-this.g_tdy)/this.g_tsy
        };
};
BWIPJS.prototype.currfont = function() {
    return this.g_font;
};
BWIPJS.prototype.translate = function(x, y) {
    this.g_tdx = this.g_tsx * x;
    this.g_tdy = this.g_tsy * y;
};
BWIPJS.prototype.scale = function(x, y) {
    this.g_tsx *= x;
    this.g_tsy *= y;
    var sxy = this.drawing.scale(this.g_tsx, this.g_tsy);
    if (sxy && sxy[0] && sxy[1]) {
        this.g_tsx = sxy[0];
        this.g_tsy = sxy[1];
    }
};
BWIPJS.prototype.setlinewidth = function(w) {
    this.g_penw = w;
};
BWIPJS.prototype.selectfont = function(f, z) {
    this.g_font = { FontName:this.jsstring(f), FontSize:+z };
};
BWIPJS.prototype.getfont = function() {
    return this.g_font.FontName;
};
// Special function for converting a Uint8Array string to string.
BWIPJS.prototype.jsstring = function(s) {
    if (s instanceof Uint8Array) {
        // Postscript (like C) treats nul-char as end of string.
        //for (var i = 0, l = s.length; i < l && s[i]; i++);
        //if (i < l) {
        //  return String.fromCharCode.apply(null,s.subarray(0, i));
        //}
        return String.fromCharCode.apply(null,s)
    }
    return ''+s;
};
// Special function to replace setanycolor in BWIPP.
// Converts a string of hex digits either rgb, rrggbb or ccmmyykk.
// Or CSS-style #rgb and #rrggbb.
BWIPJS.prototype.setcolor = function(s) {
    if (s instanceof Uint8Array) {
        s = this.jsstring(s);
    }
    if (!s) {
        return;
    }
    if (!/^(?:#?[0-9a-fA-F]{3}(?:[0-9a-fA-F]{3})?|[0-9a-fA-F]{8})$/.test(s)) {
        throw new Error('bwip-js: invalid color: ' + s);
    }
    if (s[0] == '#') {
        s = s.substr(1);
    }
    if (s.length == 3) {
        var r = parseInt(s[0], 16);
        var g = parseInt(s[1], 16);
        var b = parseInt(s[2], 16);
        this.g_rgb = [ r<<4|r, g<<4|g, b<<4|b ];
    } else if (s.length == 6) {
        var r = parseInt(s.substr(0,2), 16);
        var g = parseInt(s.substr(2,2), 16);
        var b = parseInt(s.substr(4,2), 16);
        this.g_rgb = [ r, g, b ];
    } else {
        var c = parseInt(s.substr(0,2), 16) / 255;
        var m = parseInt(s.substr(2,2), 16) / 255;
        var y = parseInt(s.substr(4,2), 16) / 255;
        var k = parseInt(s.substr(6,2), 16) / 255;
        var r = round((1-c) * (1-k) * 255);
        var g = round((1-m) * (1-k) * 255);
        var b = round((1-y) * (1-k) * 255);
        this.g_rgb = [ r, g, b ];
    }
};
// Used only by swissqrcode
BWIPJS.prototype.setrgbcolor = function(r,g,b) {
    this.g_rgb = [ r, g, b ];
};
// Returns the current rgb values as a 'RRGGBB'
BWIPJS.prototype.getRGB = function() {
    var r = this.g_rgb[0].toString(16);
    var g = this.g_rgb[1].toString(16);
    var b = this.g_rgb[2].toString(16);
    return '00'.substr(r.length) + r + '00'.substr(g.length) + g + '00'.substr(b.length) + b;
};
BWIPJS.prototype.newpath = function() {
    this.g_path = [];
};
BWIPJS.prototype.closepath = function() {
    var path = this.g_path;
    var plen = path.length;
    if (!plen) return;

    var f = plen-1;
    for ( ; f >= 0 && path[f].op == 'l'; f--);
    f++;
    if (f < plen-1) {
        var poly = [];
        var xmin = Infinity;
        var ymin = Infinity;
        var xmax = -Infinity;
        var ymax = -Infinity;
        for (var i = f; i < plen; i++) {
            var a = path[i];
            poly.push([ a.x0, a.y0 ]);
            if (xmin > a.x0) xmin = a.x0;
            if (xmax < a.x0) xmax = a.x0;
            if (ymin > a.y0) ymin = a.y0;
            if (ymax < a.y0) ymax = a.y0;
        }
        var a = path[plen-1];
        var b = path[f];
        if (a.x1 != b.x0 || a.y1 != b.y0) {
            poly.push([ a.x1, a.y1 ]);
            if (xmin > a.x1) xmin = a.x1;
            if (xmax < a.x1) xmax = a.x1;
            if (ymin > a.y1) ymin = a.y1;
            if (ymax < a.y1) ymax = a.y1;
        }
        path.splice(f, plen-f,
                    { op:'p', x0:xmin, y0:ymin, x1:xmax, y1:ymax, poly:poly });
    } else {
        path.push({ op:'c' });
    }
};
BWIPJS.prototype.moveto = function(x,y) {
    this.g_posx = this.g_tdx + this.g_tsx * x;
    this.g_posy = this.g_tdy + this.g_tsy * y;
};
BWIPJS.prototype.rmoveto = function(x,y) {
    this.g_posx += this.g_tsx * x;
    this.g_posy += this.g_tsy * y;
};
BWIPJS.prototype.lineto = function(x,y) {
    var x0 = round(this.g_posx);
    var y0 = round(this.g_posy);
    this.g_posx = this.g_tdx + this.g_tsx * x;
    this.g_posy = this.g_tdy + this.g_tsy * y;
    var x1 = round(this.g_posx);
    var y1 = round(this.g_posy);

    this.g_path.push({ op:'l', x0:x0, y0:y0, x1:x1, y1:y1 });
};
BWIPJS.prototype.rlineto = function(x,y) {
    var x0 = round(this.g_posx);
    var y0 = round(this.g_posy);
    this.g_posx += this.g_tsx * x;
    this.g_posy += this.g_tsy * y;
    var x1 = round(this.g_posx);
    var y1 = round(this.g_posy);

    this.g_path.push({ op:'l', x0:x0, y0:y0, x1:x1, y1:y1 });
};
// implements both arc and arcn
BWIPJS.prototype.arc = function(x,y,r,sa,ea,ccw) {
    if (sa == ea) {
        return;
    }
    // For now, we only implement full circles...
    if (sa != 0 && sa != 360 || ea != 0 && ea != 360) {
        throw new Error('arc: not a full circle (' + sa + ',' + ea + ')');
    }

    x = this.g_tdx + this.g_tsx * x;
    y = this.g_tdy + this.g_tsy * y;

    // e == ellipse
    var rx = r * this.g_tsx;
    var ry = r * this.g_tsy;
    this.g_path.push({ op:'e', x0:x-rx, y0:y-ry, x1:x+rx, y1:y+ry,
                                x:x, y:y, rx:rx, ry:ry, sa:sa, ea:ea, ccw:ccw });
};
BWIPJS.prototype.stringwidth = function(str) {
    var tsx  = this.g_tsx;
    var tsy  = this.g_tsy;
    var size = +this.g_font.FontSize || 10;

    // The string can be either a uint8-string or regular string
    str = this.toUCS2(this.jsstring(str));

    var bbox = this.drawing.measure(str, this.g_font.FontName, size*tsx, size*tsy);

    return { w:bbox.width/tsx, h:(bbox.ascent+bbox.descent)/tsy,
             a:bbox.ascent/tsy, d:bbox.descent/tsy };
};
BWIPJS.prototype.charpath = function(str, b) {
    var sw = this.stringwidth(str);

    // Emulate the char-path by placing a rectangle around it
    this.rlineto(0, sw.a);
    this.rlineto(sw.w, 0);
    this.rlineto(0, -sw.h);
};
BWIPJS.prototype.pathbbox = function() {
    if (!this.g_path.length)    throw new Error('pathbbox: --nocurrentpoint--');
    var path = this.g_path;
    var llx = Infinity;
    var lly = Infinity;
    var urx = -Infinity;
    var ury = -Infinity;
    for (var i = 0; i < path.length; i++) {
        var a = path[i];
        if (a.op == 'c') {
            continue;
        }
        if (a.x0 < a.x1) {
            if (llx > a.x0) llx = a.x0;
            if (urx < a.x1) urx = a.x1;
        } else {
            if (llx > a.x1) llx = a.x1;
            if (urx < a.x0) urx = a.x0;
        }
        if (a.y0 < a.y1) {
            if (lly > a.y0) lly = a.y0;
            if (ury < a.y1) ury = a.y1;
        } else {
            if (lly > a.y1) lly = a.y1;
            if (ury < a.y0) ury = a.y0;
        }
    }

    // Convert to user-space coordinates
    var rv = {  llx:(llx-this.g_tdx)/this.g_tsx,
                lly:(lly-this.g_tdy)/this.g_tsy,
                urx:(urx-this.g_tdx)/this.g_tsx,
                ury:(ury-this.g_tdy)/this.g_tsy };
    return rv;
};
// Tranforms the pts array to standard (not y-inverted), unscalled values.
BWIPJS.prototype.transform = function(pts) {
    var minx = this.minx;
    var maxy = this.maxy;

    for (var i = 0; i < pts.length; i++) {
        var pt = pts[i];
        pt[0] = pt[0] - minx;
        pt[1] = maxy - pt[1];
    }
};
BWIPJS.prototype.stroke = function() {
    var tsx  = this.g_tsx;
    var tsy  = this.g_tsy;
    var path = this.g_path;
    var rgb  = this.getRGB();
    this.g_path = [];

    // This is a "super majority" round i.e. if over .66 round up.
    var penw = floor(this.g_penw * tsx + 0.66);
    var penh = floor(this.g_penw * tsy + 0.66);

    // Calculate the bounding boxes
    var nlines = 0, npolys = 0;
    for (var i = 0; i < path.length; i++) {
        var a = path[i];
        if (a.op == 'l') {
            // We only stroke vertical and horizontal lines.  Complex shapes are
            // always filled.
            if (a.x0 != a.x1 && a.y0 != a.y1) {
                throw new Error('stroke: --not-orthogonal--');
            }
            var x0 = a.x0;
            var y0 = a.y0;
            var x1 = a.x1;
            var y1 = a.y1;

            // Half widths (may be factional)
            var penw2 = penw/2;
            var penh2 = penh/2;

            if (x0 > x1) { var t = x0; x0 = x1; x1 = t; }
            if (y0 > y1) { var t = y0; y0 = y1; y1 = t; }
            if (x0 == x1) {
                this.bbox(x0-penw2, y0, x0+penw-penw2-1, y1);   // vertical line
            } else {
                this.bbox(x0, y0-penh+penh2+1, x1, y1+penh2);   // horizontal line
            }
            nlines++;
        } else if (a.op == 'p') {
            // Closed (rectangular) poly (border around the barcode)
            var minx = Infinity;
            var miny = Infinity;
            var maxx = -Infinity;
            var maxy = -Infinity;
            var pts  = a.poly;
            if (pts.length != 4) {
                throw new Error('stroke: --not-a-rect--');
            }
            for (var i = 0, j = pts.length-1; i < pts.length; j = i++) {
                var xj = pts[j][0];
                var yj = pts[j][1];
                var xi = pts[i][0];
                var yi = pts[i][1];

                if (xi != xj && yi != yj) {
                    throw new Error('stroke: --not-orthogonal--');
                }

                if (xi < minx) minx = xi;
                if (xi > maxx) maxx = xi;
                if (yi < miny) miny = yi;
                if (yi > maxy) maxy = yi;
            }

            // Half widths (integer)
            var penw2 = ceil(penw/2);
            var penh2 = ceil(penh/2);

            // We render these as two polygons plus a fill.
            // When border width is odd, allocate the bigger half to the outside.
            this.bbox(minx-penw2, miny-penh2, maxx+penw2, maxy+penh2);
            npolys++;
        } else {
            throw new Error('stroke: --not-a-line--');
        }
    }

    // Draw the lines
    var self = this;
    this.cmds.push(function() {
        // Half widths (big half and remaining half)
        var bigw2 = ceil(penw/2);
        var bigh2 = ceil(penh/2);
        var remw2 = penw - bigw2;
        var remh2 = penh - bigh2;

        for (var i = 0; i < path.length; i++) {
            var a = path[i]
            if (a.op == 'l') {
                var pts = [ [ a.x0, a.y0 ], [ a.x1, a.y1 ] ];
                self.transform(pts);
                self.drawing.line(pts[0][0], pts[0][1], pts[1][0], pts[1][1],
                            a.x0 == a.x1 ? penw : penh, rgb);
                self.fill(rgb);
            } else {
                var pts = a.poly;
                self.transform(pts);
                var x0 = min(pts[0][0], pts[2][0]);
                var x1 = max(pts[0][0], pts[2][0]);
                var y0 = min(pts[0][1], pts[2][1]);
                var y1 = max(pts[0][1], pts[2][1]);

                // Top and left edges are "inside" the polygon.
                // Bottom and right edges are outside.

                // outside, counter-clockwise
                self.drawing.polygon([
                        [ x0-bigw2, y0-bigh2 ],
                        [ x0-bigw2, y1+bigh2+1 ],
                        [ x1+bigw2+1, y1+bigh2+1 ],
                        [ x1+bigw2+1, y0-bigh2 ],
                    ]);
                // inside, clockwise
                self.drawing.polygon([
                        [ x0+remw2, y0+remh2 ],
                        [ x1-remw2+1, y0+remh2 ],
                        [ x1-remw2+1, y1-remh2+1 ],
                        [ x0+remw2, y1-remh2+1 ],
                    ]);
                self.drawing.fill(rgb);
            }
        }
    });
};
BWIPJS.prototype.fill = function() {
    var path = this.g_path;
    var rgb  = this.getRGB();
    this.g_path = [];

    // Calculate the bounding boxes
    for (var p = 0; p < path.length; p++) {
        var a = path[p];
        if (a.op == 'p') {  // polygon
            var minx = Infinity;
            var miny = Infinity;
            var maxx = -Infinity;
            var maxy = -Infinity;
            var pts  = a.poly;
            for (var i = 0; i < pts.length; i++) {
                var xi = pts[i][0];
                var yi = pts[i][1];

                if (xi < minx) minx = xi;
                if (xi > maxx) maxx = xi;
                if (yi < miny) miny = yi;
                if (yi > maxy) maxy = yi;
            }
            // With polygons, the right and bottom edges are "outside" and do not
            // contribute to the bounding box.  But we are in postscript inverted-y
            // mode.
            this.bbox(minx, miny+1, maxx-1, maxy);
        } else if (a.op == 'e') {   // ellipse
            this.bbox(a.x - a.rx, a.y - a.ry, a.x + a.rx, a.y + a.ry);
        } else {
            throw new Error('fill: --not-a-polygon--');
        }
    }

    // Render the poly
    var self = this;
    this.cmds.push(function() {
        for (var i = 0; i < path.length; i++) {
            var a = path[i];
            if (a.op == 'p') {
                var pts = a.poly
                self.transform(pts);
                self.drawing.polygon(pts);
            } else if (a.op == 'e') {
                var pts = [ [ a.x, a.y ] ];
                self.transform(pts);
                self.drawing.ellipse(pts[0][0], pts[0][1], a.rx, a.ry, a.ccw);
            }
        }
        self.drawing.fill(rgb);
    });
};
BWIPJS.prototype.clip = function() {
    var path = this.g_path;
    this.g_path = [];
    this.g_clip = true;

    var self = this;
    this.cmds.push(function() {
        var polys = [];
        for (var i = 0; i < path.length; i++) {
            var a = path[i];
            if (a.op == 'p') {
                var pts = a.poly
                self.transform(pts);
                polys.push(pts);
            } else {
                throw new Error('clip: only polygon regions supported');
            }
        }
        self.drawing.clip(polys);
    });
};

// Our replacement for the renmatrix drawlayer functionality.
BWIPJS.prototype.drawlayer = function(pix, width, height) {
    // The pix array is in y-inverted postscript orientation.
    let paths = tracepaths(pix, width, height);

    this.newpath();
    for (let i = 0, il = paths.length; i < il; i++) {
        let path = paths[i];
        this.moveto(path[0][0], path[0][1]);
        for (let j = 1, jl = path.length; j < jl; j++) {
            let pt = path[j];
            this.lineto(pt[0], pt[1]);
        }
        this.closepath();
    }
    this.fill();
};

// The pix array is in standard (not y-inverted postscript) orientation.
BWIPJS.prototype.showmaxicode = function(pix) {
    var tsx = this.g_tsx;
    var tsy = this.g_tsy;
    var rgb = this.getRGB();

    // Module width.  Module height is an integer multiple of tsy.
    var twidth = 1.04 * tsx * 100;
    var mwidth = (twidth / 30)|0;
    if (twidth - (mwidth*30-1) > 9) {
        mwidth++;
    }

    // Dimensions needed for plotting the hexagons.  These must be integer values.
    var w, h, wgap, hgap;
    // if (opts.??? ) {
    //  // Create a one or two pixel gap
    //  wgap = (mwidth & 1) ? 1 : 2;
    //  hgap = 1;
    //  w = mwidth - gap;
    //  h = 4 * tsy;
    // } else {
        // Create a 1/8mm gap
        wgap = (tsx/2)|0;
        hgap = (tsy/2)|0;
        w = mwidth - wgap;
        if (w & 1) {
            w--;
        }
        h = ((4*tsy)|0) - hgap;
    //}

    // These must be integer values
    var w2 = w / 2 - 1;         // half width
    var qh = ((w2+1) / 2)|0;    // quarter height
    var vh = h - 2 - 2 * qh;    // side height

    // Bounding box
    this.bbox(0, 0, mwidth*30 - wgap, tsy * 3 * 32 + tsy * 4 - hgap);

    // Render the elements
    var self = this;
    this.cmds.push(function() {
        // Draw the hexagons
        for (var i = 0; i < pix.length; i++) {
            var c = pix[i];
            var x = c % 30;
            var y = (c / 30)|0;

            // Adjust x,y to the top of hexagon
            x *= mwidth;
            x += (y & 1) ? mwidth : mwidth/2;
            x = x|0;

            y = 33 - y; // invert for postscript notation
            y *= tsy * 3;
            y += tsy * 2 - h/2;
            y = y|0;

            // Build bottom up so the drawing is top-down.
            var pts = [ [ x-0.5, y-- ] ];
            y -= qh-1;
            pts.push([x-1-w2, y--]);
            y -= vh;
            pts.push([x-1-w2, y--]);
            y -= qh-1;
            pts.push([x-0.5, y++]);
            y += qh-1;
            pts.push([x+w2, y++]);
            y += vh;
            pts.push([x+w2, y++]);

            self.transform(pts);
            self.drawing.hexagon(pts, rgb);
        }
        self.drawing.fill(rgb);


        // Draw the rings
        var x = (14 * mwidth + mwidth/2 + 0.01)|0;
        var y = ((12 * 4 + 3) * tsy - qh/2 + 0.01)|0;
        self.drawing.ellipse(x, y, (0.5774*3.5*tsx+0.01)|0, (0.5774*3.5*tsy+0.01)|0, true);
        self.drawing.ellipse(x, y, (1.3359*3.5*tsx+0.01)|0, (1.3359*3.5*tsy+0.01)|0, false);
        self.drawing.fill(rgb);
        self.drawing.ellipse(x, y, (2.1058*3.5*tsx+0.01)|0, (2.1058*3.5*tsy+0.01)|0, true);
        self.drawing.ellipse(x, y, (2.8644*3.5*tsx+0.01)|0, (2.8644*3.5*tsy+0.01)|0, false);
        self.drawing.fill(rgb);
        self.drawing.ellipse(x, y, (3.6229*3.5*tsx+0.01)|0, (3.6229*3.5*tsy+0.01)|0, true);
        self.drawing.ellipse(x, y, (4.3814*3.5*tsx+0.01)|0, (4.3814*3.5*tsy+0.01)|0, false);
        self.drawing.fill(rgb);

    });
};
// UTF-8 to UCS-2 (no surrogates)
BWIPJS.prototype.toUCS2 = function(str) {
    return str.replace(/[\xc0-\xdf][\x80-\xbf]|[\xe0-\xff][\x80-\xbf]{2}/g,
                      function(s) {
                          var code;
                          if (s.length == 2) {
                              code = ((s.charCodeAt(0)&0x1f)<<6)|
                                     (s.charCodeAt(1)&0x3f);
                          } else {
                              code = ((s.charCodeAt(0)&0x0f)<<12)|
                                     ((s.charCodeAt(1)&0x3f)<<6)|
                                     (s.charCodeAt(2)&0x3f);
                          }
                          return String.fromCharCode(code);
                      });
};
// dx,dy are inter-character gaps
BWIPJS.prototype.show = function(str, dx, dy) {
    if (!str.length) {
        return;
    }

    // Capture current graphics state
    var tsx  = this.g_tsx;
    var tsy  = this.g_tsy;
    var name = this.g_font.FontName || 'OCR-B';
    var size = (this.g_font.FontSize || 10);
    var szx  = size * tsx;
    var szy  = size * tsy;
    var posx = this.g_posx;
    var posy = this.g_posy;
    var rgb  = this.getRGB();

    // The string can be either a uint8-string or regular string.
    str = this.toUCS2(this.jsstring(str));

    // Convert dx,dy to device space
    dx = tsx * dx || 0;
    dy = tsy * dy || 0;

    // Bounding box.
    var base = posy + dy;
    var bbox = this.drawing.measure(str, name, szx, szy);
    var width = bbox.width + (str.length-1) * dx;
    this.bbox(posx, base-bbox.descent+1, posx+width-1, base+bbox.ascent);
    this.g_posx += width;

    var self = this;
    self.cmds.push(function() {
        // self.transform()
        var x = posx - self.minx;
        var y = self.maxy - posy;
        self.drawing.text(x, y, str, rgb, { name:name, width:szx, height:szy, dx:dx });
    });
};
// drawing surface bounding box
BWIPJS.prototype.bbox = function(x0, y0, x1, y1) {
    if (x0 > x1) { var t = x0; x0 = x1; x1 = t; }
    if (y0 > y1) { var t = y0; y0 = y1; y1 = t; }

    x0 = floor(x0);
    y0 = floor(y0);
    x1 = ceil(x1);
    y1 = ceil(y1);

    if (this.minx > x0) this.minx = x0;
    if (this.maxx < x1) this.maxx = x1;
    if (this.miny > y0) this.miny = y0;
    if (this.maxy < y1) this.maxy = y1;
};
BWIPJS.prototype.render = function() {
    if (this.minx === Infinity) {
        // Most likely, `dontdraw` was set in the options
        return false;
    }
    // Draw the image
    this.drawing.init(this.maxx - this.minx + 1, this.maxy - this.miny + 1,
                      this.g_tsx, this.g_tsy);
    for (var i = 0, l = this.cmds.length; i < l; i++) {
        this.cmds[i]();
    }
    return this.drawing.end();
};

return BWIPJS;
})();   // BWIPJS closure
// 4-connected path tracing

function tracepaths(pixs, width, height, inkspreadh, inkspreadv) {
    let dx = inkspreadh||0;
    let dy = inkspreadv||0;

    // The pixs array is in y-inverted postscript orientation.
    // Convert to an array of arrays.
    let grid = new Array(height+1);
    let yoff = 0;
    for (let y = height-1; y >= 0; y--) {
        let row = new Uint8Array(width);
        for (let x = 0; x < width; x++) {
            row[x] = pixs[yoff + x] ? 1 : 0;
        }
        grid[y] = row;
        yoff += width;
    }
    // Add a row before/after so we can blindly access the grid.
    // We don't need actual zero-padding around the pixels.
    // All accesses are "cast to integer" with bit-&, so undefined
    // get converted to zero.
    grid[-1] = [];
    grid[height] = [];

    let paths = [];
    for (let y = 0; y < height; y++) {
        let last = 0;
        for (let x = 0; x < width; x++) {
            // The last&9 verifies the edge was not traced ccw (dir == 8).
            if ((last&9) == 0 && grid[y][x] == 1) {
                paths.push(tracecw(x, y, []));  // clockwise for outside
            // The last&5 verifies the edge was not traced cw (dir == 4).
            } else if ((last&5) == 1 && grid[y][x] == 0) {
                paths.push(traceccw(x, y, [])); // counter-clockwise for inside
            }
            last = grid[y][x];
        }
    }
    return paths;

    // Trace outside edges clockwise
    function tracecw(x, y, path) {
        path.push([ x+dx, y+dy ]);

        // 2 == top edge
        // 4 == right edge
        // 2 == top edge
        // 4 == right edge
        // 8 == bottom edge
        // 16 == left edge
        let dir = 2;
        for (;;) {
            if (grid[y][x] & dir) {
                path.pop();
                return path;
            }
            grid[y][x] |= dir;

            if (dir == 2) { // top edge rightward
                if (grid[y][x+1] & 1) {
                    if (grid[y-1][x+1] & 1) {
                        path.push([ x+1-dx, y+dy, 'H' ]);
                        dir = 16;
                    }
                    x++;
                } else {
                    path.push([ x+1-dx, y+dy, 'H' ]);
                    dir = 4;
                }
            } else if (dir == 4) {  // right edge downward
                if (grid[y+1][x] & 1) {
                    if (grid[y+1][x+1] & 1) {
                        path.push([ x+1-dx, y+1-dy, 'V' ]);
                        dir = 2;
                    }
                    y++;
                } else {
                    path.push([ x+1-dx, y+1-dy, 'V' ]);
                    dir = 8;
                }
            } else if (dir == 8) { // bottom edge leftward
                if (grid[y][x-1] & 1) {
                    if (grid[y+1][x-1] & 1) {
                        path.push([ x+dx, y+1-dy, 'H' ]);
                        dir = 4;
                    }
                    x--;
                } else {
                    path.push([ x+dx, y+1-dy, 'H' ]);
                    dir = 16;
                }
            } else { // left edge upward
                if (grid[y-1][x] & 1) {
                    if (grid[y-1][x-1] & 1) {
                        path.push([ x+dx, y+dy, 'V' ]);
                        dir = 8;
                    }
                    y--;
                } else {
                    path.push([ x+dx, y+dy, 'V' ]);
                    dir = 2;
                }
            }
        }
    }

    // Trace inside edges counter clockwise
    function traceccw(x, y, path) {
        path.push([ x-dx, y-dy ]);

        // 2 == left edge
        // 4 == bottom edge
        // 8 == right edge
        // 16 == top edge
        let dir = 2;
        for (;;) {
            if (grid[y][x] & dir) {
                path.pop();
                return path;
            }
            grid[y][x] |= dir;

            if (dir == 2) { // left edge downward
                if ((grid[y+1][x] & 1) == 0) {
                    if ((grid[y+1][x-1] & 1) == 0) {
                        path.push([ x-dx, y+1+dy ]);
                        dir = 16;
                    }
                    y++;
                } else {
                    path.push([ x-dx, y+1+dy ]);
                    dir = 4;
                }
            } else if (dir == 4) {  // bottom edge rightward
                if ((grid[y][x+1] & 1) == 0) {
                    if ((grid[y+1][x+1] & 1) == 0) {
                        path.push([ x+1+dx, y+1+dy ]);
                        dir = 2;
                    }
                    x++;
                } else {
                    path.push([ x+1+dx, y+1+dy ]);
                    dir = 8;
                }
            } else if (dir == 8) { // right edge upward
                if ((grid[y-1][x] & 1) == 0) {
                    if ((grid[y-1][x+1] & 1) == 0) {
                        path.push([ x+1+dx, y-dy ]);
                        dir = 4;
                    }
                    y--;
                } else {
                    path.push([ x+1+dx, y-dy ]);
                    dir = 16;
                }
            } else { // top edge leftward
                if ((grid[y][x-1] & 1) == 0) {
                    if ((grid[y-1][x-1] & 1) == 0) {
                        path.push([ x-dx, y-dy ]);
                        dir = 8;
                    }
                    x--;
                } else {
                    path.push([ x-dx, y-dy ]);
                    dir = 2;
                }
            }
        }
    }
}
// drawing-builtin.js
//
// The aliased (except the fonts) graphics used by drawing-canvas.js and
// drawing-zlibpng.js
//
// All x,y and lengths are integer values.
//
// For the methods that take a color `rgb` parameter, the value is always a
// string with format RRGGBB.
function DrawingBuiltin() {
    var floor = Math.floor;

    // Unrolled x,y rotate/translate matrix
    var tx0 = 0, tx1 = 0, tx2 = 0, tx3 = 0;
    var ty0 = 0, ty1 = 0, ty2 = 0, ty3 = 0;

    var opts;                   // see setopts()
    var gs_image, gs_rowbyte;   // rowbyte will be 1 for png's, 0 for canvas
    var gs_width, gs_height;    // image size, in pixels
    var gs_dx, gs_dy;           // x,y translate (padding)
    var gs_r, gs_g, gs_b;       // rgb
    var gs_xymap;               // edge map
    var gs_xyclip;              // clip region map (similar to xymap)

    return {
        // setopts() is called after the options are fixed-up/normalized,
        // but before calling into BWIPP.
        // This method allows omitting the options in the constructor call.
        // The method is optional.
        setopts(options) {
            opts = options;
        },

        // Ensure compliant bar codes by always using integer scaling factors.
        scale : function(sx, sy) {
            // swissqrcode requires clipping and drawing that are not scaled to the
            // the barcode module size.
            if (opts.bcid == 'swissqrcode') {
                return [ sx, sy ];
            } else {
                return [ (sx|0)||1, (sy|0)||1 ];
            }
        },

        // Measure text.  This and scale() are the only drawing primitives that
        // are called before init().
        //
        // `font` is the font name typically OCR-A or OCR-B.
        // `fwidth` and `fheight` are the requested font cell size.  They will
        // usually be the same, except when the scaling is not symetric.
        measure : function(str, font, fwidth, fheight) {
            fwidth = fwidth|0;
            fheight = fheight|0;

            var fontid = FontLib.lookup(font);
            var width = 0;
            var ascent = 0;
            var descent = 0;
            for (var i = 0, l = str.length; i < l; i++) {
                var ch = str.charCodeAt(i);
                var glyph = FontLib.getglyph(fontid, ch, fwidth, fheight);

                ascent  = Math.max(ascent, glyph.top);
                descent = Math.max(descent, glyph.height - glyph.top);

                if (i == l-1) {
                    width += glyph.left + glyph.width;
                } else {
                    width += glyph.advance;
                }
            }
            return { width:width, ascent:ascent, descent:descent };
        },

        // width and height represent the maximum bounding box the graphics will occupy.
        // The dimensions are for an unrotated rendering.  Adjust as necessary.
        init : function(width, height) {
            // Add in the effects of padding.  These are always set before the
            // drawing constructor is called.
            var padl = opts.paddingleft;
            var padr = opts.paddingright;
            var padt = opts.paddingtop;
            var padb = opts.paddingbottom;
            var rot  = opts.rotate || 'N';

            width  += padl + padr;
            height += padt + padb;

            if (+opts.sizelimit && +opts.sizelimit < width * height) {
                throw new Error('Image size over limit');
            }

            // Transform indexes are: x, y, w, h
            switch (rot) {
            // tx = w-y, ty = x
            case 'R': tx1 = -1; tx2 = 1; ty0 = 1; break;
            // tx = w-x, ty = h-y
            case 'I': tx0 = -1; tx2 = 1; ty1 = -1; ty3 = 1; break;
            // tx = y, ty = h-x
            case 'L': tx1 = 1; ty0 = -1; ty3 = 1; break;
            // tx = x, ty = y
            default:  tx0 = ty1 = 1; break;
            }

            // Setup the graphics state
            var swap = rot == 'L' || rot == 'R';
            gs_width  = swap ? height : width;
            gs_height = swap ? width : height;
            gs_dx = padl;
            gs_dy = padt;
            gs_xymap = [];
            gs_xymap.min = Infinity;
            gs_xyclip = null;
            gs_r = gs_g = gs_b = 0;

            // Get the rgba image from the constructor
            var res = this.image(gs_width, gs_height);
            gs_image   = res.buffer;
            gs_rowbyte = res.ispng ? 1 : 0;
        },
        // Unconnected stroked lines are used to draw the bars in linear barcodes;
        // and the border around a linear barcode (e.g. ITF-14)
        // No line cap should be applied.  These lines are always orthogonal.
        line : function(x0, y0, x1, y1, lw, rgb) {
            x0 = x0|0;
            y0 = y0|0;
            x1 = x1|0;
            y1 = y1|0;

            // Most linear barcodes, the line width will be integral.  The exceptions
            // are variable width barcodes (e.g. code39) and the postal 4-state codes.
            lw = Math.round(lw) || 1;

            if (y1 < y0) { var t = y0; y0 = y1; y1 = t; }
            if (x1 < x0) { var t = x0; x0 = x1; x1 = t; }

            gs_r = parseInt(rgb.substr(0,2), 16);
            gs_g = parseInt(rgb.substr(2,2), 16);
            gs_b = parseInt(rgb.substr(4,2), 16);

            // Horizontal or vertical line?
            var w2 = (lw/2)|0;
            if (x0 == x1) {
                // Vertical line
                x0 = x0 - lw + w2;  // big half
                x1 = x1 + w2 - 1;   // small half
            } else {
                // Horizontal line (inverted halves)
                y0 = y0 - w2;
                y1 = y1 + lw - w2 - 1;
            }
            for (var y = y0; y <= y1; y++) {
                for (var x = x0; x <= x1; x++) {
                    set(x, y, 255);
                }
            }
        },

        // Polygons are used to draw the connected regions in a 2d barcode.
        // These will always be unstroked, filled, orthogonal shapes.
        //
        // You will see a series of polygon() calls, followed by a fill().
        polygon : function(pts) {
            var npts = pts.length;
            for (var j = npts-1, i = 0; i < npts; j = i++) {
                if (pts[j][0] == pts[i][0]) {
                    // Vertical lines do not get their end points. End points
                    // are added by the horizontal line logic.
                    var xj = pts[j][0]|0;   // i or j, doesn't matter
                    var yj = pts[j][1]|0;
                    var yi = pts[i][1]|0;
                    if (yj > yi) {
                        for (var y = yi+1; y < yj; y++) {
                            addPoint(xj, y);
                        }
                    } else {
                        for (var y = yj+1; y < yi; y++) {
                            addPoint(xj, y);
                        }
                    }
                } else {
                    var xj = pts[j][0]|0;
                    var xi = pts[i][0]|0;
                    var yj = pts[j][1]|0;   // i or j, doesn't matter

                    // Horizontal lines are tricky.  As a rule, top lines get filled,
                    // bottom lines do not (similar to how left edges get filled and
                    // right edges do not).
                    //
                    // Where it gets complex is deciding whether the line actually
                    // adds edges.  There are cases where a horizontal line does
                    // not add anything to the scanline plotting.  And it doesn't
                    // actually matter whether the line is a top or bottom edge,
                    // the logic is the same.
                    //
                    // A left edge is added if the edge to its left is below.
                    // A right edge is added if the edge to its right is below.
                    if (xj < xi) {
                        var yl = pts[j == 0 ? npts-1 : j-1][1]; // left edge
                        var yr = pts[i == npts-1 ? 0 : i+1][1]; // right edge
                        if (yl > yj) {
                            addPoint(xj, yj);
                        }
                        if (yr > yj) {
                            addPoint(xi, yj);
                        }
                    } else {
                        var yl = pts[i == npts-1 ? 0 : i+1][1]; // left edge
                        var yr = pts[j == 0 ? npts-1 : j-1][1]; // right edge
                        if (yl > yj) {
                            addPoint(xi, yj);
                        }
                        if (yr > yj) {
                            addPoint(xj, yj);
                        }
                    }
                }
            }
        },
        // An unstroked, filled hexagon used by maxicode.  You can choose to fill
        // each individually, or wait for the final fill().
        //
        // The hexagon is drawn from the top, counter-clockwise.
        //
        // The X-coordinate for the top and bottom points on the hexagon is always
        // .5 pixels.  We draw our hexagons with a 2 pixel flat top.
        //
        // All other points of the polygon/hexagon are guaranteed to be integer values.
        hexagon : function(pts, rgb) {
            var x = pts[0][0]|0;
            var y = pts[0][1]|0;
            var qh = (pts[1][1] - pts[0][1])|0;     // height of triangle (quarter height)
            var vh = (pts[2][1] - pts[1][1] - 1)|0; // height of vertical side
            var xl = (pts[2][0])|0;                 // left side
            var xr = (pts[4][0])|0;                 // right side

            gs_r = parseInt(rgb.substr(0,2), 16);
            gs_g = parseInt(rgb.substr(2,2), 16);
            gs_b = parseInt(rgb.substr(4,2), 16);

            fillSegment(x, x+1, y++);
            for (var k = 1; k < qh; k++) {
                fillSegment(x-2*k, x+1+2*k, y++);
            }
            for (var k = 0; k <= vh; k++) {
                fillSegment(xl, xr, y++);
            }
            for (var k = qh-1; k >= 1; k--) {
                fillSegment(x-2*k, x+1+2*k, y++);
            }
            fillSegment(x, x+1, y);
        },
        // An unstroked, filled ellipse.  Used by dotcode and maxicode at present.
        // maxicode issues pairs of ellipse calls (one cw, one ccw) followed by a fill()
        // to create the bullseye rings.  dotcode issues all of its ellipses then a
        // fill().
        ellipse : function(x, y, rx, ry, ccw) {
            drawEllipse((x-rx)|0, (y-ry)|0, (x+rx)|0, (y+ry)|0, ccw);
        },
        // PostScript's default fill rule is non-zero but since there are never
        // intersecting regions, we use the easier to implement even-odd.
        fill : function(rgb) {
            gs_r = parseInt(rgb.substr(0,2), 16);
            gs_g = parseInt(rgb.substr(2,2), 16);
            gs_b = parseInt(rgb.substr(4,2), 16);

            evenodd();
            gs_xymap = [];
            gs_xymap.min = Infinity;
        },
        // Currently only used by swissqrcode.  The `polys` area is an array of
        // arrays of points.  Each array of points is identical to the `pts`
        // parameter passed to polygon().  The postscript default clipping rule,
        // like the fill rule, is even-odd winding.
        clip : function(polys) {
            if (!gs_xyclip) {
                gs_xyclip = [];
                gs_xyclip.min = Infinity;
            }
            // Swap out the xymap for the clip map so addPoint() works on it.
            var xymap = gs_xymap;
            gs_xymap = gs_xyclip;

            // Now just use the polygon() logic to fill in the clipping regions.
            for (var i = 0, l = polys.length; i < l; i++) {
                this.polygon(polys[i]);
            }

            // Restore
            gs_xymap = xymap;
        },
        unclip : function() {
            gs_xyclip = null;
        },
        // Draw text with optional inter-character spacing.  `y` is the baseline.
        // font is an object with properties { name, width, height, dx }
        // width and height are the font cell size.
        // dx is extra space requested between characters (usually zero).
        text : function(x, y, str, rgb, font) {
            x = x|0;
            y = y|0;

            gs_r = parseInt(rgb.substr(0,2), 16);
            gs_g = parseInt(rgb.substr(2,2), 16);
            gs_b = parseInt(rgb.substr(4,2), 16);

            var fontid  = FontLib.lookup(font.name);
            var fwidth  = font.width|0;
            var fheight = font.height|0;
            var dx      = font.dx|0;
            for (var k = 0; k < str.length; k++) {
                var ch = str.charCodeAt(k);
                var glyph = FontLib.getglyph(fontid, ch, fwidth, fheight);

                var gt = y - glyph.top;
                var gl = glyph.left;
                var gw = glyph.width;
                var gh = glyph.height;
                var gb = glyph.bytes;
                var go = glyph.offset;      // offset into bytes

                for (var i = 0; i < gw; i++) {
                    for (var j = 0; j < gh; j++) {
                        var a = gb[go + j * gw + i];
                        if (a) {
                            set(x+gl+i, gt+j, a);
                        }
                    }
                }
                x += glyph.advance + dx;
            }
        },
        // Called after all drawing is complete.
        end : function() {
        },
    };

    // This code is specialized to deal with two types of RGBA buffers:
    // - canvas style, which is true RGBA
    // - PNG style, which has a one-byte "filter code" prefixing each row.
    function set(x, y, a) {
        if (gs_xyclip && clipped(x, y)) {
            return;
        }
        // translate/rotate
        x += gs_dx;
        y += gs_dy;
        var tx = tx0 * x + tx1 * y + tx2 * (gs_width-1) + tx3 * (gs_height-1);
        var ty = ty0 * x + ty1 * y + ty2 * (gs_width-1) + ty3 * (gs_height-1);

        // https://en.wikipedia.org/wiki/Alpha_compositing
        var offs = (ty * gs_width + tx) * 4 + (ty+1) * gs_rowbyte;
        var dsta = gs_image[offs+3] / 255;
        var srca = a / 255;
        var inva = (1 - srca) * dsta;
        var outa = srca + inva;

        gs_image[offs+0] = ((gs_r * srca + gs_image[offs+0] * inva) / outa)|0;
        gs_image[offs+1] = ((gs_g * srca + gs_image[offs+1] * inva) / outa)|0;
        gs_image[offs+2] = ((gs_b * srca + gs_image[offs+2] * inva) / outa)|0;
        gs_image[offs+3] = (255 * outa)|0;
    }

    // Add a point on an edge to the scanline map.
    function addPoint(x, y) {
        if (gs_xymap.min > y) gs_xymap.min = y;
        if (!gs_xymap[y]) {
            gs_xymap[y] = [ x ];
        } else {
            gs_xymap[y].push(x);
        }
    }

    function fillSegment(x0, x1, y) {
        while (x0 <= x1) {
            set(x0++, y, 255);
        }
    }

    // even-odd fill
    //
    // This implementation is optimized for BWIPP's simple usage.
    // It is not a general purpose scanline fill.  It relies heavily on
    // polygon() creating the correct intersections.
    function evenodd() {
        var ymin = gs_xymap.min;
        var ymax = gs_xymap.length-1;

        for (var y = ymin; y <= ymax; y++) {
            var pts = gs_xymap[y];
            if (!pts) {
                continue
            }
            pts.sort(function(a, b) { return a - b; });

            var wn = false;
            var xl = 0;
            for (var n = 0, npts = pts.length; n < npts; n++) {
                var x = pts[n];
                if (wn) {
                    fillSegment(xl, x-1, y);
                } else {
                    xl = x;
                }
                wn = !wn;
            }
        }
    }

    function drawEllipse(x0, y0, x1, y1, dir) {
        x0 = x0|0;
        y0 = y0|0;
        x1 = x1|0;
        y1 = y1|0;

        var a = Math.abs(x1-x0);
        var b = Math.abs(y1-y0);
        var b1 = b & 1;
        var dx = 4*(1-a)*b*b;
        var dy = 4*(b1+1)*a*a;
        var err = dx + dy + b1*a*a;
        var e2;

        // Left and right edges
        var left = [], right = [];
        left.min = right.min = Infinity;

        if (x0 > x1) { x0 = x1; x1 += a; }
        if (y0 > y1) y0 = y1;
        y0 += ((b+1)/2)|0;
        y1 = y0 - b1;
        a *= 8*a; b1 = 8*b*b;

        do {
            maxedge(right, x1, y0); // 1st quadrant
            minedge(left, x0, y0);  // 2nd quadrant
            minedge(left, x0, y1);  // 3rd quadrant
            maxedge(right, x1, y1); // 4th quadrant
            e2 = 2*err;
            if (e2 >= dx) { x0++; x1--; dx += b1; err += dx; }
            if (e2 <= dy) { y0++; y1--; dy += a;  err += dy; }
        } while (x0 <= x1);

        while (y0-y1 < b) { // too early stop of flat ellipse
            maxedge(right, x1+1, y0);
            minedge(left, x0-1, y0++);
            minedge(left, x0-1, y1);
            maxedge(right, x1+1, y1--);
        }

        for (var y = left.min, max = left.length-1; y <= max; y++) {
            addPoint(left[y], y);
        }
        // The points we calculated are "inside".  The fill algorithm excludes
        // right edges, so +1 on each x.
        for (var y = right.min, max = right.length-1; y <= max; y++) {
            addPoint(right[y]+1, y);
        }

        function minedge(e, x, y) {
            if (e.min > y) e.min = y;
            var ey = e[y];
            if (ey == null || ey > x) {
                e[y] = x;
            }
        }

        function maxedge(e, x, y) {
            if (e.min > y) e.min = y;
            var ey = e[y];
            if (ey == null || ey < x) {
                e[y] = x;
            }
        }
    }

    // Returns true if outside the clipping region.
    function clipped(x, y) {
        var pts = gs_xyclip[y];
        if (!pts) {
            return true;
        }
        if (!pts.sorted) {
            pts.sort(function(a, b) { return a - b; });
            pts.sorted = true;
        }

        var wn = false;
        for (var n = 0, npts = pts.length; n < npts; n++) {
            var xn = pts[n];
            if (xn > x) {
                return !wn;
            } else if (xn == x) {
                return wn;
            }
            wn = !wn;
        }
        return true;
    }

    // Returns 1 if clockwise, -1 if ccw.
    function polydir(pts) {
        var xp = 0;
        for (var i = 0, l = pts.length, j = l-1; i < l; j = i++) {
            xp += pts[j][0] * pts[i][1] - pts[i][0] * pts[j][1];
        }
        return xp > 0 ? 1 : -1;
    }
}
// drawing-zlibpng.js
//
var PNGTYPE_PALETTE = 3;
var PNGTYPE_TRUEALPHA = 6;
var PNG_TEXT = "Software\0bwip-js.metafloor.com";
var PNG_CRC = (function() {
    var precalc = [];
    for (var i = 0; i < 256; i++) {
        var c = i;
        for (var j = 0; j < 8; j++) {
            if (c & 1) {
                c = 0xedb88320 ^ (c >>> 1);
            } else {
                c = c >>> 1;
            }
        }
        precalc[i] = c;
    }
    return precalc;
})();

// This has been moved to the nodejs-only section of exports.js due to
// react-native polyfills.
//var PNG_ZLIB = require('zlib');

// `maybe` maybe the callback, pre v4.0.
function DrawingZlibPng(callback, maybe) {
    // Pre setops() backward compatibility.
    if (maybe && typeof maybe == 'function') {
        callback = maybe;
    }
    var image_buffer, image_width, image_height;

    // Provide our specializations for the builtin drawing
    var drawing = DrawingBuiltin();
    drawing.image = image;
    drawing.end = end;

    // Reflect setopts() into the super
    var opts;
    var _setopts = drawing.setopts;
    drawing.setopts = function (options) {
        opts = options;
        _setopts && _setopts.call(drawing, options);
    };

    return drawing;

    // Called by DrawingBuiltin.init() to get the RGBA image data for rendering.
    function image(width, height) {
        // PNG RGBA buffers are prefixed with a one-byte filter type
        image_buffer = Buffer.alloc ? Buffer.alloc(width * height * 4 + height)
                                    : new Buffer(width * height * 4 + height);
        image_width = width;
        image_height = height;

        // Set background
        if (/^[0-9a-fA-F]{6}$/.test(''+opts.backgroundcolor)) {
            var rgb = opts.backgroundcolor;
            fillRGB(parseInt(rgb.substr(0,2), 16),
                    parseInt(rgb.substr(2,2), 16),
                    parseInt(rgb.substr(4,2), 16));
        }

        // The return value is designed to accommodate both canvas pure-RGBA buffers
        // and PNG's row-filter prefixed RGBA buffers.
        return { buffer:image_buffer, ispng:true };
    }

    function fillRGB(r, g, b) {
        var color = ((r << 24) | (g << 16) | (b << 8) | 0xff) >>> 0;

        // This is made complex by the filter byte that prefixes each row...
        var len = image_width * 4 + 1;
        var row = Buffer.alloc ? Buffer.alloc(len) : new Buffer(len);
        for (var i = 1; i < len; i += 4) {
            row.writeUInt32BE(color, i);
        }
        image_buffer.fill(row);
    }

    function end() {
        if (!callback) {
            return new Promise(makePNG);
        } else {
            makePNG(function(png) { callback(null, png); }, function(err) { callback(err); });
        }
    }

    function makePNG(resolve, reject) {
        // DEFLATE the image data
        var bufs = [];
        var buflen = 0;
        var deflator = PNG_ZLIB.createDeflate({
                chunkSize: 32 * 1024,
                level : PNG_ZLIB.Z_DEFAULT_COMPRESSION,
                strategy: PNG_ZLIB.Z_DEFAULT_STRATEGY });
        deflator.on('error', reject);
        deflator.on('data', function(data) { bufs.push(data); buflen += data.length; });
        deflator.on('end', returnPNG);
        deflator.end(image_buffer);

        function returnPNG() {
            var length = 8 + 12 + 13 +          // PNG Header + IHDR chunk
                         12 + PNG_TEXT.length + // tEXt
                         12 + buflen +          // IDAT
                         12;                    // IEND
            if (opts.dpi) {
                length += 12 + 9;               // pHYs
            }

            // Emulate a byte-stream
            var png = Buffer.alloc(length);
            var pngoff = 0; // running offset into the png buffer

            write('\x89PNG\x0d\x0a\x1a\x0a'); // PNG file header
            writeIHDR();
            writeTEXT();
            if (opts.dpi) {
                writePHYS();
            }
            writeIDAT();
            writeIEND();

            // Success
            resolve(png);

            function writeIHDR() {
                write32(13);    // chunk length
                var crcoff = pngoff;

                write('IHDR');
                write32(image_width);
                write32(image_height);
                write8(8);      // bit depth
                write8(PNGTYPE_TRUEALPHA);
                write8(0);      // compression default
                write8(0);      // filter default
                write8(0);      // no interlace

                writeCRC(crcoff);
            }
            function writeTEXT() {
                write32(PNG_TEXT.length);   // chunk length
                var crcoff = pngoff;

                write('tEXt');
                write(PNG_TEXT);
                writeCRC(crcoff);
            }
            function writePHYS() {
                write32(9);
                var crcoff = pngoff;

                var pxm = ((opts.dpi || 72) / 0.0254)|0;
                write('pHYs');
                write32(pxm);   // x-axis
                write32(pxm);   // y-axis
                write8(1);      // px/m (the only usable option)
                writeCRC(crcoff);
            }
            function writeIDAT() {
                write32(buflen);    // chunk length
                var crcoff = pngoff;

                write('IDAT');
                for (var i = 0; i < bufs.length; i++) {
                    bufs[i].copy(png, pngoff);
                    pngoff += bufs[i].length;
                }
                writeCRC(crcoff);
            }
            function writeIEND() {
                write32(0);             // chunk length;
                var crcoff = pngoff;

                write('IEND');
                writeCRC(crcoff);
            }

            function write(s) {
                png.write(s, pngoff, 'binary');
                pngoff += s.length;
            }
            function write32(v) {
                png.writeUInt32BE(v, pngoff);
                pngoff += 4;
            }
            function write16(v) {
                png.writeUInt16BE(v, pngoff);
                pngoff += 2;
            }
            function write8(v) {
                png[pngoff++] = v;
            }
            function writeCRC(off) {
                var crc = -1;
                while (off < pngoff) {
                    crc = PNG_CRC[(crc ^ png[off++]) & 0xff] ^ (crc >>> 8);
                }
                write32((crc ^ -1) >>> 0);
            }
        }
    }
}
// drawing-svg.js
//
// Converts the drawing primitives into the equivalent SVG.  Linear barcodes
// are rendered as a series of stroked paths.  2D barcodes are rendered as a 
// series of filled paths.
//
// Rotation is handled during drawing.  The resulting SVG will contain the 
// already-rotated barcode without an SVG transform.
//
// If the requested barcode image contains text, the glyph paths are 
// extracted from the font file (via the builtin FontLib and stb_truetype.js)
// and added as filled SVG paths.
//
function DrawingSVG() {
    // Unrolled x,y rotate/translate matrix
    var tx0 = 0, tx1 = 0, tx2 = 0, tx3 = 0;
    var ty0 = 0, ty1 = 0, ty2 = 0, ty3 = 0;

    var opts;
    var svg = '';
    var path;
    var clipid = '';
    var clips = [];
    var lines = {};

    // We adjust the drawing coordinates by 0.5px when stroke width is odd.
    // But this creates an odd effect with scale.  When scale is even, we
    // need to add 0.5; when scale is odd, subtract 0.5.
    var scalex, scaley;

    // Magic number to approximate an ellipse/circle using 4 cubic beziers.
    var ELLIPSE_MAGIC = 0.55228475 - 0.00045;

    // Global graphics state
    var gs_width, gs_height;    // image size, in pixels
    var gs_dx, gs_dy;           // x,y translate (padding)

    return {
        // setopts() is called after the options are fixed-up/normalized,
        // but before calling into BWIPP.
        // This allows omitting the options in the constructor call.
        // It is also your last chance to amend the options before usage.
        setopts(options) {
            opts = options;
        },

        // measure() and scale() are the only drawing primitives that are called before init().

        // Make no adjustments
        scale(sx, sy) {
            scalex = sx;
            scaley = sy;
        },
        // Measure text.
        // `font` is the font name typically OCR-A or OCR-B.
        // `fwidth` and `fheight` are the requested font cell size.  They will
        // usually be the same, except when the scaling is not symetric.
        measure(str, font, fwidth, fheight) {
            fwidth = fwidth|0;
            fheight = fheight|0;

            var fontid = FontLib.lookup(font);
            var width = 0;
            var ascent = 0;
            var descent = 0;
            for (var i = 0, l = str.length; i < l; i++) {
                var ch = str.charCodeAt(i);
                var glyph = FontLib.getglyph(fontid, ch, fwidth, fheight);
                if (!glyph) {
                    continue;
                }
                ascent  = Math.max(ascent, glyph.top);
                descent = Math.max(descent, glyph.height - glyph.top);
                if (i == l-1) {
                    width += glyph.left + glyph.width;
                } else {
                    width += glyph.advance;
                }
            }
            return { width, ascent, descent };
        },

        // `width` and `height` represent the maximum bounding box the graphics will
        // occupy.  The dimensions are for an unrotated rendering.  Adjust as necessary.
        init(width, height) {
            // Add in the effects of padding.  These are always set before the
            // drawing constructor is called.
            var padl = opts.paddingleft;
            var padr = opts.paddingright;
            var padt = opts.paddingtop;
            var padb = opts.paddingbottom;
            var rot  = opts.rotate || 'N';

            width  += padl + padr;
            height += padt + padb;

            // Transform indexes are: x, y, w, h
            switch (rot) {
            // tx = w-y, ty = x
            case 'R': tx1 = -1; tx2 = 1; ty0 = 1; break;
            // tx = w-x, ty = h-y
            case 'I': tx0 = -1; tx2 = 1; ty1 = -1; ty3 = 1; break;
            // tx = y, ty = h-x
            case 'L': tx1 = 1; ty0 = -1; ty3 = 1; break;
            // tx = x, ty = y
            default:  tx0 = ty1 = 1; break;
            }

            // Setup the graphics state
            var swap = rot == 'L' || rot == 'R';
            gs_width  = swap ? height : width;
            gs_height = swap ? width : height;
            gs_dx = padl;
            gs_dy = padt;
        },
        // Unconnected stroked lines are used to draw the bars in linear barcodes.
        // No line cap should be applied.  These lines are always orthogonal.
        line(x0, y0, x1, y1, lw, rgb) {
            x0 = x0|0;
            y0 = y0|0;
            x1 = x1|0;
            y1 = y1|0;
            lw = Math.round(lw) || 1;

            // Try to keep the lines "crisp" by using with the SVG line drawing spec to
            // our advantage and adjust the coordinates by half pixel when stroke width
            // is odd.  Work around an odd effect with scale.  When scale is even, we
            // need to add 0.5; when scale is odd, subtract 0.5.
            if (lw & 1) {
                if (x0 == x1) {
                    let dx = (scalex&1) ? -0.5 : 0.5;
                    x0 += dx;
                    x1 += dx;
                }
                if (y0 == y1) {
                    let dy = (scaley&1) ? -0.5 : 0.5;
                    y0 += dy;
                    y1 += dy;
                }
            }
            // The svg path does not include the start pixel, but the built-in drawing does.
            if (x0 == x1) {
                y0++;
            } else if (y0 == y1) {
                x0++;
            }

            // Group together all lines of the same width and emit as single paths.
            // Dramatically reduces the svg text size.
            var key = '' + lw + '#' + rgb;
            if (!lines[key]) {
                lines[key] = '<path stroke="#' + rgb + '" stroke-width="' + lw + '" d="';
            }
            lines[key] += 'M' + transform(x0, y0) + 'L' + transform(x1, y1);
        },
        // Polygons are used to draw the connected regions in a 2d barcode.
        // These will always be unstroked, filled, non-intersecting,
        // orthogonal shapes.
        // You will see a series of polygon() calls, followed by a fill().
        polygon(pts) {
            if (!path) {
                path = '<path d="';
            }
            path += 'M' + transform(pts[0][0], pts[0][1]);
            for (var i = 1, n = pts.length; i < n; i++) {
                var p = pts[i];
                path += 'L' + transform(p[0], p[1]);
            }
            path += 'Z';
        },
        // An unstroked, filled hexagon used by maxicode.  You can choose to fill
        // each individually, or wait for the final fill().
        //
        // The hexagon is drawn from the top, counter-clockwise.
        hexagon(pts, rgb) {
            this.polygon(pts); // A hexagon is just a polygon...
        },
        // An unstroked, filled ellipse.  Used by dotcode and maxicode at present.
        // maxicode issues pairs of ellipse calls (one cw, one ccw) followed by a fill()
        // to create the bullseye rings.  dotcode issues all of its ellipses then a
        // fill().
        ellipse(x, y, rx, ry, ccw) {
            if (!path) {
                path = '<path d="';
            }
            var dx = rx * ELLIPSE_MAGIC;
            var dy = ry * ELLIPSE_MAGIC;

            // Since there are never overlapping regions, we don't worry about cw/ccw.
            path += 'M' + transform(x - rx, y) +
                    'C' + transform(x - rx, y - dy) + ' ' +
                          transform(x - dx, y - ry) + ' ' +
                          transform(x,      y - ry) +
                    'C' + transform(x + dx, y - ry) + ' ' +
                          transform(x + rx, y - dy) + ' ' +
                          transform(x + rx, y) + 
                    'C' + transform(x + rx, y + dy) + ' ' +
                          transform(x + dx, y + ry) + ' ' +
                          transform(x,      y + ry) +  
                    'C' + transform(x - dx, y + ry) + ' ' +
                          transform(x - rx, y + dy) + ' ' +
                          transform(x - rx, y) + 
                    'Z';
        },
        // PostScript's default fill rule is non-zero but there are never intersecting
        // regions. The built-in drawing uses even-odd for simplicity - we match that
        // to be consistent.
        fill(rgb) {
            if (path) {
                svg += path + '" fill="#' + rgb + '" fill-rule="evenodd"' +
                       (clipid ? ' clip-path="url(#' + clipid + ')"' : '') +
                       ' />\n';
                path = null;
            }
        },
        // Currently only used by swissqrcode.  The `polys` area is an array of
        // arrays of points.  Each array of points is identical to the `pts`
        // parameter passed to polygon().  The clipping rule, like the fill rule,
        // defaults to non-zero winding.
        clip : function(polys) {
            var path = '<clipPath id="clip' + clips.length + '"><path d="';
            for (let j = 0; j < polys.length; j++) {
                let pts = polys[j];
                path += 'M' + transform(pts[0][0], pts[0][1]);
                for (var i = 1, n = pts.length; i < n; i++) {
                    var p = pts[i];
                    path += 'L' + transform(p[0], p[1]);
                }
                path += 'Z';
            }
            path += '" clip-rule="nonzero" /></clipPath>';
            clipid = "clip" + clips.length;
            clips.push(path);
        },
        unclip : function() {
            clipid = '';
        },
        // Draw text with optional inter-character spacing.  `y` is the baseline.
        // font is an object with properties { name, width, height, dx }
        // width and height are the font cell size.
        // dx is extra space requested between characters (usually zero).
        text(x, y, str, rgb, font) {
            var fontid  = FontLib.lookup(font.name);
            var fwidth  = font.width|0;
            var fheight = font.height|0;
            var dx      = font.dx|0;
            var path = '';
            for (var k = 0; k < str.length; k++) {
                var ch = str.charCodeAt(k);
                var glyph = FontLib.getpaths(fontid, ch, fwidth, fheight);
                if (!glyph) {
                    continue;
                }
                if (glyph.length) {
                    // A glyph is composed of sequence of curve and line segments.
                    // M is move-to
                    // L is line-to
                    // Q is quadratic bezier curve-to
                    // C is cubic bezier curve-to
                    for (var i = 0, l = glyph.length; i < l; i++) {
                        let seg = glyph[i];
                        if (seg.type == 'M' || seg.type == 'L') {
                            path += seg.type + transform(seg.x + x, y - seg.y);
                        } else if (seg.type == 'Q') {
                            path += seg.type + transform(seg.cx + x, y - seg.cy) + ' ' +
                                               transform(seg.x + x,  y - seg.y);
                        } else if (seg.type == 'C') {
                            path += seg.type + transform(seg.cx1 + x, y - seg.cy1) + ' ' +
                                               transform(seg.cx2 + x, y - seg.cy2) + ' ' +
                                               transform(seg.x + x,   y - seg.y);
                        }
                    }
                    // Close the shape
                    path += 'Z';
                }
                // getglyph() provides slightly different metrics than getpaths().  Keep
                // it consistent with the built-in drawing.
                x += FontLib.getglyph(fontid, ch, fwidth, fheight).advance + dx;
            }
            if (path) {
                svg += '<path d="' + path + '" fill="#' + rgb + '" />\n';
            }
        },
        // Called after all drawing is complete.  The return value from this method
        // will be the return value from `bwipjs.render()`.
        end() {
            var linesvg = '';
            for (var key in lines) {
                linesvg += lines[key] + '" />\n';
            }
            var bg = opts.backgroundcolor;
            return '<svg viewBox="0 0 ' + gs_width + ' ' + gs_height + '" xmlns="http://www.w3.org/2000/svg">\n' +
                        (clips.length ? '<defs>' + clips.join('') + '</defs>' : '') +
                        (/^[0-9A-Fa-f]{6}$/.test(''+bg)
                            ? '<rect width="100%" height="100%" fill="#' + bg + '" />\n'
                            : '') +
                        linesvg + svg + '</svg>\n';
        },
    };

    // translate/rotate and return as an SVG coordinate pair
    function transform(x, y) {
        x += gs_dx;
        y += gs_dy;
        var tx = tx0 * x + tx1 * y + tx2 * (gs_width-1) + tx3 * (gs_height-1);
        var ty = ty0 * x + ty1 * y + ty2 * (gs_width-1) + ty3 * (gs_height-1);
        return '' + ((tx|0) == tx ? tx : tx.toFixed(2)) + ' ' +
                    ((ty|0) == ty ? ty : ty.toFixed(2));
    }
}
// fontlib.js
var FontLib = (function() {
    var fonts = [];
    var names = {};
    var glyphcache = {};
    var glyphmru = {};
    var glyphcount = 0;

    // Sentinel to simplify moving entries around in the list.
    glyphmru.next = glyphmru;
    glyphmru.prev = glyphmru;

    return {
        lookup:lookup,
        monochrome:monochrome,
        getglyph:getglyph,
        getpaths:getpaths,
        loadFont:loadFont,
    };

    // loadFont(name, data)
    // loadFont(name, mult, data)
    // loadFont(name, multy, multx, data)   // note order: y,x
    // data must be the font data, either a binary or base64 encoded string.
    function loadFont(name /*...args*/) {
        var multx = 100;
        var multy = 100;
        var data = null;

        if (arguments.length == 2) {
            data = arguments[1];
        } else if (arguments.length == 3) {
            multx = multy = +arguments[1] || 100;
            data = arguments[2];
        } else if (arguments.length == 4) {
            multy = +arguments[1] || 100;
            multx = +arguments[2] || 100;
            data = arguments[3];
        } else {
            throw new Error("bwipjs: loadFont: invalid number of arguments");
        }

        var font = STBTT.InitFont(toUint8Array(data));
        font.bwipjs_name = name;
        font.bwipjs_multx = multx;
        font.bwipjs_multy = multy;

        var fontid = fonts.push(font)-1;
        names[name.toUpperCase()] = fontid;
        return fontid;
    }

    // Always returns a valid font-id (default OCR-B)
    function lookup(name) {
        var fontid = names[name.toUpperCase()];
        return fontid === undefined ? 1 : fontid;       // OCR B default
    }

    // Not supported by stbtt
    function monochrome(mono) {
        if (mono) {
            throw new Error('bwipjs: monochrome fonts not implemented');
        }
    }

    function getglyph(fontid, charcode, width, height) {
        fontid   = fontid|0;
        charcode = charcode|0;
        width    = +width;
        height   = +height;
        if (!width || width < 8) {
            width = 8;
        }
        if (!height || height < 8) {
            height = width;
        }
        if (fontid < 0 || fontid >= fonts.length) {
            fontid = 1;     // OCR B default
        }
        if (!charcode || charcode < 32) {
            charcode = 32;
        }

        // In the cache?
        var cachekey = '' + fontid + 'c' + charcode + 'w' + width + 'h' + height;
        var glyph = glyphcache[cachekey];
        if (glyph) {
            // Unthread from the MRU
            glyph.prev.next = glyph.next;
            glyph.next.prev = glyph.prev;

            // Thread back onto the top
            var sntl = glyphmru;
            sntl.next.prev = glyph;
            glyph.next = sntl.next;
            glyph.prev = sntl;
            sntl.next = glyph;

            return glyph;
        }

        var font = fonts[fontid];
        var glyph = STBTT.GetGlyph(font, charcode, width * font.bwipjs_multx / 100,
                                                   height * font.bwipjs_multy / 100) ||
                    STBTT.GetGlyph(font, 0, width * font.bwipjs_multx / 100,
                                                   height * font.bwipjs_multy / 100);

        glyph.bytes = glyph.pixels;
        glyph.cachekey = cachekey;
        glyph.offset = 0;

        //glyph = {
        //      top:font.GlyphTop(),
        //      left:font.GlyphLeft(),
        //      width:font.GlyphWidth(),
        //      height:font.GlyphHeight(),
        //      advance:font.GlyphAdvance(),
        //      bitmap:font.GlyphBitmap(),
        //      offset:0,
        //      cachekey:cachekey,
        //  };

        // Purge old
        if (glyphcount > 250) {
            var sntl = glyphmru;
            var temp = sntl.prev;
            temp.prev.next = sntl;
            sntl.prev = temp.prev;
            temp.next = temp.prev = null;
            delete glyphcache[temp.cachekey];
        } else {
            glyphcount++;
        }

        // Add to cache and to the top of the MRU
        glyphcache[cachekey] = glyph;

        var sntl = glyphmru;
        sntl.next.prev = glyph;
        glyph.next = sntl.next;
        glyph.prev = sntl;
        sntl.next = glyph;

        return glyph;
    }

    function getpaths(fontid, charcode, width, height) {
        fontid   = fontid|0;
        charcode = charcode|0;
        width    = +width;
        height   = +height;
        if (!width || width < 8) {
            width = 8;
        }
        if (!height || height < 8) {
            height = width;
        }
        if (fontid < 0 || fontid >= fonts.length) {
            fontid = 1;     // OCR B default
        }
        if (!charcode || charcode < 32) {
            charcode = 32;
        }

        var font = fonts[fontid];
        return STBTT.GetPaths(font, charcode, width * font.bwipjs_multx / 100,
                                              height * font.bwipjs_multy / 100);
    }
})();

// This is needed to make the default exports traceable by esbuild
// during its tree shaking phase.  See issue #298.
function LoadFont() {
    return FontLib.loadFont.apply(FontLib, Array.prototype.slice.call(arguments));
}
// bwip-js/stb_trutype.js
//
// JavaScript implementation of stb_truetype.h @ https://github.com/nothings/stb.
//
// This file is part of the bwip-js project available at:
//
//      http://metafloor.github.io/bwip-js
//
// Copyright (c) 2019 Mark Warren : MIT LICENSE

// Copyright notice from stb_truetype.h:
//
// MIT License
//
// Copyright (c) 2017 Sean Barrett
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

var STBTT = (function () {

var STBTT_vmove  = 1,
    STBTT_vline  = 2,
    STBTT_vcurve = 3,
    STBTT_vcubic = 4,

    STBTT_PLATFORM_ID_UNICODE   = 0,
    STBTT_PLATFORM_ID_MAC       = 1,
    STBTT_PLATFORM_ID_ISO       = 2,
    STBTT_PLATFORM_ID_MICROSOFT = 3,

    STBTT_UNICODE_EID_UNICODE_1_0       = 0,
    STBTT_UNICODE_EID_UNICODE_1_1       = 1,
    STBTT_UNICODE_EID_ISO_10646         = 2,
    STBTT_UNICODE_EID_UNICODE_2_0_BMP   = 3,
    STBTT_UNICODE_EID_UNICODE_2_0_FULL  = 4,

    STBTT_MS_EID_SYMBOL         = 0,
    STBTT_MS_EID_UNICODE_BMP    = 1,
    STBTT_MS_EID_SHIFTJIS       = 2,
    STBTT_MS_EID_UNICODE_FULL   = 10;

var floor = Math.floor;
var ceil  = Math.ceil;
var sqrt  = Math.sqrt;
var abs   = Math.abs;

// Allocate an array of objects - replaces malloc(sizeof struct * n)
function oalloc(n) {
    var o = [];
    for (var i = 0; i < n; i++) {
        o.push({});
    }
    return o;
}

//static unsigned char stbtt__buf_get8(stbtt__buf * b)
function stbtt__buf_get8(b) {
    return b[b.cursor++]||0;
}

//static unsigned char stbtt__buf_peek8(stbtt__buf * b)
function stbtt__buf_peek8(b) {
    return b[b.cursor];
}

//static void stbtt__buf_seek(stbtt__buf * b, int o)
function stbtt__buf_seek(b, o) {
    b.cursor = (o > b.length || o < 0) ? b.length : o;
}

//static void stbtt__buf_skip(stbtt__buf * b, int o)
function stbtt__buf_skip(b, o) {
    stbtt__buf_seek(b, b.cursor + o);
}

//static unsigned int stbtt__buf_get(stbtt__buf * b, int n)
function stbtt__buf_get(b, n) {
    var v = 0;
    for (var i = 0; i < n; i++) {
        v = (v << 8) | stbtt__buf_get8(b);
    }
    return v;
}

// This function is only called once with a real 'p', all other uses are
// for a NULL buffer.  The for real usage, the code is inlined.
//static stbtt__buf stbtt__new_buf(const void *p, int size)
function stbtt__null_buf() {
    return { length:0 };
}

//static stbtt__buf stbtt__buf_range(const stbtt__buf * b, int o, int s)
function stbtt__buf_range(b, o, s) {
    if (o < 0 || s < 0 || o > b.length || s > b.length - o) {
        return stbtt__null_buf();
    }
    var r = b.subarray(o, o + s);
    r.cursor = 0;
    return r;
}

//static stbtt__buf stbtt__cff_get_index(stbtt__buf * b)
function stbtt__cff_get_index(b) {
    var start = b.cursor;
    var count = stbtt__buf_get(b, 2);
    if (count) {
        var offsize = stbtt__buf_get8(b);
        stbtt__buf_skip(b, offsize * count);
        stbtt__buf_skip(b, stbtt__buf_get(b, offsize) - 1);
    }
    return stbtt__buf_range(b, start, b.cursor - start);
}

//static unsigned int stbtt__cff_int(stbtt__buf * b)
function stbtt__cff_int(b) {
    var b0 = stbtt__buf_get8(b);
    if (b0 >= 32 && b0 <= 246) {
        return b0 - 139;
    } else if (b0 >= 247 && b0 <= 250) {
        return (b0 - 247) * 256 + stbtt__buf_get8(b) + 108;
    } else if (b0 >= 251 && b0 <= 254) {
        return -(b0 - 251) * 256 - stbtt__buf_get8(b) - 108;
    } else if (b0 == 28) {
        return stbtt__buf_get(b, 2);
    } else if (b0 == 29) {
        return stbtt__buf_get(b, 4);
    }
    return 0;
}

//static void stbtt__cff_skip_operand(stbtt__buf * b)
function stbtt__cff_skip_operand(b) {
    var b0 = stbtt__buf_peek8(b);
    if (b0 == 30) {
        stbtt__buf_skip(b, 1);
        while (b.cursor < b.length) {
            var v = stbtt__buf_get8(b);
            if ((v & 0xF) == 0xF || (v >> 4) == 0xF) {
                break;
            }
        }
    } else {
        stbtt__cff_int(b);
    }
}

//static stbtt__buf stbtt__dict_get(stbtt__buf * b, int key)
function stbtt__dict_get(b, key) {
    stbtt__buf_seek(b, 0);
    while (b.cursor < b.length) {
        var start = b.cursor, end, op;
        while (stbtt__buf_peek8(b) >= 28) {
            stbtt__cff_skip_operand(b);
        }
        end = b.cursor;
        op = stbtt__buf_get8(b);
        if (op == 12) {
            op = stbtt__buf_get8(b) | 0x100;
        }
        if (op == key) {
            return stbtt__buf_range(b, start, end - start);
        }
    }
    return stbtt__buf_range(b, 0, 0);
}

//static void stbtt__dict_get_ints(stbtt__buf * b, int key, int outcount, unsigned int *out)
function stbtt__dict_get_ints(b, key, outcount, out) {
    var operands = stbtt__dict_get(b, key);
    for (var i = 0; i < outcount && operands.cursor < operands.length; i++) {
        out[i] = stbtt__cff_int(operands);
    }
}
// single-integer format of above since javascript doesn't have address-of
function stbtt__dict_get_int(b, key, out) {
    var operands = stbtt__dict_get(b, key);
    if (operands.cursor < operands.length) {
        out = stbtt__cff_int(operands);
    }
    return out;
}

//static int stbtt__cff_index_count(stbtt__buf * b)
function stbtt__cff_index_count(b) {
    stbtt__buf_seek(b, 0);
    return stbtt__buf_get(b, 2);
}

//static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)
function stbtt__cff_index_get(b, i) {
    var count, offsize, start, end;
    stbtt__buf_seek(b, 0);
    count = stbtt__buf_get(b, 2);
    offsize = stbtt__buf_get8(b);
    stbtt__buf_skip(b, i * offsize);
    start = stbtt__buf_get(b, offsize);
    end = stbtt__buf_get(b, offsize);
    return stbtt__buf_range(b, 2 + (count + 1) * offsize + start, end - start);
}

// Convert sign-extend a 16-bit integer to JS number
function INT16(n) {
    return n & 0x8000 ? (0xffff0000|n)>>0 : n;
}

//static unsigned short ttUSHORT(unsigned char *p)
function ttUSHORT(b, o) {
    return b[o] * 256 + b[o+1];
}

//static short ttSHORT(unsigned char *p)
function ttSHORT(b, o) {
    var n = b[o] * 256 + b[o+1];
    return n & 0x8000 ? (0xffff0000|n)>>0 : n;
}

//static unsigned int ttULONG(unsigned char *p)
function ttULONG(b, o) {
    return (b[o] << 24) + (b[o+1] << 16) + (b[o+2] << 8) + b[o+3];
}

//static unsigned int stbtt__find_table(unsigned char *data, unsigned int fontstart, const char *tag)
function stbtt__find_table(data, fontstart, tag) {
    var num_tables = ttUSHORT(data, fontstart + 4);
    var tabledir = fontstart + 12;
    for (var i = 0; i < num_tables; ++i) {
        var loc = tabledir + 16 * i;
        if (data[loc] == tag[0] && data[loc+1] == tag[1] && data[loc+2] == tag[2] && data[loc+3] == tag[3]) {
            return ttULONG(data, loc + 8);
        }
    }
    return 0;
}

//static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)
function stbtt__get_subrs(cff, fontdict) {
    var private_loc = [ 0, 0 ];
    stbtt__dict_get_ints(fontdict, 18, 2, private_loc);
    if (!private_loc[1] || !private_loc[0]) {
        return stbtt__null_buf();
    }
    var pdict = stbtt__buf_range(cff, private_loc[1], private_loc[0]);
    var subrsoff = stbtt__dict_get_int(pdict, 19, 0);
    if (!subrsoff) {
        return stbtt__null_buf();
    }
    stbtt__buf_seek(cff, private_loc[1] + subrsoff);
    return stbtt__cff_get_index(cff);
}

//static int stbtt_InitFont_internal(stbtt_fontinfo * info, unsigned char *data, int fontstart)
function stbtt_InitFont_internal(info, data, fontstart) {
    var cmap, t, i, numTables;

    info.data = data;
    info.fontstart = fontstart;
    info.cff = stbtt__null_buf();

    cmap = stbtt__find_table(data, fontstart, [ 99, 109, 97, 112 ]);        //"cmap"
    info.loca = stbtt__find_table(data, fontstart, [ 108, 111, 99, 97 ]);   //"loca"
    info.head = stbtt__find_table(data, fontstart, [ 104, 101, 97, 100 ]);  //"head"
    info.glyf = stbtt__find_table(data, fontstart, [ 103, 108, 121, 102 ]); //"glyf"
    info.hhea = stbtt__find_table(data, fontstart, [ 104, 104, 101, 97 ]);  //"hhea"
    info.hmtx = stbtt__find_table(data, fontstart, [ 104, 109, 116, 120 ]); //"hmtx"
    info.kern = stbtt__find_table(data, fontstart, [ 107, 101, 114, 110 ]); //"kern"

    if (!cmap || !info.head || !info.hhea || !info.hmtx) {
        return 0;
    }
    if (info.glyf) {
        if (!info.loca) {
            return 0;
        }
    } else {
        var b, topdict, topdictidx, cff,
            cstype = 2, charstrings = 0, fdarrayoff = 0, fdselectoff = 0;

        cff = stbtt__find_table(data, fontstart, [ 67, 70, 70, 32 ]);   //"CFF "
        if (!cff) {
            return 0;
        }

        info.fontdicts = stbtt__null_buf();
        info.fdselect = stbtt__null_buf();

        info.cff = data.subarray(cff); //stbtt__new_buf(data + cff, 512 * 1024 * 1024);
        info.cff.cursor = 0;
        b = info.cff;

        stbtt__buf_skip(b, 2);
        stbtt__buf_seek(b, stbtt__buf_get8(b));

        stbtt__cff_get_index(b);
        topdictidx = stbtt__cff_get_index(b);
        topdict = stbtt__cff_index_get(topdictidx, 0);
        stbtt__cff_get_index(b);
        info.gsubrs = stbtt__cff_get_index(b);

        charstrings = stbtt__dict_get_int(topdict, 17, charstrings);
        cstype = stbtt__dict_get_int(topdict, 0x100 | 6, cstype);
        fdarrayoff = stbtt__dict_get_int(topdict, 0x100 | 36, fdarrayoff);
        fdselectoff = stbtt__dict_get_int(topdict, 0x100 | 37, fdselectoff);
        info.subrs = stbtt__get_subrs(b, topdict);

        if (cstype != 2) {
            return 0;
        }
        if (charstrings == 0) {
            return 0;
        }

        if (fdarrayoff) {
            if (!fdselectoff) {
                return 0;
            }
            stbtt__buf_seek(b, fdarrayoff);
            info.fontdicts = stbtt__cff_get_index(b);
            info.fdselect = stbtt__buf_range(b, fdselectoff, b.length - fdselectoff);
        }

        stbtt__buf_seek(b, charstrings);
        info.charstrings = stbtt__cff_get_index(b);
    }

    t = stbtt__find_table(data, fontstart, [ 109, 97, 120, 112 ]);  //"maxp"
    if (t) {
        info.numGlyphs = ttUSHORT(data, t + 4);
    }
    else {
        info.numGlyphs = 0xffff;
    }

    numTables = ttUSHORT(data, cmap + 2);
    info.index_map = 0;
    for (i = 0; i < numTables; ++i) {
        var encoding_record = cmap + 4 + 8 * i;

        switch (ttUSHORT(data, encoding_record)) {
        case STBTT_PLATFORM_ID_MICROSOFT:
            switch (ttUSHORT(data, encoding_record + 2)) {
            case STBTT_MS_EID_UNICODE_BMP:
            case STBTT_MS_EID_UNICODE_FULL:
                info.index_map = cmap + ttULONG(data, encoding_record + 4);
                break;
            }
            break;
        case STBTT_PLATFORM_ID_UNICODE:
            info.index_map = cmap + ttULONG(data, encoding_record + 4);
            break;
        }
    }
    if (info.index_map == 0) {
        return 0;
    }

    info.indexToLocFormat = ttUSHORT(data, info.head + 50);
    return 1;
}

//extern int stbtt_FindGlyphIndex(const stbtt_fontinfo * info, int unicode_codepoint)
function stbtt_FindGlyphIndex(info, unicode_codepoint) {
    var data = info.data, index_map = info.index_map;

    var format = ttUSHORT(data, index_map + 0);
    if (format == 0) {
        var bytes = ttUSHORT(data, index_map + 2);
        if (unicode_codepoint < bytes - 6) {
            return data[index_map + 6 + unicode_codepoint];
        }
        return 0;
    } else if (format == 6) {
        var first = ttUSHORT(data, index_map + 6),
            count = ttUSHORT(data, index_map + 8);
        if (unicode_codepoint >= first && unicode_codepoint < first + count) {
            return ttUSHORT(data, index_map + 10 + (unicode_codepoint - first) * 2);
        }
        return 0;
    } else if (format == 2) {
        return 0;
    } else if (format == 4) {
        var segcount = ttUSHORT(data, index_map + 6) >> 1,
            searchRange = ttUSHORT(data, index_map + 8) >> 1,
            entrySelector = ttUSHORT(data, index_map + 10),
            rangeShift = ttUSHORT(data, index_map + 12) >> 1,
            endCount = index_map + 14,
            search = endCount;

        if (unicode_codepoint > 0xffff) {
            return 0;
        }

        if (unicode_codepoint >= ttUSHORT(data, search + rangeShift * 2)) {
            search += rangeShift * 2;
        }

        search -= 2;
        while (entrySelector) {
            searchRange >>= 1;
            var end = ttUSHORT(data, search + searchRange * 2);
            if (unicode_codepoint > end) {
                search += searchRange * 2;
            }
            --entrySelector;
        }
        search += 2;

        var offset, start, item = (search - endCount) >>> 1;

        start = ttUSHORT(data, index_map + 14 + segcount * 2 + 2 + 2 * item);
        if (unicode_codepoint < start) {
            return 0;
        }

        offset = ttUSHORT(data, index_map + 14 + segcount * 6 + 2 + 2 * item);
        if (offset == 0) {
            return unicode_codepoint + ttSHORT(data, index_map + 14 + segcount * 4 + 2 + 2 * item);
        }
        return ttUSHORT(data, offset + (unicode_codepoint - start) * 2 +
                                index_map + 14 + segcount * 6 + 2 + 2 * item);
    } else if (format == 12 || format == 13) {
        var ngroups = ttULONG(data, index_map + 12),
            low = 0, high = ngroups;
         while (low < high) {
            var mid = low + ((high - low) >> 1);
            var start_char = ttULONG(data, index_map + 16 + mid * 12);
            var end_char = ttULONG(data, index_map + 16 + mid * 12 + 4);
            if (unicode_codepoint < start_char) {
                high = mid;
            } else if (unicode_codepoint > end_char) {
                low = mid + 1;
            } else {
                var start_glyph = ttULONG(data, index_map + 16 + mid * 12 + 8);
                if (format == 12) {
                    return start_glyph + unicode_codepoint - start_char;
                } else {
                    return start_glyph;
                }
            }
        }
        return 0;
    }
    return 0;
}

//static void stbtt_setvertex(stbtt_vertex * v, unsigned char type, int x, int y, int cx, int cy)
function stbtt_setvertex(v, type, x, y, cx, cy) {
    v.type = type;
    v.x = x;
    v.y = y;
    v.cx = cx;
    v.cy = cy;
}

//static int stbtt__GetGlyfOffset(const stbtt_fontinfo * info, int glyph_index)
function stbtt__GetGlyfOffset(info, glyph_index) {
    var  g1, g2;
    if (glyph_index >= info.numGlyphs) {
        return -1;
    }
    if (info.indexToLocFormat >= 2) {
        return -1;
    }

    if (info.indexToLocFormat == 0) {
        g1 = info.glyf + ttUSHORT(info.data, info.loca + glyph_index * 2) * 2;
        g2 = info.glyf + ttUSHORT(info.data, info.loca + glyph_index * 2 + 2) * 2;
    } else {
        g1 = info.glyf + ttULONG(info.data, info.loca + glyph_index * 4);
        g2 = info.glyf + ttULONG(info.data, info.loca + glyph_index * 4 + 4);
    }

    return g1 == g2 ? -1 : g1;
}

//extern int stbtt_GetGlyphBox(const stbtt_fontinfo * info, int glyph_index, int *x0, int *y0, int *x1, int *y1)
function stbtt_GetGlyphBox(info, glyph_index, out) {
    if (info.cff.length) {
        stbtt__GetGlyphInfoT2(info, glyph_index, out);
    } else {
        var g = stbtt__GetGlyfOffset(info, glyph_index);
        if (g < 0) {
            return 0;
        }
        out.x0 = ttSHORT(info.data, g + 2);
        out.y0 = ttSHORT(info.data, g + 4);
        out.x1 = ttSHORT(info.data, g + 6);
        out.y1 = ttSHORT(info.data, g + 8);
    }
    return 1;
}

//static int stbtt__close_shape(stbtt_vertex * vertices, int num_vertices, int was_off,
//                   int start_off, int sx, int sy, int scx, int scy, int cx, int cy)
function stbtt__close_shape(vertices, num_vertices, was_off, start_off, sx, sy, scx, scy, cx, cy) {
    if (start_off) {
        if (was_off) {
            stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve,
                            (cx + scx) >> 1, (cy + scy) >> 1, cx, cy);
        }
        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, sx, sy, scx, scy);
    } else {
        if (was_off) {
            stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, sx, sy, cx, cy);
        } else {
            stbtt_setvertex(vertices[num_vertices++], STBTT_vline, sx, sy, 0, 0);
        }
    }
    return num_vertices;
}

//static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo * info, int glyph_index, stbtt_vertex ** pvertices)
function stbtt__GetGlyphShapeTT(info, glyph_index) {
    var data = info.data,
        g = stbtt__GetGlyfOffset(info, glyph_index);

    if (g < 0) {
        return null;
    }

    var vertices = [];
    var numberOfContours = ttSHORT(data, g);
    if (numberOfContours > 0) {
        var flags = 0, flagcount,
            i, j = 0, m, n, next_move, was_off = 0, off, start_off = 0,
            x, y, cx, cy, sx, sy, scx, scy;
        var endPtsOfContours = g + 10;
        var ins = ttUSHORT(data, g + 10 + numberOfContours * 2);
        var points = data.subarray(g + 10 + numberOfContours * 2 + 2 + ins);
        var ptsoff = 0;

        n = 1 + ttUSHORT(data, endPtsOfContours + numberOfContours * 2 - 2);
        m = n + 2 * numberOfContours;

        vertices = oalloc(m);
        next_move = 0;
        flagcount = 0;
        off = m - n;

        for (i = 0; i < n; ++i) {
            if (flagcount == 0) {
                flags = points[ptsoff++];
                if (flags & 8) {
                    flagcount = points[ptsoff++];
                }
            } else {
                --flagcount;
            }
            vertices[off + i].type = flags;
        }

        x = 0;
        for (i = 0; i < n; ++i) {
            flags = vertices[off + i].type;
            if (flags & 2) {
                var dx = points[ptsoff++];
                x += (flags & 16) ? dx : -dx;
            } else {
                if (!(flags & 16)) {
                    x = x + INT16(points[ptsoff] * 256 + points[ptsoff+1]);
                    ptsoff += 2;
                }
            }
            vertices[off + i].x = x;
        }

        y = 0;
        for (i = 0; i < n; ++i) {
            flags = vertices[off + i].type;
            if (flags & 4) {
                var dy = points[ptsoff++];
                y += (flags & 32) ? dy : -dy;
            } else {
                if (!(flags & 32)) {
                    y = y + INT16(points[ptsoff] * 256 + points[ptsoff+1]);
                    ptsoff += 2;
                }
            }
            vertices[off + i].y = y;
        }

        var num_vertices = 0;
        sx = sy = cx = cy = scx = scy = 0;
        for (i = 0; i < n; ++i) {
            flags = vertices[off + i].type;
            x = vertices[off + i].x;
            y = vertices[off + i].y;

            if (next_move == i) {
                if (i != 0) {
                    num_vertices = stbtt__close_shape(vertices, num_vertices, was_off, start_off,
                                            sx, sy, scx, scy, cx, cy);
                }
                start_off = !(flags & 1);
                if (start_off) {
                    scx = x;
                    scy = y;
                    if (!(vertices[off + i + 1].type & 1)) {
                        sx = (x + vertices[off + i + 1].x) >> 1;
                        sy = (y + vertices[off + i + 1].y) >> 1;
                    } else {
                        sx = vertices[off + i + 1].x;
                        sy = vertices[off + i + 1].y;
                        ++i;
                    }
                } else {
                    sx = x;
                    sy = y;
                }
                stbtt_setvertex(vertices[num_vertices++], STBTT_vmove, sx, sy, 0, 0);
                was_off = 0;
                next_move = 1 + ttUSHORT(data, endPtsOfContours + j * 2);
                ++j;
            } else {
                if (!(flags & 1)) {
                    if (was_off) {
                        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve,
                                        (cx + x) >> 1, (cy + y) >> 1, cx, cy);
                    }
                    cx = x;
                    cy = y;
                    was_off = 1;
                } else {
                    if (was_off) {
                        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, x, y, cx, cy);
                    } else {
                        stbtt_setvertex(vertices[num_vertices++], STBTT_vline, x, y, 0, 0);
                    }
                    was_off = 0;
                }
            }
        }
        vertices.length = stbtt__close_shape(vertices, num_vertices, was_off, start_off,
                                                sx, sy, scx, scy, cx, cy);
    } else if (numberOfContours == -1) {
        var more = 1;
        var comp = g + 10;
         while (more) {
            var flags, gidx, mtx = [ 1, 0, 0, 1, 0, 0 ];

            flags = ttSHORT(data, comp);
            comp += 2;
            gidx = ttSHORT(data, comp);
            comp += 2;

            if (flags & 2) {
                if (flags & 1) {
                    mtx[4] = ttSHORT(data, comp);
                    comp += 2;
                    mtx[5] = ttSHORT(data, comp);
                    comp += 2;
                } else {
                    mtx[4] = stbtt__buf_get8(data, comp);
                    comp += 1;
                    mtx[5] = stbtt__buf_get8(data, comp);
                    comp += 1;
                }
            }
            if (flags & (1 << 3)) {
                mtx[0] = mtx[3] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[1] = mtx[2] = 0;
            } else if (flags & (1 << 6)) {
                mtx[0] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[1] = mtx[2] = 0;
                mtx[3] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
            } else if (flags & (1 << 7)) {
                mtx[0] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[1] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[2] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[3] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
            }

            var m = sqrt(mtx[0] * mtx[0] + mtx[1] * mtx[1]);
            var n = sqrt(mtx[2] * mtx[2] + mtx[3] * mtx[3]);
            var comp_verts = stbtt_GetGlyphShape(info, gidx);
            if (comp_verts.length > 0) {
                for (var i = 0, l = comp_verts.length; i < l; ++i) {
                    var v = comp_verts[i], x, y;
                    x = v.x;
                    y = v.y;
                    v.x = floor(m * (mtx[0] * x + mtx[2] * y + mtx[4]));
                    v.y = floor(n * (mtx[1] * x + mtx[3] * y + mtx[5]));
                    x = v.cx;
                    y = v.cy;
                    v.cx = floor(m * (mtx[0] * x + mtx[2] * y + mtx[4]));
                    v.cy = floor(n * (mtx[1] * x + mtx[3] * y + mtx[5]));
                }

                vertices = vertices.concat(comp_verts);
            }
            more = flags & (1 << 5);
        }
    }
    //console.log('vertices(' + vertices.length + ')');
    //for (var i = 0; i < vertices.length; i++) {
    //  var pt = vertices[i];
    //  console.log(`${i}: ${pt.x},${pt.y} / ${pt.cx},${pt.cy} / ${pt.type}`);
    //}

    return vertices;
}

//static void stbtt__track_vertex(stbtt__csctx * c, int x, int y)
function stbtt__track_vertex(c, x, y) {
    if (x > c.max_x || !c.started) {
        c.max_x = x;
    }
    if (y > c.max_y || !c.started) {
        c.max_y = y;
    }
    if (x < c.min_x || !c.started) {
        c.min_x = x;
    }
    if (y < c.min_y || !c.started) {
        c.min_y = y;
    }
    c.started = 1;
}

//static void stbtt__csctx_v(stbtt__csctx * c, unsigned char type, int x, int y, int cx, int cy, int cx1, int cy1)
function stbtt__csctx_v(c, type, x, y, cx, cy, cx1, cy1) {
    stbtt__track_vertex(c, x, y);
    if (type == STBTT_vcubic) {
        stbtt__track_vertex(c, cx, cy);
        stbtt__track_vertex(c, cx1, cy1);
    }
    var v = {};
    stbtt_setvertex(v, type, x, y, cx, cy);
    v.cx1 = cx1;
    v.cy1 = cy1;
    c.vertices.push(v);
 }

//static void stbtt__csctx_close_shape(stbtt__csctx * ctx)
function stbtt__csctx_close_shape(ctx) {
    if (ctx.first_x != ctx.x || ctx.first_y != ctx.y) {
        stbtt__csctx_v(ctx, STBTT_vline, ctx.first_x, ctx.first_y, 0, 0, 0, 0);
    }
}

//static void stbtt__csctx_rmove_to(stbtt__csctx * ctx, float dx, float dy)
function stbtt__csctx_rmove_to(ctx, dx, dy) {
    stbtt__csctx_close_shape(ctx);
    ctx.first_x = ctx.x = ctx.x + dx;
    ctx.first_y = ctx.y = ctx.y + dy;
    stbtt__csctx_v(ctx, STBTT_vmove, ctx.x, ctx.y, 0, 0, 0, 0);
}

//static void stbtt__csctx_rline_to(stbtt__csctx * ctx, float dx, float dy)
function stbtt__csctx_rline_to(ctx, dx, dy) {
    ctx.x += dx;
    ctx.y += dy;
    stbtt__csctx_v(ctx, STBTT_vline, ctx.x, ctx.y, 0, 0, 0, 0);
}

//static void stbtt__csctx_rccurve_to(stbtt__csctx * ctx, float dx1, float dy1, float dx2,
//                                  float dy2, float dx3, float dy3)
function stbtt__csctx_rccurve_to(ctx, dx1, dy1, dx2, dy2, dx3, dy3) {
    var cx1 = ctx.x + dx1,
        cy1 = ctx.y + dy1,
        cx2 = cx1 + dx2,
        cy2 = cy1 + dy2;
    ctx.x = cx2 + dx3;
    ctx.y = cy2 + dy3;
    stbtt__csctx_v(ctx, STBTT_vcubic, ctx.x, ctx.y, cx1, cy1, cx2, cy2);
}

//static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)
function stbtt__get_subr(b, n) {
    var count = stbtt__cff_index_count(b);
    var bias = 107;
    if (count >= 33900) {
        bias = 32768;
    } else if (count >= 1240) {
        bias = 1131;
    }
    n += bias;
    if (n < 0 || n >= count) {
        return stbtt__null_buf();
    }
    return stbtt__cff_index_get(b, n);
}

//static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo * info, int glyph_index)
function stbtt__cid_get_glyph_subrs(info, glyph_index) {
    var fdselect = info.fdselect;
    var nranges, start, end, v, fmt, fdselector = -1, i;

    stbtt__buf_seek(fdselect, 0);
    fmt = stbtt__buf_get8(fdselect);
    if (fmt == 0) {
        stbtt__buf_skip(fdselect, glyph_index);
        fdselector = stbtt__buf_get8(fdselect);
    } else if (fmt == 3) {
        nranges = stbtt__buf_get(fdselect, 2);
        start = stbtt__buf_get(fdselect, 2);
        for (i = 0; i < nranges; i++) {
            v = stbtt__buf_get8(fdselect);
            end = stbtt__buf_get(fdselect, 2);
            if (glyph_index >= start && glyph_index < end) {
                fdselector = v;
                break;
            }
            start = end;
        }
    }
    if (fdselector == -1) {
        stbtt__null_buf();
    }
    return stbtt__get_subrs(info.cff, stbtt__cff_index_get(info.fontdicts, fdselector));
}

//static int stbtt__run_charstring(const stbtt_fontinfo * info, int glyph_index,
//                                 stbtt__csctx * c)
function stbtt__run_charstring(info, glyph_index, c) {
    var in_header = 1, maskbits = 0, subr_stack_height = 0, sp = 0, v, i, b0,
        has_subrs = 0, clear_stack,
        s = [], subr_stack = [], subrs = info.subrs, b, f;

    b = stbtt__cff_index_get(info.charstrings, glyph_index);
    while (b.cursor < b.length) {
        i = 0;
        clear_stack = 1;
        b0 = stbtt__buf_get8(b);
        switch (b0) {
        case 0x13:
        case 0x14:
            if (in_header) {
                maskbits += (sp / 2)|0;
            }
            in_header = 0;
            stbtt__buf_skip(b, ((maskbits + 7) / 8)|0);
            break;

        case 0x01:
        case 0x03:
        case 0x12:
        case 0x17:
            maskbits += (sp / 2)|0;
            break;

        case 0x15:
            in_header = 0;
            if (sp < 2) {
                return 0;
            }
            stbtt__csctx_rmove_to(c, s[sp - 2], s[sp - 1]);
            break;
        case 0x04:
            in_header = 0;
            if (sp < 1) {
                return 0;
            }
            stbtt__csctx_rmove_to(c, 0, s[sp - 1]);
            break;
        case 0x16:
            in_header = 0;
            if (sp < 1) {
                return 0;
            }
            stbtt__csctx_rmove_to(c, s[sp - 1], 0);
            break;

        case 0x05:
            if (sp < 2) {
                return 0;
            }
            for (; i + 1 < sp; i += 2) {
                stbtt__csctx_rline_to(c, s[i], s[i + 1]);
            }
            break;

        case 0x07:
            if (sp < 1) {
                return 0;
            }
            for (;;) {
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, 0, s[i]);
                i++;
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, s[i], 0);
                i++;
            }
            break;
        case 0x06:
            if (sp < 1) {
                return 0;
            }
            for (;;) {
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, s[i], 0);
                i++;
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, 0, s[i]);
                i++;
            }
            break;

        case 0x1F:
            if (sp < 4) {
                return 0;
            }
            for (;;) {
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, s[i], 0, s[i + 1], s[i + 2],
                                        (sp - i == 5) ? s[i + 4] : 0.0,
                                        s[i + 3]);
                i += 4;
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, 0, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        (sp - i == 5) ? s[i + 4] : 0.0);
                i += 4;
            }
            break;
        case 0x1E:
            if (sp < 4) {
                return 0;
            }
            for (;;) {
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, 0, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        (sp - i == 5) ? s[i + 4] : 0.0);
                i += 4;
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, s[i], 0, s[i + 1], s[i + 2],
                                        (sp - i == 5) ? s[i + 4] : 0.0,
                                        s[i + 3]);
                i += 4;
            }
            break;

        case 0x08:
            if (sp < 6) {
                return 0;
            }
            for (; i + 5 < sp; i += 6) {
                stbtt__csctx_rccurve_to(c, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        s[i + 4], s[i + 5]);
            }
            break;

        case 0x18:
            if (sp < 8) {
                return 0;
            }
            for (; i + 5 < sp - 2; i += 6) {
                stbtt__csctx_rccurve_to(c, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        s[i + 4], s[i + 5]);
            }
            if (i + 1 >= sp) {
                return 0;
            }
            stbtt__csctx_rline_to(c, s[i], s[i + 1]);
            break;

        case 0x19:
            if (sp < 8) {
                return 0;
            }
            for (; i + 1 < sp - 6; i += 2) {
                stbtt__csctx_rline_to(c, s[i], s[i + 1]);
            }
            if (i + 5 >= sp) {
                return 0;
            }
            stbtt__csctx_rccurve_to(c, s[i], s[i + 1], s[i + 2],
                                    s[i + 3], s[i + 4], s[i + 5]);
            break;

        case 0x1A:
        case 0x1B:
            if (sp < 4) {
                return 0;
            }
            f = 0.0;
            if (sp & 1) {
                f = s[i];
                i++;
            }
            for (; i + 3 < sp; i += 4) {
                if (b0 == 0x1B) {
                    stbtt__csctx_rccurve_to(c, s[i], f,
                                            s[i + 1],
                                            s[i + 2],
                                            s[i + 3], 0.0);
                } else {
                    stbtt__csctx_rccurve_to(c, f, s[i],
                                            s[i + 1],
                                            s[i + 2], 0.0,
                                            s[i + 3]);
                }
                f = 0.0;
            }
            break;

        case 0x0A:
            if (!has_subrs) {
                if (info.fdselect.length) {
                    subrs = stbtt__cid_get_glyph_subrs(info, glyph_index);
                }
                has_subrs = 1;
            }

        case 0x1D:
            if (sp < 1) {
                return 0;
            }
            v = s[--sp]|0;
            if (subr_stack_height >= 10) {
                return 0;
            }
            subr_stack[subr_stack_height++] = b;
            b = stbtt__get_subr(b0 == 0x0A ? subrs : info.gsubrs, v);
            if (b.length == 0) {
                return 0;
            }
            b.cursor = 0;
            clear_stack = 0;
            break;

        case 0x0B:
            if (subr_stack_height <= 0) {
                return 0;
            }
            b = subr_stack[--subr_stack_height];
            clear_stack = 0;
            break;

        case 0x0E:
            stbtt__csctx_close_shape(c);
            return 1;

        case 0x0C:
            var dx1, dx2, dx3, dx4, dx5, dx6, dy1, dy2, dy3, dy4, dy5, dy6,
                dx, dy, b1 = stbtt__buf_get8(b);
            switch (b1) {
            case 0x22:
                if (sp < 7) {
                    return 0;
                }
                dx1 = s[0];
                dx2 = s[1];
                dy2 = s[2];
                dx3 = s[3];
                dx4 = s[4];
                dx5 = s[5];
                dx6 = s[6];
                stbtt__csctx_rccurve_to(c, dx1, 0, dx2, dy2, dx3, 0);
                stbtt__csctx_rccurve_to(c, dx4, 0, dx5, -dy2, dx6, 0);
                break;

            case 0x23:
                if (sp < 13) {
                    return 0;
                }
                dx1 = s[0];
                dy1 = s[1];
                dx2 = s[2];
                dy2 = s[3];
                dx3 = s[4];
                dy3 = s[5];
                dx4 = s[6];
                dy4 = s[7];
                dx5 = s[8];
                dy5 = s[9];
                dx6 = s[10];
                dy6 = s[11];

                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, dy3);
                stbtt__csctx_rccurve_to(c, dx4, dy4, dx5, dy5, dx6, dy6);
                break;

            case 0x24:
                if (sp < 9) {
                    return 0;
                }
                dx1 = s[0];
                dy1 = s[1];
                dx2 = s[2];
                dy2 = s[3];
                dx3 = s[4];
                dx4 = s[5];
                dx5 = s[6];
                dy5 = s[7];
                dx6 = s[8];
                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, 0);
                stbtt__csctx_rccurve_to(c, dx4, 0, dx5, dy5, dx6, -(dy1 + dy2 + dy5));
                break;

            case 0x25:
                if (sp < 11) {
                    return 0;
                }
                dx1 = s[0];
                dy1 = s[1];
                dx2 = s[2];
                dy2 = s[3];
                dx3 = s[4];
                dy3 = s[5];
                dx4 = s[6];
                dy4 = s[7];
                dx5 = s[8];
                dy5 = s[9];
                dx6 = dy6 = s[10];
                dx = dx1 + dx2 + dx3 + dx4 + dx5;
                dy = dy1 + dy2 + dy3 + dy4 + dy5;
                if (abs(dx) > abs(dy)) {
                    dy6 = -dy;
                } else {
                    dx6 = -dx;
                }
                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, dy3);
                stbtt__csctx_rccurve_to(c, dx4, dy4, dx5, dy5, dx6, dy6);
                break;

            default:
                return 0;
            }
            break;

        default:
            if (b0 != 255 && b0 != 28 && (b0 < 32 || b0 > 254)) {
                return 0;
            }
            if (b0 == 255) {
                // f = (float)(stbtt_int32)stbtt__buf_get32(&b) / 0x10000;
                f = (stbtt__buf_get(b, 4)|0) / 0x10000;
            } else {
                stbtt__buf_skip(b, -1);
                // f = (float)(stbtt_int16)stbtt__cff_int(&b);
                f = ((stbtt__cff_int(b)<<16)|0)>>16;
            }
            if (sp >= 48) {
                return 0;
            }
            s[sp++] = f;
            clear_stack = 0;
            break;
        }
        if (clear_stack) {
            sp = 0;
        }
    }
    return 0;
}

function stbtt__csctx_init() {
    return { started:0, first_x:0, first_y:0, x:0, y:0,
            min_x:0, max_x:0, min_y:0, max_y:0,
            vertices:[]
        };
}

//static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo * info, int glyph_index,
//                                  stbtt_vertex ** pvertices)
function stbtt__GetGlyphShapeT2(info, glyph_index) {
    var output_ctx = stbtt__csctx_init();
    if (stbtt__run_charstring(info, glyph_index, output_ctx)) {
        return output_ctx.vertices;
    }
    return null;
}

//static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo * info, int glyph_index, int *x0,
//                      int *y0, int *x1, int *y1)
function stbtt__GetGlyphInfoT2(info, glyph_index, out) {
    var c = stbtt__csctx_init();
    var r = stbtt__run_charstring(info, glyph_index, c);
    out.x0 = r ? c.min_x : 0;
    out.y0 = r ? c.min_y : 0;
    out.x1 = r ? c.max_x : 0;
    out.y1 = r ? c.max_y : 0;
    return r && c.vertices ? c.vertices.length : 0;
}

//extern int stbtt_GetGlyphShape(const stbtt_fontinfo * info, int glyph_index,
//                               stbtt_vertex ** pvertices)
function stbtt_GetGlyphShape(info, glyph_index) {
    if (!info.cff.length) {
        return stbtt__GetGlyphShapeTT(info, glyph_index);
    } else {
        return stbtt__GetGlyphShapeT2(info, glyph_index);
    }
}

//extern void stbtt_GetGlyphHMetrics(const stbtt_fontinfo * info, int glyph_index,
//                       int *advanceWidth, int *leftSideBearing)
function stbtt_GetGlyphHMetrics(info, glyph_index) {
    var numOfLongHorMetrics = ttUSHORT(info.data, info.hhea + 34);
    if (glyph_index < numOfLongHorMetrics) {
        return {
                advanceWidth:   ttSHORT(info.data, info.hmtx + 4 * glyph_index),
                leftSideBearing:ttSHORT(info.data, info.hmtx + 4 * glyph_index + 2)
            };
    } else {
        return {
                advanceWidth:   ttSHORT(info.data, info.hmtx + 4 * (numOfLongHorMetrics - 1)),
                leftSideBearing:ttSHORT(info.data, info.hmtx + 4 * numOfLongHorMetrics +
                                            2 * (glyph_index - numOfLongHorMetrics))
            };
    }
}

//extern void stbtt_GetCodepointHMetrics(const stbtt_fontinfo * info, int codepoint,
//                           int *advanceWidth, int *leftSideBearing)
function stbtt_GetCodepointHMetrics(info, codepoint) {
     return stbtt_GetGlyphHMetrics(info, stbtt_FindGlyphIndex(info, codepoint));
}

//extern void stbtt_GetFontVMetrics(const stbtt_fontinfo * info, int *ascent, int *descent, int *lineGap)
function stbtt_GetFontVMetrics(info) {
    return {
        ascent: ttSHORT(info.data, info.hhea + 4),
        descent:ttSHORT(info.data, info.hhea + 6),
        linegap:ttSHORT(info.data, info.hhea + 8),
    };
}

//extern void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo * font, int glyph,
//                              float scale_x, float scale_y, float shift_x, float shift_y,
//                              int *ix0, int *iy0, int *ix1, int *iy1)
function stbtt_GetGlyphBitmapBoxSubpixel(font, glyph, scale_x, scale_y, shift_x, shift_y) {
    var tmp = {};
    if (!stbtt_GetGlyphBox(font, glyph, tmp)) {
        return { x0:0, y0:0, x1:0, y1:0 };
    }
    return {
            x0:floor(tmp.x0 * scale_x + shift_x),
            y0:floor(-tmp.y1 * scale_y + shift_y),
            x1:ceil(tmp.x1 * scale_x + shift_x),
            y1:ceil(-tmp.y0 * scale_y + shift_y),
        };
}

//extern void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo * font,
//                                    int codepoint, float scale_x, float scale_y, float shift_x,
//                                    float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)
function stbtt_GetCodepointBitmapBoxSubpixel(font, codepoint, scale_x, scale_y, shift_x, shift_y) {
    return stbtt_GetGlyphBitmapBoxSubpixel(font, stbtt_FindGlyphIndex(font, codepoint),
                                            scale_x, scale_y, shift_x, shift_y);
}

//extern void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo * font, int codepoint,   float scale_x, float scale_y,
//                                      int *ix0, int *iy0, int *ix1, int *iy1)
function stbtt_GetCodepointBitmapBox(font, codepoint, scale_x, scale_y) {
    return stbtt_GetCodepointBitmapBoxSubpixel(font, codepoint, scale_x, scale_y, 0, 0);
}

//static stbtt__active_edge *stbtt__new_active(stbtt__hheap * hh, stbtt__edge * e, int off_x, float start_point, void *userdata)
function stbtt__new_active(e, off_x, start_point) {
    var dxdy = (e.x1 - e.x0) / (e.y1 - e.y0);
    return {
        fdx:dxdy,
        fdy:dxdy != 0.0 ? (1.0 / dxdy) : 0.0,
        fx:(e.x0 + dxdy * (start_point - e.y0)) - (off_x|0),
        direction:e.invert ? 1.0 : -1.0,
        sy:e.y0,
        ey:e.y1,
        next:0,
    };
}

//static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge * e,
//                           float x0, float y0, float x1, float y1)
function stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1) {
    x = x|0;
    if (y0 == y1) {
        return;
    }
    if (y0 > e.ey) {
        return;
    }
    if (y1 < e.sy) {
        return;
    }
    if (y0 < e.sy) {
        x0 += (x1 - x0) * (e.sy - y0) / (y1 - y0);
        y0 = e.sy;
    }
    if (y1 > e.ey) {
        x1 += (x1 - x0) * (e.ey - y1) / (y1 - y0);
        y1 = e.ey;
    }

    if (x0 <= x && x1 <= x) {
        scanline[x] += e.direction * (y1 - y0);
    } else if (x0 >= x + 1 && x1 >= x + 1) {

    } else {
        scanline[x] += e.direction * (y1 - y0) * (1 - ((x0 - x) + (x1 - x)) / 2);
    }
}

//static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len,
//                             stbtt__active_edge * e, float y_top)
// The C implementation passed scanline_fill as a +1 pointer on the call, and then -1 in
// places in this function.  That doesn't work with array-views, so we reverse the handling.
function stbtt__fill_active_edges_new(scanline, scanline_fill, len, e, y_top) {
    var y_bottom = y_top + 1;
    while (e) {
        if (e.fdx == 0) {
            var x0 = e.fx;
            if (x0 < len) {
                if (x0 >= 0) {
                    stbtt__handle_clipped_edge(scanline, x0, e, x0, y_top, x0, y_bottom);
                    stbtt__handle_clipped_edge(scanline_fill, x0+1, e, x0, y_top, x0, y_bottom);
                } else {
                    stbtt__handle_clipped_edge(scanline_fill, 0, e, x0, y_top, x0, y_bottom);
                }
            }
        } else {
            var x0 = e.fx,
                dx = e.fdx,
                xb = x0 + dx,
                x_top, x_bottom,
                sy0, sy1,
                dy = e.fdy;

            if (e.sy > y_top) {
                x_top = x0 + dx * (e.sy - y_top);
                sy0 = e.sy;
            } else {
                x_top = x0;
                sy0 = y_top;
            }
            if (e.ey < y_bottom) {
                x_bottom = x0 + dx * (e.ey - y_top);
                sy1 = e.ey;
            } else {
                x_bottom = xb;
                sy1 = y_bottom;
            }

            if (x_top >= 0 && x_bottom >= 0 && x_top < len && x_bottom < len) {
                if ((x_top|0) == (x_bottom|0)) {
                    var height = sy1 - sy0,
                        x = x_top|0;
                    scanline[x] += e.direction * (1 - ((x_top - x) + (x_bottom - x)) / 2) * height;
                    scanline_fill[x+1] += e.direction * height;
                } else {
                    var t, x, x1, x2, y_crossing, step, sign, area;
                    if (x_top > x_bottom) {
                        sy0 = y_bottom - (sy0 - y_top);
                        sy1 = y_bottom - (sy1 - y_top);
                        t = sy0, sy0 = sy1, sy1 = t;
                        t = x_bottom, x_bottom = x_top, x_top = t;
                        dx = -dx;
                        dy = -dy;
                        t = x0, x0 = xb, xb = t;
                    }

                    x1 = x_top|0;
                    x2 = x_bottom|0;
                    y_crossing = (x1 + 1 - x0) * dy + y_top;
                    sign = e.direction;
                    area = sign * (y_crossing - sy0);

                    scanline[x1] += area * (1 - ((x_top - x1) + (x1 + 1 - x1)) / 2);

                    step = sign * dy;
                    for (x = x1 + 1; x < x2; ++x) {
                        scanline[x] += area + step / 2;
                        area += step;
                    }
                    y_crossing += dy * (x2 - (x1 + 1));

                    scanline[x2] += area + sign * (1 - ((x2 - x2) + (x_bottom - x2)) / 2) *
                                                (sy1 - y_crossing);
                    scanline_fill[x2+1] += sign * (sy1 - sy0);
                }
            } else {
                for (var x = 0; x < len; ++x) {
                    var y0 = y_top,
                        x1 = x,
                        x2 = x + 1,
                        x3 = xb,
                        y3 = y_bottom,
                        y1 = (x - x0) / dx + y_top,
                        y2 = (x + 1 - x0) / dx + y_top;

                    if (x0 < x1 && x3 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);
                    } else if (x3 < x1 && x0 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);
                    } else if (x0 < x1 && x3 > x1) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);
                    } else if (x3 < x1 && x0 > x1) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);
                    } else if (x0 < x2 && x3 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);
                    } else if (x3 < x2 && x0 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);
                    } else {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x3, y3);
                    }
                }
            }
        }
        e = e.next;
    }
}

//static void stbtt__rasterize_sorted_edges(stbtt__bitmap * result, stbtt__edge * e, int n,
//                              int vsubsample, int off_x, int off_y, void *userdata)
function stbtt__rasterize_sorted_edges(result, edges, nedges, vsubsample, off_x, off_y) {
    vsubsample |= 0, off_x |= 0, off_y |= 0;
    var active = null, z;
    var y = off_y, j = 0, i;
    var scanline = new Float32Array(result.w * 2 + 1);
    var scanline2 = scanline.subarray(result.w);
    var eoff = 0;

    edges[nedges].y0 = off_y + result.h + 1;
    while (j < result.h) {
        var scan_y_top = y + 0.0,
            scan_y_bottom = y + 1.0,
            step = active;

        // F'ing IE
        if (scanline.fill) { scanline.fill(0); }
        else { for (var $i = 0, $l = scanline.length; $i < $l; $i++) scanline[$i] = 0; }

        while (step) {
            z = step;
            step = z.next;
            if (z.ey <= scan_y_top) {
                z.direction = 0;
            } else {
            }
        }

        while (edges[eoff].y0 <= scan_y_bottom) {
            if (edges[eoff].y0 != edges[eoff].y1) {
                z = stbtt__new_active(edges[eoff], off_x, scan_y_top);
                z.next = active;
                active = z;
            }
            ++eoff;
        }

        if (active) {
            // C implementation passed scanline2+1.  See function for details.
            stbtt__fill_active_edges_new(scanline, scanline2, result.w, active, scan_y_top);
        }
        for (var i = 0, sum = 0; i < result.w; ++i) {
            var k, m;
            sum += scanline2[i];
            k = scanline[i] + sum;
            k = abs(k) * 255 + 0.5;
            m = k>>>0;
            if (m > 255) {
                m = 255;
            }
            result.pixels[j * result.stride + i] = m;
        }

        step = active;
        while (step) {
            z = step;
            z.fx += z.fdx;
            step = z.next;
        }
        ++y;
        ++j;
    }
}

//static void stbtt__sort_edges_ins_sort(stbtt__edge * p, int n)
function stbtt__sort_edges_ins_sort(p, n) {
    for (var i = 1; i < n; ++i) {
        var t = p[i], j = i;
        while (j > 0 && t.y0 < p[j-1].y0) {
             p[j] = p[j - 1];
            --j;
        }
        if (i != j) {
            p[j] = t;
        }
    }
}

//static void stbtt__sort_edges_quicksort(stbtt__edge * p, int n)
// The C implementation messed with the p pointer.  JS uses an offset instead.
function stbtt__sort_edges_quicksort(p, o, n) {
    while (n > 12) {
        var t, c, i, j, z,
            m = n >> 1,
            c01 = p[o].y0 < p[o+m].y0,
            c12 = p[o+m].y0 < p[o+n-1].y0;

        if (c01 != c12) {
            c = p[o].y0 < p[o+n-11].y0;
            z = (c == c12) ? 0 : n - 1;
            t = p[o+z];
            p[o+z] = p[o+m];
            p[o+m] = t;
        }

        t = p[o];
        p[o] = p[o+m];
        p[o+m] = t;

        i = 1;
        j = n - 1;
        for (;;) {
            for ( ; p[o+i].y0 < p[o].y0; ++i) {
            }
            for ( ; p[o].y0 < p[o+j].y0; --j) {
            }
            if (i >= j) {
                break;
            }
            t = p[o+i];
            p[o+i] = p[o+j];
            p[o+j] = t;

            ++i;
            --j;
        }

        if (j < n - i) {
            stbtt__sort_edges_quicksort(p, o, j);
            o += i;
            n -= i;
        } else {
            stbtt__sort_edges_quicksort(p, o + i, n - i);
            n = j;
        }
    }
}

//static void stbtt__sort_edges(stbtt__edge * p, int n)
function stbtt__sort_edges(p, n) {
    stbtt__sort_edges_quicksort(p, 0, n);
    stbtt__sort_edges_ins_sort(p, n);
}

//static void stbtt__rasterize(stbtt__bitmap * result, stbtt__point * pts, int *wcount,
//                 int windings, float scale_x, float scale_y, float shift_x,
//                 float shift_y, int off_x, int off_y, int invert,
//                 void *userdata)
function stbtt__rasterize(result, pts, wcount, scale_x, scale_y, shift_x, shift_y, off_x, off_y, invert) {
    var y_scale_inv = invert ? -scale_y : scale_y,
        e, n, i, j, k, m,
        vsubsample = 1;

    n = 0;
    for (i = 0; i < wcount.length; ++i) {
        n += wcount[i];
    }

    e = oalloc(n + 1);
    n = 0;
    m = 0;
    for (i = 0; i < wcount.length; ++i) {
        var p = m;
        m += wcount[i];
        j = wcount[i] - 1;
        for (k = 0; k < wcount[i]; j = k++) {
            var a = k, b = j;
            if (pts[p+j].y == pts[p+k].y) {
                continue;
            }

            e[n].invert = 0;
            if (invert ? pts[p+j].y > pts[p+k].y : pts[p+j].y < pts[p+k].y) {
                e[n].invert = 1;
                a = j, b = k;
            }
            e[n].x0 = pts[p+a].x * scale_x + shift_x;
            e[n].y0 = (pts[p+a].y * y_scale_inv + shift_y) * vsubsample;
            e[n].x1 = pts[p+b].x * scale_x + shift_x;
            e[n].y1 = (pts[p+b].y * y_scale_inv + shift_y) * vsubsample;
            ++n;
        }
    }

    stbtt__sort_edges(e, n);
    stbtt__rasterize_sorted_edges(result, e, n, vsubsample, off_x, off_y);
 }

//static int stbtt__tesselate_curve(stbtt__point * points, int *num_points, float x0,
//                       float y0, float x1, float y1, float x2, float y2,
//                       float objspace_flatness_squared, int n)
function stbtt__tesselate_curve(points, x0, y0, x1, y1, x2, y2, objspace_flatness_squared, n) {
    var mx = (x0 + 2 * x1 + x2) / 4,
        my = (y0 + 2 * y1 + y2) / 4,
        dx = (x0 + x2) / 2 - mx,
        dy = (y0 + y2) / 2 - my;
    if (n > 16) {
        return 1;
    }
    if (dx * dx + dy * dy > objspace_flatness_squared) {
        stbtt__tesselate_curve(points, x0, y0, (x0 + x1) / 2.0, (y0 + y1) / 2.0, mx, my,
                               objspace_flatness_squared, n + 1);
        stbtt__tesselate_curve(points, mx, my, (x1 + x2) / 2.0, (y1 + y2) / 2.0, x2, y2,
                               objspace_flatness_squared, n + 1);
    } else {
        points.push({ x:x2, y:y2 });
    }
    return 1;
}

//static void stbtt__tesselate_cubic(stbtt__point * points, int *num_points, float x0,
//                       float y0, float x1, float y1, float x2, float y2,
//                       float x3, float y3, float objspace_flatness_squared, int n)
function stbtt__tesselate_cubic(points, x0, y0, x1, y1, x2, y2, x3, y3, objspace_flatness_squared, n) {
    var dx0 = x1 - x0,
        dy0 = y1 - y0,
        dx1 = x2 - x1,
        dy1 = y2 - y1,
        dx2 = x3 - x2,
        dy2 = y3 - y2,
        dx = x3 - x0,
        dy = y3 - y0,
        longlen = sqrt(dx0 * dx0 + dy0 * dy0) +
                  sqrt(dx1 * dx1 + dy1 * dy1) +
                  sqrt(dx2 * dx2 + dy2 * dy2),
        shortlen = sqrt(dx * dx + dy * dy),
        flatness_squared = longlen * longlen - shortlen * shortlen;
    if (n > 16) {
        return;
    }

    if (flatness_squared > objspace_flatness_squared) {
        var x01 = (x0 + x1) / 2,
            y01 = (y0 + y1) / 2,
            x12 = (x1 + x2) / 2,
            y12 = (y1 + y2) / 2,
            x23 = (x2 + x3) / 2,
            y23 = (y2 + y3) / 2,
            xa = (x01 + x12) / 2,
            ya = (y01 + y12) / 2,
            xb = (x12 + x23) / 2,
            yb = (y12 + y23) / 2,
            mx = (xa + xb) / 2,
            my = (ya + yb) / 2;

        stbtt__tesselate_cubic(points, x0, y0, x01, y01, xa, ya, mx, my,
                                objspace_flatness_squared, n + 1);
        stbtt__tesselate_cubic(points, mx, my, xb, yb, x23, y23, x3, y3,
                                objspace_flatness_squared, n + 1);
    } else {
        points.push({ x:x3, y:y3 });
    }
}

//static stbtt__point *stbtt_FlattenCurves(stbtt_vertex * vertices, int num_verts,
//        float objspace_flatness, int **contour_lengths, int *num_contours, void *userdata)
function stbtt_FlattenCurves(vertices, objspace_flatness, contour_lengths) {
    var points = [],
        objspace_flatness_squared = objspace_flatness * objspace_flatness,
        n = -1, start = 0,
        x = 0, y = 0;
    for (var i = 0, nverts = vertices.length; i < nverts; ++i) {
        switch (vertices[i].type) {
        case STBTT_vmove:
            if (n >= 0) {
                contour_lengths[n] = points.length - start;
            }
            ++n;
            start = points.length;
            x = vertices[i].x, y = vertices[i].y;
            points.push({ x:x, y:y });
            break;
        case STBTT_vline:
            x = vertices[i].x, y = vertices[i].y;
            points.push({ x:x, y:y });
            break;
        case STBTT_vcurve:
            stbtt__tesselate_curve(points, x, y, vertices[i].cx, vertices[i].cy,
                                   vertices[i].x, vertices[i].y, objspace_flatness_squared, 0);
            x = vertices[i].x, y = vertices[i].y;
            break;
        case STBTT_vcubic:
            stbtt__tesselate_cubic(points, x, y, vertices[i].cx, vertices[i].cy,
                                   vertices[i].cx1, vertices[i].cy1, vertices[i].x, vertices[i].y,
                                   objspace_flatness_squared, 0);
            x = vertices[i].x, y = vertices[i].y;
            break;
        }
    }
    contour_lengths[n] = points.length - start;

    //console.log("--cl(" + (n+1) + '):');
    //for (var i = 0; i <= n; i++) {
    //  console.log(" %d", contour_lengths[i]);
    //}
    //console.log("\n--pts(" + points.length + '):');
    //for (var i = 0; i < points.length; i++) {
    //  var pt = points[i];
    //  console.log(i + ': ' + pt.x  + ',' + pt.y);
    //}

    return points;
}

//extern void stbtt_Rasterize(stbtt__bitmap * result, float flatness_in_pixels,
//                stbtt_vertex * vertices, int num_verts, float scale_x,
//                float scale_y, float shift_x, float shift_y, int x_off,
//                int y_off, int invert, void *userdata)
function stbtt_Rasterize(result, flatness_in_pixels, vertices, scale_x, scale_y, shift_x, shift_y,
                         x_off, y_off, invert) {
    x_off |= 0, y_off |= 0;
    var scale = scale_x > scale_y ? scale_y : scale_x,
        wcount = [],
        windings = stbtt_FlattenCurves(vertices, flatness_in_pixels / scale, wcount);
    if (windings) {
        stbtt__rasterize(result, windings, wcount, scale_x, scale_y,
                         shift_x, shift_y, x_off, y_off, invert);
    }
}

//extern void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo * info,
//                              unsigned char *output, int out_w, int out_h,
//                              int out_stride, float scale_x, float scale_y,
//                              float shift_x, float shift_y, int glyph)
function stbtt_MakeGlyphBitmapSubpixel(info, buffer, out_w, out_h, out_stride,
                                    scale_x, scale_y, shift_x, shift_y, glyph) {
    var vertices = stbtt_GetGlyphShape(info, glyph);
    var gbm = {};
    var rect = stbtt_GetGlyphBitmapBoxSubpixel(info, glyph, scale_x, scale_y, shift_x, shift_y);
    gbm.pixels = buffer;
    gbm.w = out_w|0;
    gbm.h = out_h|0;
    gbm.stride = out_stride|0;

    if (gbm.w && gbm.h) {
        stbtt_Rasterize(gbm, 0.35, vertices, scale_x, scale_y, shift_x, shift_y, rect.x0, rect.y0, 1);
    }
}

//extern void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo * info,
//                                  unsigned char *output, int out_w,
//                                  int out_h, int out_stride, float scale_x,
//                                  float scale_y, float shift_x,
//                                  float shift_y, int codepoint)
function stbtt_MakeCodepointBitmapSubpixel(info, buffer, out_w, out_h, out_stride,
                                    scale_x, scale_y, shift_x, shift_y, codepoint) {
    stbtt_MakeGlyphBitmapSubpixel(info, buffer, out_w, out_h, out_stride,
                                  scale_x, scale_y, shift_x, shift_y,
                                  stbtt_FindGlyphIndex(info, codepoint));
}

//extern int stbtt_InitFont(stbtt_fontinfo * info, const unsigned char *data, int offset)
function stbtt_InitFont(font, data, offset) {
    return stbtt_InitFont_internal(font, data, offset);
}


function InitFont(data) {
    var font = {};
    if (!stbtt_InitFont_internal(font, data, 0)) {
        return null;
    }

    var vm = stbtt_GetFontVMetrics(font);

    font.ascent = vm.ascent;
    font.descent = vm.descent;
    font.linegap = vm.linegap;

    return font;
}

function GetGlyph(font, codepoint, size_x, size_y) {
    size_y = size_y || size_x;
    var scale_x = size_x / font.ascent;
    var scale_y = size_y / font.ascent;

    var glyph = stbtt_FindGlyphIndex(font, codepoint);
    if (!glyph && codepoint) {
        return null;
    }

    var vertices = stbtt_GetGlyphShape(font, glyph);
    var rect = stbtt_GetGlyphBitmapBoxSubpixel(font, glyph, scale_x, scale_y, 0, 0);
    var width = rect.x1 - rect.x0;
    var height = rect.y1 - rect.y0;
    var pixels = null;

    if (width && height) {
        var gbm = {
            pixels : (pixels = new Uint8Array(width * height)),
            w : width,
            h : height,
            stride : width,
        }
        stbtt_Rasterize(gbm, 0.35, vertices, scale_x, scale_y, 0, 0, rect.x0, rect.y0, 1);
    }

    var hmetrics = stbtt_GetGlyphHMetrics(font, glyph);
    return {
        glyph:glyph, pixels:pixels, width:width, height:height, top:-rect.y0, left:rect.x0,
        advance:floor(hmetrics.advanceWidth * scale_x),
    }
}
function GetPaths(font, codepoint, size_x, size_y) {
    size_y = size_y || size_x;
    var scale_x = size_x / font.ascent;
    var scale_y = size_y / font.ascent;

    var glyph = stbtt_FindGlyphIndex(font, codepoint);
    if (!glyph && codepoint) {
        return null;
    }
    var vertices = stbtt_GetGlyphShape(font, glyph);
    var hmetrics = stbtt_GetGlyphHMetrics(font, glyph);

    // The hmetrics just give us advance.  We need ascent and descent as well.
    var ascent = 0;
    var descent = 0;

    // Convert to SVG notation
    var paths = [];
    if (vertices) {
        for (var i = 0, l = vertices.length; i < l; i++) {
            var v = vertices[i];
            var path;
            if (v.type == STBTT_vmove) {
                path = { type:'M', x:v.x * scale_x, y:v.y * scale_y };
            } else if (v.type == STBTT_vline) {
                path = { type:'L', x:v.x * scale_x, y:v.y * scale_y };
            } else if (v.type == STBTT_vcurve) {
                path = { type:'Q', x:v.x * scale_x, y:v.y * scale_y,
                                  cx:v.cx * scale_x, cy:v.cy * scale_y };
            } else if (v.type == STBTT_vcubic) {
                path = { type:'C', x:v.x * scale_x, y:v.y * scale_y,
                                 cx1:v.cx * scale_x, cy1:v.cy * scale_y,
                                 cx2:v.cx1 * scale_x, cy2:v.cy1 * scale_y };
            } else {
                continue;
            }
            if (path.y > ascent)  ascent  = path.y;
            if (path.y < descent) descent = path.y;
            paths.push(path);
        }
    }

    // Add the glyph metrics to the returned array.
    paths.advance = hmetrics.advanceWidth * scale_x;
    paths.ascent  = ascent;
    paths.descent = descent;
    return paths;
}


// exports
return {
    InitFont:   InitFont,
    GetGlyph:   GetGlyph,
    GetPaths:   GetPaths,
}

})();
function toUint8Array(data) {
    if (typeof data == "string") {
        var binary = /[^A-Za-z0-9+\/=\s]/.test(data);
        return Buffer.from ? Buffer.from(data, binary ? 'binary' : 'base64')
                           : new Buffer(data, binary ? 'binary' : 'base64');
    } else if (data instanceof Uint8Array) {
        return data;
    } else if (data instanceof ArrayBuffer) {
        return new Uint8Array(data);
    }
    throw new ReferenceError("data must be a binary or base64 encoded string or a Buffer/Uint8Array");
}

FontLib.loadFont("OCR-A", 100, 100, "");
FontLib.loadFont("OCR-B", 96, 100, "");
module.exports = {
    request:Request, toBuffer:ToBuffer, toSVG:ToSVG, render:Render, raw:ToRaw,
    drawingZlibPng:DrawingZlibPng, drawingSVG:DrawingSVG,
    fixupOptions:FixupOptions, loadFont:LoadFont, FontLib:FontLib,
    BWIPJS_VERSION:BWIPJS_VERSION, BWIPP_VERSION:BWIPP_VERSION,
    _metrics:$metrics,
};
